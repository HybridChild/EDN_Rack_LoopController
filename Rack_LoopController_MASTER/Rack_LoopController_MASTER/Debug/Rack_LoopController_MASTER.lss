
Rack_LoopController_MASTER.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000092  00800100  00002268  000022fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002268  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000001be  00800192  00800192  0000238e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000238e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000023c0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000440  00000000  00000000  00002400  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00004b8b  00000000  00000000  00002840  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001a41  00000000  00000000  000073cb  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00002626  00000000  00000000  00008e0c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000944  00000000  00000000  0000b434  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00001bd9  00000000  00000000  0000bd78  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001d3e  00000000  00000000  0000d951  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000348  00000000  00000000  0000f68f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__ctors_end>
       4:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
       8:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
       c:	0c 94 8b 05 	jmp	0xb16	; 0xb16 <__vector_3>
      10:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
      14:	0c 94 6a 05 	jmp	0xad4	; 0xad4 <__vector_5>
      18:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
      1c:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
      20:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
      24:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
      28:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
      2c:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
      30:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
      34:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
      38:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
      3c:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
      40:	0c 94 e4 0c 	jmp	0x19c8	; 0x19c8 <__vector_16>
      44:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
      48:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
      4c:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
      50:	0c 94 5d 0e 	jmp	0x1cba	; 0x1cba <__vector_20>
      54:	0c 94 88 0e 	jmp	0x1d10	; 0x1d10 <__vector_21>
      58:	0c 94 23 05 	jmp	0xa46	; 0xa46 <__vector_22>
      5c:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
      60:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
      64:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
      68:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
      6c:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
      70:	0c 94 61 0f 	jmp	0x1ec2	; 0x1ec2 <__vector_28>
      74:	0c 94 8c 0f 	jmp	0x1f18	; 0x1f18 <__vector_29>
      78:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
      7c:	bb 07       	cpc	r27, r27
      7e:	c1 09       	sbc	r28, r1
      80:	c1 09       	sbc	r28, r1
      82:	f5 07       	cpc	r31, r21
      84:	c1 09       	sbc	r28, r1
      86:	f5 07       	cpc	r31, r21
      88:	c1 09       	sbc	r28, r1
      8a:	c1 09       	sbc	r28, r1
      8c:	c1 09       	sbc	r28, r1
      8e:	36 08       	sbc	r3, r6
      90:	c1 09       	sbc	r28, r1
      92:	77 08       	sbc	r7, r7
      94:	c1 09       	sbc	r28, r1
      96:	ef 08       	sbc	r14, r15
      98:	c1 09       	sbc	r28, r1
      9a:	1e 09       	sbc	r17, r14
      9c:	71 0a       	sbc	r7, r17
      9e:	b5 0a       	sbc	r11, r21
      a0:	d8 0a       	sbc	r13, r24
      a2:	fb 0a       	sbc	r15, r27
      a4:	0a 0b       	sbc	r16, r26
      a6:	36 0b       	sbc	r19, r22
      a8:	4d 0b       	sbc	r20, r29
      aa:	a7 0c       	add	r10, r7
      ac:	a7 0c       	add	r10, r7
      ae:	8b 0b       	sbc	r24, r27
      b0:	96 0b       	sbc	r25, r22
      b2:	d3 0b       	sbc	r29, r19
      b4:	fc 0b       	sbc	r31, r28
      b6:	38 0c       	add	r3, r8
      b8:	a7 0c       	add	r10, r7
      ba:	5d 0c       	add	r5, r13

000000bc <__ctors_start>:
      bc:	42 10       	cpse	r4, r2

000000be <__ctors_end>:
      be:	11 24       	eor	r1, r1
      c0:	1f be       	out	0x3f, r1	; 63
      c2:	cf ef       	ldi	r28, 0xFF	; 255
      c4:	d8 e0       	ldi	r29, 0x08	; 8
      c6:	de bf       	out	0x3e, r29	; 62
      c8:	cd bf       	out	0x3d, r28	; 61

000000ca <__do_copy_data>:
      ca:	11 e0       	ldi	r17, 0x01	; 1
      cc:	a0 e0       	ldi	r26, 0x00	; 0
      ce:	b1 e0       	ldi	r27, 0x01	; 1
      d0:	e8 e6       	ldi	r30, 0x68	; 104
      d2:	f2 e2       	ldi	r31, 0x22	; 34
      d4:	02 c0       	rjmp	.+4      	; 0xda <__do_copy_data+0x10>
      d6:	05 90       	lpm	r0, Z+
      d8:	0d 92       	st	X+, r0
      da:	a2 39       	cpi	r26, 0x92	; 146
      dc:	b1 07       	cpc	r27, r17
      de:	d9 f7       	brne	.-10     	; 0xd6 <__do_copy_data+0xc>

000000e0 <__do_clear_bss>:
      e0:	23 e0       	ldi	r18, 0x03	; 3
      e2:	a2 e9       	ldi	r26, 0x92	; 146
      e4:	b1 e0       	ldi	r27, 0x01	; 1
      e6:	01 c0       	rjmp	.+2      	; 0xea <.do_clear_bss_start>

000000e8 <.do_clear_bss_loop>:
      e8:	1d 92       	st	X+, r1

000000ea <.do_clear_bss_start>:
      ea:	a0 35       	cpi	r26, 0x50	; 80
      ec:	b2 07       	cpc	r27, r18
      ee:	e1 f7       	brne	.-8      	; 0xe8 <.do_clear_bss_loop>

000000f0 <__do_global_ctors>:
      f0:	10 e0       	ldi	r17, 0x00	; 0
      f2:	cf e5       	ldi	r28, 0x5F	; 95
      f4:	d0 e0       	ldi	r29, 0x00	; 0
      f6:	04 c0       	rjmp	.+8      	; 0x100 <__do_global_ctors+0x10>
      f8:	21 97       	sbiw	r28, 0x01	; 1
      fa:	fe 01       	movw	r30, r28
      fc:	0e 94 ce 10 	call	0x219c	; 0x219c <__tablejump2__>
     100:	ce 35       	cpi	r28, 0x5E	; 94
     102:	d1 07       	cpc	r29, r17
     104:	c9 f7       	brne	.-14     	; 0xf8 <__do_global_ctors+0x8>
     106:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <main>
     10a:	0c 94 32 11 	jmp	0x2264	; 0x2264 <_exit>

0000010e <__bad_interrupt>:
     10e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000112 <_Z8i2c_initv>:
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWEA);
	while(!(TWCR & (1<<TWINT)));    

    return TWDR;

}/* i2c_readAck */
     112:	10 92 b9 00 	sts	0x00B9, r1	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
     116:	8c e5       	ldi	r24, 0x5C	; 92
     118:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7e00b8>
     11c:	08 95       	ret

0000011e <_Z9i2c_starth>:
     11e:	94 ea       	ldi	r25, 0xA4	; 164
     120:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
     124:	ec eb       	ldi	r30, 0xBC	; 188
     126:	f0 e0       	ldi	r31, 0x00	; 0
     128:	90 81       	ld	r25, Z
     12a:	99 23       	and	r25, r25
     12c:	ec f7       	brge	.-6      	; 0x128 <_Z9i2c_starth+0xa>
     12e:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
     132:	98 7f       	andi	r25, 0xF8	; 248
     134:	98 30       	cpi	r25, 0x08	; 8
     136:	11 f0       	breq	.+4      	; 0x13c <_Z9i2c_starth+0x1e>
     138:	90 31       	cpi	r25, 0x10	; 16
     13a:	a1 f4       	brne	.+40     	; 0x164 <_Z9i2c_starth+0x46>
     13c:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
     140:	84 e8       	ldi	r24, 0x84	; 132
     142:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
     146:	ec eb       	ldi	r30, 0xBC	; 188
     148:	f0 e0       	ldi	r31, 0x00	; 0
     14a:	80 81       	ld	r24, Z
     14c:	88 23       	and	r24, r24
     14e:	ec f7       	brge	.-6      	; 0x14a <_Z9i2c_starth+0x2c>
     150:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
     154:	98 7f       	andi	r25, 0xF8	; 248
     156:	98 31       	cpi	r25, 0x18	; 24
     158:	39 f0       	breq	.+14     	; 0x168 <_Z9i2c_starth+0x4a>
     15a:	81 e0       	ldi	r24, 0x01	; 1
     15c:	90 34       	cpi	r25, 0x40	; 64
     15e:	29 f4       	brne	.+10     	; 0x16a <_Z9i2c_starth+0x4c>
     160:	80 e0       	ldi	r24, 0x00	; 0
     162:	08 95       	ret
     164:	81 e0       	ldi	r24, 0x01	; 1
     166:	08 95       	ret
     168:	80 e0       	ldi	r24, 0x00	; 0
     16a:	08 95       	ret

0000016c <_Z8i2c_stopv>:
     16c:	84 e9       	ldi	r24, 0x94	; 148
     16e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
     172:	ec eb       	ldi	r30, 0xBC	; 188
     174:	f0 e0       	ldi	r31, 0x00	; 0
     176:	80 81       	ld	r24, Z
     178:	84 fd       	sbrc	r24, 4
     17a:	fd cf       	rjmp	.-6      	; 0x176 <_Z8i2c_stopv+0xa>
     17c:	08 95       	ret

0000017e <_Z9i2c_writeh>:
     17e:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
     182:	84 e8       	ldi	r24, 0x84	; 132
     184:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
     188:	ec eb       	ldi	r30, 0xBC	; 188
     18a:	f0 e0       	ldi	r31, 0x00	; 0
     18c:	80 81       	ld	r24, Z
     18e:	88 23       	and	r24, r24
     190:	ec f7       	brge	.-6      	; 0x18c <_Z9i2c_writeh+0xe>
     192:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
     196:	98 7f       	andi	r25, 0xF8	; 248
     198:	81 e0       	ldi	r24, 0x01	; 1
     19a:	98 32       	cpi	r25, 0x28	; 40
     19c:	09 f4       	brne	.+2      	; 0x1a0 <_Z9i2c_writeh+0x22>
     19e:	80 e0       	ldi	r24, 0x00	; 0
     1a0:	08 95       	ret

000001a2 <_Z11i2c_readNakv>:
 
 Return:  byte read from I2C device
*************************************************************************/
unsigned char i2c_readNak(void)
{
	TWCR = (1<<TWINT) | (1<<TWEN);
     1a2:	84 e8       	ldi	r24, 0x84	; 132
     1a4:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	while(!(TWCR & (1<<TWINT)));
     1a8:	ec eb       	ldi	r30, 0xBC	; 188
     1aa:	f0 e0       	ldi	r31, 0x00	; 0
     1ac:	80 81       	ld	r24, Z
     1ae:	88 23       	and	r24, r24
     1b0:	ec f7       	brge	.-6      	; 0x1ac <_Z11i2c_readNakv+0xa>
	
    return TWDR;
     1b2:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>

}/* i2c_readNak */
     1b6:	08 95       	ret

000001b8 <main>:

/* Main application */
int main(void)
{
	/* Initialization */
	Timer0_Init();
     1b8:	0e 94 c6 0c 	call	0x198c	; 0x198c <_Z11Timer0_Initv>
	i2c_init();
     1bc:	0e 94 89 00 	call	0x112	; 0x112 <_Z8i2c_initv>
	UART0_Init(PEDAL_UART_BAUDRATE, UART_2_STOP_BITS, UART_NO_PARITY);
     1c0:	40 e0       	ldi	r20, 0x00	; 0
     1c2:	62 e0       	ldi	r22, 0x02	; 2
     1c4:	80 e0       	ldi	r24, 0x00	; 0
     1c6:	9b e4       	ldi	r25, 0x4B	; 75
     1c8:	0e 94 b4 0d 	call	0x1b68	; 0x1b68 <_Z10UART0_Initjhh>
	UART1_Init(MIDI_UART_BAUDRATE, UART_1_STOP_BIT, UART_NO_PARITY);
     1cc:	40 e0       	ldi	r20, 0x00	; 0
     1ce:	61 e0       	ldi	r22, 0x01	; 1
     1d0:	82 e1       	ldi	r24, 0x12	; 18
     1d2:	9a e7       	ldi	r25, 0x7A	; 122
     1d4:	0e 94 b2 0e 	call	0x1d64	; 0x1d64 <_Z10UART1_Initjhh>
	PedalCom_Init();
     1d8:	0e 94 11 05 	call	0xa22	; 0xa22 <_Z13PedalCom_Initv>
	
	RotaryEncoder_Init();
     1dc:	0e 94 48 05 	call	0xa90	; 0xa90 <_Z18RotaryEncoder_Initv>
	SP10281_Init();
     1e0:	0e 94 3c 06 	call	0xc78	; 0xc78 <_Z12SP10281_Initv>
	UI_Init();
     1e4:	0e 94 b6 0f 	call	0x1f6c	; 0x1f6c <_Z7UI_Initv>
	
	/* Global Enable Interrupt */
	sei();
     1e8:	78 94       	sei
	
	/* Main loop */
    while (1) 
    {
		/* Handle incoming MIDI */
		if (UART1_Available())
     1ea:	0e 94 54 0f 	call	0x1ea8	; 0x1ea8 <_Z15UART1_Availablev>
     1ee:	89 2b       	or	r24, r25
     1f0:	11 f0       	breq	.+4      	; 0x1f6 <main+0x3e>
		{
			MIDI_ReceiveIncoming();
     1f2:	0e 94 7b 02 	call	0x4f6	; 0x4f6 <_Z20MIDI_ReceiveIncomingv>
		}
		
		if (MIDI_ProgramChangeFlag)
     1f6:	80 91 98 01 	lds	r24, 0x0198	; 0x800198 <MIDI_ProgramChangeFlag>
     1fa:	88 23       	and	r24, r24
     1fc:	21 f0       	breq	.+8      	; 0x206 <main+0x4e>
		{
			MIDI_ProgramChangeFlag = false;
     1fe:	10 92 98 01 	sts	0x0198, r1	; 0x800198 <MIDI_ProgramChangeFlag>
			System_HandleMIDIProgramChange();
     202:	0e 94 37 07 	call	0xe6e	; 0xe6e <_Z30System_HandleMIDIProgramChangev>
		}
		
		/* Handle incoming data from Pedal */
		while (UART0_Available())
     206:	0e 94 35 0e 	call	0x1c6a	; 0x1c6a <_Z15UART0_Availablev>
     20a:	89 2b       	or	r24, r25
     20c:	19 f0       	breq	.+6      	; 0x214 <main+0x5c>
		{
			PedalCom_Receive();
     20e:	0e 94 f1 02 	call	0x5e2	; 0x5e2 <_Z16PedalCom_Receivev>
			MIDI_ProgramChangeFlag = false;
			System_HandleMIDIProgramChange();
		}
		
		/* Handle incoming data from Pedal */
		while (UART0_Available())
     212:	f9 cf       	rjmp	.-14     	; 0x206 <main+0x4e>
		{
			PedalCom_Receive();
		}
		
		/* Handle command received from Pedal. (Only once per program loop) */
		if (PedalCom_RxAvailable())
     214:	0e 94 cd 02 	call	0x59a	; 0x59a <_Z20PedalCom_RxAvailablev>
     218:	81 11       	cpse	r24, r1
		{
			PedalCom_HandleReceived();
     21a:	0e 94 e3 03 	call	0x7c6	; 0x7c6 <_Z23PedalCom_HandleReceivedv>
		}
		
		/* Handle TX Command queue */
		if (PedalCom_TxAvailable())
     21e:	0e 94 d6 02 	call	0x5ac	; 0x5ac <_Z20PedalCom_TxAvailablev>
     222:	81 11       	cpse	r24, r1
		{
			PedalCom_PutCommand();
     224:	0e 94 6d 04 	call	0x8da	; 0x8da <_Z19PedalCom_PutCommandv>
		}
		
		/* Transmit data to Pedal */
		if (PedalCom_DelayTxFlag)
     228:	80 91 18 02 	lds	r24, 0x0218	; 0x800218 <PedalCom_DelayTxFlag>
     22c:	88 23       	and	r24, r24
     22e:	21 f0       	breq	.+8      	; 0x238 <main+0x80>
		{
			PedalCom_DelayTxFlag = false;
     230:	10 92 18 02 	sts	0x0218, r1	; 0x800218 <PedalCom_DelayTxFlag>
			PedalCom_Transmit();
     234:	0e 94 1d 05 	call	0xa3a	; 0xa3a <_Z17PedalCom_Transmitv>
		}
		
		/* Send current System State to Pedal (Heartbeat) */
		if (PedalCom_ResponseTimeoutFlag)
     238:	80 91 16 02 	lds	r24, 0x0216	; 0x800216 <PedalCom_ResponseTimeoutFlag>
     23c:	88 23       	and	r24, r24
     23e:	89 f0       	breq	.+34     	; 0x262 <main+0xaa>
		{
			PedalCom_ResponseTimeoutFlag = false;
     240:	10 92 16 02 	sts	0x0216, r1	; 0x800216 <PedalCom_ResponseTimeoutFlag>
			
			/* If last command did not get an ACK */
			if (PedalCom_TxAvailable())
     244:	0e 94 d6 02 	call	0x5ac	; 0x5ac <_Z20PedalCom_TxAvailablev>
     248:	88 23       	and	r24, r24
     24a:	29 f0       	breq	.+10     	; 0x256 <main+0x9e>
			{
				PedalCom_ConnectionOpen = false;
     24c:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <PedalCom_ConnectionOpen>
				PedalCom_FlushTxQueue();
     250:	0e 94 df 02 	call	0x5be	; 0x5be <_Z21PedalCom_FlushTxQueuev>
     254:	06 c0       	rjmp	.+12     	; 0x262 <main+0xaa>
			}
			else
			{
				PedalCom_QueueCommand(UpdateSystemState, 1, (uint8_t *)&SystemState);
     256:	43 e5       	ldi	r20, 0x53	; 83
     258:	52 e0       	ldi	r21, 0x02	; 2
     25a:	61 e0       	ldi	r22, 0x01	; 1
     25c:	85 ed       	ldi	r24, 0xD5	; 213
     25e:	0e 94 14 04 	call	0x828	; 0x828 <_Z21PedalCom_QueueCommand3CMDhPh>
			}
		}
		
		/* Service 7-segment display */
		if (SP10281_OvfFlag)
     262:	80 91 1d 02 	lds	r24, 0x021D	; 0x80021d <SP10281_OvfFlag>
     266:	88 23       	and	r24, r24
     268:	21 f0       	breq	.+8      	; 0x272 <main+0xba>
		{
			SP10281_OvfFlag = 0;
     26a:	10 92 1d 02 	sts	0x021D, r1	; 0x80021d <SP10281_OvfFlag>
			SP10281_Update();
     26e:	0e 94 a9 05 	call	0xb52	; 0xb52 <_Z14SP10281_Updatev>
		}
		
		/* Blink UI LEDs */
		if (MCP_Output::AutoToggle_Flag)
     272:	80 91 94 01 	lds	r24, 0x0194	; 0x800194 <_ZN10MCP_Output15AutoToggle_FlagE>
     276:	88 23       	and	r24, r24
     278:	29 f0       	breq	.+10     	; 0x284 <main+0xcc>
		{
			MCP_Output::AutoToggle_Flag = 0;
     27a:	10 92 94 01 	sts	0x0194, r1	; 0x800194 <_ZN10MCP_Output15AutoToggle_FlagE>
			MCP_Output::PerformAutoToggle(MCP23017_UI_LEDS_ADDR);
     27e:	80 e0       	ldi	r24, 0x00	; 0
     280:	0e 94 5c 02 	call	0x4b8	; 0x4b8 <_ZN10MCP_Output17PerformAutoToggleEh>
		}
		
		/* Handle input from rotary encoder */
		if (RotEnc_State != IDLE && RotEnc_State != PRESSED)
     284:	80 91 19 02 	lds	r24, 0x0219	; 0x800219 <RotEnc_State>
     288:	88 23       	and	r24, r24
     28a:	21 f0       	breq	.+8      	; 0x294 <main+0xdc>
     28c:	80 91 19 02 	lds	r24, 0x0219	; 0x800219 <RotEnc_State>
     290:	84 30       	cpi	r24, 0x04	; 4
     292:	99 f4       	brne	.+38     	; 0x2ba <main+0x102>
			RotEnc_State = IDLE;
			RotaryEncoder_EnableInterrupt();
		}
		
		/* Handle temp select timeout condition */
		if (System_TempSelectFlag)
     294:	80 91 57 02 	lds	r24, 0x0257	; 0x800257 <System_TempSelectFlag>
     298:	88 23       	and	r24, r24
     29a:	21 f0       	breq	.+8      	; 0x2a4 <main+0xec>
		{
			System_TempSelectFlag = false;
     29c:	10 92 57 02 	sts	0x0257, r1	; 0x800257 <System_TempSelectFlag>
			System_HandleTempSelectTimeout();
     2a0:	0e 94 46 06 	call	0xc8c	; 0xc8c <_Z30System_HandleTempSelectTimeoutv>
		}
		
		/* Reset UI LEDs after selection mark */
		if (System_MarkSelectionFlag)
     2a4:	80 91 54 02 	lds	r24, 0x0254	; 0x800254 <System_MarkSelectionFlag>
     2a8:	88 23       	and	r24, r24
     2aa:	21 f0       	breq	.+8      	; 0x2b4 <main+0xfc>
		{
			System_MarkSelectionFlag = false;
     2ac:	10 92 54 02 	sts	0x0254, r1	; 0x800254 <System_MarkSelectionFlag>
			System_HandleMarkSelection();
     2b0:	0e 94 a0 06 	call	0xd40	; 0xd40 <_Z26System_HandleMarkSelectionv>
		}
		
		/* The grand state machine */
		System_Run();
     2b4:	0e 94 62 0a 	call	0x14c4	; 0x14c4 <_Z10System_Runv>
	
	/* Global Enable Interrupt */
	sei();
	
	/* Main loop */
    while (1) 
     2b8:	98 cf       	rjmp	.-208    	; 0x1ea <main+0x32>
		}
		
		/* Handle input from rotary encoder */
		if (RotEnc_State != IDLE && RotEnc_State != PRESSED)
		{
			System_HandleRotaryEncoderInput();
     2ba:	0e 94 ab 07 	call	0xf56	; 0xf56 <_Z31System_HandleRotaryEncoderInputv>
			
			RotEnc_State = IDLE;
     2be:	10 92 19 02 	sts	0x0219, r1	; 0x800219 <RotEnc_State>
			RotaryEncoder_EnableInterrupt();
     2c2:	0e 94 61 05 	call	0xac2	; 0xac2 <_Z29RotaryEncoder_EnableInterruptv>
     2c6:	e6 cf       	rjmp	.-52     	; 0x294 <main+0xdc>

000002c8 <_Z17MCP23017_WriteReghhh>:
	{
		this->Set();
	} 
	else if (State == SET)
	{
		this->Clear();
     2c8:	cf 93       	push	r28
     2ca:	df 93       	push	r29
     2cc:	d6 2f       	mov	r29, r22
     2ce:	c4 2f       	mov	r28, r20
     2d0:	80 62       	ori	r24, 0x20	; 32
     2d2:	88 0f       	add	r24, r24
     2d4:	0e 94 8f 00 	call	0x11e	; 0x11e <_Z9i2c_starth>
     2d8:	8d 2f       	mov	r24, r29
     2da:	0e 94 bf 00 	call	0x17e	; 0x17e <_Z9i2c_writeh>
     2de:	8c 2f       	mov	r24, r28
     2e0:	0e 94 bf 00 	call	0x17e	; 0x17e <_Z9i2c_writeh>
     2e4:	0e 94 b6 00 	call	0x16c	; 0x16c <_Z8i2c_stopv>
     2e8:	df 91       	pop	r29
     2ea:	cf 91       	pop	r28
     2ec:	08 95       	ret

000002ee <_Z16MCP23017_ReadReghh>:
     2ee:	cf 93       	push	r28
     2f0:	df 93       	push	r29
     2f2:	d6 2f       	mov	r29, r22
     2f4:	80 62       	ori	r24, 0x20	; 32
     2f6:	c8 2f       	mov	r28, r24
     2f8:	cc 0f       	add	r28, r28
     2fa:	8c 2f       	mov	r24, r28
     2fc:	0e 94 8f 00 	call	0x11e	; 0x11e <_Z9i2c_starth>
     300:	8d 2f       	mov	r24, r29
     302:	0e 94 bf 00 	call	0x17e	; 0x17e <_Z9i2c_writeh>
     306:	0e 94 b6 00 	call	0x16c	; 0x16c <_Z8i2c_stopv>
     30a:	8c 2f       	mov	r24, r28
     30c:	81 60       	ori	r24, 0x01	; 1
     30e:	0e 94 8f 00 	call	0x11e	; 0x11e <_Z9i2c_starth>
     312:	0e 94 d1 00 	call	0x1a2	; 0x1a2 <_Z11i2c_readNakv>
     316:	df 91       	pop	r29
     318:	cf 91       	pop	r28
     31a:	08 95       	ret

0000031c <_ZN10MCP_OutputC1Ev>:
     31c:	08 95       	ret

0000031e <_ZN10MCP_Output8getStateEv>:
     31e:	fc 01       	movw	r30, r24
     320:	83 81       	ldd	r24, Z+3	; 0x03
     322:	08 95       	ret

00000324 <_ZN10MCP_Output3SetEv>:
     324:	1f 93       	push	r17
     326:	cf 93       	push	r28
     328:	df 93       	push	r29
     32a:	ec 01       	movw	r28, r24
     32c:	89 81       	ldd	r24, Y+1	; 0x01
     32e:	81 11       	cpse	r24, r1
     330:	10 c0       	rjmp	.+32     	; 0x352 <_ZN10MCP_Output3SetEv+0x2e>
     332:	20 91 93 01 	lds	r18, 0x0193	; 0x800193 <_ZN10MCP_Output16AutoToggle_PortAE>
     336:	81 e0       	ldi	r24, 0x01	; 1
     338:	90 e0       	ldi	r25, 0x00	; 0
     33a:	0a 80       	ldd	r0, Y+2	; 0x02
     33c:	02 c0       	rjmp	.+4      	; 0x342 <_ZN10MCP_Output3SetEv+0x1e>
     33e:	88 0f       	add	r24, r24
     340:	99 1f       	adc	r25, r25
     342:	0a 94       	dec	r0
     344:	e2 f7       	brpl	.-8      	; 0x33e <_ZN10MCP_Output3SetEv+0x1a>
     346:	80 95       	com	r24
     348:	82 23       	and	r24, r18
     34a:	80 93 93 01 	sts	0x0193, r24	; 0x800193 <_ZN10MCP_Output16AutoToggle_PortAE>
     34e:	14 e1       	ldi	r17, 0x14	; 20
     350:	0f c0       	rjmp	.+30     	; 0x370 <_ZN10MCP_Output3SetEv+0x4c>
     352:	20 91 92 01 	lds	r18, 0x0192	; 0x800192 <__data_end>
     356:	81 e0       	ldi	r24, 0x01	; 1
     358:	90 e0       	ldi	r25, 0x00	; 0
     35a:	0a 80       	ldd	r0, Y+2	; 0x02
     35c:	02 c0       	rjmp	.+4      	; 0x362 <_ZN10MCP_Output3SetEv+0x3e>
     35e:	88 0f       	add	r24, r24
     360:	99 1f       	adc	r25, r25
     362:	0a 94       	dec	r0
     364:	e2 f7       	brpl	.-8      	; 0x35e <_ZN10MCP_Output3SetEv+0x3a>
     366:	80 95       	com	r24
     368:	82 23       	and	r24, r18
     36a:	80 93 92 01 	sts	0x0192, r24	; 0x800192 <__data_end>
     36e:	15 e1       	ldi	r17, 0x15	; 21
     370:	61 2f       	mov	r22, r17
     372:	88 81       	ld	r24, Y
     374:	0e 94 77 01 	call	0x2ee	; 0x2ee <_Z16MCP23017_ReadReghh>
     378:	41 e0       	ldi	r20, 0x01	; 1
     37a:	50 e0       	ldi	r21, 0x00	; 0
     37c:	0a 80       	ldd	r0, Y+2	; 0x02
     37e:	02 c0       	rjmp	.+4      	; 0x384 <_ZN10MCP_Output3SetEv+0x60>
     380:	44 0f       	add	r20, r20
     382:	55 1f       	adc	r21, r21
     384:	0a 94       	dec	r0
     386:	e2 f7       	brpl	.-8      	; 0x380 <_ZN10MCP_Output3SetEv+0x5c>
     388:	48 2b       	or	r20, r24
     38a:	61 2f       	mov	r22, r17
     38c:	88 81       	ld	r24, Y
     38e:	0e 94 64 01 	call	0x2c8	; 0x2c8 <_Z17MCP23017_WriteReghhh>
     392:	81 e0       	ldi	r24, 0x01	; 1
     394:	8b 83       	std	Y+3, r24	; 0x03
     396:	df 91       	pop	r29
     398:	cf 91       	pop	r28
     39a:	1f 91       	pop	r17
     39c:	08 95       	ret

0000039e <_ZN10MCP_Output5ClearEv>:
     39e:	1f 93       	push	r17
     3a0:	cf 93       	push	r28
     3a2:	df 93       	push	r29
     3a4:	ec 01       	movw	r28, r24
     3a6:	89 81       	ldd	r24, Y+1	; 0x01
     3a8:	81 11       	cpse	r24, r1
     3aa:	10 c0       	rjmp	.+32     	; 0x3cc <_ZN10MCP_Output5ClearEv+0x2e>
     3ac:	20 91 93 01 	lds	r18, 0x0193	; 0x800193 <_ZN10MCP_Output16AutoToggle_PortAE>
     3b0:	81 e0       	ldi	r24, 0x01	; 1
     3b2:	90 e0       	ldi	r25, 0x00	; 0
     3b4:	0a 80       	ldd	r0, Y+2	; 0x02
     3b6:	02 c0       	rjmp	.+4      	; 0x3bc <_ZN10MCP_Output5ClearEv+0x1e>
     3b8:	88 0f       	add	r24, r24
     3ba:	99 1f       	adc	r25, r25
     3bc:	0a 94       	dec	r0
     3be:	e2 f7       	brpl	.-8      	; 0x3b8 <_ZN10MCP_Output5ClearEv+0x1a>
     3c0:	80 95       	com	r24
     3c2:	82 23       	and	r24, r18
     3c4:	80 93 93 01 	sts	0x0193, r24	; 0x800193 <_ZN10MCP_Output16AutoToggle_PortAE>
     3c8:	14 e1       	ldi	r17, 0x14	; 20
     3ca:	0f c0       	rjmp	.+30     	; 0x3ea <_ZN10MCP_Output5ClearEv+0x4c>
     3cc:	20 91 92 01 	lds	r18, 0x0192	; 0x800192 <__data_end>
     3d0:	81 e0       	ldi	r24, 0x01	; 1
     3d2:	90 e0       	ldi	r25, 0x00	; 0
     3d4:	0a 80       	ldd	r0, Y+2	; 0x02
     3d6:	02 c0       	rjmp	.+4      	; 0x3dc <_ZN10MCP_Output5ClearEv+0x3e>
     3d8:	88 0f       	add	r24, r24
     3da:	99 1f       	adc	r25, r25
     3dc:	0a 94       	dec	r0
     3de:	e2 f7       	brpl	.-8      	; 0x3d8 <_ZN10MCP_Output5ClearEv+0x3a>
     3e0:	80 95       	com	r24
     3e2:	82 23       	and	r24, r18
     3e4:	80 93 92 01 	sts	0x0192, r24	; 0x800192 <__data_end>
     3e8:	15 e1       	ldi	r17, 0x15	; 21
     3ea:	61 2f       	mov	r22, r17
     3ec:	88 81       	ld	r24, Y
     3ee:	0e 94 77 01 	call	0x2ee	; 0x2ee <_Z16MCP23017_ReadReghh>
     3f2:	41 e0       	ldi	r20, 0x01	; 1
     3f4:	50 e0       	ldi	r21, 0x00	; 0
     3f6:	0a 80       	ldd	r0, Y+2	; 0x02
     3f8:	02 c0       	rjmp	.+4      	; 0x3fe <_ZN10MCP_Output5ClearEv+0x60>
     3fa:	44 0f       	add	r20, r20
     3fc:	55 1f       	adc	r21, r21
     3fe:	0a 94       	dec	r0
     400:	e2 f7       	brpl	.-8      	; 0x3fa <_ZN10MCP_Output5ClearEv+0x5c>
     402:	40 95       	com	r20
     404:	48 23       	and	r20, r24
     406:	61 2f       	mov	r22, r17
     408:	88 81       	ld	r24, Y
     40a:	0e 94 64 01 	call	0x2c8	; 0x2c8 <_Z17MCP23017_WriteReghhh>
     40e:	1b 82       	std	Y+3, r1	; 0x03
     410:	df 91       	pop	r29
     412:	cf 91       	pop	r28
     414:	1f 91       	pop	r17
     416:	08 95       	ret

00000418 <_ZN10MCP_OutputC1Eh13MCP23017_Port12MCP23017_Pin>:
     418:	1f 93       	push	r17
     41a:	cf 93       	push	r28
     41c:	df 93       	push	r29
     41e:	ec 01       	movw	r28, r24
     420:	86 2f       	mov	r24, r22
     422:	68 83       	st	Y, r22
     424:	49 83       	std	Y+1, r20	; 0x01
     426:	2a 83       	std	Y+2, r18	; 0x02
     428:	11 e0       	ldi	r17, 0x01	; 1
     42a:	41 11       	cpse	r20, r1
     42c:	01 c0       	rjmp	.+2      	; 0x430 <_ZN10MCP_OutputC1Eh13MCP23017_Port12MCP23017_Pin+0x18>
     42e:	10 e0       	ldi	r17, 0x00	; 0
     430:	61 2f       	mov	r22, r17
     432:	0e 94 77 01 	call	0x2ee	; 0x2ee <_Z16MCP23017_ReadReghh>
     436:	41 e0       	ldi	r20, 0x01	; 1
     438:	50 e0       	ldi	r21, 0x00	; 0
     43a:	0a 80       	ldd	r0, Y+2	; 0x02
     43c:	02 c0       	rjmp	.+4      	; 0x442 <_ZN10MCP_OutputC1Eh13MCP23017_Port12MCP23017_Pin+0x2a>
     43e:	44 0f       	add	r20, r20
     440:	55 1f       	adc	r21, r21
     442:	0a 94       	dec	r0
     444:	e2 f7       	brpl	.-8      	; 0x43e <_ZN10MCP_OutputC1Eh13MCP23017_Port12MCP23017_Pin+0x26>
     446:	40 95       	com	r20
     448:	48 23       	and	r20, r24
     44a:	61 2f       	mov	r22, r17
     44c:	88 81       	ld	r24, Y
     44e:	0e 94 64 01 	call	0x2c8	; 0x2c8 <_Z17MCP23017_WriteReghhh>
     452:	ce 01       	movw	r24, r28
     454:	0e 94 cf 01 	call	0x39e	; 0x39e <_ZN10MCP_Output5ClearEv>
     458:	df 91       	pop	r29
     45a:	cf 91       	pop	r28
     45c:	1f 91       	pop	r17
     45e:	08 95       	ret

00000460 <_ZN10MCP_Output10AutoToggleEv>:
	}
}

void MCP_Output::AutoToggle()
{
     460:	fc 01       	movw	r30, r24
	State = AUTO_TOGGLE;
     462:	82 e0       	ldi	r24, 0x02	; 2
     464:	83 83       	std	Z+3, r24	; 0x03
	
	if (Port == PortA)
     466:	81 81       	ldd	r24, Z+1	; 0x01
     468:	81 11       	cpse	r24, r1
     46a:	0e c0       	rjmp	.+28     	; 0x488 <_ZN10MCP_Output10AutoToggleEv+0x28>
	{
		MCP_Output::AutoToggle_PortA |= (1 << Pin);
     46c:	20 91 93 01 	lds	r18, 0x0193	; 0x800193 <_ZN10MCP_Output16AutoToggle_PortAE>
     470:	81 e0       	ldi	r24, 0x01	; 1
     472:	90 e0       	ldi	r25, 0x00	; 0
     474:	02 80       	ldd	r0, Z+2	; 0x02
     476:	02 c0       	rjmp	.+4      	; 0x47c <_ZN10MCP_Output10AutoToggleEv+0x1c>
     478:	88 0f       	add	r24, r24
     47a:	99 1f       	adc	r25, r25
     47c:	0a 94       	dec	r0
     47e:	e2 f7       	brpl	.-8      	; 0x478 <_ZN10MCP_Output10AutoToggleEv+0x18>
     480:	82 2b       	or	r24, r18
     482:	80 93 93 01 	sts	0x0193, r24	; 0x800193 <_ZN10MCP_Output16AutoToggle_PortAE>
     486:	08 95       	ret
	}
	else
	{
		MCP_Output::AutoToggle_PortB |= (1 << Pin);
     488:	20 91 92 01 	lds	r18, 0x0192	; 0x800192 <__data_end>
     48c:	81 e0       	ldi	r24, 0x01	; 1
     48e:	90 e0       	ldi	r25, 0x00	; 0
     490:	02 80       	ldd	r0, Z+2	; 0x02
     492:	02 c0       	rjmp	.+4      	; 0x498 <_ZN10MCP_Output10AutoToggleEv+0x38>
     494:	88 0f       	add	r24, r24
     496:	99 1f       	adc	r25, r25
     498:	0a 94       	dec	r0
     49a:	e2 f7       	brpl	.-8      	; 0x494 <_ZN10MCP_Output10AutoToggleEv+0x34>
     49c:	82 2b       	or	r24, r18
     49e:	80 93 92 01 	sts	0x0192, r24	; 0x800192 <__data_end>
     4a2:	08 95       	ret

000004a4 <_ZN10MCP_Output18SetAutoToggleSpeedEj>:
	}
}

void MCP_Output::SetAutoToggleSpeed(uint16_t ms)
{
	AutoToggle_Timeout = (uint16_t)Timer0_ms2cnt(ms);
     4a4:	bc 01       	movw	r22, r24
     4a6:	80 e0       	ldi	r24, 0x00	; 0
     4a8:	90 e0       	ldi	r25, 0x00	; 0
     4aa:	0e 94 d5 0c 	call	0x19aa	; 0x19aa <_Z13Timer0_ms2cntm>
     4ae:	70 93 01 01 	sts	0x0101, r23	; 0x800101 <_ZN10MCP_Output18AutoToggle_TimeoutE+0x1>
     4b2:	60 93 00 01 	sts	0x0100, r22	; 0x800100 <_ZN10MCP_Output18AutoToggle_TimeoutE>
     4b6:	08 95       	ret

000004b8 <_ZN10MCP_Output17PerformAutoToggleEh>:
}

void MCP_Output::PerformAutoToggle(uint8_t addr)
{
     4b8:	1f 93       	push	r17
     4ba:	cf 93       	push	r28
     4bc:	df 93       	push	r29
     4be:	c8 2f       	mov	r28, r24
	uint8_t valA = MCP23017_ReadReg(addr, OLATA);
     4c0:	64 e1       	ldi	r22, 0x14	; 20
     4c2:	0e 94 77 01 	call	0x2ee	; 0x2ee <_Z16MCP23017_ReadReghh>
     4c6:	18 2f       	mov	r17, r24
	uint8_t valB = MCP23017_ReadReg(addr, OLATB);
     4c8:	65 e1       	ldi	r22, 0x15	; 21
     4ca:	8c 2f       	mov	r24, r28
     4cc:	0e 94 77 01 	call	0x2ee	; 0x2ee <_Z16MCP23017_ReadReghh>
	
	valA ^= MCP_Output::AutoToggle_PortA;
     4d0:	40 91 93 01 	lds	r20, 0x0193	; 0x800193 <_ZN10MCP_Output16AutoToggle_PortAE>
	valB ^= MCP_Output::AutoToggle_PortB;
     4d4:	d0 91 92 01 	lds	r29, 0x0192	; 0x800192 <__data_end>
     4d8:	d8 27       	eor	r29, r24
	
	MCP23017_WriteReg(addr, OLATA, valA);
     4da:	41 27       	eor	r20, r17
     4dc:	64 e1       	ldi	r22, 0x14	; 20
     4de:	8c 2f       	mov	r24, r28
     4e0:	0e 94 64 01 	call	0x2c8	; 0x2c8 <_Z17MCP23017_WriteReghhh>
	MCP23017_WriteReg(addr, OLATB, valB);
     4e4:	4d 2f       	mov	r20, r29
     4e6:	65 e1       	ldi	r22, 0x15	; 21
     4e8:	8c 2f       	mov	r24, r28
     4ea:	0e 94 64 01 	call	0x2c8	; 0x2c8 <_Z17MCP23017_WriteReghhh>
}
     4ee:	df 91       	pop	r29
     4f0:	cf 91       	pop	r28
     4f2:	1f 91       	pop	r17
     4f4:	08 95       	ret

000004f6 <_Z20MIDI_ReceiveIncomingv>:
volatile char MIDI_TxBuffer[MIDI_BUF_SIZE] = {0};
volatile uint8_t MIDI_ReceivedProgram = 0;
volatile bool MIDI_ProgramChangeFlag = false;

void MIDI_ReceiveIncoming()
{
     4f6:	cf 93       	push	r28
     4f8:	df 93       	push	r29
	static uint8_t RX_ByteCnt = 0;
	
	MIDI_RxBuffer[RX_ByteCnt] = UART1_GetChar();
     4fa:	c0 91 97 01 	lds	r28, 0x0197	; 0x800197 <_ZZ20MIDI_ReceiveIncomingvE10RX_ByteCnt>
     4fe:	d0 e0       	ldi	r29, 0x00	; 0
     500:	0e 94 15 0f 	call	0x1e2a	; 0x1e2a <_Z13UART1_GetCharv>
     504:	c3 56       	subi	r28, 0x63	; 99
     506:	de 4f       	sbci	r29, 0xFE	; 254
     508:	88 83       	st	Y, r24
	
	if (RX_ByteCnt == 0)
     50a:	80 91 97 01 	lds	r24, 0x0197	; 0x800197 <_ZZ20MIDI_ReceiveIncomingvE10RX_ByteCnt>
     50e:	81 11       	cpse	r24, r1
     510:	18 c0       	rjmp	.+48     	; 0x542 <_Z20MIDI_ReceiveIncomingv+0x4c>
	{
		/* Check if command is a Program Change */
		if ( (MIDI_RxBuffer[RX_ByteCnt] & 0xF0) == 0xC0 )
     512:	80 91 9d 01 	lds	r24, 0x019D	; 0x80019d <MIDI_RxBuffer>
     516:	80 7f       	andi	r24, 0xF0	; 240
     518:	80 3c       	cpi	r24, 0xC0	; 192
     51a:	29 f5       	brne	.+74     	; 0x566 <_Z20MIDI_ReceiveIncomingv+0x70>
		{
			/* Check if command is relevant to this device */
			if ( (System_MidiChannel == MIDI_CH_OMNI) || ( (MIDI_RxBuffer[RX_ByteCnt] & 0x0F) != (System_MidiChannel-1) ) )
     51c:	80 91 4a 02 	lds	r24, 0x024A	; 0x80024a <System_MidiChannel>
     520:	88 23       	and	r24, r24
     522:	59 f0       	breq	.+22     	; 0x53a <_Z20MIDI_ReceiveIncomingv+0x44>
     524:	20 91 9d 01 	lds	r18, 0x019D	; 0x80019d <MIDI_RxBuffer>
     528:	80 91 4a 02 	lds	r24, 0x024A	; 0x80024a <System_MidiChannel>
     52c:	2f 70       	andi	r18, 0x0F	; 15
     52e:	30 e0       	ldi	r19, 0x00	; 0
     530:	90 e0       	ldi	r25, 0x00	; 0
     532:	01 97       	sbiw	r24, 0x01	; 1
     534:	28 17       	cp	r18, r24
     536:	39 07       	cpc	r19, r25
     538:	b1 f0       	breq	.+44     	; 0x566 <_Z20MIDI_ReceiveIncomingv+0x70>
			{
				RX_ByteCnt++;
     53a:	81 e0       	ldi	r24, 0x01	; 1
     53c:	80 93 97 01 	sts	0x0197, r24	; 0x800197 <_ZZ20MIDI_ReceiveIncomingvE10RX_ByteCnt>
     540:	12 c0       	rjmp	.+36     	; 0x566 <_Z20MIDI_ReceiveIncomingv+0x70>
		}
	}
	else if (RX_ByteCnt > 0)
	{
		/* Check if data byte contains a valid MIDI program (is between 0 and 127) */
		if (MIDI_RxBuffer[RX_ByteCnt] <= MIDI_PC_MAX)
     542:	90 e0       	ldi	r25, 0x00	; 0
     544:	fc 01       	movw	r30, r24
     546:	e3 56       	subi	r30, 0x63	; 99
     548:	fe 4f       	sbci	r31, 0xFE	; 254
     54a:	20 81       	ld	r18, Z
     54c:	22 23       	and	r18, r18
     54e:	4c f0       	brlt	.+18     	; 0x562 <_Z20MIDI_ReceiveIncomingv+0x6c>
		{
			MIDI_ReceivedProgram = MIDI_RxBuffer[RX_ByteCnt];
     550:	fc 01       	movw	r30, r24
     552:	e3 56       	subi	r30, 0x63	; 99
     554:	fe 4f       	sbci	r31, 0xFE	; 254
     556:	80 81       	ld	r24, Z
     558:	80 93 99 01 	sts	0x0199, r24	; 0x800199 <MIDI_ReceivedProgram>
			MIDI_ProgramChangeFlag = true;
     55c:	81 e0       	ldi	r24, 0x01	; 1
     55e:	80 93 98 01 	sts	0x0198, r24	; 0x800198 <MIDI_ProgramChangeFlag>
		}
		
		RX_ByteCnt = 0;
     562:	10 92 97 01 	sts	0x0197, r1	; 0x800197 <_ZZ20MIDI_ReceiveIncomingvE10RX_ByteCnt>
	}
}
     566:	df 91       	pop	r29
     568:	cf 91       	pop	r28
     56a:	08 95       	ret

0000056c <_Z26MIDI_TransmitProgramChangeh>:

void MIDI_TransmitProgramChange(uint8_t prg)
{
	MIDI_TxBuffer[0] = 0xC0;
     56c:	90 ec       	ldi	r25, 0xC0	; 192
     56e:	90 93 9a 01 	sts	0x019A, r25	; 0x80019a <MIDI_TxBuffer>
	
	if (System_MidiChannel != MIDI_CH_OMNI)
     572:	90 91 4a 02 	lds	r25, 0x024A	; 0x80024a <System_MidiChannel>
     576:	99 23       	and	r25, r25
     578:	41 f0       	breq	.+16     	; 0x58a <_Z26MIDI_TransmitProgramChangeh+0x1e>
	{
		MIDI_TxBuffer[0] |= (System_MidiChannel - 1);
     57a:	90 91 4a 02 	lds	r25, 0x024A	; 0x80024a <System_MidiChannel>
     57e:	ea e9       	ldi	r30, 0x9A	; 154
     580:	f1 e0       	ldi	r31, 0x01	; 1
     582:	20 81       	ld	r18, Z
     584:	91 50       	subi	r25, 0x01	; 1
     586:	92 2b       	or	r25, r18
     588:	90 83       	st	Z, r25
	}
	
	MIDI_TxBuffer[1] = (char)prg;
     58a:	ea e9       	ldi	r30, 0x9A	; 154
     58c:	f1 e0       	ldi	r31, 0x01	; 1
     58e:	81 83       	std	Z+1, r24	; 0x01
	MIDI_TxBuffer[2] = 0;
     590:	12 82       	std	Z+2, r1	; 0x02
	
	UART1_PutString((char*)MIDI_TxBuffer);
     592:	cf 01       	movw	r24, r30
     594:	0e 94 45 0f 	call	0x1e8a	; 0x1e8a <_Z15UART1_PutStringPKc>
     598:	08 95       	ret

0000059a <_Z20PedalCom_RxAvailablev>:
	UCSR0B |= (1 << TXCIE0);
}

uint8_t PedalCom_RxAvailable()
{
	return (RxHead != RxTail);
     59a:	20 91 a5 01 	lds	r18, 0x01A5	; 0x8001a5 <RxHead>
     59e:	90 91 a4 01 	lds	r25, 0x01A4	; 0x8001a4 <RxTail>
     5a2:	81 e0       	ldi	r24, 0x01	; 1
     5a4:	29 13       	cpse	r18, r25
     5a6:	01 c0       	rjmp	.+2      	; 0x5aa <_Z20PedalCom_RxAvailablev+0x10>
     5a8:	80 e0       	ldi	r24, 0x00	; 0
}
     5aa:	08 95       	ret

000005ac <_Z20PedalCom_TxAvailablev>:

uint8_t PedalCom_TxAvailable()
{
	return (TxHead != TxTail);
     5ac:	20 91 a3 01 	lds	r18, 0x01A3	; 0x8001a3 <TxHead>
     5b0:	90 91 a2 01 	lds	r25, 0x01A2	; 0x8001a2 <TxTail>
     5b4:	81 e0       	ldi	r24, 0x01	; 1
     5b6:	29 13       	cpse	r18, r25
     5b8:	01 c0       	rjmp	.+2      	; 0x5bc <_Z20PedalCom_TxAvailablev+0x10>
     5ba:	80 e0       	ldi	r24, 0x00	; 0
}
     5bc:	08 95       	ret

000005be <_Z21PedalCom_FlushTxQueuev>:

void PedalCom_FlushTxQueue()
{
	TxTail = TxHead;
     5be:	80 91 a3 01 	lds	r24, 0x01A3	; 0x8001a3 <TxHead>
     5c2:	80 93 a2 01 	sts	0x01A2, r24	; 0x8001a2 <TxTail>
	TX_CommandQueue[TxHead].acked = true;
     5c6:	e0 91 a3 01 	lds	r30, 0x01A3	; 0x8001a3 <TxHead>
     5ca:	f0 e0       	ldi	r31, 0x00	; 0
     5cc:	ee 0f       	add	r30, r30
     5ce:	ff 1f       	adc	r31, r31
     5d0:	ee 0f       	add	r30, r30
     5d2:	ff 1f       	adc	r31, r31
     5d4:	ee 0f       	add	r30, r30
     5d6:	ff 1f       	adc	r31, r31
     5d8:	ea 55       	subi	r30, 0x5A	; 90
     5da:	fe 4f       	sbci	r31, 0xFE	; 254
     5dc:	81 e0       	ldi	r24, 0x01	; 1
     5de:	87 83       	std	Z+7, r24	; 0x07
     5e0:	08 95       	ret

000005e2 <_Z16PedalCom_Receivev>:
}


void PedalCom_Receive()
{
     5e2:	cf 93       	push	r28
     5e4:	df 93       	push	r29
	static uint8_t RX_ByteCnt = 0;
	
	/* Start/reset Delay TX timer. Both in case a NACK needs to be sent, and also to
	   prevent response to previous command being sent while still receiving new data. */
	if (PedalCom_DelayTXOvfCnt != 0)
     5e6:	80 91 17 02 	lds	r24, 0x0217	; 0x800217 <PedalCom_DelayTXOvfCnt>
     5ea:	88 23       	and	r24, r24
     5ec:	19 f0       	breq	.+6      	; 0x5f4 <_Z16PedalCom_Receivev+0x12>
	{
		PedalCom_DelayTXOvfCnt = 1;
     5ee:	81 e0       	ldi	r24, 0x01	; 1
     5f0:	80 93 17 02 	sts	0x0217, r24	; 0x800217 <PedalCom_DelayTXOvfCnt>
	}
	
	/* Fetch new byte from UART buffer */
	RX_Buffer[RX_ByteCnt] = UART0_GetChar();
     5f4:	c0 91 a0 01 	lds	r28, 0x01A0	; 0x8001a0 <_ZZ16PedalCom_ReceivevE10RX_ByteCnt>
     5f8:	d0 e0       	ldi	r29, 0x00	; 0
     5fa:	0e 94 1a 0e 	call	0x1c34	; 0x1c34 <_Z13UART0_GetCharv>
     5fe:	ca 5f       	subi	r28, 0xFA	; 250
     600:	dd 4f       	sbci	r29, 0xFD	; 253
     602:	88 83       	st	Y, r24
	RX_ByteCnt++;
     604:	80 91 a0 01 	lds	r24, 0x01A0	; 0x8001a0 <_ZZ16PedalCom_ReceivevE10RX_ByteCnt>
     608:	8f 5f       	subi	r24, 0xFF	; 255
     60a:	80 93 a0 01 	sts	0x01A0, r24	; 0x8001a0 <_ZZ16PedalCom_ReceivevE10RX_ByteCnt>
	
	/* Handle new byte */
	if ((RX_ByteCnt - 1) == SOF_BYTE_IDX)
     60e:	81 30       	cpi	r24, 0x01	; 1
     610:	09 f0       	breq	.+2      	; 0x614 <_Z16PedalCom_Receivev+0x32>
     612:	47 c0       	rjmp	.+142    	; 0x6a2 <_Z16PedalCom_Receivev+0xc0>
	{
		if (RX_Buffer[SOF_BYTE_IDX] != SOF_BYTE)
     614:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <RX_Buffer>
     618:	8f 35       	cpi	r24, 0x5F	; 95
     61a:	09 f4       	brne	.+2      	; 0x61e <_Z16PedalCom_Receivev+0x3c>
     61c:	d1 c0       	rjmp	.+418    	; 0x7c0 <_Z16PedalCom_Receivev+0x1de>
		{
			RX_ByteCnt = 0;
     61e:	10 92 a0 01 	sts	0x01A0, r1	; 0x8001a0 <_ZZ16PedalCom_ReceivevE10RX_ByteCnt>
				
			if (RX_Buffer[SOF_BYTE_IDX] == ACK_BYTE)
     622:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <RX_Buffer>
     626:	8c 3a       	cpi	r24, 0xAC	; 172
     628:	f9 f4       	brne	.+62     	; 0x668 <_Z16PedalCom_Receivev+0x86>
			{
				PedalCom_ResponseTimeoutOvfCnt = 1;		// Reset timeout timer
     62a:	81 e0       	ldi	r24, 0x01	; 1
     62c:	90 e0       	ldi	r25, 0x00	; 0
     62e:	90 93 04 01 	sts	0x0104, r25	; 0x800104 <PedalCom_ResponseTimeoutOvfCnt+0x1>
     632:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <PedalCom_ResponseTimeoutOvfCnt>
				NackCnt = 0;
     636:	10 92 a1 01 	sts	0x01A1, r1	; 0x8001a1 <NackCnt>
				
				TX_CommandQueue[TxTail].acked = true;
     63a:	e0 91 a2 01 	lds	r30, 0x01A2	; 0x8001a2 <TxTail>
     63e:	f0 e0       	ldi	r31, 0x00	; 0
     640:	ee 0f       	add	r30, r30
     642:	ff 1f       	adc	r31, r31
     644:	ee 0f       	add	r30, r30
     646:	ff 1f       	adc	r31, r31
     648:	ee 0f       	add	r30, r30
     64a:	ff 1f       	adc	r31, r31
     64c:	ea 55       	subi	r30, 0x5A	; 90
     64e:	fe 4f       	sbci	r31, 0xFE	; 254
     650:	87 83       	std	Z+7, r24	; 0x07
				
				if (!PedalCom_ConnectionOpen)
     652:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <PedalCom_ConnectionOpen>
     656:	81 11       	cpse	r24, r1
     658:	b3 c0       	rjmp	.+358    	; 0x7c0 <_Z16PedalCom_Receivev+0x1de>
				{
					PedalCom_ConnectionOpen = true;
     65a:	81 e0       	ldi	r24, 0x01	; 1
     65c:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <PedalCom_ConnectionOpen>
					
					/* Set system state to initialize Pedal */
					SystemState = INITIALIZE_SYSTEM;
     660:	82 e0       	ldi	r24, 0x02	; 2
     662:	80 93 53 02 	sts	0x0253, r24	; 0x800253 <SystemState>
     666:	ac c0       	rjmp	.+344    	; 0x7c0 <_Z16PedalCom_Receivev+0x1de>
				}
			}
			else if (RX_Buffer[SOF_BYTE_IDX] == NACK_BYTE)
     668:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <RX_Buffer>
     66c:	8a 32       	cpi	r24, 0x2A	; 42
     66e:	09 f0       	breq	.+2      	; 0x672 <_Z16PedalCom_Receivev+0x90>
     670:	a7 c0       	rjmp	.+334    	; 0x7c0 <_Z16PedalCom_Receivev+0x1de>
			{
				/* Stop retransmitting command if Pedal keeps responding with NACK. */
				if (++NackCnt <= 3)
     672:	80 91 a1 01 	lds	r24, 0x01A1	; 0x8001a1 <NackCnt>
     676:	8f 5f       	subi	r24, 0xFF	; 255
     678:	80 93 a1 01 	sts	0x01A1, r24	; 0x8001a1 <NackCnt>
     67c:	84 30       	cpi	r24, 0x04	; 4
     67e:	08 f0       	brcs	.+2      	; 0x682 <_Z16PedalCom_Receivev+0xa0>
     680:	9f c0       	rjmp	.+318    	; 0x7c0 <_Z16PedalCom_Receivev+0x1de>
				{
					/* Prepare retransmit latest command */
					TX_CommandQueue[TxTail].sent = false;
     682:	e0 91 a2 01 	lds	r30, 0x01A2	; 0x8001a2 <TxTail>
     686:	f0 e0       	ldi	r31, 0x00	; 0
     688:	ee 0f       	add	r30, r30
     68a:	ff 1f       	adc	r31, r31
     68c:	ee 0f       	add	r30, r30
     68e:	ff 1f       	adc	r31, r31
     690:	ee 0f       	add	r30, r30
     692:	ff 1f       	adc	r31, r31
     694:	ea 55       	subi	r30, 0x5A	; 90
     696:	fe 4f       	sbci	r31, 0xFE	; 254
     698:	16 82       	std	Z+6, r1	; 0x06
					PedalCom_DelayTXOvfCnt = 1;	// Start/reset Delay TX timer
     69a:	81 e0       	ldi	r24, 0x01	; 1
     69c:	80 93 17 02 	sts	0x0217, r24	; 0x800217 <PedalCom_DelayTXOvfCnt>
     6a0:	8f c0       	rjmp	.+286    	; 0x7c0 <_Z16PedalCom_Receivev+0x1de>
				}
			}
		}
	}
	else if ((RX_ByteCnt - 1) == LENGTH_BYTE_IDX)
     6a2:	82 30       	cpi	r24, 0x02	; 2
     6a4:	79 f4       	brne	.+30     	; 0x6c4 <_Z16PedalCom_Receivev+0xe2>
	{
		RX_CommandQueue[RxHead].length = RX_Buffer[LENGTH_BYTE_IDX];
     6a6:	e0 91 a5 01 	lds	r30, 0x01A5	; 0x8001a5 <RxHead>
     6aa:	f0 e0       	ldi	r31, 0x00	; 0
     6ac:	80 91 07 02 	lds	r24, 0x0207	; 0x800207 <RX_Buffer+0x1>
     6b0:	ee 0f       	add	r30, r30
     6b2:	ff 1f       	adc	r31, r31
     6b4:	ee 0f       	add	r30, r30
     6b6:	ff 1f       	adc	r31, r31
     6b8:	ee 0f       	add	r30, r30
     6ba:	ff 1f       	adc	r31, r31
     6bc:	ea 51       	subi	r30, 0x1A	; 26
     6be:	fe 4f       	sbci	r31, 0xFE	; 254
     6c0:	81 83       	std	Z+1, r24	; 0x01
     6c2:	7e c0       	rjmp	.+252    	; 0x7c0 <_Z16PedalCom_Receivev+0x1de>
	}
	else if (RX_ByteCnt == RX_CommandQueue[RxHead].length)
     6c4:	e0 91 a5 01 	lds	r30, 0x01A5	; 0x8001a5 <RxHead>
     6c8:	f0 e0       	ldi	r31, 0x00	; 0
     6ca:	ee 0f       	add	r30, r30
     6cc:	ff 1f       	adc	r31, r31
     6ce:	ee 0f       	add	r30, r30
     6d0:	ff 1f       	adc	r31, r31
     6d2:	ee 0f       	add	r30, r30
     6d4:	ff 1f       	adc	r31, r31
     6d6:	ea 51       	subi	r30, 0x1A	; 26
     6d8:	fe 4f       	sbci	r31, 0xFE	; 254
     6da:	91 81       	ldd	r25, Z+1	; 0x01
     6dc:	89 13       	cpse	r24, r25
     6de:	70 c0       	rjmp	.+224    	; 0x7c0 <_Z16PedalCom_Receivev+0x1de>
	{
		/* If full frame received */
		if (RX_Buffer[RX_CommandQueue[RxHead].length - 1] == EOF_BYTE)
     6e0:	e0 91 a5 01 	lds	r30, 0x01A5	; 0x8001a5 <RxHead>
     6e4:	f0 e0       	ldi	r31, 0x00	; 0
     6e6:	ee 0f       	add	r30, r30
     6e8:	ff 1f       	adc	r31, r31
     6ea:	ee 0f       	add	r30, r30
     6ec:	ff 1f       	adc	r31, r31
     6ee:	ee 0f       	add	r30, r30
     6f0:	ff 1f       	adc	r31, r31
     6f2:	ea 51       	subi	r30, 0x1A	; 26
     6f4:	fe 4f       	sbci	r31, 0xFE	; 254
     6f6:	e1 81       	ldd	r30, Z+1	; 0x01
     6f8:	f0 e0       	ldi	r31, 0x00	; 0
     6fa:	eb 5f       	subi	r30, 0xFB	; 251
     6fc:	fd 4f       	sbci	r31, 0xFD	; 253
     6fe:	80 81       	ld	r24, Z
     700:	8f 3e       	cpi	r24, 0xEF	; 239
     702:	09 f0       	breq	.+2      	; 0x706 <_Z16PedalCom_Receivev+0x124>
     704:	55 c0       	rjmp	.+170    	; 0x7b0 <_Z16PedalCom_Receivev+0x1ce>
		{
			RX_CommandQueue[RxHead].command = (CMD)RX_Buffer[CMD_BYTE_IDX];
     706:	e0 91 a5 01 	lds	r30, 0x01A5	; 0x8001a5 <RxHead>
     70a:	f0 e0       	ldi	r31, 0x00	; 0
     70c:	80 91 08 02 	lds	r24, 0x0208	; 0x800208 <RX_Buffer+0x2>
     710:	ee 0f       	add	r30, r30
     712:	ff 1f       	adc	r31, r31
     714:	ee 0f       	add	r30, r30
     716:	ff 1f       	adc	r31, r31
     718:	ee 0f       	add	r30, r30
     71a:	ff 1f       	adc	r31, r31
     71c:	ea 51       	subi	r30, 0x1A	; 26
     71e:	fe 4f       	sbci	r31, 0xFE	; 254
     720:	80 83       	st	Z, r24
			
			for (uint8_t i = 0; i < (RX_CommandQueue[RxHead].length - 4); i++)
     722:	e0 91 a5 01 	lds	r30, 0x01A5	; 0x8001a5 <RxHead>
     726:	f0 e0       	ldi	r31, 0x00	; 0
     728:	ee 0f       	add	r30, r30
     72a:	ff 1f       	adc	r31, r31
     72c:	ee 0f       	add	r30, r30
     72e:	ff 1f       	adc	r31, r31
     730:	ee 0f       	add	r30, r30
     732:	ff 1f       	adc	r31, r31
     734:	ea 51       	subi	r30, 0x1A	; 26
     736:	fe 4f       	sbci	r31, 0xFE	; 254
     738:	81 81       	ldd	r24, Z+1	; 0x01
     73a:	90 e0       	ldi	r25, 0x00	; 0
     73c:	04 97       	sbiw	r24, 0x04	; 4
     73e:	18 16       	cp	r1, r24
     740:	19 06       	cpc	r1, r25
     742:	5c f5       	brge	.+86     	; 0x79a <_Z16PedalCom_Receivev+0x1b8>
     744:	20 e0       	ldi	r18, 0x00	; 0
     746:	30 e0       	ldi	r19, 0x00	; 0
     748:	40 e0       	ldi	r20, 0x00	; 0
			{
				RX_CommandQueue[RxHead].data[i] = RX_Buffer[DATA_BYTE_IDX + i];
     74a:	80 91 a5 01 	lds	r24, 0x01A5	; 0x8001a5 <RxHead>
     74e:	e8 2f       	mov	r30, r24
     750:	f0 e0       	ldi	r31, 0x00	; 0
     752:	d9 01       	movw	r26, r18
     754:	a7 5f       	subi	r26, 0xF7	; 247
     756:	bd 4f       	sbci	r27, 0xFD	; 253
     758:	8c 91       	ld	r24, X
     75a:	ee 0f       	add	r30, r30
     75c:	ff 1f       	adc	r31, r31
     75e:	ee 0f       	add	r30, r30
     760:	ff 1f       	adc	r31, r31
     762:	ee 0f       	add	r30, r30
     764:	ff 1f       	adc	r31, r31
     766:	ea 51       	subi	r30, 0x1A	; 26
     768:	fe 4f       	sbci	r31, 0xFE	; 254
     76a:	e2 0f       	add	r30, r18
     76c:	f3 1f       	adc	r31, r19
     76e:	82 83       	std	Z+2, r24	; 0x02
		/* If full frame received */
		if (RX_Buffer[RX_CommandQueue[RxHead].length - 1] == EOF_BYTE)
		{
			RX_CommandQueue[RxHead].command = (CMD)RX_Buffer[CMD_BYTE_IDX];
			
			for (uint8_t i = 0; i < (RX_CommandQueue[RxHead].length - 4); i++)
     770:	4f 5f       	subi	r20, 0xFF	; 255
     772:	24 2f       	mov	r18, r20
     774:	30 e0       	ldi	r19, 0x00	; 0
     776:	a0 91 a5 01 	lds	r26, 0x01A5	; 0x8001a5 <RxHead>
     77a:	b0 e0       	ldi	r27, 0x00	; 0
     77c:	aa 0f       	add	r26, r26
     77e:	bb 1f       	adc	r27, r27
     780:	aa 0f       	add	r26, r26
     782:	bb 1f       	adc	r27, r27
     784:	aa 0f       	add	r26, r26
     786:	bb 1f       	adc	r27, r27
     788:	aa 51       	subi	r26, 0x1A	; 26
     78a:	be 4f       	sbci	r27, 0xFE	; 254
     78c:	11 96       	adiw	r26, 0x01	; 1
     78e:	8c 91       	ld	r24, X
     790:	90 e0       	ldi	r25, 0x00	; 0
     792:	04 97       	sbiw	r24, 0x04	; 4
     794:	28 17       	cp	r18, r24
     796:	39 07       	cpc	r19, r25
     798:	c4 f2       	brlt	.-80     	; 0x74a <_Z16PedalCom_Receivev+0x168>
			{
				RX_CommandQueue[RxHead].data[i] = RX_Buffer[DATA_BYTE_IDX + i];
			}
			
			/* calculate new RX head index */
			uint8_t tmpHead = (RxHead + 1) & RX_QUEUE_MASK;
     79a:	80 91 a5 01 	lds	r24, 0x01A5	; 0x8001a5 <RxHead>
     79e:	8f 5f       	subi	r24, 0xFF	; 255
     7a0:	83 70       	andi	r24, 0x03	; 3
				
			if ( tmpHead == RxTail )
     7a2:	90 91 a4 01 	lds	r25, 0x01A4	; 0x8001a4 <RxTail>
     7a6:	89 17       	cp	r24, r25
     7a8:	49 f0       	breq	.+18     	; 0x7bc <_Z16PedalCom_Receivev+0x1da>
				/* error: RX command queue overflow */
			}
			else
			{
				/* store new index */
				RxHead = tmpHead;
     7aa:	80 93 a5 01 	sts	0x01A5, r24	; 0x8001a5 <RxHead>
     7ae:	06 c0       	rjmp	.+12     	; 0x7bc <_Z16PedalCom_Receivev+0x1da>
			}
		}
		else
		{
			/* Prepare Transmit NACK */
			UART0_QueueChar(NACK_BYTE);
     7b0:	8a e2       	ldi	r24, 0x2A	; 42
     7b2:	0e 94 42 0e 	call	0x1c84	; 0x1c84 <_Z15UART0_QueueCharh>
			PedalCom_DelayTXOvfCnt = 1;	// Start/reset Delay TX timer
     7b6:	81 e0       	ldi	r24, 0x01	; 1
     7b8:	80 93 17 02 	sts	0x0217, r24	; 0x800217 <PedalCom_DelayTXOvfCnt>
		}
			
		RX_ByteCnt = 0;
     7bc:	10 92 a0 01 	sts	0x01A0, r1	; 0x8001a0 <_ZZ16PedalCom_ReceivevE10RX_ByteCnt>
	}	
}
     7c0:	df 91       	pop	r29
     7c2:	cf 91       	pop	r28
     7c4:	08 95       	ret

000007c6 <_Z23PedalCom_HandleReceivedv>:


void PedalCom_HandleReceived()
{
	unsigned char response;
	response = System_HandlePedalCommand(RX_CommandQueue[RxTail].command, RX_CommandQueue[RxTail].length, (uint8_t *)RX_CommandQueue[RxTail].data);
     7c6:	40 91 a4 01 	lds	r20, 0x01A4	; 0x8001a4 <RxTail>
     7ca:	e0 91 a4 01 	lds	r30, 0x01A4	; 0x8001a4 <RxTail>
     7ce:	f0 e0       	ldi	r31, 0x00	; 0
     7d0:	ee 0f       	add	r30, r30
     7d2:	ff 1f       	adc	r31, r31
     7d4:	ee 0f       	add	r30, r30
     7d6:	ff 1f       	adc	r31, r31
     7d8:	ee 0f       	add	r30, r30
     7da:	ff 1f       	adc	r31, r31
     7dc:	ea 51       	subi	r30, 0x1A	; 26
     7de:	fe 4f       	sbci	r31, 0xFE	; 254
     7e0:	61 81       	ldd	r22, Z+1	; 0x01
     7e2:	e0 91 a4 01 	lds	r30, 0x01A4	; 0x8001a4 <RxTail>
     7e6:	f0 e0       	ldi	r31, 0x00	; 0
     7e8:	ee 0f       	add	r30, r30
     7ea:	ff 1f       	adc	r31, r31
     7ec:	ee 0f       	add	r30, r30
     7ee:	ff 1f       	adc	r31, r31
     7f0:	ee 0f       	add	r30, r30
     7f2:	ff 1f       	adc	r31, r31
     7f4:	ea 51       	subi	r30, 0x1A	; 26
     7f6:	fe 4f       	sbci	r31, 0xFE	; 254
     7f8:	80 81       	ld	r24, Z
     7fa:	50 e0       	ldi	r21, 0x00	; 0
     7fc:	44 0f       	add	r20, r20
     7fe:	55 1f       	adc	r21, r21
     800:	44 0f       	add	r20, r20
     802:	55 1f       	adc	r21, r21
     804:	44 0f       	add	r20, r20
     806:	55 1f       	adc	r21, r21
     808:	48 51       	subi	r20, 0x18	; 24
     80a:	5e 4f       	sbci	r21, 0xFE	; 254
     80c:	0e 94 b7 06 	call	0xd6e	; 0xd6e <_Z25System_HandlePedalCommand3CMDhPh>
		
	/* Calculate and store new queue index */
	RxTail = (RxTail + 1) & RX_QUEUE_MASK;
     810:	90 91 a4 01 	lds	r25, 0x01A4	; 0x8001a4 <RxTail>
     814:	9f 5f       	subi	r25, 0xFF	; 255
     816:	93 70       	andi	r25, 0x03	; 3
     818:	90 93 a4 01 	sts	0x01A4, r25	; 0x8001a4 <RxTail>

	/* Prepare Transmit response */
	UART0_QueueChar(response);
     81c:	0e 94 42 0e 	call	0x1c84	; 0x1c84 <_Z15UART0_QueueCharh>
	
	/* Start/reset Delay TX timer */
	PedalCom_DelayTXOvfCnt = 1;
     820:	81 e0       	ldi	r24, 0x01	; 1
     822:	80 93 17 02 	sts	0x0217, r24	; 0x800217 <PedalCom_DelayTXOvfCnt>
     826:	08 95       	ret

00000828 <_Z21PedalCom_QueueCommand3CMDhPh>:


bool PedalCom_QueueCommand(CMD cmd, uint8_t datLen, uint8_t *dat)
{
	/* Calculate new queue head index */
	uint8_t tmpHead = (TxHead + 1) & TX_QUEUE_MASK;
     828:	20 91 a3 01 	lds	r18, 0x01A3	; 0x8001a3 <TxHead>
     82c:	2f 5f       	subi	r18, 0xFF	; 255
     82e:	27 70       	andi	r18, 0x07	; 7
	
	/* Check for free space in queue */
	if ( tmpHead == TxTail )
     830:	90 91 a2 01 	lds	r25, 0x01A2	; 0x8001a2 <TxTail>
     834:	29 17       	cp	r18, r25
     836:	09 f4       	brne	.+2      	; 0x83a <_Z21PedalCom_QueueCommand3CMDhPh+0x12>
     838:	4e c0       	rjmp	.+156    	; 0x8d6 <_Z21PedalCom_QueueCommand3CMDhPh+0xae>
		return false;
	
	/* Copy command to queue */
	TX_CommandQueue[TxHead].command = cmd;
     83a:	e0 91 a3 01 	lds	r30, 0x01A3	; 0x8001a3 <TxHead>
     83e:	f0 e0       	ldi	r31, 0x00	; 0
     840:	ee 0f       	add	r30, r30
     842:	ff 1f       	adc	r31, r31
     844:	ee 0f       	add	r30, r30
     846:	ff 1f       	adc	r31, r31
     848:	ee 0f       	add	r30, r30
     84a:	ff 1f       	adc	r31, r31
     84c:	ea 55       	subi	r30, 0x5A	; 90
     84e:	fe 4f       	sbci	r31, 0xFE	; 254
     850:	80 83       	st	Z, r24
	TX_CommandQueue[TxHead].length = datLen + 4;
     852:	e0 91 a3 01 	lds	r30, 0x01A3	; 0x8001a3 <TxHead>
     856:	f0 e0       	ldi	r31, 0x00	; 0
     858:	ee 0f       	add	r30, r30
     85a:	ff 1f       	adc	r31, r31
     85c:	ee 0f       	add	r30, r30
     85e:	ff 1f       	adc	r31, r31
     860:	ee 0f       	add	r30, r30
     862:	ff 1f       	adc	r31, r31
     864:	ea 55       	subi	r30, 0x5A	; 90
     866:	fe 4f       	sbci	r31, 0xFE	; 254
     868:	84 e0       	ldi	r24, 0x04	; 4
     86a:	86 0f       	add	r24, r22
     86c:	81 83       	std	Z+1, r24	; 0x01
	TX_CommandQueue[TxHead].sent = false;
     86e:	e0 91 a3 01 	lds	r30, 0x01A3	; 0x8001a3 <TxHead>
     872:	f0 e0       	ldi	r31, 0x00	; 0
     874:	ee 0f       	add	r30, r30
     876:	ff 1f       	adc	r31, r31
     878:	ee 0f       	add	r30, r30
     87a:	ff 1f       	adc	r31, r31
     87c:	ee 0f       	add	r30, r30
     87e:	ff 1f       	adc	r31, r31
     880:	ea 55       	subi	r30, 0x5A	; 90
     882:	fe 4f       	sbci	r31, 0xFE	; 254
     884:	16 82       	std	Z+6, r1	; 0x06
	TX_CommandQueue[TxHead].acked = false;
     886:	e0 91 a3 01 	lds	r30, 0x01A3	; 0x8001a3 <TxHead>
     88a:	f0 e0       	ldi	r31, 0x00	; 0
     88c:	ee 0f       	add	r30, r30
     88e:	ff 1f       	adc	r31, r31
     890:	ee 0f       	add	r30, r30
     892:	ff 1f       	adc	r31, r31
     894:	ee 0f       	add	r30, r30
     896:	ff 1f       	adc	r31, r31
     898:	ea 55       	subi	r30, 0x5A	; 90
     89a:	fe 4f       	sbci	r31, 0xFE	; 254
     89c:	17 82       	std	Z+7, r1	; 0x07
	
	for (uint8_t i = 0; i < datLen; i++)
     89e:	66 23       	and	r22, r22
     8a0:	b1 f0       	breq	.+44     	; 0x8ce <_Z21PedalCom_QueueCommand3CMDhPh+0xa6>
     8a2:	a4 2f       	mov	r26, r20
     8a4:	b5 2f       	mov	r27, r21
     8a6:	80 e0       	ldi	r24, 0x00	; 0
     8a8:	90 e0       	ldi	r25, 0x00	; 0
	{
		TX_CommandQueue[TxHead].data[i] = dat[i];
     8aa:	e0 91 a3 01 	lds	r30, 0x01A3	; 0x8001a3 <TxHead>
     8ae:	f0 e0       	ldi	r31, 0x00	; 0
     8b0:	3d 91       	ld	r19, X+
     8b2:	ee 0f       	add	r30, r30
     8b4:	ff 1f       	adc	r31, r31
     8b6:	ee 0f       	add	r30, r30
     8b8:	ff 1f       	adc	r31, r31
     8ba:	ee 0f       	add	r30, r30
     8bc:	ff 1f       	adc	r31, r31
     8be:	ea 55       	subi	r30, 0x5A	; 90
     8c0:	fe 4f       	sbci	r31, 0xFE	; 254
     8c2:	e8 0f       	add	r30, r24
     8c4:	f9 1f       	adc	r31, r25
     8c6:	32 83       	std	Z+2, r19	; 0x02
     8c8:	01 96       	adiw	r24, 0x01	; 1
	TX_CommandQueue[TxHead].command = cmd;
	TX_CommandQueue[TxHead].length = datLen + 4;
	TX_CommandQueue[TxHead].sent = false;
	TX_CommandQueue[TxHead].acked = false;
	
	for (uint8_t i = 0; i < datLen; i++)
     8ca:	86 17       	cp	r24, r22
     8cc:	70 f3       	brcs	.-36     	; 0x8aa <_Z21PedalCom_QueueCommand3CMDhPh+0x82>
	{
		TX_CommandQueue[TxHead].data[i] = dat[i];
	}
	
	/* Update queue head */
	TxHead = tmpHead;
     8ce:	20 93 a3 01 	sts	0x01A3, r18	; 0x8001a3 <TxHead>
	
	return true;
     8d2:	81 e0       	ldi	r24, 0x01	; 1
     8d4:	08 95       	ret
	/* Calculate new queue head index */
	uint8_t tmpHead = (TxHead + 1) & TX_QUEUE_MASK;
	
	/* Check for free space in queue */
	if ( tmpHead == TxTail )
		return false;
     8d6:	80 e0       	ldi	r24, 0x00	; 0
	
	/* Update queue head */
	TxHead = tmpHead;
	
	return true;
}
     8d8:	08 95       	ret

000008da <_Z19PedalCom_PutCommandv>:

void PedalCom_PutCommand()
{
     8da:	cf 93       	push	r28
	/* Only transmit new command if previous one got an ACK */
	if (TX_CommandQueue[TxTail].acked)
     8dc:	e0 91 a2 01 	lds	r30, 0x01A2	; 0x8001a2 <TxTail>
     8e0:	f0 e0       	ldi	r31, 0x00	; 0
     8e2:	ee 0f       	add	r30, r30
     8e4:	ff 1f       	adc	r31, r31
     8e6:	ee 0f       	add	r30, r30
     8e8:	ff 1f       	adc	r31, r31
     8ea:	ee 0f       	add	r30, r30
     8ec:	ff 1f       	adc	r31, r31
     8ee:	ea 55       	subi	r30, 0x5A	; 90
     8f0:	fe 4f       	sbci	r31, 0xFE	; 254
     8f2:	87 81       	ldd	r24, Z+7	; 0x07
     8f4:	88 23       	and	r24, r24
     8f6:	39 f0       	breq	.+14     	; 0x906 <__stack+0x7>
	{
		/* Calculate and store new queue tail index */
		TxTail = (TxTail + 1) & TX_QUEUE_MASK;
     8f8:	80 91 a2 01 	lds	r24, 0x01A2	; 0x8001a2 <TxTail>
     8fc:	8f 5f       	subi	r24, 0xFF	; 255
     8fe:	87 70       	andi	r24, 0x07	; 7
     900:	80 93 a2 01 	sts	0x01A2, r24	; 0x8001a2 <TxTail>
     904:	84 c0       	rjmp	.+264    	; 0xa0e <__stack+0x10f>
	}
	else if (!(TX_CommandQueue[TxTail].sent))
     906:	e0 91 a2 01 	lds	r30, 0x01A2	; 0x8001a2 <TxTail>
     90a:	f0 e0       	ldi	r31, 0x00	; 0
     90c:	ee 0f       	add	r30, r30
     90e:	ff 1f       	adc	r31, r31
     910:	ee 0f       	add	r30, r30
     912:	ff 1f       	adc	r31, r31
     914:	ee 0f       	add	r30, r30
     916:	ff 1f       	adc	r31, r31
     918:	ea 55       	subi	r30, 0x5A	; 90
     91a:	fe 4f       	sbci	r31, 0xFE	; 254
     91c:	86 81       	ldd	r24, Z+6	; 0x06
     91e:	81 11       	cpse	r24, r1
     920:	76 c0       	rjmp	.+236    	; 0xa0e <__stack+0x10f>
	{
		/* Send command frame to UART TX buffer */
		UART0_QueueChar(SOF_BYTE);
     922:	8f e5       	ldi	r24, 0x5F	; 95
     924:	0e 94 42 0e 	call	0x1c84	; 0x1c84 <_Z15UART0_QueueCharh>
		UART0_QueueChar((unsigned char)TX_CommandQueue[TxTail].length);
     928:	e0 91 a2 01 	lds	r30, 0x01A2	; 0x8001a2 <TxTail>
     92c:	f0 e0       	ldi	r31, 0x00	; 0
     92e:	ee 0f       	add	r30, r30
     930:	ff 1f       	adc	r31, r31
     932:	ee 0f       	add	r30, r30
     934:	ff 1f       	adc	r31, r31
     936:	ee 0f       	add	r30, r30
     938:	ff 1f       	adc	r31, r31
     93a:	ea 55       	subi	r30, 0x5A	; 90
     93c:	fe 4f       	sbci	r31, 0xFE	; 254
     93e:	81 81       	ldd	r24, Z+1	; 0x01
     940:	0e 94 42 0e 	call	0x1c84	; 0x1c84 <_Z15UART0_QueueCharh>
		UART0_QueueChar((unsigned char)TX_CommandQueue[TxTail].command);
     944:	e0 91 a2 01 	lds	r30, 0x01A2	; 0x8001a2 <TxTail>
     948:	f0 e0       	ldi	r31, 0x00	; 0
     94a:	ee 0f       	add	r30, r30
     94c:	ff 1f       	adc	r31, r31
     94e:	ee 0f       	add	r30, r30
     950:	ff 1f       	adc	r31, r31
     952:	ee 0f       	add	r30, r30
     954:	ff 1f       	adc	r31, r31
     956:	ea 55       	subi	r30, 0x5A	; 90
     958:	fe 4f       	sbci	r31, 0xFE	; 254
     95a:	80 81       	ld	r24, Z
     95c:	0e 94 42 0e 	call	0x1c84	; 0x1c84 <_Z15UART0_QueueCharh>
		
		for (uint8_t i = 0; i < (TX_CommandQueue[TxTail].length - 4); i++)
     960:	e0 91 a2 01 	lds	r30, 0x01A2	; 0x8001a2 <TxTail>
     964:	f0 e0       	ldi	r31, 0x00	; 0
     966:	ee 0f       	add	r30, r30
     968:	ff 1f       	adc	r31, r31
     96a:	ee 0f       	add	r30, r30
     96c:	ff 1f       	adc	r31, r31
     96e:	ee 0f       	add	r30, r30
     970:	ff 1f       	adc	r31, r31
     972:	ea 55       	subi	r30, 0x5A	; 90
     974:	fe 4f       	sbci	r31, 0xFE	; 254
     976:	81 81       	ldd	r24, Z+1	; 0x01
     978:	90 e0       	ldi	r25, 0x00	; 0
     97a:	04 97       	sbiw	r24, 0x04	; 4
     97c:	18 16       	cp	r1, r24
     97e:	19 06       	cpc	r1, r25
     980:	4c f5       	brge	.+82     	; 0x9d4 <__stack+0xd5>
     982:	20 e0       	ldi	r18, 0x00	; 0
     984:	30 e0       	ldi	r19, 0x00	; 0
     986:	c0 e0       	ldi	r28, 0x00	; 0
		{
			UART0_QueueChar((unsigned char)TX_CommandQueue[TxTail].data[i]);
     988:	80 91 a2 01 	lds	r24, 0x01A2	; 0x8001a2 <TxTail>
     98c:	e8 2f       	mov	r30, r24
     98e:	f0 e0       	ldi	r31, 0x00	; 0
     990:	ee 0f       	add	r30, r30
     992:	ff 1f       	adc	r31, r31
     994:	ee 0f       	add	r30, r30
     996:	ff 1f       	adc	r31, r31
     998:	ee 0f       	add	r30, r30
     99a:	ff 1f       	adc	r31, r31
     99c:	ea 55       	subi	r30, 0x5A	; 90
     99e:	fe 4f       	sbci	r31, 0xFE	; 254
     9a0:	e2 0f       	add	r30, r18
     9a2:	f3 1f       	adc	r31, r19
     9a4:	82 81       	ldd	r24, Z+2	; 0x02
     9a6:	0e 94 42 0e 	call	0x1c84	; 0x1c84 <_Z15UART0_QueueCharh>
		/* Send command frame to UART TX buffer */
		UART0_QueueChar(SOF_BYTE);
		UART0_QueueChar((unsigned char)TX_CommandQueue[TxTail].length);
		UART0_QueueChar((unsigned char)TX_CommandQueue[TxTail].command);
		
		for (uint8_t i = 0; i < (TX_CommandQueue[TxTail].length - 4); i++)
     9aa:	cf 5f       	subi	r28, 0xFF	; 255
     9ac:	2c 2f       	mov	r18, r28
     9ae:	30 e0       	ldi	r19, 0x00	; 0
     9b0:	a0 91 a2 01 	lds	r26, 0x01A2	; 0x8001a2 <TxTail>
     9b4:	b0 e0       	ldi	r27, 0x00	; 0
     9b6:	aa 0f       	add	r26, r26
     9b8:	bb 1f       	adc	r27, r27
     9ba:	aa 0f       	add	r26, r26
     9bc:	bb 1f       	adc	r27, r27
     9be:	aa 0f       	add	r26, r26
     9c0:	bb 1f       	adc	r27, r27
     9c2:	aa 55       	subi	r26, 0x5A	; 90
     9c4:	be 4f       	sbci	r27, 0xFE	; 254
     9c6:	11 96       	adiw	r26, 0x01	; 1
     9c8:	8c 91       	ld	r24, X
     9ca:	90 e0       	ldi	r25, 0x00	; 0
     9cc:	04 97       	sbiw	r24, 0x04	; 4
     9ce:	28 17       	cp	r18, r24
     9d0:	39 07       	cpc	r19, r25
     9d2:	d4 f2       	brlt	.-76     	; 0x988 <__stack+0x89>
		{
			UART0_QueueChar((unsigned char)TX_CommandQueue[TxTail].data[i]);
		}
		
		UART0_QueueChar(EOF_BYTE);
     9d4:	8f ee       	ldi	r24, 0xEF	; 239
     9d6:	0e 94 42 0e 	call	0x1c84	; 0x1c84 <_Z15UART0_QueueCharh>
		
		/* If no data is waiting to be transmitted */
		if (PedalCom_DelayTXOvfCnt == 0)
     9da:	80 91 17 02 	lds	r24, 0x0217	; 0x800217 <PedalCom_DelayTXOvfCnt>
     9de:	81 11       	cpse	r24, r1
     9e0:	03 c0       	rjmp	.+6      	; 0x9e8 <__stack+0xe9>
		{
			/* Signal that data is waiting to be transmitted without delay */
			PedalCom_DelayTxFlag = true;
     9e2:	81 e0       	ldi	r24, 0x01	; 1
     9e4:	80 93 18 02 	sts	0x0218, r24	; 0x800218 <PedalCom_DelayTxFlag>
		}
		
		TX_CommandQueue[TxTail].sent = true;
     9e8:	e0 91 a2 01 	lds	r30, 0x01A2	; 0x8001a2 <TxTail>
     9ec:	f0 e0       	ldi	r31, 0x00	; 0
     9ee:	ee 0f       	add	r30, r30
     9f0:	ff 1f       	adc	r31, r31
     9f2:	ee 0f       	add	r30, r30
     9f4:	ff 1f       	adc	r31, r31
     9f6:	ee 0f       	add	r30, r30
     9f8:	ff 1f       	adc	r31, r31
     9fa:	ea 55       	subi	r30, 0x5A	; 90
     9fc:	fe 4f       	sbci	r31, 0xFE	; 254
     9fe:	81 e0       	ldi	r24, 0x01	; 1
     a00:	86 83       	std	Z+6, r24	; 0x06
		
		/* Start response timeout timer */
		PedalCom_ResponseTimeoutOvfCnt = 1;
     a02:	81 e0       	ldi	r24, 0x01	; 1
     a04:	90 e0       	ldi	r25, 0x00	; 0
     a06:	90 93 04 01 	sts	0x0104, r25	; 0x800104 <PedalCom_ResponseTimeoutOvfCnt+0x1>
     a0a:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <PedalCom_ResponseTimeoutOvfCnt>
	}
}
     a0e:	cf 91       	pop	r28
     a10:	08 95       	ret

00000a12 <_Z12Select_RX_TXh>:
}


void Select_RX_TX(uint8_t dir)
{
	if (dir == DIR_TRANSMIT)
     a12:	81 11       	cpse	r24, r1
     a14:	03 c0       	rjmp	.+6      	; 0xa1c <_Z12Select_RX_TXh+0xa>
	{
		SELECT_RX_TX_PORT &= ~(SELECT_RX_MASK);
     a16:	2b 98       	cbi	0x05, 3	; 5
		SELECT_RX_TX_PORT |= SELECT_TX_MASK;
     a18:	2c 9a       	sbi	0x05, 4	; 5
     a1a:	08 95       	ret
	}
	else
	{
		SELECT_RX_TX_PORT |= SELECT_RX_MASK;
     a1c:	2b 9a       	sbi	0x05, 3	; 5
		SELECT_RX_TX_PORT &= ~(SELECT_TX_MASK);
     a1e:	2c 98       	cbi	0x05, 4	; 5
     a20:	08 95       	ret

00000a22 <_Z13PedalCom_Initv>:

/* Function implementations */
void PedalCom_Init()
{
	/* Set RX/TX Select GPIOs to output */
	SELECT_RX_TX_DDR |= (SELECT_RX_MASK | SELECT_TX_MASK);
     a22:	84 b1       	in	r24, 0x04	; 4
     a24:	88 61       	ori	r24, 0x18	; 24
     a26:	84 b9       	out	0x04, r24	; 4
	
	/* Activate receive */
	Select_RX_TX(DIR_RECEIVE);
     a28:	81 e0       	ldi	r24, 0x01	; 1
     a2a:	0e 94 09 05 	call	0xa12	; 0xa12 <_Z12Select_RX_TXh>
	
	/* Enable TX Complete Interrupt */
	UCSR0B |= (1 << TXCIE0);
     a2e:	e1 ec       	ldi	r30, 0xC1	; 193
     a30:	f0 e0       	ldi	r31, 0x00	; 0
     a32:	80 81       	ld	r24, Z
     a34:	80 64       	ori	r24, 0x40	; 64
     a36:	80 83       	st	Z, r24
     a38:	08 95       	ret

00000a3a <_Z17PedalCom_Transmitv>:


void PedalCom_Transmit()
{
	/* Activate Transmit */
	Select_RX_TX(DIR_TRANSMIT);
     a3a:	80 e0       	ldi	r24, 0x00	; 0
     a3c:	0e 94 09 05 	call	0xa12	; 0xa12 <_Z12Select_RX_TXh>
	
	/* Start transmit */
	UART0_PutQueue();
     a40:	0e 94 57 0e 	call	0x1cae	; 0x1cae <_Z14UART0_PutQueuev>
     a44:	08 95       	ret

00000a46 <__vector_22>:
	}
}

/* TX Complete Interrupt ISR */
ISR(USART0_TX_vect)
{
     a46:	1f 92       	push	r1
     a48:	0f 92       	push	r0
     a4a:	0f b6       	in	r0, 0x3f	; 63
     a4c:	0f 92       	push	r0
     a4e:	11 24       	eor	r1, r1
     a50:	2f 93       	push	r18
     a52:	3f 93       	push	r19
     a54:	4f 93       	push	r20
     a56:	5f 93       	push	r21
     a58:	6f 93       	push	r22
     a5a:	7f 93       	push	r23
     a5c:	8f 93       	push	r24
     a5e:	9f 93       	push	r25
     a60:	af 93       	push	r26
     a62:	bf 93       	push	r27
     a64:	ef 93       	push	r30
     a66:	ff 93       	push	r31
	/* Deactivate Transmit */
	Select_RX_TX(DIR_RECEIVE);
     a68:	81 e0       	ldi	r24, 0x01	; 1
     a6a:	0e 94 09 05 	call	0xa12	; 0xa12 <_Z12Select_RX_TXh>
     a6e:	ff 91       	pop	r31
     a70:	ef 91       	pop	r30
     a72:	bf 91       	pop	r27
     a74:	af 91       	pop	r26
     a76:	9f 91       	pop	r25
     a78:	8f 91       	pop	r24
     a7a:	7f 91       	pop	r23
     a7c:	6f 91       	pop	r22
     a7e:	5f 91       	pop	r21
     a80:	4f 91       	pop	r20
     a82:	3f 91       	pop	r19
     a84:	2f 91       	pop	r18
     a86:	0f 90       	pop	r0
     a88:	0f be       	out	0x3f, r0	; 63
     a8a:	0f 90       	pop	r0
     a8c:	1f 90       	pop	r1
     a8e:	18 95       	reti

00000a90 <_Z18RotaryEncoder_Initv>:
     a90:	84 b1       	in	r24, 0x04	; 4
     a92:	88 7f       	andi	r24, 0xF8	; 248
     a94:	84 b9       	out	0x04, r24	; 4
     a96:	ec e6       	ldi	r30, 0x6C	; 108
     a98:	f0 e0       	ldi	r31, 0x00	; 0
     a9a:	80 81       	ld	r24, Z
     a9c:	81 60       	ori	r24, 0x01	; 1
     a9e:	80 83       	st	Z, r24
     aa0:	e8 e6       	ldi	r30, 0x68	; 104
     aa2:	f0 e0       	ldi	r31, 0x00	; 0
     aa4:	80 81       	ld	r24, Z
     aa6:	82 60       	ori	r24, 0x02	; 2
     aa8:	80 83       	st	Z, r24
     aaa:	e9 e6       	ldi	r30, 0x69	; 105
     aac:	f0 e0       	ldi	r31, 0x00	; 0
     aae:	80 81       	ld	r24, Z
     ab0:	80 63       	ori	r24, 0x30	; 48
     ab2:	80 83       	st	Z, r24
     ab4:	ea 9a       	sbi	0x1d, 2	; 29
     ab6:	08 95       	ret

00000ab8 <_Z23RotaryEncoder_IsPressedv>:
     ab8:	83 b1       	in	r24, 0x03	; 3
     aba:	82 fb       	bst	r24, 2
     abc:	88 27       	eor	r24, r24
     abe:	80 f9       	bld	r24, 0
     ac0:	08 95       	ret

00000ac2 <_Z29RotaryEncoder_EnableInterruptv>:
     ac2:	e2 9a       	sbi	0x1c, 2	; 28
     ac4:	d9 9a       	sbi	0x1b, 1	; 27
     ac6:	ea 9a       	sbi	0x1d, 2	; 29
     ac8:	e8 e6       	ldi	r30, 0x68	; 104
     aca:	f0 e0       	ldi	r31, 0x00	; 0
     acc:	80 81       	ld	r24, Z
     ace:	82 60       	ori	r24, 0x02	; 2
     ad0:	80 83       	st	Z, r24
     ad2:	08 95       	ret

00000ad4 <__vector_5>:
     ad4:	1f 92       	push	r1
     ad6:	0f 92       	push	r0
     ad8:	0f b6       	in	r0, 0x3f	; 63
     ada:	0f 92       	push	r0
     adc:	11 24       	eor	r1, r1
     ade:	8f 93       	push	r24
     ae0:	ef 93       	push	r30
     ae2:	ff 93       	push	r31
     ae4:	18 9b       	sbis	0x03, 0	; 3
     ae6:	0f c0       	rjmp	.+30     	; 0xb06 <__vector_5+0x32>
     ae8:	ea 98       	cbi	0x1d, 2	; 29
     aea:	e8 e6       	ldi	r30, 0x68	; 104
     aec:	f0 e0       	ldi	r31, 0x00	; 0
     aee:	80 81       	ld	r24, Z
     af0:	8d 7f       	andi	r24, 0xFD	; 253
     af2:	80 83       	st	Z, r24
     af4:	19 9b       	sbis	0x03, 1	; 3
     af6:	04 c0       	rjmp	.+8      	; 0xb00 <__vector_5+0x2c>
     af8:	81 e0       	ldi	r24, 0x01	; 1
     afa:	80 93 19 02 	sts	0x0219, r24	; 0x800219 <RotEnc_State>
     afe:	03 c0       	rjmp	.+6      	; 0xb06 <__vector_5+0x32>
     b00:	82 e0       	ldi	r24, 0x02	; 2
     b02:	80 93 19 02 	sts	0x0219, r24	; 0x800219 <RotEnc_State>
     b06:	ff 91       	pop	r31
     b08:	ef 91       	pop	r30
     b0a:	8f 91       	pop	r24
     b0c:	0f 90       	pop	r0
     b0e:	0f be       	out	0x3f, r0	; 63
     b10:	0f 90       	pop	r0
     b12:	1f 90       	pop	r1
     b14:	18 95       	reti

00000b16 <__vector_3>:
     b16:	1f 92       	push	r1
     b18:	0f 92       	push	r0
     b1a:	0f b6       	in	r0, 0x3f	; 63
     b1c:	0f 92       	push	r0
     b1e:	11 24       	eor	r1, r1
     b20:	8f 93       	push	r24
     b22:	9f 93       	push	r25
     b24:	ef 93       	push	r30
     b26:	ff 93       	push	r31
     b28:	81 e0       	ldi	r24, 0x01	; 1
     b2a:	90 e0       	ldi	r25, 0x00	; 0
     b2c:	90 93 1b 02 	sts	0x021B, r25	; 0x80021b <RotaryEncoder_OvfCnt+0x1>
     b30:	80 93 1a 02 	sts	0x021A, r24	; 0x80021a <RotaryEncoder_OvfCnt>
     b34:	ea 98       	cbi	0x1d, 2	; 29
     b36:	e8 e6       	ldi	r30, 0x68	; 104
     b38:	f0 e0       	ldi	r31, 0x00	; 0
     b3a:	80 81       	ld	r24, Z
     b3c:	8d 7f       	andi	r24, 0xFD	; 253
     b3e:	80 83       	st	Z, r24
     b40:	ff 91       	pop	r31
     b42:	ef 91       	pop	r30
     b44:	9f 91       	pop	r25
     b46:	8f 91       	pop	r24
     b48:	0f 90       	pop	r0
     b4a:	0f be       	out	0x3f, r0	; 63
     b4c:	0f 90       	pop	r0
     b4e:	1f 90       	pop	r1
     b50:	18 95       	reti

00000b52 <_Z14SP10281_Updatev>:
void SP10281_Update()
{
	static unsigned char tmp = 0;

	/* Increment digit counter */
	if (++SP10281_DigitCnt >= SP10281_NUMBER_OF_DIGITS)
     b52:	80 91 1f 02 	lds	r24, 0x021F	; 0x80021f <SP10281_DigitCnt>
     b56:	8f 5f       	subi	r24, 0xFF	; 255
     b58:	80 93 1f 02 	sts	0x021F, r24	; 0x80021f <SP10281_DigitCnt>
     b5c:	83 30       	cpi	r24, 0x03	; 3
     b5e:	10 f0       	brcs	.+4      	; 0xb64 <_Z14SP10281_Updatev+0x12>
		SP10281_DigitCnt = 0;
     b60:	10 92 1f 02 	sts	0x021F, r1	; 0x80021f <SP10281_DigitCnt>

	/* Activate next digit */
	tmp = (1 << (SP10281_DigitCnt + GPIO_SP10281_DIGIT0_PIN));
     b64:	90 91 1f 02 	lds	r25, 0x021F	; 0x80021f <SP10281_DigitCnt>
     b68:	9b 5f       	subi	r25, 0xFB	; 251
     b6a:	81 e0       	ldi	r24, 0x01	; 1
     b6c:	01 c0       	rjmp	.+2      	; 0xb70 <_Z14SP10281_Updatev+0x1e>
     b6e:	88 0f       	add	r24, r24
     b70:	9a 95       	dec	r25
     b72:	ea f7       	brpl	.-6      	; 0xb6e <_Z14SP10281_Updatev+0x1c>
     b74:	80 93 1c 02 	sts	0x021C, r24	; 0x80021c <_ZZ14SP10281_UpdatevE3tmp>
	GPIO_SP10281_DIGIT_PORT |= GPIO_SP10281_DIGIT_MASK;
     b78:	85 b1       	in	r24, 0x05	; 5
     b7a:	80 6e       	ori	r24, 0xE0	; 224
     b7c:	85 b9       	out	0x05, r24	; 5
	GPIO_SP10281_DIGIT_PORT &= ~tmp;
     b7e:	95 b1       	in	r25, 0x05	; 5
     b80:	80 91 1c 02 	lds	r24, 0x021C	; 0x80021c <_ZZ14SP10281_UpdatevE3tmp>
     b84:	80 95       	com	r24
     b86:	89 23       	and	r24, r25
     b88:	85 b9       	out	0x05, r24	; 5

	/* Update segments */
	GPIO_SP10281_SEGMENT_PORT = SP10281_DigitData[SP10281_DigitCnt];
     b8a:	e0 91 1f 02 	lds	r30, 0x021F	; 0x80021f <SP10281_DigitCnt>
     b8e:	f0 e0       	ldi	r31, 0x00	; 0
     b90:	e0 5e       	subi	r30, 0xE0	; 224
     b92:	fd 4f       	sbci	r31, 0xFD	; 253
     b94:	80 81       	ld	r24, Z
     b96:	82 b9       	out	0x02, r24	; 2
     b98:	08 95       	ret

00000b9a <_Z19SP10281_WriteSinglehch>:
}

void SP10281_WriteSingle(unsigned char dig, char data, unsigned char dot)
{	
	SP10281_DigitData[dig] = SP10281_DigitTable[(unsigned char)data];
     b9a:	90 e0       	ldi	r25, 0x00	; 0
     b9c:	e6 2f       	mov	r30, r22
     b9e:	f0 e0       	ldi	r31, 0x00	; 0
     ba0:	eb 5f       	subi	r30, 0xFB	; 251
     ba2:	fe 4f       	sbci	r31, 0xFE	; 254
     ba4:	20 81       	ld	r18, Z
     ba6:	fc 01       	movw	r30, r24
     ba8:	e0 5e       	subi	r30, 0xE0	; 224
     baa:	fd 4f       	sbci	r31, 0xFD	; 253
     bac:	20 83       	st	Z, r18
	
	/* Set or clear dot */
	if (dot)
     bae:	44 23       	and	r20, r20
     bb0:	39 f0       	breq	.+14     	; 0xbc0 <_Z19SP10281_WriteSinglehch+0x26>
		SP10281_DigitData[dig] &= 0b01111111;
     bb2:	fc 01       	movw	r30, r24
     bb4:	e0 5e       	subi	r30, 0xE0	; 224
     bb6:	fd 4f       	sbci	r31, 0xFD	; 253
     bb8:	80 81       	ld	r24, Z
     bba:	8f 77       	andi	r24, 0x7F	; 127
     bbc:	80 83       	st	Z, r24
     bbe:	08 95       	ret
	else
		SP10281_DigitData[dig] |= 0b10000000;
     bc0:	fc 01       	movw	r30, r24
     bc2:	e0 5e       	subi	r30, 0xE0	; 224
     bc4:	fd 4f       	sbci	r31, 0xFD	; 253
     bc6:	80 81       	ld	r24, Z
     bc8:	80 68       	ori	r24, 0x80	; 128
     bca:	80 83       	st	Z, r24
     bcc:	08 95       	ret

00000bce <_Z16SP10281_WriteAllccchhh>:
}

void SP10281_WriteAll(char c2, char c1, char c0, unsigned char dot2, unsigned char dot1, unsigned char dot0)
{
     bce:	ef 92       	push	r14
     bd0:	0f 93       	push	r16
     bd2:	1f 93       	push	r17
     bd4:	cf 93       	push	r28
     bd6:	df 93       	push	r29
     bd8:	c8 2f       	mov	r28, r24
     bda:	16 2f       	mov	r17, r22
     bdc:	64 2f       	mov	r22, r20
     bde:	d2 2f       	mov	r29, r18
     be0:	4e 2d       	mov	r20, r14
	SP10281_WriteSingle(SP10281_DIGIT_0, c0, dot0);
     be2:	80 e0       	ldi	r24, 0x00	; 0
     be4:	0e 94 cd 05 	call	0xb9a	; 0xb9a <_Z19SP10281_WriteSinglehch>
	SP10281_WriteSingle(SP10281_DIGIT_1, c1, dot1);
     be8:	40 2f       	mov	r20, r16
     bea:	61 2f       	mov	r22, r17
     bec:	81 e0       	ldi	r24, 0x01	; 1
     bee:	0e 94 cd 05 	call	0xb9a	; 0xb9a <_Z19SP10281_WriteSinglehch>
	SP10281_WriteSingle(SP10281_DIGIT_2, c2, dot2);
     bf2:	4d 2f       	mov	r20, r29
     bf4:	6c 2f       	mov	r22, r28
     bf6:	82 e0       	ldi	r24, 0x02	; 2
     bf8:	0e 94 cd 05 	call	0xb9a	; 0xb9a <_Z19SP10281_WriteSinglehch>
}
     bfc:	df 91       	pop	r29
     bfe:	cf 91       	pop	r28
     c00:	1f 91       	pop	r17
     c02:	0f 91       	pop	r16
     c04:	ef 90       	pop	r14
     c06:	08 95       	ret

00000c08 <_Z19SP10281_WriteNumbers>:

/* Writes a number between -99 and 999 to the display */
void SP10281_WriteNumber(short num)
{
     c08:	cf 93       	push	r28
     c0a:	df 93       	push	r29
	short tmp = 0;
	
	if (num >= -99 && num <= 999)
     c0c:	9c 01       	movw	r18, r24
     c0e:	2d 59       	subi	r18, 0x9D	; 157
     c10:	3f 4f       	sbci	r19, 0xFF	; 255
     c12:	2b 34       	cpi	r18, 0x4B	; 75
     c14:	34 40       	sbci	r19, 0x04	; 4
     c16:	68 f5       	brcc	.+90     	; 0xc72 <_Z19SP10281_WriteNumbers+0x6a>
     c18:	ec 01       	movw	r28, r24
	{
		if (num < 0)
     c1a:	99 23       	and	r25, r25
     c1c:	54 f4       	brge	.+20     	; 0xc32 <_Z19SP10281_WriteNumbers+0x2a>
		{
			SP10281_WriteSingle(SP10281_DIGIT_2, '-', 0);
     c1e:	40 e0       	ldi	r20, 0x00	; 0
     c20:	6d e2       	ldi	r22, 0x2D	; 45
     c22:	82 e0       	ldi	r24, 0x02	; 2
     c24:	0e 94 cd 05 	call	0xb9a	; 0xb9a <_Z19SP10281_WriteSinglehch>
			num = -num;
     c28:	88 27       	eor	r24, r24
     c2a:	99 27       	eor	r25, r25
     c2c:	8c 1b       	sub	r24, r28
     c2e:	9d 0b       	sbc	r25, r29
     c30:	0e c0       	rjmp	.+28     	; 0xc4e <_Z19SP10281_WriteNumbers+0x46>
		}
		else
		{
			tmp = num / 100;
     c32:	64 e6       	ldi	r22, 0x64	; 100
     c34:	70 e0       	ldi	r23, 0x00	; 0
     c36:	0e 94 98 10 	call	0x2130	; 0x2130 <__divmodhi4>
     c3a:	d8 2f       	mov	r29, r24
     c3c:	c9 2f       	mov	r28, r25
			tmp += '0';
			SP10281_WriteSingle(SP10281_DIGIT_2, tmp, 0);
     c3e:	60 5d       	subi	r22, 0xD0	; 208
     c40:	7f 4f       	sbci	r23, 0xFF	; 255
     c42:	40 e0       	ldi	r20, 0x00	; 0
     c44:	82 e0       	ldi	r24, 0x02	; 2
     c46:	0e 94 cd 05 	call	0xb9a	; 0xb9a <_Z19SP10281_WriteSinglehch>
			num %= 100;
     c4a:	8d 2f       	mov	r24, r29
     c4c:	9c 2f       	mov	r25, r28
		}
		
		tmp = num / 10;
     c4e:	6a e0       	ldi	r22, 0x0A	; 10
     c50:	70 e0       	ldi	r23, 0x00	; 0
     c52:	0e 94 98 10 	call	0x2130	; 0x2130 <__divmodhi4>
     c56:	ec 01       	movw	r28, r24
		tmp += '0';
		SP10281_WriteSingle(SP10281_DIGIT_1, tmp, 0);
     c58:	60 5d       	subi	r22, 0xD0	; 208
     c5a:	7f 4f       	sbci	r23, 0xFF	; 255
     c5c:	40 e0       	ldi	r20, 0x00	; 0
     c5e:	81 e0       	ldi	r24, 0x01	; 1
     c60:	0e 94 cd 05 	call	0xb9a	; 0xb9a <_Z19SP10281_WriteSinglehch>
		num %= 10;
		
		tmp = num + '0';
		SP10281_WriteSingle(SP10281_DIGIT_0, tmp, 0);
     c64:	be 01       	movw	r22, r28
     c66:	60 5d       	subi	r22, 0xD0	; 208
     c68:	7f 4f       	sbci	r23, 0xFF	; 255
     c6a:	40 e0       	ldi	r20, 0x00	; 0
     c6c:	80 e0       	ldi	r24, 0x00	; 0
     c6e:	0e 94 cd 05 	call	0xb9a	; 0xb9a <_Z19SP10281_WriteSinglehch>
	}
}
     c72:	df 91       	pop	r29
     c74:	cf 91       	pop	r28
     c76:	08 95       	ret

00000c78 <_Z12SP10281_Initv>:
};

void SP10281_Init()
{
	/* Setup GPIOs */
	GPIO_SP10281_DIGIT_DDR |= GPIO_SP10281_DIGIT_MASK;	// Set GPIO output pins for digit control
     c78:	84 b1       	in	r24, 0x04	; 4
     c7a:	80 6e       	ori	r24, 0xE0	; 224
     c7c:	84 b9       	out	0x04, r24	; 4
	GPIO_SP10281_SEGMENT_DDR = 0xFF;					// Set GPIO output pins for individual segments
     c7e:	8f ef       	ldi	r24, 0xFF	; 255
     c80:	81 b9       	out	0x01, r24	; 1
	
	SP10281_WriteNumber(123);
     c82:	8b e7       	ldi	r24, 0x7B	; 123
     c84:	90 e0       	ldi	r25, 0x00	; 0
     c86:	0e 94 04 06 	call	0xc08	; 0xc08 <_Z19SP10281_WriteNumbers>
     c8a:	08 95       	ret

00000c8c <_Z30System_HandleTempSelectTimeoutv>:
			{
				CtrlSwitchRelays[i].Clear();
			}
		}
	}
}
     c8c:	ef 92       	push	r14
     c8e:	0f 93       	push	r16
     c90:	80 91 53 02 	lds	r24, 0x0253	; 0x800253 <SystemState>
     c94:	84 30       	cpi	r24, 0x04	; 4
     c96:	71 f0       	breq	.+28     	; 0xcb4 <_Z30System_HandleTempSelectTimeoutv+0x28>
     c98:	18 f4       	brcc	.+6      	; 0xca0 <_Z30System_HandleTempSelectTimeoutv+0x14>
     c9a:	81 30       	cpi	r24, 0x01	; 1
     c9c:	31 f0       	breq	.+12     	; 0xcaa <_Z30System_HandleTempSelectTimeoutv+0x1e>
     c9e:	4d c0       	rjmp	.+154    	; 0xd3a <_Z30System_HandleTempSelectTimeoutv+0xae>
     ca0:	86 30       	cpi	r24, 0x06	; 6
     ca2:	e9 f0       	breq	.+58     	; 0xcde <_Z30System_HandleTempSelectTimeoutv+0x52>
     ca4:	80 31       	cpi	r24, 0x10	; 16
     ca6:	99 f1       	breq	.+102    	; 0xd0e <_Z30System_HandleTempSelectTimeoutv+0x82>
     ca8:	48 c0       	rjmp	.+144    	; 0xd3a <_Z30System_HandleTempSelectTimeoutv+0xae>
     caa:	80 91 4a 02 	lds	r24, 0x024A	; 0x80024a <System_MidiChannel>
     cae:	80 93 4c 02 	sts	0x024C, r24	; 0x80024c <TempSelectMidiChannel>
     cb2:	43 c0       	rjmp	.+134    	; 0xd3a <_Z30System_HandleTempSelectTimeoutv+0xae>
     cb4:	0e 94 5c 05 	call	0xab8	; 0xab8 <_Z23RotaryEncoder_IsPressedv>
     cb8:	88 23       	and	r24, r24
     cba:	29 f0       	breq	.+10     	; 0xcc6 <_Z30System_HandleTempSelectTimeoutv+0x3a>
     cbc:	80 91 4f 02 	lds	r24, 0x024F	; 0x80024f <TempSelectPreset>
     cc0:	80 93 51 02 	sts	0x0251, r24	; 0x800251 <ActivePreset>
     cc4:	08 c0       	rjmp	.+16     	; 0xcd6 <_Z30System_HandleTempSelectTimeoutv+0x4a>
     cc6:	80 91 51 02 	lds	r24, 0x0251	; 0x800251 <ActivePreset>
     cca:	80 93 4f 02 	sts	0x024F, r24	; 0x80024f <TempSelectPreset>
     cce:	80 91 51 02 	lds	r24, 0x0251	; 0x800251 <ActivePreset>
     cd2:	80 93 4e 02 	sts	0x024E, r24	; 0x80024e <LastTempSelectPreset>
     cd6:	83 e0       	ldi	r24, 0x03	; 3
     cd8:	80 93 53 02 	sts	0x0253, r24	; 0x800253 <SystemState>
     cdc:	2e c0       	rjmp	.+92     	; 0xd3a <_Z30System_HandleTempSelectTimeoutv+0xae>
     cde:	0e 94 5c 05 	call	0xab8	; 0xab8 <_Z23RotaryEncoder_IsPressedv>
     ce2:	88 23       	and	r24, r24
     ce4:	41 f0       	breq	.+16     	; 0xcf6 <_Z30System_HandleTempSelectTimeoutv+0x6a>
     ce6:	80 91 4f 02 	lds	r24, 0x024F	; 0x80024f <TempSelectPreset>
     cea:	80 93 51 02 	sts	0x0251, r24	; 0x800251 <ActivePreset>
     cee:	83 e0       	ldi	r24, 0x03	; 3
     cf0:	80 93 53 02 	sts	0x0253, r24	; 0x800253 <SystemState>
     cf4:	22 c0       	rjmp	.+68     	; 0xd3a <_Z30System_HandleTempSelectTimeoutv+0xae>
     cf6:	80 91 51 02 	lds	r24, 0x0251	; 0x800251 <ActivePreset>
     cfa:	80 93 4f 02 	sts	0x024F, r24	; 0x80024f <TempSelectPreset>
     cfe:	80 91 51 02 	lds	r24, 0x0251	; 0x800251 <ActivePreset>
     d02:	80 93 4e 02 	sts	0x024E, r24	; 0x80024e <LastTempSelectPreset>
     d06:	85 e0       	ldi	r24, 0x05	; 5
     d08:	80 93 53 02 	sts	0x0253, r24	; 0x800253 <SystemState>
     d0c:	16 c0       	rjmp	.+44     	; 0xd3a <_Z30System_HandleTempSelectTimeoutv+0xae>
     d0e:	80 91 45 02 	lds	r24, 0x0245	; 0x800245 <LastTempSelectMidiPC>
     d12:	80 93 46 02 	sts	0x0246, r24	; 0x800246 <TempSelectMidiPC>
     d16:	80 91 46 02 	lds	r24, 0x0246	; 0x800246 <TempSelectMidiPC>
     d1a:	8f 3f       	cpi	r24, 0xFF	; 255
     d1c:	49 f4       	brne	.+18     	; 0xd30 <_Z30System_HandleTempSelectTimeoutv+0xa4>
     d1e:	e1 2c       	mov	r14, r1
     d20:	00 e0       	ldi	r16, 0x00	; 0
     d22:	20 e0       	ldi	r18, 0x00	; 0
     d24:	46 e6       	ldi	r20, 0x66	; 102
     d26:	66 e6       	ldi	r22, 0x66	; 102
     d28:	8f e6       	ldi	r24, 0x6F	; 111
     d2a:	0e 94 e7 05 	call	0xbce	; 0xbce <_Z16SP10281_WriteAllccchhh>
     d2e:	05 c0       	rjmp	.+10     	; 0xd3a <_Z30System_HandleTempSelectTimeoutv+0xae>
     d30:	80 91 46 02 	lds	r24, 0x0246	; 0x800246 <TempSelectMidiPC>
     d34:	90 e0       	ldi	r25, 0x00	; 0
     d36:	0e 94 04 06 	call	0xc08	; 0xc08 <_Z19SP10281_WriteNumbers>
     d3a:	0f 91       	pop	r16
     d3c:	ef 90       	pop	r14
     d3e:	08 95       	ret

00000d40 <_Z26System_HandleMarkSelectionv>:
     d40:	cf 93       	push	r28
     d42:	df 93       	push	r29
     d44:	80 91 53 02 	lds	r24, 0x0253	; 0x800253 <SystemState>
     d48:	8c 30       	cpi	r24, 0x0C	; 12
     d4a:	71 f4       	brne	.+28     	; 0xd68 <_Z26System_HandleMarkSelectionv+0x28>
     d4c:	c9 e8       	ldi	r28, 0x89	; 137
     d4e:	d1 e0       	ldi	r29, 0x01	; 1
     d50:	48 81       	ld	r20, Y
     d52:	64 e1       	ldi	r22, 0x14	; 20
     d54:	80 e0       	ldi	r24, 0x00	; 0
     d56:	0e 94 64 01 	call	0x2c8	; 0x2c8 <_Z17MCP23017_WriteReghhh>
     d5a:	49 81       	ldd	r20, Y+1	; 0x01
     d5c:	4f 70       	andi	r20, 0x0F	; 15
     d5e:	40 64       	ori	r20, 0x40	; 64
     d60:	65 e1       	ldi	r22, 0x15	; 21
     d62:	80 e0       	ldi	r24, 0x00	; 0
     d64:	0e 94 64 01 	call	0x2c8	; 0x2c8 <_Z17MCP23017_WriteReghhh>
     d68:	df 91       	pop	r29
     d6a:	cf 91       	pop	r28
     d6c:	08 95       	ret

00000d6e <_Z25System_HandlePedalCommand3CMDhPh>:
     d6e:	81 3b       	cpi	r24, 0xB1	; 177
     d70:	81 f5       	brne	.+96     	; 0xdd2 <_Z25System_HandlePedalCommand3CMDhPh+0x64>
     d72:	80 91 53 02 	lds	r24, 0x0253	; 0x800253 <SystemState>
     d76:	84 30       	cpi	r24, 0x04	; 4
     d78:	a9 f4       	brne	.+42     	; 0xda4 <_Z25System_HandlePedalCommand3CMDhPh+0x36>
     d7a:	fa 01       	movw	r30, r20
     d7c:	80 81       	ld	r24, Z
     d7e:	0e 94 8d 10 	call	0x211a	; 0x211a <_Z12Util_Bit2Inth>
     d82:	81 50       	subi	r24, 0x01	; 1
     d84:	90 91 51 02 	lds	r25, 0x0251	; 0x800251 <ActivePreset>
     d88:	89 13       	cpse	r24, r25
     d8a:	08 c0       	rjmp	.+16     	; 0xd9c <_Z25System_HandlePedalCommand3CMDhPh+0x2e>
     d8c:	90 91 51 02 	lds	r25, 0x0251	; 0x800251 <ActivePreset>
     d90:	81 e0       	ldi	r24, 0x01	; 1
     d92:	89 27       	eor	r24, r25
     d94:	80 93 50 02 	sts	0x0250, r24	; 0x800250 <LastActivePreset>
     d98:	8c ea       	ldi	r24, 0xAC	; 172
     d9a:	08 95       	ret
     d9c:	80 93 51 02 	sts	0x0251, r24	; 0x800251 <ActivePreset>
     da0:	8c ea       	ldi	r24, 0xAC	; 172
     da2:	08 95       	ret
     da4:	80 91 53 02 	lds	r24, 0x0253	; 0x800253 <SystemState>
     da8:	86 30       	cpi	r24, 0x06	; 6
     daa:	49 f4       	brne	.+18     	; 0xdbe <_Z25System_HandlePedalCommand3CMDhPh+0x50>
     dac:	e9 e8       	ldi	r30, 0x89	; 137
     dae:	f1 e0       	ldi	r31, 0x01	; 1
     db0:	90 81       	ld	r25, Z
     db2:	da 01       	movw	r26, r20
     db4:	8c 91       	ld	r24, X
     db6:	89 27       	eor	r24, r25
     db8:	80 83       	st	Z, r24
     dba:	8c ea       	ldi	r24, 0xAC	; 172
     dbc:	08 95       	ret
     dbe:	80 91 53 02 	lds	r24, 0x0253	; 0x800253 <SystemState>
     dc2:	88 30       	cpi	r24, 0x08	; 8
     dc4:	09 f0       	breq	.+2      	; 0xdc8 <_Z25System_HandlePedalCommand3CMDhPh+0x5a>
     dc6:	4b c0       	rjmp	.+150    	; 0xe5e <_Z25System_HandlePedalCommand3CMDhPh+0xf0>
     dc8:	82 e0       	ldi	r24, 0x02	; 2
     dca:	80 93 53 02 	sts	0x0253, r24	; 0x800253 <SystemState>
     dce:	8c ea       	ldi	r24, 0xAC	; 172
     dd0:	08 95       	ret
     dd2:	82 3b       	cpi	r24, 0xB2	; 178
     dd4:	61 f5       	brne	.+88     	; 0xe2e <_Z25System_HandlePedalCommand3CMDhPh+0xc0>
     dd6:	80 91 53 02 	lds	r24, 0x0253	; 0x800253 <SystemState>
     dda:	84 30       	cpi	r24, 0x04	; 4
     ddc:	41 f4       	brne	.+16     	; 0xdee <_Z25System_HandlePedalCommand3CMDhPh+0x80>
     dde:	81 e0       	ldi	r24, 0x01	; 1
     de0:	80 93 4d 02 	sts	0x024D, r24	; 0x80024d <SystemRunMode>
     de4:	82 e0       	ldi	r24, 0x02	; 2
     de6:	80 93 53 02 	sts	0x0253, r24	; 0x800253 <SystemState>
     dea:	8c ea       	ldi	r24, 0xAC	; 172
     dec:	08 95       	ret
     dee:	80 91 53 02 	lds	r24, 0x0253	; 0x800253 <SystemState>
     df2:	86 30       	cpi	r24, 0x06	; 6
     df4:	99 f4       	brne	.+38     	; 0xe1c <_Z25System_HandlePedalCommand3CMDhPh+0xae>
     df6:	fa 01       	movw	r30, r20
     df8:	80 81       	ld	r24, Z
     dfa:	98 2f       	mov	r25, r24
     dfc:	9f 70       	andi	r25, 0x0F	; 15
     dfe:	39 f0       	breq	.+14     	; 0xe0e <_Z25System_HandlePedalCommand3CMDhPh+0xa0>
     e00:	e9 e8       	ldi	r30, 0x89	; 137
     e02:	f1 e0       	ldi	r31, 0x01	; 1
     e04:	91 81       	ldd	r25, Z+1	; 0x01
     e06:	89 27       	eor	r24, r25
     e08:	81 83       	std	Z+1, r24	; 0x01
     e0a:	8c ea       	ldi	r24, 0xAC	; 172
     e0c:	08 95       	ret
     e0e:	10 92 4d 02 	sts	0x024D, r1	; 0x80024d <SystemRunMode>
     e12:	82 e0       	ldi	r24, 0x02	; 2
     e14:	80 93 53 02 	sts	0x0253, r24	; 0x800253 <SystemState>
     e18:	8c ea       	ldi	r24, 0xAC	; 172
     e1a:	08 95       	ret
     e1c:	80 91 53 02 	lds	r24, 0x0253	; 0x800253 <SystemState>
     e20:	88 30       	cpi	r24, 0x08	; 8
     e22:	f9 f4       	brne	.+62     	; 0xe62 <_Z25System_HandlePedalCommand3CMDhPh+0xf4>
     e24:	82 e0       	ldi	r24, 0x02	; 2
     e26:	80 93 53 02 	sts	0x0253, r24	; 0x800253 <SystemState>
     e2a:	8c ea       	ldi	r24, 0xAC	; 172
     e2c:	08 95       	ret
     e2e:	84 3b       	cpi	r24, 0xB4	; 180
     e30:	d1 f4       	brne	.+52     	; 0xe66 <_Z25System_HandlePedalCommand3CMDhPh+0xf8>
     e32:	80 91 53 02 	lds	r24, 0x0253	; 0x800253 <SystemState>
     e36:	84 30       	cpi	r24, 0x04	; 4
     e38:	21 f0       	breq	.+8      	; 0xe42 <_Z25System_HandlePedalCommand3CMDhPh+0xd4>
     e3a:	80 91 53 02 	lds	r24, 0x0253	; 0x800253 <SystemState>
     e3e:	86 30       	cpi	r24, 0x06	; 6
     e40:	29 f4       	brne	.+10     	; 0xe4c <_Z25System_HandlePedalCommand3CMDhPh+0xde>
     e42:	88 e0       	ldi	r24, 0x08	; 8
     e44:	80 93 53 02 	sts	0x0253, r24	; 0x800253 <SystemState>
     e48:	8c ea       	ldi	r24, 0xAC	; 172
     e4a:	08 95       	ret
     e4c:	80 91 53 02 	lds	r24, 0x0253	; 0x800253 <SystemState>
     e50:	88 30       	cpi	r24, 0x08	; 8
     e52:	59 f4       	brne	.+22     	; 0xe6a <_Z25System_HandlePedalCommand3CMDhPh+0xfc>
     e54:	82 e0       	ldi	r24, 0x02	; 2
     e56:	80 93 53 02 	sts	0x0253, r24	; 0x800253 <SystemState>
     e5a:	8c ea       	ldi	r24, 0xAC	; 172
     e5c:	08 95       	ret
     e5e:	8c ea       	ldi	r24, 0xAC	; 172
     e60:	08 95       	ret
     e62:	8c ea       	ldi	r24, 0xAC	; 172
     e64:	08 95       	ret
     e66:	8a e2       	ldi	r24, 0x2A	; 42
     e68:	08 95       	ret
     e6a:	8c ea       	ldi	r24, 0xAC	; 172
     e6c:	08 95       	ret

00000e6e <_Z30System_HandleMIDIProgramChangev>:
     e6e:	e5 e2       	ldi	r30, 0x25	; 37
     e70:	f2 e0       	ldi	r31, 0x02	; 2
     e72:	80 e0       	ldi	r24, 0x00	; 0
     e74:	90 91 99 01 	lds	r25, 0x0199	; 0x800199 <MIDI_ReceivedProgram>
     e78:	22 81       	ldd	r18, Z+2	; 0x02
     e7a:	29 13       	cpse	r18, r25
     e7c:	02 c0       	rjmp	.+4      	; 0xe82 <_Z30System_HandleMIDIProgramChangev+0x14>
     e7e:	80 93 51 02 	sts	0x0251, r24	; 0x800251 <ActivePreset>
     e82:	8f 5f       	subi	r24, 0xFF	; 255
     e84:	34 96       	adiw	r30, 0x04	; 4
     e86:	88 30       	cpi	r24, 0x08	; 8
     e88:	a9 f7       	brne	.-22     	; 0xe74 <_Z30System_HandleMIDIProgramChangev+0x6>
     e8a:	08 95       	ret

00000e8c <_Z20System_UpdateUI_LEDsv>:
     e8c:	ef 92       	push	r14
     e8e:	ff 92       	push	r15
     e90:	0f 93       	push	r16
     e92:	1f 93       	push	r17
     e94:	cf 93       	push	r28
     e96:	df 93       	push	r29
     e98:	04 e2       	ldi	r16, 0x24	; 36
     e9a:	13 e0       	ldi	r17, 0x03	; 3
     e9c:	c0 e0       	ldi	r28, 0x00	; 0
     e9e:	d0 e0       	ldi	r29, 0x00	; 0
     ea0:	0f 2e       	mov	r0, r31
     ea2:	f9 e8       	ldi	r31, 0x89	; 137
     ea4:	ef 2e       	mov	r14, r31
     ea6:	f1 e0       	ldi	r31, 0x01	; 1
     ea8:	ff 2e       	mov	r15, r31
     eaa:	f0 2d       	mov	r31, r0
     eac:	f7 01       	movw	r30, r14
     eae:	80 81       	ld	r24, Z
     eb0:	90 e0       	ldi	r25, 0x00	; 0
     eb2:	0c 2e       	mov	r0, r28
     eb4:	02 c0       	rjmp	.+4      	; 0xeba <_Z20System_UpdateUI_LEDsv+0x2e>
     eb6:	95 95       	asr	r25
     eb8:	87 95       	ror	r24
     eba:	0a 94       	dec	r0
     ebc:	e2 f7       	brpl	.-8      	; 0xeb6 <_Z20System_UpdateUI_LEDsv+0x2a>
     ebe:	80 ff       	sbrs	r24, 0
     ec0:	09 c0       	rjmp	.+18     	; 0xed4 <_Z20System_UpdateUI_LEDsv+0x48>
     ec2:	c8 01       	movw	r24, r16
     ec4:	0e 94 8f 01 	call	0x31e	; 0x31e <_ZN10MCP_Output8getStateEv>
     ec8:	81 30       	cpi	r24, 0x01	; 1
     eca:	61 f0       	breq	.+24     	; 0xee4 <_Z20System_UpdateUI_LEDsv+0x58>
     ecc:	c8 01       	movw	r24, r16
     ece:	0e 94 92 01 	call	0x324	; 0x324 <_ZN10MCP_Output3SetEv>
     ed2:	08 c0       	rjmp	.+16     	; 0xee4 <_Z20System_UpdateUI_LEDsv+0x58>
     ed4:	c8 01       	movw	r24, r16
     ed6:	0e 94 8f 01 	call	0x31e	; 0x31e <_ZN10MCP_Output8getStateEv>
     eda:	88 23       	and	r24, r24
     edc:	19 f0       	breq	.+6      	; 0xee4 <_Z20System_UpdateUI_LEDsv+0x58>
     ede:	c8 01       	movw	r24, r16
     ee0:	0e 94 cf 01 	call	0x39e	; 0x39e <_ZN10MCP_Output5ClearEv>
     ee4:	21 96       	adiw	r28, 0x01	; 1
     ee6:	0c 5f       	subi	r16, 0xFC	; 252
     ee8:	1f 4f       	sbci	r17, 0xFF	; 255
     eea:	c8 30       	cpi	r28, 0x08	; 8
     eec:	d1 05       	cpc	r29, r1
     eee:	f1 f6       	brne	.-68     	; 0xeac <_Z20System_UpdateUI_LEDsv+0x20>
     ef0:	04 e1       	ldi	r16, 0x14	; 20
     ef2:	13 e0       	ldi	r17, 0x03	; 3
     ef4:	c0 e0       	ldi	r28, 0x00	; 0
     ef6:	d0 e0       	ldi	r29, 0x00	; 0
     ef8:	0f 2e       	mov	r0, r31
     efa:	f9 e8       	ldi	r31, 0x89	; 137
     efc:	ef 2e       	mov	r14, r31
     efe:	f1 e0       	ldi	r31, 0x01	; 1
     f00:	ff 2e       	mov	r15, r31
     f02:	f0 2d       	mov	r31, r0
     f04:	f7 01       	movw	r30, r14
     f06:	81 81       	ldd	r24, Z+1	; 0x01
     f08:	90 e0       	ldi	r25, 0x00	; 0
     f0a:	0c 2e       	mov	r0, r28
     f0c:	02 c0       	rjmp	.+4      	; 0xf12 <_Z20System_UpdateUI_LEDsv+0x86>
     f0e:	95 95       	asr	r25
     f10:	87 95       	ror	r24
     f12:	0a 94       	dec	r0
     f14:	e2 f7       	brpl	.-8      	; 0xf0e <_Z20System_UpdateUI_LEDsv+0x82>
     f16:	80 ff       	sbrs	r24, 0
     f18:	09 c0       	rjmp	.+18     	; 0xf2c <_Z20System_UpdateUI_LEDsv+0xa0>
     f1a:	c8 01       	movw	r24, r16
     f1c:	0e 94 8f 01 	call	0x31e	; 0x31e <_ZN10MCP_Output8getStateEv>
     f20:	81 30       	cpi	r24, 0x01	; 1
     f22:	61 f0       	breq	.+24     	; 0xf3c <_Z20System_UpdateUI_LEDsv+0xb0>
     f24:	c8 01       	movw	r24, r16
     f26:	0e 94 92 01 	call	0x324	; 0x324 <_ZN10MCP_Output3SetEv>
     f2a:	08 c0       	rjmp	.+16     	; 0xf3c <_Z20System_UpdateUI_LEDsv+0xb0>
     f2c:	c8 01       	movw	r24, r16
     f2e:	0e 94 8f 01 	call	0x31e	; 0x31e <_ZN10MCP_Output8getStateEv>
     f32:	88 23       	and	r24, r24
     f34:	19 f0       	breq	.+6      	; 0xf3c <_Z20System_UpdateUI_LEDsv+0xb0>
     f36:	c8 01       	movw	r24, r16
     f38:	0e 94 cf 01 	call	0x39e	; 0x39e <_ZN10MCP_Output5ClearEv>
     f3c:	21 96       	adiw	r28, 0x01	; 1
     f3e:	0c 5f       	subi	r16, 0xFC	; 252
     f40:	1f 4f       	sbci	r17, 0xFF	; 255
     f42:	c4 30       	cpi	r28, 0x04	; 4
     f44:	d1 05       	cpc	r29, r1
     f46:	f1 f6       	brne	.-68     	; 0xf04 <_Z20System_UpdateUI_LEDsv+0x78>
     f48:	df 91       	pop	r29
     f4a:	cf 91       	pop	r28
     f4c:	1f 91       	pop	r17
     f4e:	0f 91       	pop	r16
     f50:	ff 90       	pop	r15
     f52:	ef 90       	pop	r14
     f54:	08 95       	ret

00000f56 <_Z31System_HandleRotaryEncoderInputv>:
     f56:	ef 92       	push	r14
     f58:	0f 93       	push	r16
     f5a:	e0 91 53 02 	lds	r30, 0x0253	; 0x800253 <SystemState>
     f5e:	8e 2f       	mov	r24, r30
     f60:	90 e0       	ldi	r25, 0x00	; 0
     f62:	fc 01       	movw	r30, r24
     f64:	31 97       	sbiw	r30, 0x01	; 1
     f66:	e0 31       	cpi	r30, 0x10	; 16
     f68:	f1 05       	cpc	r31, r1
     f6a:	08 f0       	brcs	.+2      	; 0xf6e <_Z31System_HandleRotaryEncoderInputv+0x18>
     f6c:	0a c2       	rjmp	.+1044   	; 0x1382 <_Z31System_HandleRotaryEncoderInputv+0x42c>
     f6e:	e2 5c       	subi	r30, 0xC2	; 194
     f70:	ff 4f       	sbci	r31, 0xFF	; 255
     f72:	0c 94 ce 10 	jmp	0x219c	; 0x219c <__tablejump2__>
     f76:	80 91 19 02 	lds	r24, 0x0219	; 0x800219 <RotEnc_State>
     f7a:	83 30       	cpi	r24, 0x03	; 3
     f7c:	29 f4       	brne	.+10     	; 0xf88 <_Z31System_HandleRotaryEncoderInputv+0x32>
     f7e:	80 91 4c 02 	lds	r24, 0x024C	; 0x80024c <TempSelectMidiChannel>
     f82:	80 93 4a 02 	sts	0x024A, r24	; 0x80024a <System_MidiChannel>
     f86:	fd c1       	rjmp	.+1018   	; 0x1382 <_Z31System_HandleRotaryEncoderInputv+0x42c>
     f88:	80 91 19 02 	lds	r24, 0x0219	; 0x800219 <RotEnc_State>
     f8c:	85 30       	cpi	r24, 0x05	; 5
     f8e:	71 f4       	brne	.+28     	; 0xfac <_Z31System_HandleRotaryEncoderInputv+0x56>
     f90:	80 91 4c 02 	lds	r24, 0x024C	; 0x80024c <TempSelectMidiChannel>
     f94:	80 93 4a 02 	sts	0x024A, r24	; 0x80024a <System_MidiChannel>
     f98:	60 91 4a 02 	lds	r22, 0x024A	; 0x80024a <System_MidiChannel>
     f9c:	80 e0       	ldi	r24, 0x00	; 0
     f9e:	90 e0       	ldi	r25, 0x00	; 0
     fa0:	0e 94 24 11 	call	0x2248	; 0x2248 <eeprom_write_byte>
     fa4:	82 e0       	ldi	r24, 0x02	; 2
     fa6:	80 93 53 02 	sts	0x0253, r24	; 0x800253 <SystemState>
     faa:	eb c1       	rjmp	.+982    	; 0x1382 <_Z31System_HandleRotaryEncoderInputv+0x42c>
     fac:	80 91 19 02 	lds	r24, 0x0219	; 0x800219 <RotEnc_State>
     fb0:	81 30       	cpi	r24, 0x01	; 1
     fb2:	59 f4       	brne	.+22     	; 0xfca <_Z31System_HandleRotaryEncoderInputv+0x74>
     fb4:	80 91 4c 02 	lds	r24, 0x024C	; 0x80024c <TempSelectMidiChannel>
     fb8:	80 31       	cpi	r24, 0x10	; 16
     fba:	08 f0       	brcs	.+2      	; 0xfbe <_Z31System_HandleRotaryEncoderInputv+0x68>
     fbc:	e2 c1       	rjmp	.+964    	; 0x1382 <_Z31System_HandleRotaryEncoderInputv+0x42c>
     fbe:	80 91 4c 02 	lds	r24, 0x024C	; 0x80024c <TempSelectMidiChannel>
     fc2:	8f 5f       	subi	r24, 0xFF	; 255
     fc4:	80 93 4c 02 	sts	0x024C, r24	; 0x80024c <TempSelectMidiChannel>
     fc8:	dc c1       	rjmp	.+952    	; 0x1382 <_Z31System_HandleRotaryEncoderInputv+0x42c>
     fca:	80 91 19 02 	lds	r24, 0x0219	; 0x800219 <RotEnc_State>
     fce:	82 30       	cpi	r24, 0x02	; 2
     fd0:	09 f0       	breq	.+2      	; 0xfd4 <_Z31System_HandleRotaryEncoderInputv+0x7e>
     fd2:	d7 c1       	rjmp	.+942    	; 0x1382 <_Z31System_HandleRotaryEncoderInputv+0x42c>
     fd4:	80 91 4c 02 	lds	r24, 0x024C	; 0x80024c <TempSelectMidiChannel>
     fd8:	88 23       	and	r24, r24
     fda:	09 f4       	brne	.+2      	; 0xfde <_Z31System_HandleRotaryEncoderInputv+0x88>
     fdc:	d2 c1       	rjmp	.+932    	; 0x1382 <_Z31System_HandleRotaryEncoderInputv+0x42c>
     fde:	80 91 4c 02 	lds	r24, 0x024C	; 0x80024c <TempSelectMidiChannel>
     fe2:	81 50       	subi	r24, 0x01	; 1
     fe4:	80 93 4c 02 	sts	0x024C, r24	; 0x80024c <TempSelectMidiChannel>
     fe8:	cc c1       	rjmp	.+920    	; 0x1382 <_Z31System_HandleRotaryEncoderInputv+0x42c>
     fea:	80 91 19 02 	lds	r24, 0x0219	; 0x800219 <RotEnc_State>
     fee:	83 30       	cpi	r24, 0x03	; 3
     ff0:	41 f4       	brne	.+16     	; 0x1002 <_Z31System_HandleRotaryEncoderInputv+0xac>
     ff2:	80 91 4f 02 	lds	r24, 0x024F	; 0x80024f <TempSelectPreset>
     ff6:	80 93 51 02 	sts	0x0251, r24	; 0x800251 <ActivePreset>
     ffa:	83 e0       	ldi	r24, 0x03	; 3
     ffc:	80 93 53 02 	sts	0x0253, r24	; 0x800253 <SystemState>
    1000:	c0 c1       	rjmp	.+896    	; 0x1382 <_Z31System_HandleRotaryEncoderInputv+0x42c>
    1002:	80 91 19 02 	lds	r24, 0x0219	; 0x800219 <RotEnc_State>
    1006:	85 30       	cpi	r24, 0x05	; 5
    1008:	41 f4       	brne	.+16     	; 0x101a <_Z31System_HandleRotaryEncoderInputv+0xc4>
    100a:	80 91 4f 02 	lds	r24, 0x024F	; 0x80024f <TempSelectPreset>
    100e:	80 93 51 02 	sts	0x0251, r24	; 0x800251 <ActivePreset>
    1012:	89 e0       	ldi	r24, 0x09	; 9
    1014:	80 93 53 02 	sts	0x0253, r24	; 0x800253 <SystemState>
    1018:	b4 c1       	rjmp	.+872    	; 0x1382 <_Z31System_HandleRotaryEncoderInputv+0x42c>
    101a:	80 91 19 02 	lds	r24, 0x0219	; 0x800219 <RotEnc_State>
    101e:	81 30       	cpi	r24, 0x01	; 1
    1020:	81 f4       	brne	.+32     	; 0x1042 <_Z31System_HandleRotaryEncoderInputv+0xec>
    1022:	80 91 4f 02 	lds	r24, 0x024F	; 0x80024f <TempSelectPreset>
    1026:	87 30       	cpi	r24, 0x07	; 7
    1028:	28 f4       	brcc	.+10     	; 0x1034 <_Z31System_HandleRotaryEncoderInputv+0xde>
    102a:	80 91 4f 02 	lds	r24, 0x024F	; 0x80024f <TempSelectPreset>
    102e:	8f 5f       	subi	r24, 0xFF	; 255
    1030:	80 93 4f 02 	sts	0x024F, r24	; 0x80024f <TempSelectPreset>
    1034:	81 e0       	ldi	r24, 0x01	; 1
    1036:	90 e0       	ldi	r25, 0x00	; 0
    1038:	90 93 59 02 	sts	0x0259, r25	; 0x800259 <System_TempSelectOvfCnt+0x1>
    103c:	80 93 58 02 	sts	0x0258, r24	; 0x800258 <System_TempSelectOvfCnt>
    1040:	a0 c1       	rjmp	.+832    	; 0x1382 <_Z31System_HandleRotaryEncoderInputv+0x42c>
    1042:	80 91 19 02 	lds	r24, 0x0219	; 0x800219 <RotEnc_State>
    1046:	82 30       	cpi	r24, 0x02	; 2
    1048:	09 f0       	breq	.+2      	; 0x104c <_Z31System_HandleRotaryEncoderInputv+0xf6>
    104a:	9b c1       	rjmp	.+822    	; 0x1382 <_Z31System_HandleRotaryEncoderInputv+0x42c>
    104c:	80 91 4f 02 	lds	r24, 0x024F	; 0x80024f <TempSelectPreset>
    1050:	88 23       	and	r24, r24
    1052:	29 f0       	breq	.+10     	; 0x105e <_Z31System_HandleRotaryEncoderInputv+0x108>
    1054:	80 91 4f 02 	lds	r24, 0x024F	; 0x80024f <TempSelectPreset>
    1058:	81 50       	subi	r24, 0x01	; 1
    105a:	80 93 4f 02 	sts	0x024F, r24	; 0x80024f <TempSelectPreset>
    105e:	81 e0       	ldi	r24, 0x01	; 1
    1060:	90 e0       	ldi	r25, 0x00	; 0
    1062:	90 93 59 02 	sts	0x0259, r25	; 0x800259 <System_TempSelectOvfCnt+0x1>
    1066:	80 93 58 02 	sts	0x0258, r24	; 0x800258 <System_TempSelectOvfCnt>
    106a:	8b c1       	rjmp	.+790    	; 0x1382 <_Z31System_HandleRotaryEncoderInputv+0x42c>
    106c:	80 91 19 02 	lds	r24, 0x0219	; 0x800219 <RotEnc_State>
    1070:	83 30       	cpi	r24, 0x03	; 3
    1072:	c9 f4       	brne	.+50     	; 0x10a6 <_Z31System_HandleRotaryEncoderInputv+0x150>
    1074:	80 91 49 02 	lds	r24, 0x0249	; 0x800249 <SystemUIMode>
    1078:	81 11       	cpse	r24, r1
    107a:	04 c0       	rjmp	.+8      	; 0x1084 <_Z31System_HandleRotaryEncoderInputv+0x12e>
    107c:	82 e0       	ldi	r24, 0x02	; 2
    107e:	80 93 53 02 	sts	0x0253, r24	; 0x800253 <SystemState>
    1082:	7f c1       	rjmp	.+766    	; 0x1382 <_Z31System_HandleRotaryEncoderInputv+0x42c>
    1084:	80 91 49 02 	lds	r24, 0x0249	; 0x800249 <SystemUIMode>
    1088:	81 30       	cpi	r24, 0x01	; 1
    108a:	21 f4       	brne	.+8      	; 0x1094 <_Z31System_HandleRotaryEncoderInputv+0x13e>
    108c:	8b e0       	ldi	r24, 0x0B	; 11
    108e:	80 93 53 02 	sts	0x0253, r24	; 0x800253 <SystemState>
    1092:	77 c1       	rjmp	.+750    	; 0x1382 <_Z31System_HandleRotaryEncoderInputv+0x42c>
    1094:	80 91 49 02 	lds	r24, 0x0249	; 0x800249 <SystemUIMode>
    1098:	82 30       	cpi	r24, 0x02	; 2
    109a:	09 f0       	breq	.+2      	; 0x109e <_Z31System_HandleRotaryEncoderInputv+0x148>
    109c:	72 c1       	rjmp	.+740    	; 0x1382 <_Z31System_HandleRotaryEncoderInputv+0x42c>
    109e:	8d e0       	ldi	r24, 0x0D	; 13
    10a0:	80 93 53 02 	sts	0x0253, r24	; 0x800253 <SystemState>
    10a4:	6e c1       	rjmp	.+732    	; 0x1382 <_Z31System_HandleRotaryEncoderInputv+0x42c>
    10a6:	80 91 19 02 	lds	r24, 0x0219	; 0x800219 <RotEnc_State>
    10aa:	85 30       	cpi	r24, 0x05	; 5
    10ac:	09 f4       	brne	.+2      	; 0x10b0 <_Z31System_HandleRotaryEncoderInputv+0x15a>
    10ae:	69 c1       	rjmp	.+722    	; 0x1382 <_Z31System_HandleRotaryEncoderInputv+0x42c>
    10b0:	80 91 19 02 	lds	r24, 0x0219	; 0x800219 <RotEnc_State>
    10b4:	81 30       	cpi	r24, 0x01	; 1
    10b6:	59 f4       	brne	.+22     	; 0x10ce <_Z31System_HandleRotaryEncoderInputv+0x178>
    10b8:	80 91 49 02 	lds	r24, 0x0249	; 0x800249 <SystemUIMode>
    10bc:	82 30       	cpi	r24, 0x02	; 2
    10be:	08 f0       	brcs	.+2      	; 0x10c2 <_Z31System_HandleRotaryEncoderInputv+0x16c>
    10c0:	60 c1       	rjmp	.+704    	; 0x1382 <_Z31System_HandleRotaryEncoderInputv+0x42c>
    10c2:	80 91 49 02 	lds	r24, 0x0249	; 0x800249 <SystemUIMode>
    10c6:	8f 5f       	subi	r24, 0xFF	; 255
    10c8:	80 93 49 02 	sts	0x0249, r24	; 0x800249 <SystemUIMode>
    10cc:	5a c1       	rjmp	.+692    	; 0x1382 <_Z31System_HandleRotaryEncoderInputv+0x42c>
    10ce:	80 91 19 02 	lds	r24, 0x0219	; 0x800219 <RotEnc_State>
    10d2:	82 30       	cpi	r24, 0x02	; 2
    10d4:	09 f0       	breq	.+2      	; 0x10d8 <_Z31System_HandleRotaryEncoderInputv+0x182>
    10d6:	55 c1       	rjmp	.+682    	; 0x1382 <_Z31System_HandleRotaryEncoderInputv+0x42c>
    10d8:	80 91 49 02 	lds	r24, 0x0249	; 0x800249 <SystemUIMode>
    10dc:	88 23       	and	r24, r24
    10de:	09 f4       	brne	.+2      	; 0x10e2 <_Z31System_HandleRotaryEncoderInputv+0x18c>
    10e0:	50 c1       	rjmp	.+672    	; 0x1382 <_Z31System_HandleRotaryEncoderInputv+0x42c>
    10e2:	80 91 49 02 	lds	r24, 0x0249	; 0x800249 <SystemUIMode>
    10e6:	81 50       	subi	r24, 0x01	; 1
    10e8:	80 93 49 02 	sts	0x0249, r24	; 0x800249 <SystemUIMode>
    10ec:	4a c1       	rjmp	.+660    	; 0x1382 <_Z31System_HandleRotaryEncoderInputv+0x42c>
    10ee:	80 91 19 02 	lds	r24, 0x0219	; 0x800219 <RotEnc_State>
    10f2:	83 30       	cpi	r24, 0x03	; 3
    10f4:	29 f5       	brne	.+74     	; 0x1140 <_Z31System_HandleRotaryEncoderInputv+0x1ea>
    10f6:	80 91 24 02 	lds	r24, 0x0224	; 0x800224 <UserEditSelection>
    10fa:	88 30       	cpi	r24, 0x08	; 8
    10fc:	78 f4       	brcc	.+30     	; 0x111c <_Z31System_HandleRotaryEncoderInputv+0x1c6>
    10fe:	20 91 24 02 	lds	r18, 0x0224	; 0x800224 <UserEditSelection>
    1102:	e9 e8       	ldi	r30, 0x89	; 137
    1104:	f1 e0       	ldi	r31, 0x01	; 1
    1106:	81 e0       	ldi	r24, 0x01	; 1
    1108:	90 e0       	ldi	r25, 0x00	; 0
    110a:	02 c0       	rjmp	.+4      	; 0x1110 <_Z31System_HandleRotaryEncoderInputv+0x1ba>
    110c:	88 0f       	add	r24, r24
    110e:	99 1f       	adc	r25, r25
    1110:	2a 95       	dec	r18
    1112:	e2 f7       	brpl	.-8      	; 0x110c <_Z31System_HandleRotaryEncoderInputv+0x1b6>
    1114:	90 81       	ld	r25, Z
    1116:	89 27       	eor	r24, r25
    1118:	80 83       	st	Z, r24
    111a:	0f c0       	rjmp	.+30     	; 0x113a <_Z31System_HandleRotaryEncoderInputv+0x1e4>
    111c:	20 91 24 02 	lds	r18, 0x0224	; 0x800224 <UserEditSelection>
    1120:	e9 e8       	ldi	r30, 0x89	; 137
    1122:	f1 e0       	ldi	r31, 0x01	; 1
    1124:	28 50       	subi	r18, 0x08	; 8
    1126:	81 e0       	ldi	r24, 0x01	; 1
    1128:	90 e0       	ldi	r25, 0x00	; 0
    112a:	02 c0       	rjmp	.+4      	; 0x1130 <_Z31System_HandleRotaryEncoderInputv+0x1da>
    112c:	88 0f       	add	r24, r24
    112e:	99 1f       	adc	r25, r25
    1130:	2a 95       	dec	r18
    1132:	e2 f7       	brpl	.-8      	; 0x112c <_Z31System_HandleRotaryEncoderInputv+0x1d6>
    1134:	91 81       	ldd	r25, Z+1	; 0x01
    1136:	89 27       	eor	r24, r25
    1138:	81 83       	std	Z+1, r24	; 0x01
    113a:	0e 94 46 07 	call	0xe8c	; 0xe8c <_Z20System_UpdateUI_LEDsv>
    113e:	21 c1       	rjmp	.+578    	; 0x1382 <_Z31System_HandleRotaryEncoderInputv+0x42c>
    1140:	80 91 19 02 	lds	r24, 0x0219	; 0x800219 <RotEnc_State>
    1144:	85 30       	cpi	r24, 0x05	; 5
    1146:	61 f5       	brne	.+88     	; 0x11a0 <_Z31System_HandleRotaryEncoderInputv+0x24a>
    1148:	60 91 51 02 	lds	r22, 0x0251	; 0x800251 <ActivePreset>
    114c:	70 e0       	ldi	r23, 0x00	; 0
    114e:	66 0f       	add	r22, r22
    1150:	77 1f       	adc	r23, r23
    1152:	66 0f       	add	r22, r22
    1154:	77 1f       	adc	r23, r23
    1156:	6c 59       	subi	r22, 0x9C	; 156
    1158:	7f 4f       	sbci	r23, 0xFF	; 255
    115a:	42 e0       	ldi	r20, 0x02	; 2
    115c:	50 e0       	ldi	r21, 0x00	; 0
    115e:	89 e8       	ldi	r24, 0x89	; 137
    1160:	91 e0       	ldi	r25, 0x01	; 1
    1162:	0e 94 1a 11 	call	0x2234	; 0x2234 <eeprom_write_block>
    1166:	e0 91 51 02 	lds	r30, 0x0251	; 0x800251 <ActivePreset>
    116a:	f0 e0       	ldi	r31, 0x00	; 0
    116c:	ee 0f       	add	r30, r30
    116e:	ff 1f       	adc	r31, r31
    1170:	ee 0f       	add	r30, r30
    1172:	ff 1f       	adc	r31, r31
    1174:	eb 5d       	subi	r30, 0xDB	; 219
    1176:	fd 4f       	sbci	r31, 0xFD	; 253
    1178:	a9 e8       	ldi	r26, 0x89	; 137
    117a:	b1 e0       	ldi	r27, 0x01	; 1
    117c:	8c 91       	ld	r24, X
    117e:	80 83       	st	Z, r24
    1180:	e0 91 51 02 	lds	r30, 0x0251	; 0x800251 <ActivePreset>
    1184:	f0 e0       	ldi	r31, 0x00	; 0
    1186:	ee 0f       	add	r30, r30
    1188:	ff 1f       	adc	r31, r31
    118a:	ee 0f       	add	r30, r30
    118c:	ff 1f       	adc	r31, r31
    118e:	eb 5d       	subi	r30, 0xDB	; 219
    1190:	fd 4f       	sbci	r31, 0xFD	; 253
    1192:	11 96       	adiw	r26, 0x01	; 1
    1194:	8c 91       	ld	r24, X
    1196:	81 83       	std	Z+1, r24	; 0x01
    1198:	89 e0       	ldi	r24, 0x09	; 9
    119a:	80 93 53 02 	sts	0x0253, r24	; 0x800253 <SystemState>
    119e:	f1 c0       	rjmp	.+482    	; 0x1382 <_Z31System_HandleRotaryEncoderInputv+0x42c>
    11a0:	80 91 19 02 	lds	r24, 0x0219	; 0x800219 <RotEnc_State>
    11a4:	81 30       	cpi	r24, 0x01	; 1
    11a6:	59 f4       	brne	.+22     	; 0x11be <_Z31System_HandleRotaryEncoderInputv+0x268>
    11a8:	80 91 24 02 	lds	r24, 0x0224	; 0x800224 <UserEditSelection>
    11ac:	8b 30       	cpi	r24, 0x0B	; 11
    11ae:	08 f0       	brcs	.+2      	; 0x11b2 <_Z31System_HandleRotaryEncoderInputv+0x25c>
    11b0:	e8 c0       	rjmp	.+464    	; 0x1382 <_Z31System_HandleRotaryEncoderInputv+0x42c>
    11b2:	80 91 24 02 	lds	r24, 0x0224	; 0x800224 <UserEditSelection>
    11b6:	8f 5f       	subi	r24, 0xFF	; 255
    11b8:	80 93 24 02 	sts	0x0224, r24	; 0x800224 <UserEditSelection>
    11bc:	e2 c0       	rjmp	.+452    	; 0x1382 <_Z31System_HandleRotaryEncoderInputv+0x42c>
    11be:	80 91 19 02 	lds	r24, 0x0219	; 0x800219 <RotEnc_State>
    11c2:	82 30       	cpi	r24, 0x02	; 2
    11c4:	09 f0       	breq	.+2      	; 0x11c8 <_Z31System_HandleRotaryEncoderInputv+0x272>
    11c6:	dd c0       	rjmp	.+442    	; 0x1382 <_Z31System_HandleRotaryEncoderInputv+0x42c>
    11c8:	80 91 24 02 	lds	r24, 0x0224	; 0x800224 <UserEditSelection>
    11cc:	88 23       	and	r24, r24
    11ce:	09 f4       	brne	.+2      	; 0x11d2 <_Z31System_HandleRotaryEncoderInputv+0x27c>
    11d0:	d8 c0       	rjmp	.+432    	; 0x1382 <_Z31System_HandleRotaryEncoderInputv+0x42c>
    11d2:	80 91 24 02 	lds	r24, 0x0224	; 0x800224 <UserEditSelection>
    11d6:	81 50       	subi	r24, 0x01	; 1
    11d8:	80 93 24 02 	sts	0x0224, r24	; 0x800224 <UserEditSelection>
    11dc:	d2 c0       	rjmp	.+420    	; 0x1382 <_Z31System_HandleRotaryEncoderInputv+0x42c>
    11de:	80 91 19 02 	lds	r24, 0x0219	; 0x800219 <RotEnc_State>
    11e2:	83 30       	cpi	r24, 0x03	; 3
    11e4:	21 f4       	brne	.+8      	; 0x11ee <_Z31System_HandleRotaryEncoderInputv+0x298>
    11e6:	8f e0       	ldi	r24, 0x0F	; 15
    11e8:	80 93 53 02 	sts	0x0253, r24	; 0x800253 <SystemState>
    11ec:	ca c0       	rjmp	.+404    	; 0x1382 <_Z31System_HandleRotaryEncoderInputv+0x42c>
    11ee:	80 91 19 02 	lds	r24, 0x0219	; 0x800219 <RotEnc_State>
    11f2:	85 30       	cpi	r24, 0x05	; 5
    11f4:	21 f4       	brne	.+8      	; 0x11fe <_Z31System_HandleRotaryEncoderInputv+0x2a8>
    11f6:	89 e0       	ldi	r24, 0x09	; 9
    11f8:	80 93 53 02 	sts	0x0253, r24	; 0x800253 <SystemState>
    11fc:	c2 c0       	rjmp	.+388    	; 0x1382 <_Z31System_HandleRotaryEncoderInputv+0x42c>
    11fe:	80 91 19 02 	lds	r24, 0x0219	; 0x800219 <RotEnc_State>
    1202:	81 30       	cpi	r24, 0x01	; 1
    1204:	59 f4       	brne	.+22     	; 0x121c <_Z31System_HandleRotaryEncoderInputv+0x2c6>
    1206:	80 93 47 02 	sts	0x0247, r24	; 0x800247 <SetMidiEdit>
    120a:	e1 2c       	mov	r14, r1
    120c:	00 e0       	ldi	r16, 0x00	; 0
    120e:	20 e0       	ldi	r18, 0x00	; 0
    1210:	44 e7       	ldi	r20, 0x74	; 116
    1212:	65 e7       	ldi	r22, 0x75	; 117
    1214:	8f e6       	ldi	r24, 0x6F	; 111
    1216:	0e 94 e7 05 	call	0xbce	; 0xbce <_Z16SP10281_WriteAllccchhh>
    121a:	b3 c0       	rjmp	.+358    	; 0x1382 <_Z31System_HandleRotaryEncoderInputv+0x42c>
    121c:	80 91 19 02 	lds	r24, 0x0219	; 0x800219 <RotEnc_State>
    1220:	82 30       	cpi	r24, 0x02	; 2
    1222:	09 f0       	breq	.+2      	; 0x1226 <_Z31System_HandleRotaryEncoderInputv+0x2d0>
    1224:	ae c0       	rjmp	.+348    	; 0x1382 <_Z31System_HandleRotaryEncoderInputv+0x42c>
    1226:	10 92 47 02 	sts	0x0247, r1	; 0x800247 <SetMidiEdit>
    122a:	e1 2c       	mov	r14, r1
    122c:	00 e0       	ldi	r16, 0x00	; 0
    122e:	20 e0       	ldi	r18, 0x00	; 0
    1230:	40 e2       	ldi	r20, 0x20	; 32
    1232:	6e e6       	ldi	r22, 0x6E	; 110
    1234:	89 e6       	ldi	r24, 0x69	; 105
    1236:	0e 94 e7 05 	call	0xbce	; 0xbce <_Z16SP10281_WriteAllccchhh>
    123a:	a3 c0       	rjmp	.+326    	; 0x1382 <_Z31System_HandleRotaryEncoderInputv+0x42c>
    123c:	80 91 19 02 	lds	r24, 0x0219	; 0x800219 <RotEnc_State>
    1240:	83 30       	cpi	r24, 0x03	; 3
    1242:	49 f4       	brne	.+18     	; 0x1256 <_Z31System_HandleRotaryEncoderInputv+0x300>
    1244:	10 92 59 02 	sts	0x0259, r1	; 0x800259 <System_TempSelectOvfCnt+0x1>
    1248:	10 92 58 02 	sts	0x0258, r1	; 0x800258 <System_TempSelectOvfCnt>
    124c:	80 91 46 02 	lds	r24, 0x0246	; 0x800246 <TempSelectMidiPC>
    1250:	80 93 45 02 	sts	0x0245, r24	; 0x800245 <LastTempSelectMidiPC>
    1254:	96 c0       	rjmp	.+300    	; 0x1382 <_Z31System_HandleRotaryEncoderInputv+0x42c>
    1256:	80 91 19 02 	lds	r24, 0x0219	; 0x800219 <RotEnc_State>
    125a:	85 30       	cpi	r24, 0x05	; 5
    125c:	d9 f5       	brne	.+118    	; 0x12d4 <_Z31System_HandleRotaryEncoderInputv+0x37e>
    125e:	80 91 47 02 	lds	r24, 0x0247	; 0x800247 <SetMidiEdit>
    1262:	81 11       	cpse	r24, r1
    1264:	1a c0       	rjmp	.+52     	; 0x129a <_Z31System_HandleRotaryEncoderInputv+0x344>
    1266:	e0 91 51 02 	lds	r30, 0x0251	; 0x800251 <ActivePreset>
    126a:	80 91 46 02 	lds	r24, 0x0246	; 0x800246 <TempSelectMidiPC>
    126e:	f0 e0       	ldi	r31, 0x00	; 0
    1270:	ee 0f       	add	r30, r30
    1272:	ff 1f       	adc	r31, r31
    1274:	ee 0f       	add	r30, r30
    1276:	ff 1f       	adc	r31, r31
    1278:	eb 5d       	subi	r30, 0xDB	; 219
    127a:	fd 4f       	sbci	r31, 0xFD	; 253
    127c:	82 83       	std	Z+2, r24	; 0x02
    127e:	60 91 46 02 	lds	r22, 0x0246	; 0x800246 <TempSelectMidiPC>
    1282:	80 91 51 02 	lds	r24, 0x0251	; 0x800251 <ActivePreset>
    1286:	90 e0       	ldi	r25, 0x00	; 0
    1288:	88 0f       	add	r24, r24
    128a:	99 1f       	adc	r25, r25
    128c:	88 0f       	add	r24, r24
    128e:	99 1f       	adc	r25, r25
    1290:	8a 59       	subi	r24, 0x9A	; 154
    1292:	9f 4f       	sbci	r25, 0xFF	; 255
    1294:	0e 94 24 11 	call	0x2248	; 0x2248 <eeprom_write_byte>
    1298:	19 c0       	rjmp	.+50     	; 0x12cc <_Z31System_HandleRotaryEncoderInputv+0x376>
    129a:	e0 91 51 02 	lds	r30, 0x0251	; 0x800251 <ActivePreset>
    129e:	80 91 46 02 	lds	r24, 0x0246	; 0x800246 <TempSelectMidiPC>
    12a2:	f0 e0       	ldi	r31, 0x00	; 0
    12a4:	ee 0f       	add	r30, r30
    12a6:	ff 1f       	adc	r31, r31
    12a8:	ee 0f       	add	r30, r30
    12aa:	ff 1f       	adc	r31, r31
    12ac:	eb 5d       	subi	r30, 0xDB	; 219
    12ae:	fd 4f       	sbci	r31, 0xFD	; 253
    12b0:	83 83       	std	Z+3, r24	; 0x03
    12b2:	60 91 46 02 	lds	r22, 0x0246	; 0x800246 <TempSelectMidiPC>
    12b6:	80 91 51 02 	lds	r24, 0x0251	; 0x800251 <ActivePreset>
    12ba:	90 e0       	ldi	r25, 0x00	; 0
    12bc:	88 0f       	add	r24, r24
    12be:	99 1f       	adc	r25, r25
    12c0:	88 0f       	add	r24, r24
    12c2:	99 1f       	adc	r25, r25
    12c4:	89 59       	subi	r24, 0x99	; 153
    12c6:	9f 4f       	sbci	r25, 0xFF	; 255
    12c8:	0e 94 24 11 	call	0x2248	; 0x2248 <eeprom_write_byte>
    12cc:	8d e0       	ldi	r24, 0x0D	; 13
    12ce:	80 93 53 02 	sts	0x0253, r24	; 0x800253 <SystemState>
    12d2:	57 c0       	rjmp	.+174    	; 0x1382 <_Z31System_HandleRotaryEncoderInputv+0x42c>
    12d4:	80 91 19 02 	lds	r24, 0x0219	; 0x800219 <RotEnc_State>
    12d8:	81 30       	cpi	r24, 0x01	; 1
    12da:	11 f5       	brne	.+68     	; 0x1320 <_Z31System_HandleRotaryEncoderInputv+0x3ca>
    12dc:	80 91 46 02 	lds	r24, 0x0246	; 0x800246 <TempSelectMidiPC>
    12e0:	8f 37       	cpi	r24, 0x7F	; 127
    12e2:	29 f0       	breq	.+10     	; 0x12ee <_Z31System_HandleRotaryEncoderInputv+0x398>
    12e4:	80 91 46 02 	lds	r24, 0x0246	; 0x800246 <TempSelectMidiPC>
    12e8:	8f 5f       	subi	r24, 0xFF	; 255
    12ea:	80 93 46 02 	sts	0x0246, r24	; 0x800246 <TempSelectMidiPC>
    12ee:	80 91 46 02 	lds	r24, 0x0246	; 0x800246 <TempSelectMidiPC>
    12f2:	8f 3f       	cpi	r24, 0xFF	; 255
    12f4:	49 f4       	brne	.+18     	; 0x1308 <_Z31System_HandleRotaryEncoderInputv+0x3b2>
    12f6:	e1 2c       	mov	r14, r1
    12f8:	00 e0       	ldi	r16, 0x00	; 0
    12fa:	20 e0       	ldi	r18, 0x00	; 0
    12fc:	46 e6       	ldi	r20, 0x66	; 102
    12fe:	66 e6       	ldi	r22, 0x66	; 102
    1300:	8f e6       	ldi	r24, 0x6F	; 111
    1302:	0e 94 e7 05 	call	0xbce	; 0xbce <_Z16SP10281_WriteAllccchhh>
    1306:	05 c0       	rjmp	.+10     	; 0x1312 <_Z31System_HandleRotaryEncoderInputv+0x3bc>
    1308:	80 91 46 02 	lds	r24, 0x0246	; 0x800246 <TempSelectMidiPC>
    130c:	90 e0       	ldi	r25, 0x00	; 0
    130e:	0e 94 04 06 	call	0xc08	; 0xc08 <_Z19SP10281_WriteNumbers>
    1312:	81 e0       	ldi	r24, 0x01	; 1
    1314:	90 e0       	ldi	r25, 0x00	; 0
    1316:	90 93 59 02 	sts	0x0259, r25	; 0x800259 <System_TempSelectOvfCnt+0x1>
    131a:	80 93 58 02 	sts	0x0258, r24	; 0x800258 <System_TempSelectOvfCnt>
    131e:	31 c0       	rjmp	.+98     	; 0x1382 <_Z31System_HandleRotaryEncoderInputv+0x42c>
    1320:	80 91 19 02 	lds	r24, 0x0219	; 0x800219 <RotEnc_State>
    1324:	82 30       	cpi	r24, 0x02	; 2
    1326:	69 f5       	brne	.+90     	; 0x1382 <_Z31System_HandleRotaryEncoderInputv+0x42c>
    1328:	80 91 46 02 	lds	r24, 0x0246	; 0x800246 <TempSelectMidiPC>
    132c:	88 23       	and	r24, r24
    132e:	24 f0       	brlt	.+8      	; 0x1338 <_Z31System_HandleRotaryEncoderInputv+0x3e2>
    1330:	80 91 46 02 	lds	r24, 0x0246	; 0x800246 <TempSelectMidiPC>
    1334:	81 11       	cpse	r24, r1
    1336:	04 c0       	rjmp	.+8      	; 0x1340 <_Z31System_HandleRotaryEncoderInputv+0x3ea>
    1338:	8f ef       	ldi	r24, 0xFF	; 255
    133a:	80 93 46 02 	sts	0x0246, r24	; 0x800246 <TempSelectMidiPC>
    133e:	09 c0       	rjmp	.+18     	; 0x1352 <_Z31System_HandleRotaryEncoderInputv+0x3fc>
    1340:	80 91 46 02 	lds	r24, 0x0246	; 0x800246 <TempSelectMidiPC>
    1344:	88 23       	and	r24, r24
    1346:	29 f0       	breq	.+10     	; 0x1352 <_Z31System_HandleRotaryEncoderInputv+0x3fc>
    1348:	80 91 46 02 	lds	r24, 0x0246	; 0x800246 <TempSelectMidiPC>
    134c:	81 50       	subi	r24, 0x01	; 1
    134e:	80 93 46 02 	sts	0x0246, r24	; 0x800246 <TempSelectMidiPC>
    1352:	80 91 46 02 	lds	r24, 0x0246	; 0x800246 <TempSelectMidiPC>
    1356:	8f 3f       	cpi	r24, 0xFF	; 255
    1358:	49 f4       	brne	.+18     	; 0x136c <_Z31System_HandleRotaryEncoderInputv+0x416>
    135a:	e1 2c       	mov	r14, r1
    135c:	00 e0       	ldi	r16, 0x00	; 0
    135e:	20 e0       	ldi	r18, 0x00	; 0
    1360:	46 e6       	ldi	r20, 0x66	; 102
    1362:	66 e6       	ldi	r22, 0x66	; 102
    1364:	8f e6       	ldi	r24, 0x6F	; 111
    1366:	0e 94 e7 05 	call	0xbce	; 0xbce <_Z16SP10281_WriteAllccchhh>
    136a:	05 c0       	rjmp	.+10     	; 0x1376 <_Z31System_HandleRotaryEncoderInputv+0x420>
    136c:	80 91 46 02 	lds	r24, 0x0246	; 0x800246 <TempSelectMidiPC>
    1370:	90 e0       	ldi	r25, 0x00	; 0
    1372:	0e 94 04 06 	call	0xc08	; 0xc08 <_Z19SP10281_WriteNumbers>
    1376:	81 e0       	ldi	r24, 0x01	; 1
    1378:	90 e0       	ldi	r25, 0x00	; 0
    137a:	90 93 59 02 	sts	0x0259, r25	; 0x800259 <System_TempSelectOvfCnt+0x1>
    137e:	80 93 58 02 	sts	0x0258, r24	; 0x800258 <System_TempSelectOvfCnt>
    1382:	0f 91       	pop	r16
    1384:	ef 90       	pop	r14
    1386:	08 95       	ret

00001388 <_Z19System_ChangePresetv>:

void System_ChangePreset()
{
    1388:	cf 93       	push	r28
    138a:	df 93       	push	r29
    138c:	00 d0       	rcall	.+0      	; 0x138e <_Z19System_ChangePresetv+0x6>
    138e:	cd b7       	in	r28, 0x3d	; 61
    1390:	de b7       	in	r29, 0x3e	; 62
	LoopModePreset = PresetTable[ActivePreset];
    1392:	e0 91 51 02 	lds	r30, 0x0251	; 0x800251 <ActivePreset>
    1396:	f0 e0       	ldi	r31, 0x00	; 0
    1398:	ee 0f       	add	r30, r30
    139a:	ff 1f       	adc	r31, r31
    139c:	ee 0f       	add	r30, r30
    139e:	ff 1f       	adc	r31, r31
    13a0:	eb 5d       	subi	r30, 0xDB	; 219
    13a2:	fd 4f       	sbci	r31, 0xFD	; 253
    13a4:	80 81       	ld	r24, Z
    13a6:	91 81       	ldd	r25, Z+1	; 0x01
    13a8:	a2 81       	ldd	r26, Z+2	; 0x02
    13aa:	b3 81       	ldd	r27, Z+3	; 0x03
    13ac:	80 93 89 01 	sts	0x0189, r24	; 0x800189 <LoopModePreset>
    13b0:	90 93 8a 01 	sts	0x018A, r25	; 0x80018a <LoopModePreset+0x1>
    13b4:	a0 93 8b 01 	sts	0x018B, r26	; 0x80018b <LoopModePreset+0x2>
    13b8:	b0 93 8c 01 	sts	0x018C, r27	; 0x80018c <LoopModePreset+0x3>
	
	/* Update relays */
	//System_UpdateUI_Relays();
				
	/* Send MIDI PC message if MIDI Out is set for preset */
	if (PresetTable[ActivePreset].MIDI_PC_Out != MIDI_PC_OFF)
    13bc:	e0 91 51 02 	lds	r30, 0x0251	; 0x800251 <ActivePreset>
    13c0:	f0 e0       	ldi	r31, 0x00	; 0
    13c2:	ee 0f       	add	r30, r30
    13c4:	ff 1f       	adc	r31, r31
    13c6:	ee 0f       	add	r30, r30
    13c8:	ff 1f       	adc	r31, r31
    13ca:	eb 5d       	subi	r30, 0xDB	; 219
    13cc:	fd 4f       	sbci	r31, 0xFD	; 253
    13ce:	83 81       	ldd	r24, Z+3	; 0x03
    13d0:	8f 3f       	cpi	r24, 0xFF	; 255
    13d2:	61 f0       	breq	.+24     	; 0x13ec <_Z19System_ChangePresetv+0x64>
	{
		MIDI_TransmitProgramChange(PresetTable[ActivePreset].MIDI_PC_Out);
    13d4:	e0 91 51 02 	lds	r30, 0x0251	; 0x800251 <ActivePreset>
    13d8:	f0 e0       	ldi	r31, 0x00	; 0
    13da:	ee 0f       	add	r30, r30
    13dc:	ff 1f       	adc	r31, r31
    13de:	ee 0f       	add	r30, r30
    13e0:	ff 1f       	adc	r31, r31
    13e2:	eb 5d       	subi	r30, 0xDB	; 219
    13e4:	fd 4f       	sbci	r31, 0xFD	; 253
    13e6:	83 81       	ldd	r24, Z+3	; 0x03
    13e8:	0e 94 b6 02 	call	0x56c	; 0x56c <_Z26MIDI_TransmitProgramChangeh>
	}
				
	/* Update Pedal display */
	uint8_t tmp[2] = {0};
    13ec:	1a 82       	std	Y+2, r1	; 0x02
    13ee:	19 82       	std	Y+1, r1	; 0x01
	PedalCom_QueueCommand(UpdateTunerLEDs, 2, (uint8_t*)tmp);
    13f0:	ae 01       	movw	r20, r28
    13f2:	4f 5f       	subi	r20, 0xFF	; 255
    13f4:	5f 4f       	sbci	r21, 0xFF	; 255
    13f6:	62 e0       	ldi	r22, 0x02	; 2
    13f8:	83 ed       	ldi	r24, 0xD3	; 211
    13fa:	0e 94 14 04 	call	0x828	; 0x828 <_Z21PedalCom_QueueCommand3CMDhPh>
	PedalCom_QueueCommand(Update7segments, 4, (uint8_t*)"Pre ");
    13fe:	4d e8       	ldi	r20, 0x8D	; 141
    1400:	51 e0       	ldi	r21, 0x01	; 1
    1402:	64 e0       	ldi	r22, 0x04	; 4
    1404:	87 ed       	ldi	r24, 0xD7	; 215
    1406:	0e 94 14 04 	call	0x828	; 0x828 <_Z21PedalCom_QueueCommand3CMDhPh>
	
	tmp[0] = (1 << ActivePreset);
    140a:	90 91 51 02 	lds	r25, 0x0251	; 0x800251 <ActivePreset>
    140e:	81 e0       	ldi	r24, 0x01	; 1
    1410:	01 c0       	rjmp	.+2      	; 0x1414 <_Z19System_ChangePresetv+0x8c>
    1412:	88 0f       	add	r24, r24
    1414:	9a 95       	dec	r25
    1416:	ea f7       	brpl	.-6      	; 0x1412 <_Z19System_ChangePresetv+0x8a>
    1418:	89 83       	std	Y+1, r24	; 0x01
	PedalCom_QueueCommand(UpdatePresetLoopLEDs, 1, (uint8_t*)tmp);
    141a:	ae 01       	movw	r20, r28
    141c:	4f 5f       	subi	r20, 0xFF	; 255
    141e:	5f 4f       	sbci	r21, 0xFF	; 255
    1420:	61 e0       	ldi	r22, 0x01	; 1
    1422:	80 ed       	ldi	r24, 0xD0	; 208
    1424:	0e 94 14 04 	call	0x828	; 0x828 <_Z21PedalCom_QueueCommand3CMDhPh>
				
	/* Update 7-segment display */
	SP10281_WriteNumber(ActivePreset + 1);
    1428:	80 91 51 02 	lds	r24, 0x0251	; 0x800251 <ActivePreset>
    142c:	90 e0       	ldi	r25, 0x00	; 0
    142e:	01 96       	adiw	r24, 0x01	; 1
    1430:	0e 94 04 06 	call	0xc08	; 0xc08 <_Z19SP10281_WriteNumbers>
				
	/* Update UI LEDs */
	System_UpdateUI_LEDs();
    1434:	0e 94 46 07 	call	0xe8c	; 0xe8c <_Z20System_UpdateUI_LEDsv>
}
    1438:	0f 90       	pop	r0
    143a:	0f 90       	pop	r0
    143c:	df 91       	pop	r29
    143e:	cf 91       	pop	r28
    1440:	08 95       	ret

00001442 <_Z21System_UpdateLoopCtrlv>:

void System_UpdateLoopCtrl()
{
    1442:	cf 93       	push	r28
    1444:	df 93       	push	r29
    1446:	00 d0       	rcall	.+0      	; 0x1448 <_Z21System_UpdateLoopCtrlv+0x6>
    1448:	00 d0       	rcall	.+0      	; 0x144a <_Z21System_UpdateLoopCtrlv+0x8>
    144a:	cd b7       	in	r28, 0x3d	; 61
    144c:	de b7       	in	r29, 0x3e	; 62
	/* Update relays */
	//System_UpdateUI_Relays();
	
	/* Update Pedal display */
	uint8_t tmp[NUMBER_OF_CTRL_SWITCHES] = {0};
    144e:	19 82       	std	Y+1, r1	; 0x01
    1450:	1a 82       	std	Y+2, r1	; 0x02
    1452:	1b 82       	std	Y+3, r1	; 0x03
    1454:	1c 82       	std	Y+4, r1	; 0x04
	PedalCom_QueueCommand(UpdateTunerLEDs, 2, (uint8_t*)&tmp);
    1456:	ae 01       	movw	r20, r28
    1458:	4f 5f       	subi	r20, 0xFF	; 255
    145a:	5f 4f       	sbci	r21, 0xFF	; 255
    145c:	62 e0       	ldi	r22, 0x02	; 2
    145e:	83 ed       	ldi	r24, 0xD3	; 211
    1460:	0e 94 14 04 	call	0x828	; 0x828 <_Z21PedalCom_QueueCommand3CMDhPh>
	PedalCom_QueueCommand(UpdatePresetLoopLEDs, 1, (uint8_t*)&LoopModePreset.Active_Loops);
    1464:	49 e8       	ldi	r20, 0x89	; 137
    1466:	51 e0       	ldi	r21, 0x01	; 1
    1468:	61 e0       	ldi	r22, 0x01	; 1
    146a:	80 ed       	ldi	r24, 0xD0	; 208
    146c:	0e 94 14 04 	call	0x828	; 0x828 <_Z21PedalCom_QueueCommand3CMDhPh>
	
	for (uint8_t i = 0; i < NUMBER_OF_CTRL_SWITCHES; i++)
	{
		if (LoopModePreset.Active_CtrlSwitches & (1 << i))
    1470:	40 91 8a 01 	lds	r20, 0x018A	; 0x80018a <LoopModePreset+0x1>
    1474:	50 e0       	ldi	r21, 0x00	; 0
    1476:	fe 01       	movw	r30, r28
    1478:	31 96       	adiw	r30, 0x01	; 1
    147a:	80 e0       	ldi	r24, 0x00	; 0
    147c:	90 e0       	ldi	r25, 0x00	; 0
		{
			tmp[i] = '/';
		}
		else
		{
			tmp[i] = '_';
    147e:	7f e5       	ldi	r23, 0x5F	; 95
	
	for (uint8_t i = 0; i < NUMBER_OF_CTRL_SWITCHES; i++)
	{
		if (LoopModePreset.Active_CtrlSwitches & (1 << i))
		{
			tmp[i] = '/';
    1480:	6f e2       	ldi	r22, 0x2F	; 47
	PedalCom_QueueCommand(UpdateTunerLEDs, 2, (uint8_t*)&tmp);
	PedalCom_QueueCommand(UpdatePresetLoopLEDs, 1, (uint8_t*)&LoopModePreset.Active_Loops);
	
	for (uint8_t i = 0; i < NUMBER_OF_CTRL_SWITCHES; i++)
	{
		if (LoopModePreset.Active_CtrlSwitches & (1 << i))
    1482:	9a 01       	movw	r18, r20
    1484:	08 2e       	mov	r0, r24
    1486:	02 c0       	rjmp	.+4      	; 0x148c <_Z21System_UpdateLoopCtrlv+0x4a>
    1488:	35 95       	asr	r19
    148a:	27 95       	ror	r18
    148c:	0a 94       	dec	r0
    148e:	e2 f7       	brpl	.-8      	; 0x1488 <_Z21System_UpdateLoopCtrlv+0x46>
    1490:	20 ff       	sbrs	r18, 0
    1492:	02 c0       	rjmp	.+4      	; 0x1498 <_Z21System_UpdateLoopCtrlv+0x56>
		{
			tmp[i] = '/';
    1494:	60 83       	st	Z, r22
    1496:	01 c0       	rjmp	.+2      	; 0x149a <_Z21System_UpdateLoopCtrlv+0x58>
		}
		else
		{
			tmp[i] = '_';
    1498:	70 83       	st	Z, r23
    149a:	01 96       	adiw	r24, 0x01	; 1
    149c:	31 96       	adiw	r30, 0x01	; 1
	/* Update Pedal display */
	uint8_t tmp[NUMBER_OF_CTRL_SWITCHES] = {0};
	PedalCom_QueueCommand(UpdateTunerLEDs, 2, (uint8_t*)&tmp);
	PedalCom_QueueCommand(UpdatePresetLoopLEDs, 1, (uint8_t*)&LoopModePreset.Active_Loops);
	
	for (uint8_t i = 0; i < NUMBER_OF_CTRL_SWITCHES; i++)
    149e:	84 30       	cpi	r24, 0x04	; 4
    14a0:	91 05       	cpc	r25, r1
    14a2:	79 f7       	brne	.-34     	; 0x1482 <_Z21System_UpdateLoopCtrlv+0x40>
		{
			tmp[i] = '_';
		}
	}
	
	PedalCom_QueueCommand(Update7segments, 4, (uint8_t*)tmp);
    14a4:	ae 01       	movw	r20, r28
    14a6:	4f 5f       	subi	r20, 0xFF	; 255
    14a8:	5f 4f       	sbci	r21, 0xFF	; 255
    14aa:	64 e0       	ldi	r22, 0x04	; 4
    14ac:	87 ed       	ldi	r24, 0xD7	; 215
    14ae:	0e 94 14 04 	call	0x828	; 0x828 <_Z21PedalCom_QueueCommand3CMDhPh>
	
	/* Update UI LEDs */
	System_UpdateUI_LEDs();
    14b2:	0e 94 46 07 	call	0xe8c	; 0xe8c <_Z20System_UpdateUI_LEDsv>
}
    14b6:	0f 90       	pop	r0
    14b8:	0f 90       	pop	r0
    14ba:	0f 90       	pop	r0
    14bc:	0f 90       	pop	r0
    14be:	df 91       	pop	r29
    14c0:	cf 91       	pop	r28
    14c2:	08 95       	ret

000014c4 <_Z10System_Runv>:

volatile uint8_t UserEditSelection = 0;
volatile uint8_t LastUserEditSelection = 0;

void System_Run()
{
    14c4:	ef 92       	push	r14
    14c6:	0f 93       	push	r16
	switch (SystemState)
    14c8:	e0 91 53 02 	lds	r30, 0x0253	; 0x800253 <SystemState>
    14cc:	8e 2f       	mov	r24, r30
    14ce:	90 e0       	ldi	r25, 0x00	; 0
    14d0:	80 31       	cpi	r24, 0x10	; 16
    14d2:	91 05       	cpc	r25, r1
    14d4:	08 f0       	brcs	.+2      	; 0x14d8 <_Z10System_Runv+0x14>
    14d6:	3b c2       	rjmp	.+1142   	; 0x194e <_Z10System_Runv+0x48a>
    14d8:	fc 01       	movw	r30, r24
    14da:	e2 5b       	subi	r30, 0xB2	; 178
    14dc:	ff 4f       	sbci	r31, 0xFF	; 255
    14de:	0c 94 ce 10 	jmp	0x219c	; 0x219c <__tablejump2__>
	{
		case BOOT_UP:
			/* Fill preset table from EEPROM */
			eeprom_read_block((void*)PresetTable, (void*)EEPROM_PRESETS_BASE_ADDR, sizeof(Preset) * NUMBER_OF_PRESETS);
    14e2:	40 e2       	ldi	r20, 0x20	; 32
    14e4:	50 e0       	ldi	r21, 0x00	; 0
    14e6:	64 e6       	ldi	r22, 0x64	; 100
    14e8:	70 e0       	ldi	r23, 0x00	; 0
    14ea:	85 e2       	ldi	r24, 0x25	; 37
    14ec:	92 e0       	ldi	r25, 0x02	; 2
    14ee:	0e 94 02 11 	call	0x2204	; 0x2204 <eeprom_read_block>
			
			/* Get device MIDI channel from EEPROM */
			System_MidiChannel = (MIDI_Channel)eeprom_read_byte((uint8_t*)EEPROM_MIDI_CH_ADDR);
    14f2:	80 e0       	ldi	r24, 0x00	; 0
    14f4:	90 e0       	ldi	r25, 0x00	; 0
    14f6:	0e 94 12 11 	call	0x2224	; 0x2224 <eeprom_read_byte>
    14fa:	80 93 4a 02 	sts	0x024A, r24	; 0x80024a <System_MidiChannel>
			
			if (System_MidiChannel > MIDI_CH_MAX)
    14fe:	80 91 4a 02 	lds	r24, 0x024A	; 0x80024a <System_MidiChannel>
    1502:	81 31       	cpi	r24, 0x11	; 17
    1504:	40 f0       	brcs	.+16     	; 0x1516 <_Z10System_Runv+0x52>
			{
				System_MidiChannel = MIDI_CH_OMNI;
    1506:	10 92 4a 02 	sts	0x024A, r1	; 0x80024a <System_MidiChannel>
				eeprom_write_byte((uint8_t*)EEPROM_MIDI_CH_ADDR, System_MidiChannel);
    150a:	60 91 4a 02 	lds	r22, 0x024A	; 0x80024a <System_MidiChannel>
    150e:	80 e0       	ldi	r24, 0x00	; 0
    1510:	90 e0       	ldi	r25, 0x00	; 0
    1512:	0e 94 24 11 	call	0x2248	; 0x2248 <eeprom_write_byte>
			}
			
			/* Check if button pressed for MIDI channel edit */
			if (RotaryEncoder_IsPressed())
    1516:	0e 94 5c 05 	call	0xab8	; 0xab8 <_Z23RotaryEncoder_IsPressedv>
    151a:	88 23       	and	r24, r24
    151c:	11 f1       	breq	.+68     	; 0x1562 <_Z10System_Runv+0x9e>
			{
				/* Update UI mode LEDs */
				ModeRunLED.Clear();
    151e:	8c e4       	ldi	r24, 0x4C	; 76
    1520:	93 e0       	ldi	r25, 0x03	; 3
    1522:	0e 94 cf 01 	call	0x39e	; 0x39e <_ZN10MCP_Output5ClearEv>
				ModeEditPresetLED.Clear();
    1526:	88 e4       	ldi	r24, 0x48	; 72
    1528:	93 e0       	ldi	r25, 0x03	; 3
    152a:	0e 94 cf 01 	call	0x39e	; 0x39e <_ZN10MCP_Output5ClearEv>
				ModeEditMidiLED.Set();
    152e:	84 e4       	ldi	r24, 0x44	; 68
    1530:	93 e0       	ldi	r25, 0x03	; 3
    1532:	0e 94 92 01 	call	0x324	; 0x324 <_ZN10MCP_Output3SetEv>
				
				if (System_MidiChannel == MIDI_CH_OMNI)
    1536:	80 91 4a 02 	lds	r24, 0x024A	; 0x80024a <System_MidiChannel>
    153a:	81 11       	cpse	r24, r1
    153c:	09 c0       	rjmp	.+18     	; 0x1550 <_Z10System_Runv+0x8c>
				{
					SP10281_WriteAll('o', 'm', 'n', 0, 0, 0);
    153e:	e1 2c       	mov	r14, r1
    1540:	00 e0       	ldi	r16, 0x00	; 0
    1542:	20 e0       	ldi	r18, 0x00	; 0
    1544:	4e e6       	ldi	r20, 0x6E	; 110
    1546:	6d e6       	ldi	r22, 0x6D	; 109
    1548:	8f e6       	ldi	r24, 0x6F	; 111
    154a:	0e 94 e7 05 	call	0xbce	; 0xbce <_Z16SP10281_WriteAllccchhh>
    154e:	05 c0       	rjmp	.+10     	; 0x155a <_Z10System_Runv+0x96>
				} 
				else
				{
					SP10281_WriteNumber(System_MidiChannel);
    1550:	80 91 4a 02 	lds	r24, 0x024A	; 0x80024a <System_MidiChannel>
    1554:	90 e0       	ldi	r25, 0x00	; 0
    1556:	0e 94 04 06 	call	0xc08	; 0xc08 <_Z19SP10281_WriteNumbers>
				}
				
				SystemState = EDIT_MIDI_CHANNEL;
    155a:	81 e0       	ldi	r24, 0x01	; 1
    155c:	80 93 53 02 	sts	0x0253, r24	; 0x800253 <SystemState>
    1560:	f6 c1       	rjmp	.+1004   	; 0x194e <_Z10System_Runv+0x48a>
			} 
			else
			{
				SystemState = INITIALIZE_SYSTEM;
    1562:	82 e0       	ldi	r24, 0x02	; 2
    1564:	80 93 53 02 	sts	0x0253, r24	; 0x800253 <SystemState>
    1568:	f2 c1       	rjmp	.+996    	; 0x194e <_Z10System_Runv+0x48a>
			
			break;
		
		case EDIT_MIDI_CHANNEL:
			/* If user is selecting new MIDI channel */
			if (TempSelectMidiChannel != LastTempSelectMidiChannel)
    156a:	90 91 4c 02 	lds	r25, 0x024C	; 0x80024c <TempSelectMidiChannel>
    156e:	80 91 4b 02 	lds	r24, 0x024B	; 0x80024b <LastTempSelectMidiChannel>
    1572:	98 17       	cp	r25, r24
    1574:	c1 f0       	breq	.+48     	; 0x15a6 <_Z10System_Runv+0xe2>
			{
				/* Write selected MIDI channel to 7-segment display */
				if (TempSelectMidiChannel == MIDI_CH_OMNI)
    1576:	80 91 4c 02 	lds	r24, 0x024C	; 0x80024c <TempSelectMidiChannel>
    157a:	81 11       	cpse	r24, r1
    157c:	09 c0       	rjmp	.+18     	; 0x1590 <_Z10System_Runv+0xcc>
				{
					SP10281_WriteAll('o', 'm', 'n', 0, 0, 0);
    157e:	e1 2c       	mov	r14, r1
    1580:	00 e0       	ldi	r16, 0x00	; 0
    1582:	20 e0       	ldi	r18, 0x00	; 0
    1584:	4e e6       	ldi	r20, 0x6E	; 110
    1586:	6d e6       	ldi	r22, 0x6D	; 109
    1588:	8f e6       	ldi	r24, 0x6F	; 111
    158a:	0e 94 e7 05 	call	0xbce	; 0xbce <_Z16SP10281_WriteAllccchhh>
    158e:	05 c0       	rjmp	.+10     	; 0x159a <_Z10System_Runv+0xd6>
				}
				else
				{
					SP10281_WriteNumber(TempSelectMidiChannel);
    1590:	80 91 4c 02 	lds	r24, 0x024C	; 0x80024c <TempSelectMidiChannel>
    1594:	90 e0       	ldi	r25, 0x00	; 0
    1596:	0e 94 04 06 	call	0xc08	; 0xc08 <_Z19SP10281_WriteNumbers>
				}
				
				/* Start timer */
				System_TempSelectOvfCnt = 1;
    159a:	81 e0       	ldi	r24, 0x01	; 1
    159c:	90 e0       	ldi	r25, 0x00	; 0
    159e:	90 93 59 02 	sts	0x0259, r25	; 0x800259 <System_TempSelectOvfCnt+0x1>
    15a2:	80 93 58 02 	sts	0x0258, r24	; 0x800258 <System_TempSelectOvfCnt>
			}
			
			LastTempSelectMidiChannel = TempSelectMidiChannel;
    15a6:	80 91 4c 02 	lds	r24, 0x024C	; 0x80024c <TempSelectMidiChannel>
    15aa:	80 93 4b 02 	sts	0x024B, r24	; 0x80024b <LastTempSelectMidiChannel>
			
			break;
    15ae:	cf c1       	rjmp	.+926    	; 0x194e <_Z10System_Runv+0x48a>
		
		case INITIALIZE_SYSTEM:			
			/* Write active preset to 7-segment display */
			SP10281_WriteNumber(ActivePreset+1);
    15b0:	80 91 51 02 	lds	r24, 0x0251	; 0x800251 <ActivePreset>
    15b4:	90 e0       	ldi	r25, 0x00	; 0
    15b6:	01 96       	adiw	r24, 0x01	; 1
    15b8:	0e 94 04 06 	call	0xc08	; 0xc08 <_Z19SP10281_WriteNumbers>
			
			/* Update mode LEDs */
			ModeRunLED.Set();
    15bc:	8c e4       	ldi	r24, 0x4C	; 76
    15be:	93 e0       	ldi	r25, 0x03	; 3
    15c0:	0e 94 92 01 	call	0x324	; 0x324 <_ZN10MCP_Output3SetEv>
			ModeEditPresetLED.Clear();
    15c4:	88 e4       	ldi	r24, 0x48	; 72
    15c6:	93 e0       	ldi	r25, 0x03	; 3
    15c8:	0e 94 cf 01 	call	0x39e	; 0x39e <_ZN10MCP_Output5ClearEv>
			ModeEditMidiLED.Clear();
    15cc:	84 e4       	ldi	r24, 0x44	; 68
    15ce:	93 e0       	ldi	r25, 0x03	; 3
    15d0:	0e 94 cf 01 	call	0x39e	; 0x39e <_ZN10MCP_Output5ClearEv>
			
			/* Set appropriate System State */
			if (SystemRunMode == RUN_PRESET_MODE)
    15d4:	80 91 4d 02 	lds	r24, 0x024D	; 0x80024d <SystemRunMode>
    15d8:	81 11       	cpse	r24, r1
    15da:	04 c0       	rjmp	.+8      	; 0x15e4 <_Z10System_Runv+0x120>
			{
				SystemState = ENTER_RUN_PRESET_CTRL;
    15dc:	83 e0       	ldi	r24, 0x03	; 3
    15de:	80 93 53 02 	sts	0x0253, r24	; 0x800253 <SystemState>
    15e2:	b5 c1       	rjmp	.+874    	; 0x194e <_Z10System_Runv+0x48a>
			}
			else if (SystemRunMode == RUN_LOOP_MODE)
    15e4:	80 91 4d 02 	lds	r24, 0x024D	; 0x80024d <SystemRunMode>
    15e8:	81 30       	cpi	r24, 0x01	; 1
    15ea:	09 f0       	breq	.+2      	; 0x15ee <_Z10System_Runv+0x12a>
    15ec:	b0 c1       	rjmp	.+864    	; 0x194e <_Z10System_Runv+0x48a>
			{
				SystemState = ENTER_RUN_LOOP_CTRL;
    15ee:	85 e0       	ldi	r24, 0x05	; 5
    15f0:	80 93 53 02 	sts	0x0253, r24	; 0x800253 <SystemState>
    15f4:	ac c1       	rjmp	.+856    	; 0x194e <_Z10System_Runv+0x48a>
			
			break;
			
		case ENTER_RUN_PRESET_CTRL:
			/* Update state variables */
			SystemRunMode = RUN_PRESET_MODE;
    15f6:	10 92 4d 02 	sts	0x024D, r1	; 0x80024d <SystemRunMode>
			SystemState = RUN_PRESET_CTRL;
    15fa:	84 e0       	ldi	r24, 0x04	; 4
    15fc:	80 93 53 02 	sts	0x0253, r24	; 0x800253 <SystemState>
			
			/* Stop timer */
			System_TempSelectOvfCnt = 0;
    1600:	10 92 59 02 	sts	0x0259, r1	; 0x800259 <System_TempSelectOvfCnt+0x1>
    1604:	10 92 58 02 	sts	0x0258, r1	; 0x800258 <System_TempSelectOvfCnt>
			
			/* Change LastActivePreset to force update */
			LastActivePreset = System_Preset(ActivePreset ^ (1 << 0));
    1608:	90 91 51 02 	lds	r25, 0x0251	; 0x800251 <ActivePreset>
    160c:	81 e0       	ldi	r24, 0x01	; 1
    160e:	89 27       	eor	r24, r25
    1610:	80 93 50 02 	sts	0x0250, r24	; 0x800250 <LastActivePreset>
			
		case RUN_PRESET_CTRL:
			/* If active preset has changed since last cycle then update system */
			if (ActivePreset != LastActivePreset)
    1614:	90 91 51 02 	lds	r25, 0x0251	; 0x800251 <ActivePreset>
    1618:	80 91 50 02 	lds	r24, 0x0250	; 0x800250 <LastActivePreset>
    161c:	98 13       	cpse	r25, r24
			{
				System_ChangePreset();
    161e:	0e 94 c4 09 	call	0x1388	; 0x1388 <_Z19System_ChangePresetv>
			}
			
			/* If user is browsing presets */
			if (TempSelectPreset != LastTempSelectPreset)
    1622:	90 91 4f 02 	lds	r25, 0x024F	; 0x80024f <TempSelectPreset>
    1626:	80 91 4e 02 	lds	r24, 0x024E	; 0x80024e <LastTempSelectPreset>
    162a:	98 17       	cp	r25, r24
    162c:	09 f4       	brne	.+2      	; 0x1630 <_Z10System_Runv+0x16c>
    162e:	8f c1       	rjmp	.+798    	; 0x194e <_Z10System_Runv+0x48a>
			{
				/* Update 7-segment display */
				SP10281_WriteNumber(TempSelectPreset + 1);
    1630:	80 91 4f 02 	lds	r24, 0x024F	; 0x80024f <TempSelectPreset>
    1634:	90 e0       	ldi	r25, 0x00	; 0
    1636:	01 96       	adiw	r24, 0x01	; 1
    1638:	0e 94 04 06 	call	0xc08	; 0xc08 <_Z19SP10281_WriteNumbers>
								
				/* Update UI LEDs */
				LoopModePreset = PresetTable[TempSelectPreset];
    163c:	e0 91 4f 02 	lds	r30, 0x024F	; 0x80024f <TempSelectPreset>
    1640:	f0 e0       	ldi	r31, 0x00	; 0
    1642:	ee 0f       	add	r30, r30
    1644:	ff 1f       	adc	r31, r31
    1646:	ee 0f       	add	r30, r30
    1648:	ff 1f       	adc	r31, r31
    164a:	eb 5d       	subi	r30, 0xDB	; 219
    164c:	fd 4f       	sbci	r31, 0xFD	; 253
    164e:	80 81       	ld	r24, Z
    1650:	91 81       	ldd	r25, Z+1	; 0x01
    1652:	a2 81       	ldd	r26, Z+2	; 0x02
    1654:	b3 81       	ldd	r27, Z+3	; 0x03
    1656:	80 93 89 01 	sts	0x0189, r24	; 0x800189 <LoopModePreset>
    165a:	90 93 8a 01 	sts	0x018A, r25	; 0x80018a <LoopModePreset+0x1>
    165e:	a0 93 8b 01 	sts	0x018B, r26	; 0x80018b <LoopModePreset+0x2>
    1662:	b0 93 8c 01 	sts	0x018C, r27	; 0x80018c <LoopModePreset+0x3>
				System_UpdateUI_LEDs();
    1666:	0e 94 46 07 	call	0xe8c	; 0xe8c <_Z20System_UpdateUI_LEDsv>
    166a:	71 c1       	rjmp	.+738    	; 0x194e <_Z10System_Runv+0x48a>
			
			break;
		
		case ENTER_RUN_LOOP_CTRL:
			/* Update 7-segment display */
			SP10281_WriteAll('M', 'L', 'C', 0, 0, 0);
    166c:	e1 2c       	mov	r14, r1
    166e:	00 e0       	ldi	r16, 0x00	; 0
    1670:	20 e0       	ldi	r18, 0x00	; 0
    1672:	43 e4       	ldi	r20, 0x43	; 67
    1674:	6c e4       	ldi	r22, 0x4C	; 76
    1676:	8d e4       	ldi	r24, 0x4D	; 77
    1678:	0e 94 e7 05 	call	0xbce	; 0xbce <_Z16SP10281_WriteAllccchhh>
			
			/* Update state variables */
			SystemRunMode = RUN_LOOP_MODE;
    167c:	81 e0       	ldi	r24, 0x01	; 1
    167e:	80 93 4d 02 	sts	0x024D, r24	; 0x80024d <SystemRunMode>
			SystemState = RUN_LOOP_CTRL;
    1682:	96 e0       	ldi	r25, 0x06	; 6
    1684:	90 93 53 02 	sts	0x0253, r25	; 0x800253 <SystemState>
			
			/* Stop timer */
			System_TempSelectOvfCnt = 0;
    1688:	10 92 59 02 	sts	0x0259, r1	; 0x800259 <System_TempSelectOvfCnt+0x1>
    168c:	10 92 58 02 	sts	0x0258, r1	; 0x800258 <System_TempSelectOvfCnt>
			
			/* Change LastLoopModePreset to force update */
			LastLoopModePreset.Active_Loops = LoopModePreset.Active_Loops ^ (1 << 0);
    1690:	90 91 89 01 	lds	r25, 0x0189	; 0x800189 <LoopModePreset>
    1694:	89 27       	eor	r24, r25
    1696:	80 93 85 01 	sts	0x0185, r24	; 0x800185 <LastLoopModePreset>
inline bool operator!=(const Preset& lhs, const Preset& rhs)
{
	return	(	lhs.Active_Loops != rhs.Active_Loops
			||	lhs.Active_CtrlSwitches != rhs.Active_CtrlSwitches
			||	lhs.MIDI_PC_In != rhs.MIDI_PC_In
			||	lhs.MIDI_PC_Out != rhs.MIDI_PC_Out);
    169a:	90 91 89 01 	lds	r25, 0x0189	; 0x800189 <LoopModePreset>
    169e:	80 91 85 01 	lds	r24, 0x0185	; 0x800185 <LastLoopModePreset>
    16a2:	98 13       	cpse	r25, r24
    16a4:	11 c0       	rjmp	.+34     	; 0x16c8 <_Z10System_Runv+0x204>
}

inline bool operator!=(const Preset& lhs, const Preset& rhs)
{
	return	(	lhs.Active_Loops != rhs.Active_Loops
			||	lhs.Active_CtrlSwitches != rhs.Active_CtrlSwitches
    16a6:	90 91 8a 01 	lds	r25, 0x018A	; 0x80018a <LoopModePreset+0x1>
    16aa:	80 91 86 01 	lds	r24, 0x0186	; 0x800186 <LastLoopModePreset+0x1>
    16ae:	98 13       	cpse	r25, r24
    16b0:	0b c0       	rjmp	.+22     	; 0x16c8 <_Z10System_Runv+0x204>
			||	lhs.MIDI_PC_In != rhs.MIDI_PC_In
    16b2:	90 91 8b 01 	lds	r25, 0x018B	; 0x80018b <LoopModePreset+0x2>
    16b6:	80 91 87 01 	lds	r24, 0x0187	; 0x800187 <LastLoopModePreset+0x2>
    16ba:	98 13       	cpse	r25, r24
    16bc:	05 c0       	rjmp	.+10     	; 0x16c8 <_Z10System_Runv+0x204>
			
		case RUN_LOOP_CTRL:
			/* If active loops or ctrl switches has changed since last cycle */
			if (LoopModePreset != LastLoopModePreset)
    16be:	90 91 8c 01 	lds	r25, 0x018C	; 0x80018c <LoopModePreset+0x3>
    16c2:	80 91 88 01 	lds	r24, 0x0188	; 0x800188 <LastLoopModePreset+0x3>
    16c6:	98 13       	cpse	r25, r24
			{
				System_UpdateLoopCtrl();
    16c8:	0e 94 21 0a 	call	0x1442	; 0x1442 <_Z21System_UpdateLoopCtrlv>
			}
			
			/* If user is browsing presets */
			if (TempSelectPreset != LastTempSelectPreset)
    16cc:	90 91 4f 02 	lds	r25, 0x024F	; 0x80024f <TempSelectPreset>
    16d0:	80 91 4e 02 	lds	r24, 0x024E	; 0x80024e <LastTempSelectPreset>
    16d4:	98 17       	cp	r25, r24
    16d6:	09 f4       	brne	.+2      	; 0x16da <_Z10System_Runv+0x216>
    16d8:	3a c1       	rjmp	.+628    	; 0x194e <_Z10System_Runv+0x48a>
			{
				/* Update 7-segment display */
				SP10281_WriteNumber(TempSelectPreset + 1);
    16da:	80 91 4f 02 	lds	r24, 0x024F	; 0x80024f <TempSelectPreset>
    16de:	90 e0       	ldi	r25, 0x00	; 0
    16e0:	01 96       	adiw	r24, 0x01	; 1
    16e2:	0e 94 04 06 	call	0xc08	; 0xc08 <_Z19SP10281_WriteNumbers>
							
				/* Update UI LEDs */
				LoopModePreset = PresetTable[TempSelectPreset];
    16e6:	e0 91 4f 02 	lds	r30, 0x024F	; 0x80024f <TempSelectPreset>
    16ea:	f0 e0       	ldi	r31, 0x00	; 0
    16ec:	ee 0f       	add	r30, r30
    16ee:	ff 1f       	adc	r31, r31
    16f0:	ee 0f       	add	r30, r30
    16f2:	ff 1f       	adc	r31, r31
    16f4:	eb 5d       	subi	r30, 0xDB	; 219
    16f6:	fd 4f       	sbci	r31, 0xFD	; 253
    16f8:	80 81       	ld	r24, Z
    16fa:	91 81       	ldd	r25, Z+1	; 0x01
    16fc:	a2 81       	ldd	r26, Z+2	; 0x02
    16fe:	b3 81       	ldd	r27, Z+3	; 0x03
    1700:	80 93 89 01 	sts	0x0189, r24	; 0x800189 <LoopModePreset>
    1704:	90 93 8a 01 	sts	0x018A, r25	; 0x80018a <LoopModePreset+0x1>
    1708:	a0 93 8b 01 	sts	0x018B, r26	; 0x80018b <LoopModePreset+0x2>
    170c:	b0 93 8c 01 	sts	0x018C, r27	; 0x80018c <LoopModePreset+0x3>
				System_UpdateUI_LEDs();
    1710:	0e 94 46 07 	call	0xe8c	; 0xe8c <_Z20System_UpdateUI_LEDsv>
    1714:	1c c1       	rjmp	.+568    	; 0x194e <_Z10System_Runv+0x48a>
		case TUNER:
			break;
		
		case ENTER_EDIT_UI_MODE:
			/* Change LastSystemUIMode to force update */
			LastSystemUIMode = System_UI_Mode(SystemUIMode ^ (1 << 0));
    1716:	90 91 49 02 	lds	r25, 0x0249	; 0x800249 <SystemUIMode>
    171a:	81 e0       	ldi	r24, 0x01	; 1
    171c:	89 27       	eor	r24, r25
    171e:	80 93 48 02 	sts	0x0248, r24	; 0x800248 <LastSystemUIMode>
			
			System_ChangePreset();
    1722:	0e 94 c4 09 	call	0x1388	; 0x1388 <_Z19System_ChangePresetv>
			
			SystemState = EDIT_UI_MODE;
    1726:	8a e0       	ldi	r24, 0x0A	; 10
    1728:	80 93 53 02 	sts	0x0253, r24	; 0x800253 <SystemState>
			
		case EDIT_UI_MODE:
			/* If user is changing the UI mode then update mode LEDs*/
			if (SystemUIMode != LastSystemUIMode)
    172c:	90 91 49 02 	lds	r25, 0x0249	; 0x800249 <SystemUIMode>
    1730:	80 91 48 02 	lds	r24, 0x0248	; 0x800248 <LastSystemUIMode>
    1734:	98 17       	cp	r25, r24
    1736:	91 f1       	breq	.+100    	; 0x179c <_Z10System_Runv+0x2d8>
			{
				if (SystemUIMode == MODE_RUN)
    1738:	80 91 49 02 	lds	r24, 0x0249	; 0x800249 <SystemUIMode>
    173c:	81 11       	cpse	r24, r1
    173e:	0d c0       	rjmp	.+26     	; 0x175a <_Z10System_Runv+0x296>
				{
					ModeRunLED.AutoToggle();
    1740:	8c e4       	ldi	r24, 0x4C	; 76
    1742:	93 e0       	ldi	r25, 0x03	; 3
    1744:	0e 94 30 02 	call	0x460	; 0x460 <_ZN10MCP_Output10AutoToggleEv>
					ModeEditPresetLED.Clear();
    1748:	88 e4       	ldi	r24, 0x48	; 72
    174a:	93 e0       	ldi	r25, 0x03	; 3
    174c:	0e 94 cf 01 	call	0x39e	; 0x39e <_ZN10MCP_Output5ClearEv>
					ModeEditMidiLED.Clear();
    1750:	84 e4       	ldi	r24, 0x44	; 68
    1752:	93 e0       	ldi	r25, 0x03	; 3
    1754:	0e 94 cf 01 	call	0x39e	; 0x39e <_ZN10MCP_Output5ClearEv>
    1758:	21 c0       	rjmp	.+66     	; 0x179c <_Z10System_Runv+0x2d8>
				}
				else if (SystemUIMode == MODE_EDIT_PRESET)
    175a:	80 91 49 02 	lds	r24, 0x0249	; 0x800249 <SystemUIMode>
    175e:	81 30       	cpi	r24, 0x01	; 1
    1760:	69 f4       	brne	.+26     	; 0x177c <_Z10System_Runv+0x2b8>
				{
					ModeRunLED.Clear();
    1762:	8c e4       	ldi	r24, 0x4C	; 76
    1764:	93 e0       	ldi	r25, 0x03	; 3
    1766:	0e 94 cf 01 	call	0x39e	; 0x39e <_ZN10MCP_Output5ClearEv>
					ModeEditPresetLED.AutoToggle();
    176a:	88 e4       	ldi	r24, 0x48	; 72
    176c:	93 e0       	ldi	r25, 0x03	; 3
    176e:	0e 94 30 02 	call	0x460	; 0x460 <_ZN10MCP_Output10AutoToggleEv>
					ModeEditMidiLED.Clear();
    1772:	84 e4       	ldi	r24, 0x44	; 68
    1774:	93 e0       	ldi	r25, 0x03	; 3
    1776:	0e 94 cf 01 	call	0x39e	; 0x39e <_ZN10MCP_Output5ClearEv>
    177a:	10 c0       	rjmp	.+32     	; 0x179c <_Z10System_Runv+0x2d8>
				}
				else if (SystemUIMode == MODE_EDIT_MIDI)
    177c:	80 91 49 02 	lds	r24, 0x0249	; 0x800249 <SystemUIMode>
    1780:	82 30       	cpi	r24, 0x02	; 2
    1782:	61 f4       	brne	.+24     	; 0x179c <_Z10System_Runv+0x2d8>
				{
					ModeRunLED.Clear();
    1784:	8c e4       	ldi	r24, 0x4C	; 76
    1786:	93 e0       	ldi	r25, 0x03	; 3
    1788:	0e 94 cf 01 	call	0x39e	; 0x39e <_ZN10MCP_Output5ClearEv>
					ModeEditPresetLED.Clear();
    178c:	88 e4       	ldi	r24, 0x48	; 72
    178e:	93 e0       	ldi	r25, 0x03	; 3
    1790:	0e 94 cf 01 	call	0x39e	; 0x39e <_ZN10MCP_Output5ClearEv>
					ModeEditMidiLED.AutoToggle();
    1794:	84 e4       	ldi	r24, 0x44	; 68
    1796:	93 e0       	ldi	r25, 0x03	; 3
    1798:	0e 94 30 02 	call	0x460	; 0x460 <_ZN10MCP_Output10AutoToggleEv>
				}
			}
			
			LastSystemUIMode = SystemUIMode;
    179c:	80 91 49 02 	lds	r24, 0x0249	; 0x800249 <SystemUIMode>
    17a0:	80 93 48 02 	sts	0x0248, r24	; 0x800248 <LastSystemUIMode>
			
			break;
    17a4:	d4 c0       	rjmp	.+424    	; 0x194e <_Z10System_Runv+0x48a>
		
		case ENTER_EDIT_PRESET:
			/* Disable Auto toggle */
			ModeRunLED.Clear();
    17a6:	8c e4       	ldi	r24, 0x4C	; 76
    17a8:	93 e0       	ldi	r25, 0x03	; 3
    17aa:	0e 94 cf 01 	call	0x39e	; 0x39e <_ZN10MCP_Output5ClearEv>
			ModeEditPresetLED.Set();
    17ae:	88 e4       	ldi	r24, 0x48	; 72
    17b0:	93 e0       	ldi	r25, 0x03	; 3
    17b2:	0e 94 92 01 	call	0x324	; 0x324 <_ZN10MCP_Output3SetEv>
			ModeEditMidiLED.Clear();
    17b6:	84 e4       	ldi	r24, 0x44	; 68
    17b8:	93 e0       	ldi	r25, 0x03	; 3
    17ba:	0e 94 cf 01 	call	0x39e	; 0x39e <_ZN10MCP_Output5ClearEv>
			
			LoopModePreset = PresetTable[ActivePreset];
    17be:	e0 91 51 02 	lds	r30, 0x0251	; 0x800251 <ActivePreset>
    17c2:	f0 e0       	ldi	r31, 0x00	; 0
    17c4:	ee 0f       	add	r30, r30
    17c6:	ff 1f       	adc	r31, r31
    17c8:	ee 0f       	add	r30, r30
    17ca:	ff 1f       	adc	r31, r31
    17cc:	eb 5d       	subi	r30, 0xDB	; 219
    17ce:	fd 4f       	sbci	r31, 0xFD	; 253
    17d0:	80 81       	ld	r24, Z
    17d2:	91 81       	ldd	r25, Z+1	; 0x01
    17d4:	a2 81       	ldd	r26, Z+2	; 0x02
    17d6:	b3 81       	ldd	r27, Z+3	; 0x03
    17d8:	80 93 89 01 	sts	0x0189, r24	; 0x800189 <LoopModePreset>
    17dc:	90 93 8a 01 	sts	0x018A, r25	; 0x80018a <LoopModePreset+0x1>
    17e0:	a0 93 8b 01 	sts	0x018B, r26	; 0x80018b <LoopModePreset+0x2>
    17e4:	b0 93 8c 01 	sts	0x018C, r27	; 0x80018c <LoopModePreset+0x3>
			
			UserEditSelection = 0;
    17e8:	10 92 24 02 	sts	0x0224, r1	; 0x800224 <UserEditSelection>
			LastUserEditSelection = 1;
    17ec:	81 e0       	ldi	r24, 0x01	; 1
    17ee:	80 93 23 02 	sts	0x0223, r24	; 0x800223 <LastUserEditSelection>
			
			SystemState = EDIT_PRESET;
    17f2:	8c e0       	ldi	r24, 0x0C	; 12
    17f4:	80 93 53 02 	sts	0x0253, r24	; 0x800253 <SystemState>
			
		case EDIT_PRESET:
			/* If user is selecting */
			if (UserEditSelection != LastUserEditSelection)
    17f8:	90 91 24 02 	lds	r25, 0x0224	; 0x800224 <UserEditSelection>
    17fc:	80 91 23 02 	lds	r24, 0x0223	; 0x800223 <LastUserEditSelection>
    1800:	98 17       	cp	r25, r24
    1802:	89 f1       	breq	.+98     	; 0x1866 <_Z10System_Runv+0x3a2>
			{
				/* Blank LEDs except from selection */
				if (UserEditSelection <= 7)
    1804:	80 91 24 02 	lds	r24, 0x0224	; 0x800224 <UserEditSelection>
    1808:	88 30       	cpi	r24, 0x08	; 8
    180a:	98 f4       	brcc	.+38     	; 0x1832 <_Z10System_Runv+0x36e>
				{
					MCP23017_WriteReg(MCP23017_UI_LEDS_ADDR, OLATA, (1 << UserEditSelection));
    180c:	80 91 24 02 	lds	r24, 0x0224	; 0x800224 <UserEditSelection>
    1810:	41 e0       	ldi	r20, 0x01	; 1
    1812:	50 e0       	ldi	r21, 0x00	; 0
    1814:	02 c0       	rjmp	.+4      	; 0x181a <_Z10System_Runv+0x356>
    1816:	44 0f       	add	r20, r20
    1818:	55 1f       	adc	r21, r21
    181a:	8a 95       	dec	r24
    181c:	e2 f7       	brpl	.-8      	; 0x1816 <_Z10System_Runv+0x352>
    181e:	64 e1       	ldi	r22, 0x14	; 20
    1820:	80 e0       	ldi	r24, 0x00	; 0
    1822:	0e 94 64 01 	call	0x2c8	; 0x2c8 <_Z17MCP23017_WriteReghhh>
					MCP23017_WriteReg(MCP23017_UI_LEDS_ADDR, OLATB, (1 << UI_MODE_PRESET_LED_PIN));
    1826:	40 e4       	ldi	r20, 0x40	; 64
    1828:	65 e1       	ldi	r22, 0x15	; 21
    182a:	80 e0       	ldi	r24, 0x00	; 0
    182c:	0e 94 64 01 	call	0x2c8	; 0x2c8 <_Z17MCP23017_WriteReghhh>
    1830:	14 c0       	rjmp	.+40     	; 0x185a <_Z10System_Runv+0x396>
				}
				else
				{
					MCP23017_WriteReg(MCP23017_UI_LEDS_ADDR, OLATA, 0x00);
    1832:	40 e0       	ldi	r20, 0x00	; 0
    1834:	64 e1       	ldi	r22, 0x14	; 20
    1836:	80 e0       	ldi	r24, 0x00	; 0
    1838:	0e 94 64 01 	call	0x2c8	; 0x2c8 <_Z17MCP23017_WriteReghhh>
					MCP23017_WriteReg(MCP23017_UI_LEDS_ADDR, OLATB, ((1 << UI_MODE_PRESET_LED_PIN) | (1 << (UserEditSelection - 8))));
    183c:	80 91 24 02 	lds	r24, 0x0224	; 0x800224 <UserEditSelection>
    1840:	88 50       	subi	r24, 0x08	; 8
    1842:	41 e0       	ldi	r20, 0x01	; 1
    1844:	50 e0       	ldi	r21, 0x00	; 0
    1846:	02 c0       	rjmp	.+4      	; 0x184c <_Z10System_Runv+0x388>
    1848:	44 0f       	add	r20, r20
    184a:	55 1f       	adc	r21, r21
    184c:	8a 95       	dec	r24
    184e:	e2 f7       	brpl	.-8      	; 0x1848 <_Z10System_Runv+0x384>
    1850:	40 64       	ori	r20, 0x40	; 64
    1852:	65 e1       	ldi	r22, 0x15	; 21
    1854:	80 e0       	ldi	r24, 0x00	; 0
    1856:	0e 94 64 01 	call	0x2c8	; 0x2c8 <_Z17MCP23017_WriteReghhh>
				}
				
				/* Start timer */
				System_MarkSelectionOvfCnt = 1;
    185a:	81 e0       	ldi	r24, 0x01	; 1
    185c:	90 e0       	ldi	r25, 0x00	; 0
    185e:	90 93 56 02 	sts	0x0256, r25	; 0x800256 <System_MarkSelectionOvfCnt+0x1>
    1862:	80 93 55 02 	sts	0x0255, r24	; 0x800255 <System_MarkSelectionOvfCnt>
			}
			
			LastUserEditSelection = UserEditSelection;
    1866:	80 91 24 02 	lds	r24, 0x0224	; 0x800224 <UserEditSelection>
    186a:	80 93 23 02 	sts	0x0223, r24	; 0x800223 <LastUserEditSelection>
			break;
    186e:	6f c0       	rjmp	.+222    	; 0x194e <_Z10System_Runv+0x48a>
			
		case ENTER_EDIT_MIDI_IN_OUT:
			/* Disable Auto toggle */
			ModeRunLED.Clear();
    1870:	8c e4       	ldi	r24, 0x4C	; 76
    1872:	93 e0       	ldi	r25, 0x03	; 3
    1874:	0e 94 cf 01 	call	0x39e	; 0x39e <_ZN10MCP_Output5ClearEv>
			ModeEditPresetLED.Clear();
    1878:	88 e4       	ldi	r24, 0x48	; 72
    187a:	93 e0       	ldi	r25, 0x03	; 3
    187c:	0e 94 cf 01 	call	0x39e	; 0x39e <_ZN10MCP_Output5ClearEv>
			ModeEditMidiLED.Set();
    1880:	84 e4       	ldi	r24, 0x44	; 68
    1882:	93 e0       	ldi	r25, 0x03	; 3
    1884:	0e 94 92 01 	call	0x324	; 0x324 <_ZN10MCP_Output3SetEv>
			
			/* Update 7-segment display */
			if (SetMidiEdit == MIDI_IN)
    1888:	80 91 47 02 	lds	r24, 0x0247	; 0x800247 <SetMidiEdit>
    188c:	81 11       	cpse	r24, r1
    188e:	09 c0       	rjmp	.+18     	; 0x18a2 <_Z10System_Runv+0x3de>
			{
				SP10281_WriteAll('i', 'n', ' ', 0, 0, 0);
    1890:	e1 2c       	mov	r14, r1
    1892:	00 e0       	ldi	r16, 0x00	; 0
    1894:	20 e0       	ldi	r18, 0x00	; 0
    1896:	40 e2       	ldi	r20, 0x20	; 32
    1898:	6e e6       	ldi	r22, 0x6E	; 110
    189a:	89 e6       	ldi	r24, 0x69	; 105
    189c:	0e 94 e7 05 	call	0xbce	; 0xbce <_Z16SP10281_WriteAllccchhh>
    18a0:	08 c0       	rjmp	.+16     	; 0x18b2 <_Z10System_Runv+0x3ee>
			}
			else
			{
				SP10281_WriteAll('o', 'u', 't', 0, 0, 0);
    18a2:	e1 2c       	mov	r14, r1
    18a4:	00 e0       	ldi	r16, 0x00	; 0
    18a6:	20 e0       	ldi	r18, 0x00	; 0
    18a8:	44 e7       	ldi	r20, 0x74	; 116
    18aa:	65 e7       	ldi	r22, 0x75	; 117
    18ac:	8f e6       	ldi	r24, 0x6F	; 111
    18ae:	0e 94 e7 05 	call	0xbce	; 0xbce <_Z16SP10281_WriteAllccchhh>
			}
			
			SystemState = EDIT_MIDI_IN_OUT;
    18b2:	8e e0       	ldi	r24, 0x0E	; 14
    18b4:	80 93 53 02 	sts	0x0253, r24	; 0x800253 <SystemState>
    18b8:	4a c0       	rjmp	.+148    	; 0x194e <_Z10System_Runv+0x48a>
		case EDIT_MIDI_IN_OUT:
			break;
		
		case ENTER_EDIT_MIDI_PC:
			/* Get setup for active preset */
			if (SetMidiEdit == MIDI_IN)
    18ba:	80 91 47 02 	lds	r24, 0x0247	; 0x800247 <SetMidiEdit>
    18be:	81 11       	cpse	r24, r1
    18c0:	19 c0       	rjmp	.+50     	; 0x18f4 <_Z10System_Runv+0x430>
			{
				TempSelectMidiPC = PresetTable[ActivePreset].MIDI_PC_In;
    18c2:	e0 91 51 02 	lds	r30, 0x0251	; 0x800251 <ActivePreset>
    18c6:	f0 e0       	ldi	r31, 0x00	; 0
    18c8:	ee 0f       	add	r30, r30
    18ca:	ff 1f       	adc	r31, r31
    18cc:	ee 0f       	add	r30, r30
    18ce:	ff 1f       	adc	r31, r31
    18d0:	eb 5d       	subi	r30, 0xDB	; 219
    18d2:	fd 4f       	sbci	r31, 0xFD	; 253
    18d4:	82 81       	ldd	r24, Z+2	; 0x02
    18d6:	80 93 46 02 	sts	0x0246, r24	; 0x800246 <TempSelectMidiPC>
				LastTempSelectMidiPC = PresetTable[ActivePreset].MIDI_PC_In;
    18da:	e0 91 51 02 	lds	r30, 0x0251	; 0x800251 <ActivePreset>
    18de:	f0 e0       	ldi	r31, 0x00	; 0
    18e0:	ee 0f       	add	r30, r30
    18e2:	ff 1f       	adc	r31, r31
    18e4:	ee 0f       	add	r30, r30
    18e6:	ff 1f       	adc	r31, r31
    18e8:	eb 5d       	subi	r30, 0xDB	; 219
    18ea:	fd 4f       	sbci	r31, 0xFD	; 253
    18ec:	82 81       	ldd	r24, Z+2	; 0x02
    18ee:	80 93 45 02 	sts	0x0245, r24	; 0x800245 <LastTempSelectMidiPC>
    18f2:	18 c0       	rjmp	.+48     	; 0x1924 <_Z10System_Runv+0x460>
			}
			else
			{
				TempSelectMidiPC = PresetTable[ActivePreset].MIDI_PC_Out;
    18f4:	e0 91 51 02 	lds	r30, 0x0251	; 0x800251 <ActivePreset>
    18f8:	f0 e0       	ldi	r31, 0x00	; 0
    18fa:	ee 0f       	add	r30, r30
    18fc:	ff 1f       	adc	r31, r31
    18fe:	ee 0f       	add	r30, r30
    1900:	ff 1f       	adc	r31, r31
    1902:	eb 5d       	subi	r30, 0xDB	; 219
    1904:	fd 4f       	sbci	r31, 0xFD	; 253
    1906:	83 81       	ldd	r24, Z+3	; 0x03
    1908:	80 93 46 02 	sts	0x0246, r24	; 0x800246 <TempSelectMidiPC>
				LastTempSelectMidiPC = PresetTable[ActivePreset].MIDI_PC_Out;
    190c:	e0 91 51 02 	lds	r30, 0x0251	; 0x800251 <ActivePreset>
    1910:	f0 e0       	ldi	r31, 0x00	; 0
    1912:	ee 0f       	add	r30, r30
    1914:	ff 1f       	adc	r31, r31
    1916:	ee 0f       	add	r30, r30
    1918:	ff 1f       	adc	r31, r31
    191a:	eb 5d       	subi	r30, 0xDB	; 219
    191c:	fd 4f       	sbci	r31, 0xFD	; 253
    191e:	83 81       	ldd	r24, Z+3	; 0x03
    1920:	80 93 45 02 	sts	0x0245, r24	; 0x800245 <LastTempSelectMidiPC>
			}
			
			/* Update 7-segment display */
			if (TempSelectMidiPC == MIDI_PC_OFF)
    1924:	80 91 46 02 	lds	r24, 0x0246	; 0x800246 <TempSelectMidiPC>
    1928:	8f 3f       	cpi	r24, 0xFF	; 255
    192a:	49 f4       	brne	.+18     	; 0x193e <_Z10System_Runv+0x47a>
			{
				SP10281_WriteAll('o', 'f', 'f', 0, 0, 0);
    192c:	e1 2c       	mov	r14, r1
    192e:	00 e0       	ldi	r16, 0x00	; 0
    1930:	20 e0       	ldi	r18, 0x00	; 0
    1932:	46 e6       	ldi	r20, 0x66	; 102
    1934:	66 e6       	ldi	r22, 0x66	; 102
    1936:	8f e6       	ldi	r24, 0x6F	; 111
    1938:	0e 94 e7 05 	call	0xbce	; 0xbce <_Z16SP10281_WriteAllccchhh>
    193c:	05 c0       	rjmp	.+10     	; 0x1948 <_Z10System_Runv+0x484>
			}
			else
			{
				SP10281_WriteNumber(TempSelectMidiPC);
    193e:	80 91 46 02 	lds	r24, 0x0246	; 0x800246 <TempSelectMidiPC>
    1942:	90 e0       	ldi	r25, 0x00	; 0
    1944:	0e 94 04 06 	call	0xc08	; 0xc08 <_Z19SP10281_WriteNumbers>
			}
			
			SystemState = EDIT_MIDI_PC;
    1948:	80 e1       	ldi	r24, 0x10	; 16
    194a:	80 93 53 02 	sts	0x0253, r24	; 0x800253 <SystemState>
		
		default:
			break;
	}
	
	LastActivePreset = ActivePreset;
    194e:	80 91 51 02 	lds	r24, 0x0251	; 0x800251 <ActivePreset>
    1952:	80 93 50 02 	sts	0x0250, r24	; 0x800250 <LastActivePreset>
	LastSystemState = SystemState;
    1956:	80 91 53 02 	lds	r24, 0x0253	; 0x800253 <SystemState>
    195a:	80 93 52 02 	sts	0x0252, r24	; 0x800252 <LastSystemState>
	LastLoopModePreset = LoopModePreset;
    195e:	80 91 89 01 	lds	r24, 0x0189	; 0x800189 <LoopModePreset>
    1962:	90 91 8a 01 	lds	r25, 0x018A	; 0x80018a <LoopModePreset+0x1>
    1966:	a0 91 8b 01 	lds	r26, 0x018B	; 0x80018b <LoopModePreset+0x2>
    196a:	b0 91 8c 01 	lds	r27, 0x018C	; 0x80018c <LoopModePreset+0x3>
    196e:	80 93 85 01 	sts	0x0185, r24	; 0x800185 <LastLoopModePreset>
    1972:	90 93 86 01 	sts	0x0186, r25	; 0x800186 <LastLoopModePreset+0x1>
    1976:	a0 93 87 01 	sts	0x0187, r26	; 0x800187 <LastLoopModePreset+0x2>
    197a:	b0 93 88 01 	sts	0x0188, r27	; 0x800188 <LastLoopModePreset+0x3>
	LastTempSelectPreset = TempSelectPreset;
    197e:	80 91 4f 02 	lds	r24, 0x024F	; 0x80024f <TempSelectPreset>
    1982:	80 93 4e 02 	sts	0x024E, r24	; 0x80024e <LastTempSelectPreset>
}
    1986:	0f 91       	pop	r16
    1988:	ef 90       	pop	r14
    198a:	08 95       	ret

0000198c <_Z11Timer0_Initv>:
#include "System.h"

void Timer0_Init()
{
	/* Setup Timer */
	TCCR0A |= (1 << WGM01);		// Set Timer to CTC mode (Clear Timer on Compare match)
    198c:	84 b5       	in	r24, 0x24	; 36
    198e:	82 60       	ori	r24, 0x02	; 2
    1990:	84 bd       	out	0x24, r24	; 36
	TCNT0 = 0;					// Clear counter register
    1992:	16 bc       	out	0x26, r1	; 38
	OCR0A = 155;				// Set Output Compare value (78125Hz / 156 = 500,8Hz (1,997ms))
    1994:	8b e9       	ldi	r24, 0x9B	; 155
    1996:	87 bd       	out	0x27, r24	; 39
	TIMSK0 |= (1 << OCIE0A);	// Output Compare A Match Interrupt Enable
    1998:	ee e6       	ldi	r30, 0x6E	; 110
    199a:	f0 e0       	ldi	r31, 0x00	; 0
    199c:	80 81       	ld	r24, Z
    199e:	82 60       	ori	r24, 0x02	; 2
    19a0:	80 83       	st	Z, r24
	
	/* Start Timer */
	TCCR0B |= (1 << CS02);		// Set clock prescaler to 256 (20MHz / 256 = 78125Hz)
    19a2:	85 b5       	in	r24, 0x25	; 37
    19a4:	84 60       	ori	r24, 0x04	; 4
    19a6:	85 bd       	out	0x25, r24	; 37
    19a8:	08 95       	ret

000019aa <_Z13Timer0_ms2cntm>:
}

uint32_t Timer0_ms2cnt(uint32_t ms)
{
    19aa:	9b 01       	movw	r18, r22
    19ac:	ac 01       	movw	r20, r24
	ms *= 1000;
	return (uint32_t)(ms / TIMER0_PERIOD_US);
    19ae:	a8 ee       	ldi	r26, 0xE8	; 232
    19b0:	b3 e0       	ldi	r27, 0x03	; 3
    19b2:	0e 94 d4 10 	call	0x21a8	; 0x21a8 <__muluhisi3>
    19b6:	2d ec       	ldi	r18, 0xCD	; 205
    19b8:	37 e0       	ldi	r19, 0x07	; 7
    19ba:	40 e0       	ldi	r20, 0x00	; 0
    19bc:	50 e0       	ldi	r21, 0x00	; 0
    19be:	0e 94 ac 10 	call	0x2158	; 0x2158 <__udivmodsi4>
}
    19c2:	ca 01       	movw	r24, r20
    19c4:	b9 01       	movw	r22, r18
    19c6:	08 95       	ret

000019c8 <__vector_16>:

/* Timer0 Compare A Match Interrupt Service Routine */
ISR(TIMER0_COMPA_vect)
{
    19c8:	1f 92       	push	r1
    19ca:	0f 92       	push	r0
    19cc:	0f b6       	in	r0, 0x3f	; 63
    19ce:	0f 92       	push	r0
    19d0:	11 24       	eor	r1, r1
    19d2:	2f 93       	push	r18
    19d4:	3f 93       	push	r19
    19d6:	8f 93       	push	r24
    19d8:	9f 93       	push	r25
	/* Overflow counter to reset parameter if user doesn't commit */
	if (System_TempSelectOvfCnt)
    19da:	80 91 58 02 	lds	r24, 0x0258	; 0x800258 <System_TempSelectOvfCnt>
    19de:	90 91 59 02 	lds	r25, 0x0259	; 0x800259 <System_TempSelectOvfCnt+0x1>
    19e2:	89 2b       	or	r24, r25
    19e4:	99 f0       	breq	.+38     	; 0x1a0c <__vector_16+0x44>
	{
		if (++System_TempSelectOvfCnt > SYSTEM_TEMP_SELECT_TIMEOUT)
    19e6:	80 91 58 02 	lds	r24, 0x0258	; 0x800258 <System_TempSelectOvfCnt>
    19ea:	90 91 59 02 	lds	r25, 0x0259	; 0x800259 <System_TempSelectOvfCnt+0x1>
    19ee:	01 96       	adiw	r24, 0x01	; 1
    19f0:	90 93 59 02 	sts	0x0259, r25	; 0x800259 <System_TempSelectOvfCnt+0x1>
    19f4:	80 93 58 02 	sts	0x0258, r24	; 0x800258 <System_TempSelectOvfCnt>
    19f8:	8d 3d       	cpi	r24, 0xDD	; 221
    19fa:	95 40       	sbci	r25, 0x05	; 5
    19fc:	38 f0       	brcs	.+14     	; 0x1a0c <__vector_16+0x44>
		{
			System_TempSelectOvfCnt = 0;
    19fe:	10 92 59 02 	sts	0x0259, r1	; 0x800259 <System_TempSelectOvfCnt+0x1>
    1a02:	10 92 58 02 	sts	0x0258, r1	; 0x800258 <System_TempSelectOvfCnt>
			System_TempSelectFlag = true;
    1a06:	81 e0       	ldi	r24, 0x01	; 1
    1a08:	80 93 57 02 	sts	0x0257, r24	; 0x800257 <System_TempSelectFlag>
		}
	}
	
	/* Overflow counter to shortly blank LEDs to mark selection */
	if (System_MarkSelectionOvfCnt)
    1a0c:	80 91 55 02 	lds	r24, 0x0255	; 0x800255 <System_MarkSelectionOvfCnt>
    1a10:	90 91 56 02 	lds	r25, 0x0256	; 0x800256 <System_MarkSelectionOvfCnt+0x1>
    1a14:	89 2b       	or	r24, r25
    1a16:	99 f0       	breq	.+38     	; 0x1a3e <__vector_16+0x76>
	{
		if (++System_MarkSelectionOvfCnt > SYSTEM_MARK_SELECTION_TIMEOUT)
    1a18:	80 91 55 02 	lds	r24, 0x0255	; 0x800255 <System_MarkSelectionOvfCnt>
    1a1c:	90 91 56 02 	lds	r25, 0x0256	; 0x800256 <System_MarkSelectionOvfCnt+0x1>
    1a20:	01 96       	adiw	r24, 0x01	; 1
    1a22:	90 93 56 02 	sts	0x0256, r25	; 0x800256 <System_MarkSelectionOvfCnt+0x1>
    1a26:	80 93 55 02 	sts	0x0255, r24	; 0x800255 <System_MarkSelectionOvfCnt>
    1a2a:	87 39       	cpi	r24, 0x97	; 151
    1a2c:	91 05       	cpc	r25, r1
    1a2e:	38 f0       	brcs	.+14     	; 0x1a3e <__vector_16+0x76>
		{
			System_MarkSelectionOvfCnt = 0;
    1a30:	10 92 56 02 	sts	0x0256, r1	; 0x800256 <System_MarkSelectionOvfCnt+0x1>
    1a34:	10 92 55 02 	sts	0x0255, r1	; 0x800255 <System_MarkSelectionOvfCnt>
			System_MarkSelectionFlag = true;
    1a38:	81 e0       	ldi	r24, 0x01	; 1
    1a3a:	80 93 54 02 	sts	0x0254, r24	; 0x800254 <System_MarkSelectionFlag>
		}
	}
	
	/* Overflow counter for delaying transmit to Pedal */
	if (PedalCom_DelayTXOvfCnt)
    1a3e:	80 91 17 02 	lds	r24, 0x0217	; 0x800217 <PedalCom_DelayTXOvfCnt>
    1a42:	88 23       	and	r24, r24
    1a44:	61 f0       	breq	.+24     	; 0x1a5e <__vector_16+0x96>
	{
		if (++PedalCom_DelayTXOvfCnt > PEDALCOM_DELAY_TX_TIMEOUT)
    1a46:	80 91 17 02 	lds	r24, 0x0217	; 0x800217 <PedalCom_DelayTXOvfCnt>
    1a4a:	8f 5f       	subi	r24, 0xFF	; 255
    1a4c:	80 93 17 02 	sts	0x0217, r24	; 0x800217 <PedalCom_DelayTXOvfCnt>
    1a50:	84 30       	cpi	r24, 0x04	; 4
    1a52:	28 f0       	brcs	.+10     	; 0x1a5e <__vector_16+0x96>
		{
			PedalCom_DelayTXOvfCnt = 0;	// Stop overflow counter
    1a54:	10 92 17 02 	sts	0x0217, r1	; 0x800217 <PedalCom_DelayTXOvfCnt>
			PedalCom_DelayTxFlag = true;
    1a58:	81 e0       	ldi	r24, 0x01	; 1
    1a5a:	80 93 18 02 	sts	0x0218, r24	; 0x800218 <PedalCom_DelayTxFlag>
		}
	}

	/* Overflow counter for Pedal response timeout and heartbeat */
	if (++PedalCom_ResponseTimeoutOvfCnt > PEDALCOM_RESPONSE_TIMEOUT)
    1a5e:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <PedalCom_ResponseTimeoutOvfCnt>
    1a62:	90 91 04 01 	lds	r25, 0x0104	; 0x800104 <PedalCom_ResponseTimeoutOvfCnt+0x1>
    1a66:	01 96       	adiw	r24, 0x01	; 1
    1a68:	90 93 04 01 	sts	0x0104, r25	; 0x800104 <PedalCom_ResponseTimeoutOvfCnt+0x1>
    1a6c:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <PedalCom_ResponseTimeoutOvfCnt>
    1a70:	89 3e       	cpi	r24, 0xE9	; 233
    1a72:	93 40       	sbci	r25, 0x03	; 3
    1a74:	40 f0       	brcs	.+16     	; 0x1a86 <__vector_16+0xbe>
	{
		PedalCom_ResponseTimeoutOvfCnt = 1;	// Reset overflow counter
    1a76:	81 e0       	ldi	r24, 0x01	; 1
    1a78:	90 e0       	ldi	r25, 0x00	; 0
    1a7a:	90 93 04 01 	sts	0x0104, r25	; 0x800104 <PedalCom_ResponseTimeoutOvfCnt+0x1>
    1a7e:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <PedalCom_ResponseTimeoutOvfCnt>
		PedalCom_ResponseTimeoutFlag = true;
    1a82:	80 93 16 02 	sts	0x0216, r24	; 0x800216 <PedalCom_ResponseTimeoutFlag>
	}
	
	/* Overflow counter for multiplexing 3x7-segment display */
	if (++SP10281_OvfCnt >= SP10281_OVF_RESET)
    1a86:	80 91 1e 02 	lds	r24, 0x021E	; 0x80021e <SP10281_OvfCnt>
    1a8a:	8f 5f       	subi	r24, 0xFF	; 255
    1a8c:	80 93 1e 02 	sts	0x021E, r24	; 0x80021e <SP10281_OvfCnt>
    1a90:	83 30       	cpi	r24, 0x03	; 3
    1a92:	28 f0       	brcs	.+10     	; 0x1a9e <__vector_16+0xd6>
	{
		SP10281_OvfCnt = 0;		// Stop overflow counter
    1a94:	10 92 1e 02 	sts	0x021E, r1	; 0x80021e <SP10281_OvfCnt>
		SP10281_OvfFlag = 1;
    1a98:	81 e0       	ldi	r24, 0x01	; 1
    1a9a:	80 93 1d 02 	sts	0x021D, r24	; 0x80021d <SP10281_OvfFlag>
	}
	
	/* Overflow counter for blinking UI LEDs */
	if (++(MCP_Output::AutoToggle_OvfCnt) > MCP_Output::AutoToggle_Timeout)
    1a9e:	80 91 95 01 	lds	r24, 0x0195	; 0x800195 <_ZN10MCP_Output17AutoToggle_OvfCntE>
    1aa2:	90 91 96 01 	lds	r25, 0x0196	; 0x800196 <_ZN10MCP_Output17AutoToggle_OvfCntE+0x1>
    1aa6:	01 96       	adiw	r24, 0x01	; 1
    1aa8:	90 93 96 01 	sts	0x0196, r25	; 0x800196 <_ZN10MCP_Output17AutoToggle_OvfCntE+0x1>
    1aac:	80 93 95 01 	sts	0x0195, r24	; 0x800195 <_ZN10MCP_Output17AutoToggle_OvfCntE>
    1ab0:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <_ZN10MCP_Output18AutoToggle_TimeoutE>
    1ab4:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <_ZN10MCP_Output18AutoToggle_TimeoutE+0x1>
    1ab8:	28 17       	cp	r18, r24
    1aba:	39 07       	cpc	r19, r25
    1abc:	78 f4       	brcc	.+30     	; 0x1adc <__vector_16+0x114>
	{
		MCP_Output::AutoToggle_OvfCnt = 0;		// Reset overflow counter
    1abe:	10 92 96 01 	sts	0x0196, r1	; 0x800196 <_ZN10MCP_Output17AutoToggle_OvfCntE+0x1>
    1ac2:	10 92 95 01 	sts	0x0195, r1	; 0x800195 <_ZN10MCP_Output17AutoToggle_OvfCntE>
		
		if (MCP_Output::AutoToggle_PortA || MCP_Output::AutoToggle_PortB)
    1ac6:	80 91 93 01 	lds	r24, 0x0193	; 0x800193 <_ZN10MCP_Output16AutoToggle_PortAE>
    1aca:	81 11       	cpse	r24, r1
    1acc:	04 c0       	rjmp	.+8      	; 0x1ad6 <__vector_16+0x10e>
    1ace:	80 91 92 01 	lds	r24, 0x0192	; 0x800192 <__data_end>
    1ad2:	88 23       	and	r24, r24
    1ad4:	19 f0       	breq	.+6      	; 0x1adc <__vector_16+0x114>
		{
			MCP_Output::AutoToggle_Flag = 1;
    1ad6:	81 e0       	ldi	r24, 0x01	; 1
    1ad8:	80 93 94 01 	sts	0x0194, r24	; 0x800194 <_ZN10MCP_Output15AutoToggle_FlagE>
		}
	}
	
	/* Overflow counter for rotary encoder handling */
	if (RotaryEncoder_OvfCnt)
    1adc:	80 91 1a 02 	lds	r24, 0x021A	; 0x80021a <RotaryEncoder_OvfCnt>
    1ae0:	90 91 1b 02 	lds	r25, 0x021B	; 0x80021b <RotaryEncoder_OvfCnt+0x1>
    1ae4:	89 2b       	or	r24, r25
    1ae6:	b9 f1       	breq	.+110    	; 0x1b56 <__vector_16+0x18e>
	{
		RotaryEncoder_OvfCnt++;
    1ae8:	80 91 1a 02 	lds	r24, 0x021A	; 0x80021a <RotaryEncoder_OvfCnt>
    1aec:	90 91 1b 02 	lds	r25, 0x021B	; 0x80021b <RotaryEncoder_OvfCnt+0x1>
    1af0:	01 96       	adiw	r24, 0x01	; 1
    1af2:	90 93 1b 02 	sts	0x021B, r25	; 0x80021b <RotaryEncoder_OvfCnt+0x1>
    1af6:	80 93 1a 02 	sts	0x021A, r24	; 0x80021a <RotaryEncoder_OvfCnt>
		
		if (RotaryEncoder_OvfCnt > ROT_ENC_LONG_PRESS_OVF)
    1afa:	80 91 1a 02 	lds	r24, 0x021A	; 0x80021a <RotaryEncoder_OvfCnt>
    1afe:	90 91 1b 02 	lds	r25, 0x021B	; 0x80021b <RotaryEncoder_OvfCnt+0x1>
    1b02:	89 35       	cpi	r24, 0x59	; 89
    1b04:	92 40       	sbci	r25, 0x02	; 2
    1b06:	68 f0       	brcs	.+26     	; 0x1b22 <__vector_16+0x15a>
		{
			/* If button is still pressed */
			if ( GPIO_ROT_ENC_PIN & GPIO_ROT_ENC_PRESS_MASK )
    1b08:	1a 9b       	sbis	0x03, 2	; 3
    1b0a:	04 c0       	rjmp	.+8      	; 0x1b14 <__vector_16+0x14c>
			{
				RotEnc_State = LONG_PRESS;
    1b0c:	85 e0       	ldi	r24, 0x05	; 5
    1b0e:	80 93 19 02 	sts	0x0219, r24	; 0x800219 <RotEnc_State>
    1b12:	02 c0       	rjmp	.+4      	; 0x1b18 <__vector_16+0x150>
			}
			else
			{
				RotEnc_State = IDLE;
    1b14:	10 92 19 02 	sts	0x0219, r1	; 0x800219 <RotEnc_State>
			}
			
			RotaryEncoder_OvfCnt = 0;		// Stop overflow counter
    1b18:	10 92 1b 02 	sts	0x021B, r1	; 0x80021b <RotaryEncoder_OvfCnt+0x1>
    1b1c:	10 92 1a 02 	sts	0x021A, r1	; 0x80021a <RotaryEncoder_OvfCnt>
    1b20:	1a c0       	rjmp	.+52     	; 0x1b56 <__vector_16+0x18e>
		}
		else if (RotaryEncoder_OvfCnt > ROT_ENC_PRESS_OVF && RotEnc_State == IDLE)
    1b22:	80 91 1a 02 	lds	r24, 0x021A	; 0x80021a <RotaryEncoder_OvfCnt>
    1b26:	90 91 1b 02 	lds	r25, 0x021B	; 0x80021b <RotaryEncoder_OvfCnt+0x1>
    1b2a:	cd 97       	sbiw	r24, 0x3d	; 61
    1b2c:	a0 f0       	brcs	.+40     	; 0x1b56 <__vector_16+0x18e>
    1b2e:	80 91 19 02 	lds	r24, 0x0219	; 0x800219 <RotEnc_State>
    1b32:	88 23       	and	r24, r24
    1b34:	69 f0       	breq	.+26     	; 0x1b50 <__vector_16+0x188>
    1b36:	0f c0       	rjmp	.+30     	; 0x1b56 <__vector_16+0x18e>
		{
			/* If button is no longer pressed */
			if ( !(GPIO_ROT_ENC_PIN & GPIO_ROT_ENC_PRESS_MASK) )
			{
				RotEnc_State = SHORT_PRESS;
    1b38:	83 e0       	ldi	r24, 0x03	; 3
    1b3a:	80 93 19 02 	sts	0x0219, r24	; 0x800219 <RotEnc_State>
				RotaryEncoder_OvfCnt = 0;	// Stop overflow counter
    1b3e:	10 92 1b 02 	sts	0x021B, r1	; 0x80021b <RotaryEncoder_OvfCnt+0x1>
    1b42:	10 92 1a 02 	sts	0x021A, r1	; 0x80021a <RotaryEncoder_OvfCnt>
    1b46:	07 c0       	rjmp	.+14     	; 0x1b56 <__vector_16+0x18e>
			}
			else
			RotEnc_State = PRESSED;
    1b48:	84 e0       	ldi	r24, 0x04	; 4
    1b4a:	80 93 19 02 	sts	0x0219, r24	; 0x800219 <RotEnc_State>

		}
	}
    1b4e:	03 c0       	rjmp	.+6      	; 0x1b56 <__vector_16+0x18e>
			RotaryEncoder_OvfCnt = 0;		// Stop overflow counter
		}
		else if (RotaryEncoder_OvfCnt > ROT_ENC_PRESS_OVF && RotEnc_State == IDLE)
		{
			/* If button is no longer pressed */
			if ( !(GPIO_ROT_ENC_PIN & GPIO_ROT_ENC_PRESS_MASK) )
    1b50:	1a 99       	sbic	0x03, 2	; 3
    1b52:	fa cf       	rjmp	.-12     	; 0x1b48 <__vector_16+0x180>
    1b54:	f1 cf       	rjmp	.-30     	; 0x1b38 <__vector_16+0x170>
			else
			RotEnc_State = PRESSED;

		}
	}
    1b56:	9f 91       	pop	r25
    1b58:	8f 91       	pop	r24
    1b5a:	3f 91       	pop	r19
    1b5c:	2f 91       	pop	r18
    1b5e:	0f 90       	pop	r0
    1b60:	0f be       	out	0x3f, r0	; 63
    1b62:	0f 90       	pop	r0
    1b64:	1f 90       	pop	r1
    1b66:	18 95       	reti

00001b68 <_Z10UART0_Initjhh>:
    1b68:	cf 93       	push	r28
    1b6a:	df 93       	push	r29
    1b6c:	d6 2f       	mov	r29, r22
    1b6e:	c4 2f       	mov	r28, r20
    1b70:	51 9a       	sbi	0x0a, 1	; 10
    1b72:	59 9a       	sbi	0x0b, 1	; 11
    1b74:	10 92 a3 02 	sts	0x02A3, r1	; 0x8002a3 <_ZL12UART0_TxHead>
    1b78:	10 92 a2 02 	sts	0x02A2, r1	; 0x8002a2 <_ZL12UART0_TxTail>
    1b7c:	10 92 a1 02 	sts	0x02A1, r1	; 0x8002a1 <_ZL12UART0_RxHead>
    1b80:	10 92 a0 02 	sts	0x02A0, r1	; 0x8002a0 <_ZL12UART0_RxTail>
    1b84:	a0 e0       	ldi	r26, 0x00	; 0
    1b86:	b0 e0       	ldi	r27, 0x00	; 0
    1b88:	88 0f       	add	r24, r24
    1b8a:	99 1f       	adc	r25, r25
    1b8c:	aa 1f       	adc	r26, r26
    1b8e:	bb 1f       	adc	r27, r27
    1b90:	88 0f       	add	r24, r24
    1b92:	99 1f       	adc	r25, r25
    1b94:	aa 1f       	adc	r26, r26
    1b96:	bb 1f       	adc	r27, r27
    1b98:	9c 01       	movw	r18, r24
    1b9a:	ad 01       	movw	r20, r26
    1b9c:	22 0f       	add	r18, r18
    1b9e:	33 1f       	adc	r19, r19
    1ba0:	44 1f       	adc	r20, r20
    1ba2:	55 1f       	adc	r21, r21
    1ba4:	22 0f       	add	r18, r18
    1ba6:	33 1f       	adc	r19, r19
    1ba8:	44 1f       	adc	r20, r20
    1baa:	55 1f       	adc	r21, r21
    1bac:	60 e0       	ldi	r22, 0x00	; 0
    1bae:	7d e2       	ldi	r23, 0x2D	; 45
    1bb0:	81 e3       	ldi	r24, 0x31	; 49
    1bb2:	91 e0       	ldi	r25, 0x01	; 1
    1bb4:	0e 94 ac 10 	call	0x2158	; 0x2158 <__udivmodsi4>
    1bb8:	21 50       	subi	r18, 0x01	; 1
    1bba:	31 09       	sbc	r19, r1
    1bbc:	30 93 c5 00 	sts	0x00C5, r19	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
    1bc0:	20 93 c4 00 	sts	0x00C4, r18	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
    1bc4:	e2 ec       	ldi	r30, 0xC2	; 194
    1bc6:	f0 e0       	ldi	r31, 0x00	; 0
    1bc8:	80 81       	ld	r24, Z
    1bca:	8f 73       	andi	r24, 0x3F	; 63
    1bcc:	80 83       	st	Z, r24
    1bce:	d2 30       	cpi	r29, 0x02	; 2
    1bd0:	21 f4       	brne	.+8      	; 0x1bda <_Z10UART0_Initjhh+0x72>
    1bd2:	80 81       	ld	r24, Z
    1bd4:	88 60       	ori	r24, 0x08	; 8
    1bd6:	80 83       	st	Z, r24
    1bd8:	05 c0       	rjmp	.+10     	; 0x1be4 <_Z10UART0_Initjhh+0x7c>
    1bda:	e2 ec       	ldi	r30, 0xC2	; 194
    1bdc:	f0 e0       	ldi	r31, 0x00	; 0
    1bde:	80 81       	ld	r24, Z
    1be0:	87 7f       	andi	r24, 0xF7	; 247
    1be2:	80 83       	st	Z, r24
    1be4:	c2 30       	cpi	r28, 0x02	; 2
    1be6:	49 f4       	brne	.+18     	; 0x1bfa <_Z10UART0_Initjhh+0x92>
    1be8:	e2 ec       	ldi	r30, 0xC2	; 194
    1bea:	f0 e0       	ldi	r31, 0x00	; 0
    1bec:	80 81       	ld	r24, Z
    1bee:	8f 7e       	andi	r24, 0xEF	; 239
    1bf0:	80 83       	st	Z, r24
    1bf2:	80 81       	ld	r24, Z
    1bf4:	80 62       	ori	r24, 0x20	; 32
    1bf6:	80 83       	st	Z, r24
    1bf8:	0d c0       	rjmp	.+26     	; 0x1c14 <_Z10UART0_Initjhh+0xac>
    1bfa:	c3 30       	cpi	r28, 0x03	; 3
    1bfc:	31 f4       	brne	.+12     	; 0x1c0a <_Z10UART0_Initjhh+0xa2>
    1bfe:	e2 ec       	ldi	r30, 0xC2	; 194
    1c00:	f0 e0       	ldi	r31, 0x00	; 0
    1c02:	80 81       	ld	r24, Z
    1c04:	80 63       	ori	r24, 0x30	; 48
    1c06:	80 83       	st	Z, r24
    1c08:	05 c0       	rjmp	.+10     	; 0x1c14 <_Z10UART0_Initjhh+0xac>
    1c0a:	e2 ec       	ldi	r30, 0xC2	; 194
    1c0c:	f0 e0       	ldi	r31, 0x00	; 0
    1c0e:	80 81       	ld	r24, Z
    1c10:	8f 7c       	andi	r24, 0xCF	; 207
    1c12:	80 83       	st	Z, r24
    1c14:	e2 ec       	ldi	r30, 0xC2	; 194
    1c16:	f0 e0       	ldi	r31, 0x00	; 0
    1c18:	80 81       	ld	r24, Z
    1c1a:	86 60       	ori	r24, 0x06	; 6
    1c1c:	80 83       	st	Z, r24
    1c1e:	e1 ec       	ldi	r30, 0xC1	; 193
    1c20:	f0 e0       	ldi	r31, 0x00	; 0
    1c22:	80 81       	ld	r24, Z
    1c24:	80 6a       	ori	r24, 0xA0	; 160
    1c26:	80 83       	st	Z, r24
    1c28:	80 81       	ld	r24, Z
    1c2a:	88 61       	ori	r24, 0x18	; 24
    1c2c:	80 83       	st	Z, r24
    1c2e:	df 91       	pop	r29
    1c30:	cf 91       	pop	r28
    1c32:	08 95       	ret

00001c34 <_Z13UART0_GetCharv>:
    1c34:	90 91 a1 02 	lds	r25, 0x02A1	; 0x8002a1 <_ZL12UART0_RxHead>
    1c38:	80 91 a0 02 	lds	r24, 0x02A0	; 0x8002a0 <_ZL12UART0_RxTail>
    1c3c:	98 17       	cp	r25, r24
    1c3e:	91 f0       	breq	.+36     	; 0x1c64 <_Z13UART0_GetCharv+0x30>
    1c40:	e0 91 a0 02 	lds	r30, 0x02A0	; 0x8002a0 <_ZL12UART0_RxTail>
    1c44:	ef 5f       	subi	r30, 0xFF	; 255
    1c46:	ef 71       	andi	r30, 0x1F	; 31
    1c48:	e0 93 a0 02 	sts	0x02A0, r30	; 0x8002a0 <_ZL12UART0_RxTail>
    1c4c:	f0 e0       	ldi	r31, 0x00	; 0
    1c4e:	ec 55       	subi	r30, 0x5C	; 92
    1c50:	fd 4f       	sbci	r31, 0xFD	; 253
    1c52:	20 81       	ld	r18, Z
    1c54:	80 91 9f 02 	lds	r24, 0x029F	; 0x80029f <_ZL17UART0_LastRxError>
    1c58:	90 e0       	ldi	r25, 0x00	; 0
    1c5a:	98 2f       	mov	r25, r24
    1c5c:	88 27       	eor	r24, r24
    1c5e:	82 0f       	add	r24, r18
    1c60:	91 1d       	adc	r25, r1
    1c62:	08 95       	ret
    1c64:	80 e0       	ldi	r24, 0x00	; 0
    1c66:	91 e0       	ldi	r25, 0x01	; 1
    1c68:	08 95       	ret

00001c6a <_Z15UART0_Availablev>:
    1c6a:	80 91 a1 02 	lds	r24, 0x02A1	; 0x8002a1 <_ZL12UART0_RxHead>
    1c6e:	20 91 a0 02 	lds	r18, 0x02A0	; 0x8002a0 <_ZL12UART0_RxTail>
    1c72:	90 e0       	ldi	r25, 0x00	; 0
    1c74:	4f 96       	adiw	r24, 0x1f	; 31
    1c76:	82 1b       	sub	r24, r18
    1c78:	91 09       	sbc	r25, r1
    1c7a:	6f e1       	ldi	r22, 0x1F	; 31
    1c7c:	70 e0       	ldi	r23, 0x00	; 0
    1c7e:	0e 94 98 10 	call	0x2130	; 0x2130 <__divmodhi4>
    1c82:	08 95       	ret

00001c84 <_Z15UART0_QueueCharh>:
    1c84:	90 91 a3 02 	lds	r25, 0x02A3	; 0x8002a3 <_ZL12UART0_TxHead>
    1c88:	9f 5f       	subi	r25, 0xFF	; 255
    1c8a:	9f 71       	andi	r25, 0x1F	; 31
    1c8c:	20 91 a2 02 	lds	r18, 0x02A2	; 0x8002a2 <_ZL12UART0_TxTail>
    1c90:	92 17       	cp	r25, r18
    1c92:	51 f0       	breq	.+20     	; 0x1ca8 <_Z15UART0_QueueCharh+0x24>
    1c94:	e9 2f       	mov	r30, r25
    1c96:	f0 e0       	ldi	r31, 0x00	; 0
    1c98:	ec 53       	subi	r30, 0x3C	; 60
    1c9a:	fd 4f       	sbci	r31, 0xFD	; 253
    1c9c:	80 83       	st	Z, r24
    1c9e:	90 93 a3 02 	sts	0x02A3, r25	; 0x8002a3 <_ZL12UART0_TxHead>
    1ca2:	81 e0       	ldi	r24, 0x01	; 1
    1ca4:	90 e0       	ldi	r25, 0x00	; 0
    1ca6:	08 95       	ret
    1ca8:	80 e0       	ldi	r24, 0x00	; 0
    1caa:	90 e0       	ldi	r25, 0x00	; 0
    1cac:	08 95       	ret

00001cae <_Z14UART0_PutQueuev>:
    1cae:	e1 ec       	ldi	r30, 0xC1	; 193
    1cb0:	f0 e0       	ldi	r31, 0x00	; 0
    1cb2:	80 81       	ld	r24, Z
    1cb4:	80 62       	ori	r24, 0x20	; 32
    1cb6:	80 83       	st	Z, r24
    1cb8:	08 95       	ret

00001cba <__vector_20>:
    1cba:	1f 92       	push	r1
    1cbc:	0f 92       	push	r0
    1cbe:	0f b6       	in	r0, 0x3f	; 63
    1cc0:	0f 92       	push	r0
    1cc2:	11 24       	eor	r1, r1
    1cc4:	2f 93       	push	r18
    1cc6:	8f 93       	push	r24
    1cc8:	9f 93       	push	r25
    1cca:	ef 93       	push	r30
    1ccc:	ff 93       	push	r31
    1cce:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
    1cd2:	20 91 c6 00 	lds	r18, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
    1cd6:	87 70       	andi	r24, 0x07	; 7
    1cd8:	e0 91 a1 02 	lds	r30, 0x02A1	; 0x8002a1 <_ZL12UART0_RxHead>
    1cdc:	ef 5f       	subi	r30, 0xFF	; 255
    1cde:	ef 71       	andi	r30, 0x1F	; 31
    1ce0:	90 91 a0 02 	lds	r25, 0x02A0	; 0x8002a0 <_ZL12UART0_RxTail>
    1ce4:	e9 17       	cp	r30, r25
    1ce6:	39 f0       	breq	.+14     	; 0x1cf6 <__vector_20+0x3c>
    1ce8:	e0 93 a1 02 	sts	0x02A1, r30	; 0x8002a1 <_ZL12UART0_RxHead>
    1cec:	f0 e0       	ldi	r31, 0x00	; 0
    1cee:	ec 55       	subi	r30, 0x5C	; 92
    1cf0:	fd 4f       	sbci	r31, 0xFD	; 253
    1cf2:	20 83       	st	Z, r18
    1cf4:	01 c0       	rjmp	.+2      	; 0x1cf8 <__vector_20+0x3e>
    1cf6:	82 e0       	ldi	r24, 0x02	; 2
    1cf8:	80 93 9f 02 	sts	0x029F, r24	; 0x80029f <_ZL17UART0_LastRxError>
    1cfc:	ff 91       	pop	r31
    1cfe:	ef 91       	pop	r30
    1d00:	9f 91       	pop	r25
    1d02:	8f 91       	pop	r24
    1d04:	2f 91       	pop	r18
    1d06:	0f 90       	pop	r0
    1d08:	0f be       	out	0x3f, r0	; 63
    1d0a:	0f 90       	pop	r0
    1d0c:	1f 90       	pop	r1
    1d0e:	18 95       	reti

00001d10 <__vector_21>:
    1d10:	1f 92       	push	r1
    1d12:	0f 92       	push	r0
    1d14:	0f b6       	in	r0, 0x3f	; 63
    1d16:	0f 92       	push	r0
    1d18:	11 24       	eor	r1, r1
    1d1a:	8f 93       	push	r24
    1d1c:	9f 93       	push	r25
    1d1e:	ef 93       	push	r30
    1d20:	ff 93       	push	r31
    1d22:	90 91 a3 02 	lds	r25, 0x02A3	; 0x8002a3 <_ZL12UART0_TxHead>
    1d26:	80 91 a2 02 	lds	r24, 0x02A2	; 0x8002a2 <_ZL12UART0_TxTail>
    1d2a:	98 17       	cp	r25, r24
    1d2c:	69 f0       	breq	.+26     	; 0x1d48 <__vector_21+0x38>
    1d2e:	e0 91 a2 02 	lds	r30, 0x02A2	; 0x8002a2 <_ZL12UART0_TxTail>
    1d32:	ef 5f       	subi	r30, 0xFF	; 255
    1d34:	ef 71       	andi	r30, 0x1F	; 31
    1d36:	e0 93 a2 02 	sts	0x02A2, r30	; 0x8002a2 <_ZL12UART0_TxTail>
    1d3a:	f0 e0       	ldi	r31, 0x00	; 0
    1d3c:	ec 53       	subi	r30, 0x3C	; 60
    1d3e:	fd 4f       	sbci	r31, 0xFD	; 253
    1d40:	80 81       	ld	r24, Z
    1d42:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
    1d46:	05 c0       	rjmp	.+10     	; 0x1d52 <__vector_21+0x42>
    1d48:	e1 ec       	ldi	r30, 0xC1	; 193
    1d4a:	f0 e0       	ldi	r31, 0x00	; 0
    1d4c:	80 81       	ld	r24, Z
    1d4e:	8f 7d       	andi	r24, 0xDF	; 223
    1d50:	80 83       	st	Z, r24
    1d52:	ff 91       	pop	r31
    1d54:	ef 91       	pop	r30
    1d56:	9f 91       	pop	r25
    1d58:	8f 91       	pop	r24
    1d5a:	0f 90       	pop	r0
    1d5c:	0f be       	out	0x3f, r0	; 63
    1d5e:	0f 90       	pop	r0
    1d60:	1f 90       	pop	r1
    1d62:	18 95       	reti

00001d64 <_Z10UART1_Initjhh>:
    1d64:	cf 93       	push	r28
    1d66:	df 93       	push	r29
    1d68:	d6 2f       	mov	r29, r22
    1d6a:	c4 2f       	mov	r28, r20
    1d6c:	53 9a       	sbi	0x0a, 3	; 10
    1d6e:	5b 9a       	sbi	0x0b, 3	; 11
    1d70:	10 92 5e 02 	sts	0x025E, r1	; 0x80025e <_ZL12UART1_TxHead>
    1d74:	10 92 5d 02 	sts	0x025D, r1	; 0x80025d <_ZL12UART1_TxTail>
    1d78:	10 92 5c 02 	sts	0x025C, r1	; 0x80025c <_ZL12UART1_RxHead>
    1d7c:	10 92 5b 02 	sts	0x025B, r1	; 0x80025b <_ZL12UART1_RxTail>
    1d80:	a0 e0       	ldi	r26, 0x00	; 0
    1d82:	b0 e0       	ldi	r27, 0x00	; 0
    1d84:	88 0f       	add	r24, r24
    1d86:	99 1f       	adc	r25, r25
    1d88:	aa 1f       	adc	r26, r26
    1d8a:	bb 1f       	adc	r27, r27
    1d8c:	88 0f       	add	r24, r24
    1d8e:	99 1f       	adc	r25, r25
    1d90:	aa 1f       	adc	r26, r26
    1d92:	bb 1f       	adc	r27, r27
    1d94:	9c 01       	movw	r18, r24
    1d96:	ad 01       	movw	r20, r26
    1d98:	22 0f       	add	r18, r18
    1d9a:	33 1f       	adc	r19, r19
    1d9c:	44 1f       	adc	r20, r20
    1d9e:	55 1f       	adc	r21, r21
    1da0:	22 0f       	add	r18, r18
    1da2:	33 1f       	adc	r19, r19
    1da4:	44 1f       	adc	r20, r20
    1da6:	55 1f       	adc	r21, r21
    1da8:	60 e0       	ldi	r22, 0x00	; 0
    1daa:	7d e2       	ldi	r23, 0x2D	; 45
    1dac:	81 e3       	ldi	r24, 0x31	; 49
    1dae:	91 e0       	ldi	r25, 0x01	; 1
    1db0:	0e 94 ac 10 	call	0x2158	; 0x2158 <__udivmodsi4>
    1db4:	21 50       	subi	r18, 0x01	; 1
    1db6:	31 09       	sbc	r19, r1
    1db8:	30 93 cd 00 	sts	0x00CD, r19	; 0x8000cd <__TEXT_REGION_LENGTH__+0x7e00cd>
    1dbc:	20 93 cc 00 	sts	0x00CC, r18	; 0x8000cc <__TEXT_REGION_LENGTH__+0x7e00cc>
    1dc0:	ea ec       	ldi	r30, 0xCA	; 202
    1dc2:	f0 e0       	ldi	r31, 0x00	; 0
    1dc4:	80 81       	ld	r24, Z
    1dc6:	8f 73       	andi	r24, 0x3F	; 63
    1dc8:	80 83       	st	Z, r24
    1dca:	d2 30       	cpi	r29, 0x02	; 2
    1dcc:	21 f4       	brne	.+8      	; 0x1dd6 <_Z10UART1_Initjhh+0x72>
    1dce:	80 81       	ld	r24, Z
    1dd0:	88 60       	ori	r24, 0x08	; 8
    1dd2:	80 83       	st	Z, r24
    1dd4:	05 c0       	rjmp	.+10     	; 0x1de0 <_Z10UART1_Initjhh+0x7c>
    1dd6:	ea ec       	ldi	r30, 0xCA	; 202
    1dd8:	f0 e0       	ldi	r31, 0x00	; 0
    1dda:	80 81       	ld	r24, Z
    1ddc:	87 7f       	andi	r24, 0xF7	; 247
    1dde:	80 83       	st	Z, r24
    1de0:	c2 30       	cpi	r28, 0x02	; 2
    1de2:	31 f4       	brne	.+12     	; 0x1df0 <_Z10UART1_Initjhh+0x8c>
    1de4:	ea ec       	ldi	r30, 0xCA	; 202
    1de6:	f0 e0       	ldi	r31, 0x00	; 0
    1de8:	80 81       	ld	r24, Z
    1dea:	80 62       	ori	r24, 0x20	; 32
    1dec:	80 83       	st	Z, r24
    1dee:	0d c0       	rjmp	.+26     	; 0x1e0a <_Z10UART1_Initjhh+0xa6>
    1df0:	c3 30       	cpi	r28, 0x03	; 3
    1df2:	31 f4       	brne	.+12     	; 0x1e00 <_Z10UART1_Initjhh+0x9c>
    1df4:	ea ec       	ldi	r30, 0xCA	; 202
    1df6:	f0 e0       	ldi	r31, 0x00	; 0
    1df8:	80 81       	ld	r24, Z
    1dfa:	80 63       	ori	r24, 0x30	; 48
    1dfc:	80 83       	st	Z, r24
    1dfe:	05 c0       	rjmp	.+10     	; 0x1e0a <_Z10UART1_Initjhh+0xa6>
    1e00:	ea ec       	ldi	r30, 0xCA	; 202
    1e02:	f0 e0       	ldi	r31, 0x00	; 0
    1e04:	80 81       	ld	r24, Z
    1e06:	8f 7c       	andi	r24, 0xCF	; 207
    1e08:	80 83       	st	Z, r24
    1e0a:	ea ec       	ldi	r30, 0xCA	; 202
    1e0c:	f0 e0       	ldi	r31, 0x00	; 0
    1e0e:	80 81       	ld	r24, Z
    1e10:	86 60       	ori	r24, 0x06	; 6
    1e12:	80 83       	st	Z, r24
    1e14:	e9 ec       	ldi	r30, 0xC9	; 201
    1e16:	f0 e0       	ldi	r31, 0x00	; 0
    1e18:	80 81       	ld	r24, Z
    1e1a:	80 6a       	ori	r24, 0xA0	; 160
    1e1c:	80 83       	st	Z, r24
    1e1e:	80 81       	ld	r24, Z
    1e20:	88 61       	ori	r24, 0x18	; 24
    1e22:	80 83       	st	Z, r24
    1e24:	df 91       	pop	r29
    1e26:	cf 91       	pop	r28
    1e28:	08 95       	ret

00001e2a <_Z13UART1_GetCharv>:
    1e2a:	90 91 5c 02 	lds	r25, 0x025C	; 0x80025c <_ZL12UART1_RxHead>
    1e2e:	80 91 5b 02 	lds	r24, 0x025B	; 0x80025b <_ZL12UART1_RxTail>
    1e32:	98 17       	cp	r25, r24
    1e34:	91 f0       	breq	.+36     	; 0x1e5a <_Z13UART1_GetCharv+0x30>
    1e36:	e0 91 5b 02 	lds	r30, 0x025B	; 0x80025b <_ZL12UART1_RxTail>
    1e3a:	ef 5f       	subi	r30, 0xFF	; 255
    1e3c:	ef 71       	andi	r30, 0x1F	; 31
    1e3e:	e0 93 5b 02 	sts	0x025B, r30	; 0x80025b <_ZL12UART1_RxTail>
    1e42:	f0 e0       	ldi	r31, 0x00	; 0
    1e44:	e1 5a       	subi	r30, 0xA1	; 161
    1e46:	fd 4f       	sbci	r31, 0xFD	; 253
    1e48:	20 81       	ld	r18, Z
    1e4a:	80 91 5a 02 	lds	r24, 0x025A	; 0x80025a <_ZL17UART1_LastRxError>
    1e4e:	90 e0       	ldi	r25, 0x00	; 0
    1e50:	98 2f       	mov	r25, r24
    1e52:	88 27       	eor	r24, r24
    1e54:	82 0f       	add	r24, r18
    1e56:	91 1d       	adc	r25, r1
    1e58:	08 95       	ret
    1e5a:	80 e0       	ldi	r24, 0x00	; 0
    1e5c:	91 e0       	ldi	r25, 0x01	; 1
    1e5e:	08 95       	ret

00001e60 <_Z13UART1_PutCharh>:
    1e60:	20 91 5e 02 	lds	r18, 0x025E	; 0x80025e <_ZL12UART1_TxHead>
    1e64:	2f 5f       	subi	r18, 0xFF	; 255
    1e66:	2f 71       	andi	r18, 0x1F	; 31
    1e68:	90 91 5d 02 	lds	r25, 0x025D	; 0x80025d <_ZL12UART1_TxTail>
    1e6c:	29 17       	cp	r18, r25
    1e6e:	e1 f3       	breq	.-8      	; 0x1e68 <_Z13UART1_PutCharh+0x8>
    1e70:	e2 2f       	mov	r30, r18
    1e72:	f0 e0       	ldi	r31, 0x00	; 0
    1e74:	e1 58       	subi	r30, 0x81	; 129
    1e76:	fd 4f       	sbci	r31, 0xFD	; 253
    1e78:	80 83       	st	Z, r24
    1e7a:	20 93 5e 02 	sts	0x025E, r18	; 0x80025e <_ZL12UART1_TxHead>
    1e7e:	e9 ec       	ldi	r30, 0xC9	; 201
    1e80:	f0 e0       	ldi	r31, 0x00	; 0
    1e82:	80 81       	ld	r24, Z
    1e84:	80 62       	ori	r24, 0x20	; 32
    1e86:	80 83       	st	Z, r24
    1e88:	08 95       	ret

00001e8a <_Z15UART1_PutStringPKc>:
    1e8a:	cf 93       	push	r28
    1e8c:	df 93       	push	r29
    1e8e:	ec 01       	movw	r28, r24
    1e90:	88 81       	ld	r24, Y
    1e92:	88 23       	and	r24, r24
    1e94:	31 f0       	breq	.+12     	; 0x1ea2 <_Z15UART1_PutStringPKc+0x18>
    1e96:	21 96       	adiw	r28, 0x01	; 1
    1e98:	0e 94 30 0f 	call	0x1e60	; 0x1e60 <_Z13UART1_PutCharh>
    1e9c:	89 91       	ld	r24, Y+
    1e9e:	81 11       	cpse	r24, r1
    1ea0:	fb cf       	rjmp	.-10     	; 0x1e98 <_Z15UART1_PutStringPKc+0xe>
    1ea2:	df 91       	pop	r29
    1ea4:	cf 91       	pop	r28
    1ea6:	08 95       	ret

00001ea8 <_Z15UART1_Availablev>:
    1ea8:	80 91 5c 02 	lds	r24, 0x025C	; 0x80025c <_ZL12UART1_RxHead>
    1eac:	20 91 5b 02 	lds	r18, 0x025B	; 0x80025b <_ZL12UART1_RxTail>
    1eb0:	90 e0       	ldi	r25, 0x00	; 0
    1eb2:	4f 96       	adiw	r24, 0x1f	; 31
    1eb4:	82 1b       	sub	r24, r18
    1eb6:	91 09       	sbc	r25, r1
    1eb8:	6f e1       	ldi	r22, 0x1F	; 31
    1eba:	70 e0       	ldi	r23, 0x00	; 0
    1ebc:	0e 94 98 10 	call	0x2130	; 0x2130 <__divmodhi4>
    1ec0:	08 95       	ret

00001ec2 <__vector_28>:
    1ec2:	1f 92       	push	r1
    1ec4:	0f 92       	push	r0
    1ec6:	0f b6       	in	r0, 0x3f	; 63
    1ec8:	0f 92       	push	r0
    1eca:	11 24       	eor	r1, r1
    1ecc:	2f 93       	push	r18
    1ece:	8f 93       	push	r24
    1ed0:	9f 93       	push	r25
    1ed2:	ef 93       	push	r30
    1ed4:	ff 93       	push	r31
    1ed6:	80 91 c8 00 	lds	r24, 0x00C8	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7e00c8>
    1eda:	20 91 ce 00 	lds	r18, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7e00ce>
    1ede:	87 70       	andi	r24, 0x07	; 7
    1ee0:	e0 91 5c 02 	lds	r30, 0x025C	; 0x80025c <_ZL12UART1_RxHead>
    1ee4:	ef 5f       	subi	r30, 0xFF	; 255
    1ee6:	ef 71       	andi	r30, 0x1F	; 31
    1ee8:	90 91 5b 02 	lds	r25, 0x025B	; 0x80025b <_ZL12UART1_RxTail>
    1eec:	e9 17       	cp	r30, r25
    1eee:	39 f0       	breq	.+14     	; 0x1efe <__vector_28+0x3c>
    1ef0:	e0 93 5c 02 	sts	0x025C, r30	; 0x80025c <_ZL12UART1_RxHead>
    1ef4:	f0 e0       	ldi	r31, 0x00	; 0
    1ef6:	e1 5a       	subi	r30, 0xA1	; 161
    1ef8:	fd 4f       	sbci	r31, 0xFD	; 253
    1efa:	20 83       	st	Z, r18
    1efc:	01 c0       	rjmp	.+2      	; 0x1f00 <__vector_28+0x3e>
    1efe:	82 e0       	ldi	r24, 0x02	; 2
    1f00:	80 93 5a 02 	sts	0x025A, r24	; 0x80025a <_ZL17UART1_LastRxError>
    1f04:	ff 91       	pop	r31
    1f06:	ef 91       	pop	r30
    1f08:	9f 91       	pop	r25
    1f0a:	8f 91       	pop	r24
    1f0c:	2f 91       	pop	r18
    1f0e:	0f 90       	pop	r0
    1f10:	0f be       	out	0x3f, r0	; 63
    1f12:	0f 90       	pop	r0
    1f14:	1f 90       	pop	r1
    1f16:	18 95       	reti

00001f18 <__vector_29>:
    1f18:	1f 92       	push	r1
    1f1a:	0f 92       	push	r0
    1f1c:	0f b6       	in	r0, 0x3f	; 63
    1f1e:	0f 92       	push	r0
    1f20:	11 24       	eor	r1, r1
    1f22:	8f 93       	push	r24
    1f24:	9f 93       	push	r25
    1f26:	ef 93       	push	r30
    1f28:	ff 93       	push	r31
    1f2a:	90 91 5e 02 	lds	r25, 0x025E	; 0x80025e <_ZL12UART1_TxHead>
    1f2e:	80 91 5d 02 	lds	r24, 0x025D	; 0x80025d <_ZL12UART1_TxTail>
    1f32:	98 17       	cp	r25, r24
    1f34:	69 f0       	breq	.+26     	; 0x1f50 <__vector_29+0x38>
    1f36:	e0 91 5d 02 	lds	r30, 0x025D	; 0x80025d <_ZL12UART1_TxTail>
    1f3a:	ef 5f       	subi	r30, 0xFF	; 255
    1f3c:	ef 71       	andi	r30, 0x1F	; 31
    1f3e:	e0 93 5d 02 	sts	0x025D, r30	; 0x80025d <_ZL12UART1_TxTail>
    1f42:	f0 e0       	ldi	r31, 0x00	; 0
    1f44:	e1 58       	subi	r30, 0x81	; 129
    1f46:	fd 4f       	sbci	r31, 0xFD	; 253
    1f48:	80 81       	ld	r24, Z
    1f4a:	80 93 ce 00 	sts	0x00CE, r24	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7e00ce>
    1f4e:	05 c0       	rjmp	.+10     	; 0x1f5a <__vector_29+0x42>
    1f50:	e9 ec       	ldi	r30, 0xC9	; 201
    1f52:	f0 e0       	ldi	r31, 0x00	; 0
    1f54:	80 81       	ld	r24, Z
    1f56:	8f 7d       	andi	r24, 0xDF	; 223
    1f58:	80 83       	st	Z, r24
    1f5a:	ff 91       	pop	r31
    1f5c:	ef 91       	pop	r30
    1f5e:	9f 91       	pop	r25
    1f60:	8f 91       	pop	r24
    1f62:	0f 90       	pop	r0
    1f64:	0f be       	out	0x3f, r0	; 63
    1f66:	0f 90       	pop	r0
    1f68:	1f 90       	pop	r1
    1f6a:	18 95       	reti

00001f6c <_Z7UI_Initv>:

MCP_Output LoopRelays[NUMBER_OF_LOOPS];
MCP_Output CtrlSwitchRelays[NUMBER_OF_CTRL_SWITCHES];

void UI_Init()
{
    1f6c:	ef 92       	push	r14
    1f6e:	ff 92       	push	r15
    1f70:	1f 93       	push	r17
    1f72:	cf 93       	push	r28
    1f74:	df 93       	push	r29
    1f76:	cd b7       	in	r28, 0x3d	; 61
    1f78:	de b7       	in	r29, 0x3e	; 62
    1f7a:	64 97       	sbiw	r28, 0x14	; 20
    1f7c:	0f b6       	in	r0, 0x3f	; 63
    1f7e:	f8 94       	cli
    1f80:	de bf       	out	0x3e, r29	; 62
    1f82:	0f be       	out	0x3f, r0	; 63
    1f84:	cd bf       	out	0x3d, r28	; 61
	/* Initialize outputs UI LEDs */
	ModeRunLED = MCP_Output(MCP23017_UI_LEDS_ADDR, PortB, (MCP23017_Pin)UI_MODE_RUN_LED_PIN);
    1f86:	25 e0       	ldi	r18, 0x05	; 5
    1f88:	41 e0       	ldi	r20, 0x01	; 1
    1f8a:	60 e0       	ldi	r22, 0x00	; 0
    1f8c:	ce 01       	movw	r24, r28
    1f8e:	41 96       	adiw	r24, 0x11	; 17
    1f90:	0e 94 0c 02 	call	0x418	; 0x418 <_ZN10MCP_OutputC1Eh13MCP23017_Port12MCP23017_Pin>
    1f94:	89 89       	ldd	r24, Y+17	; 0x11
    1f96:	9a 89       	ldd	r25, Y+18	; 0x12
    1f98:	ab 89       	ldd	r26, Y+19	; 0x13
    1f9a:	bc 89       	ldd	r27, Y+20	; 0x14
    1f9c:	80 93 4c 03 	sts	0x034C, r24	; 0x80034c <ModeRunLED>
    1fa0:	90 93 4d 03 	sts	0x034D, r25	; 0x80034d <ModeRunLED+0x1>
    1fa4:	a0 93 4e 03 	sts	0x034E, r26	; 0x80034e <ModeRunLED+0x2>
    1fa8:	b0 93 4f 03 	sts	0x034F, r27	; 0x80034f <ModeRunLED+0x3>
	ModeEditPresetLED = MCP_Output(MCP23017_UI_LEDS_ADDR, PortB, (MCP23017_Pin)UI_MODE_PRESET_LED_PIN);
    1fac:	26 e0       	ldi	r18, 0x06	; 6
    1fae:	41 e0       	ldi	r20, 0x01	; 1
    1fb0:	60 e0       	ldi	r22, 0x00	; 0
    1fb2:	ce 01       	movw	r24, r28
    1fb4:	0d 96       	adiw	r24, 0x0d	; 13
    1fb6:	0e 94 0c 02 	call	0x418	; 0x418 <_ZN10MCP_OutputC1Eh13MCP23017_Port12MCP23017_Pin>
    1fba:	8d 85       	ldd	r24, Y+13	; 0x0d
    1fbc:	9e 85       	ldd	r25, Y+14	; 0x0e
    1fbe:	af 85       	ldd	r26, Y+15	; 0x0f
    1fc0:	b8 89       	ldd	r27, Y+16	; 0x10
    1fc2:	80 93 48 03 	sts	0x0348, r24	; 0x800348 <ModeEditPresetLED>
    1fc6:	90 93 49 03 	sts	0x0349, r25	; 0x800349 <ModeEditPresetLED+0x1>
    1fca:	a0 93 4a 03 	sts	0x034A, r26	; 0x80034a <ModeEditPresetLED+0x2>
    1fce:	b0 93 4b 03 	sts	0x034B, r27	; 0x80034b <ModeEditPresetLED+0x3>
	ModeEditMidiLED = MCP_Output(MCP23017_UI_LEDS_ADDR, PortB, (MCP23017_Pin)UI_MODE_MIDI_LED_PIN);
    1fd2:	27 e0       	ldi	r18, 0x07	; 7
    1fd4:	41 e0       	ldi	r20, 0x01	; 1
    1fd6:	60 e0       	ldi	r22, 0x00	; 0
    1fd8:	ce 01       	movw	r24, r28
    1fda:	09 96       	adiw	r24, 0x09	; 9
    1fdc:	0e 94 0c 02 	call	0x418	; 0x418 <_ZN10MCP_OutputC1Eh13MCP23017_Port12MCP23017_Pin>
    1fe0:	89 85       	ldd	r24, Y+9	; 0x09
    1fe2:	9a 85       	ldd	r25, Y+10	; 0x0a
    1fe4:	ab 85       	ldd	r26, Y+11	; 0x0b
    1fe6:	bc 85       	ldd	r27, Y+12	; 0x0c
    1fe8:	80 93 44 03 	sts	0x0344, r24	; 0x800344 <ModeEditMidiLED>
    1fec:	90 93 45 03 	sts	0x0345, r25	; 0x800345 <ModeEditMidiLED+0x1>
    1ff0:	a0 93 46 03 	sts	0x0346, r26	; 0x800346 <ModeEditMidiLED+0x2>
    1ff4:	b0 93 47 03 	sts	0x0347, r27	; 0x800347 <ModeEditMidiLED+0x3>
    1ff8:	0f 2e       	mov	r0, r31
    1ffa:	f4 e2       	ldi	r31, 0x24	; 36
    1ffc:	ef 2e       	mov	r14, r31
    1ffe:	f3 e0       	ldi	r31, 0x03	; 3
    2000:	ff 2e       	mov	r15, r31
    2002:	f0 2d       	mov	r31, r0
	
	for (uint8_t i = 0; i < NUMBER_OF_LOOPS; i++)
    2004:	10 e0       	ldi	r17, 0x00	; 0
	{
		LoopLEDs[i] = MCP_Output(MCP23017_UI_LEDS_ADDR, PortA, (MCP23017_Pin)i);
    2006:	21 2f       	mov	r18, r17
    2008:	40 e0       	ldi	r20, 0x00	; 0
    200a:	60 e0       	ldi	r22, 0x00	; 0
    200c:	ce 01       	movw	r24, r28
    200e:	05 96       	adiw	r24, 0x05	; 5
    2010:	0e 94 0c 02 	call	0x418	; 0x418 <_ZN10MCP_OutputC1Eh13MCP23017_Port12MCP23017_Pin>
    2014:	8d 81       	ldd	r24, Y+5	; 0x05
    2016:	9e 81       	ldd	r25, Y+6	; 0x06
    2018:	af 81       	ldd	r26, Y+7	; 0x07
    201a:	b8 85       	ldd	r27, Y+8	; 0x08
    201c:	f7 01       	movw	r30, r14
    201e:	81 93       	st	Z+, r24
    2020:	91 93       	st	Z+, r25
    2022:	a1 93       	st	Z+, r26
    2024:	b1 93       	st	Z+, r27
    2026:	7f 01       	movw	r14, r30
	/* Initialize outputs UI LEDs */
	ModeRunLED = MCP_Output(MCP23017_UI_LEDS_ADDR, PortB, (MCP23017_Pin)UI_MODE_RUN_LED_PIN);
	ModeEditPresetLED = MCP_Output(MCP23017_UI_LEDS_ADDR, PortB, (MCP23017_Pin)UI_MODE_PRESET_LED_PIN);
	ModeEditMidiLED = MCP_Output(MCP23017_UI_LEDS_ADDR, PortB, (MCP23017_Pin)UI_MODE_MIDI_LED_PIN);
	
	for (uint8_t i = 0; i < NUMBER_OF_LOOPS; i++)
    2028:	1f 5f       	subi	r17, 0xFF	; 255
    202a:	18 30       	cpi	r17, 0x08	; 8
    202c:	61 f7       	brne	.-40     	; 0x2006 <_Z7UI_Initv+0x9a>
    202e:	0f 2e       	mov	r0, r31
    2030:	f4 e1       	ldi	r31, 0x14	; 20
    2032:	ef 2e       	mov	r14, r31
    2034:	f3 e0       	ldi	r31, 0x03	; 3
    2036:	ff 2e       	mov	r15, r31
    2038:	f0 2d       	mov	r31, r0
    203a:	10 e0       	ldi	r17, 0x00	; 0
		LoopLEDs[i] = MCP_Output(MCP23017_UI_LEDS_ADDR, PortA, (MCP23017_Pin)i);
	}
		
	for (uint8_t i = 0; i < NUMBER_OF_CTRL_SWITCHES; i++)
	{
		CtrlSwitchLEDs[i] = MCP_Output(MCP23017_UI_LEDS_ADDR, PortB, (MCP23017_Pin)(i));
    203c:	21 2f       	mov	r18, r17
    203e:	41 e0       	ldi	r20, 0x01	; 1
    2040:	60 e0       	ldi	r22, 0x00	; 0
    2042:	ce 01       	movw	r24, r28
    2044:	01 96       	adiw	r24, 0x01	; 1
    2046:	0e 94 0c 02 	call	0x418	; 0x418 <_ZN10MCP_OutputC1Eh13MCP23017_Port12MCP23017_Pin>
    204a:	89 81       	ldd	r24, Y+1	; 0x01
    204c:	9a 81       	ldd	r25, Y+2	; 0x02
    204e:	ab 81       	ldd	r26, Y+3	; 0x03
    2050:	bc 81       	ldd	r27, Y+4	; 0x04
    2052:	f7 01       	movw	r30, r14
    2054:	81 93       	st	Z+, r24
    2056:	91 93       	st	Z+, r25
    2058:	a1 93       	st	Z+, r26
    205a:	b1 93       	st	Z+, r27
    205c:	7f 01       	movw	r14, r30
	for (uint8_t i = 0; i < NUMBER_OF_LOOPS; i++)
	{
		LoopLEDs[i] = MCP_Output(MCP23017_UI_LEDS_ADDR, PortA, (MCP23017_Pin)i);
	}
		
	for (uint8_t i = 0; i < NUMBER_OF_CTRL_SWITCHES; i++)
    205e:	1f 5f       	subi	r17, 0xFF	; 255
    2060:	14 30       	cpi	r17, 0x04	; 4
    2062:	61 f7       	brne	.-40     	; 0x203c <_Z7UI_Initv+0xd0>
	//{
		//CtrlSwitchRelays[i] = MCP_Output(MCP23017_RELAYS_ADDR, PortB, (MCP23017_Pin)i);
	//}
	
	/* Set auto toggle speed */
	MCP_Output::SetAutoToggleSpeed(360/*ms*/);
    2064:	88 e6       	ldi	r24, 0x68	; 104
    2066:	91 e0       	ldi	r25, 0x01	; 1
    2068:	0e 94 52 02 	call	0x4a4	; 0x4a4 <_ZN10MCP_Output18SetAutoToggleSpeedEj>
}
    206c:	64 96       	adiw	r28, 0x14	; 20
    206e:	0f b6       	in	r0, 0x3f	; 63
    2070:	f8 94       	cli
    2072:	de bf       	out	0x3e, r29	; 62
    2074:	0f be       	out	0x3f, r0	; 63
    2076:	cd bf       	out	0x3d, r28	; 61
    2078:	df 91       	pop	r29
    207a:	cf 91       	pop	r28
    207c:	1f 91       	pop	r17
    207e:	ff 90       	pop	r15
    2080:	ef 90       	pop	r14
    2082:	08 95       	ret

00002084 <_GLOBAL__sub_I_ModeRunLED>:
    2084:	0f 93       	push	r16
    2086:	1f 93       	push	r17
    2088:	cf 93       	push	r28
    208a:	df 93       	push	r29
#include <avr/io.h>
#include <stdint-gcc.h>
#include "MCP23017.h"
#include "UI.h"

MCP_Output ModeRunLED;
    208c:	8c e4       	ldi	r24, 0x4C	; 76
    208e:	93 e0       	ldi	r25, 0x03	; 3
    2090:	0e 94 8e 01 	call	0x31c	; 0x31c <_ZN10MCP_OutputC1Ev>
MCP_Output ModeEditPresetLED;
    2094:	88 e4       	ldi	r24, 0x48	; 72
    2096:	93 e0       	ldi	r25, 0x03	; 3
    2098:	0e 94 8e 01 	call	0x31c	; 0x31c <_ZN10MCP_OutputC1Ev>
MCP_Output ModeEditMidiLED;
    209c:	84 e4       	ldi	r24, 0x44	; 68
    209e:	93 e0       	ldi	r25, 0x03	; 3
    20a0:	0e 94 8e 01 	call	0x31c	; 0x31c <_ZN10MCP_OutputC1Ev>
    20a4:	c4 e2       	ldi	r28, 0x24	; 36
    20a6:	d3 e0       	ldi	r29, 0x03	; 3
    20a8:	04 e4       	ldi	r16, 0x44	; 68
    20aa:	13 e0       	ldi	r17, 0x03	; 3
MCP_Output LoopLEDs[NUMBER_OF_LOOPS];
    20ac:	ce 01       	movw	r24, r28
    20ae:	0e 94 8e 01 	call	0x31c	; 0x31c <_ZN10MCP_OutputC1Ev>
    20b2:	24 96       	adiw	r28, 0x04	; 4
    20b4:	0c 17       	cp	r16, r28
    20b6:	1d 07       	cpc	r17, r29
    20b8:	c9 f7       	brne	.-14     	; 0x20ac <_GLOBAL__sub_I_ModeRunLED+0x28>
MCP_Output CtrlSwitchLEDs[NUMBER_OF_CTRL_SWITCHES];
    20ba:	84 e1       	ldi	r24, 0x14	; 20
    20bc:	93 e0       	ldi	r25, 0x03	; 3
    20be:	0e 94 8e 01 	call	0x31c	; 0x31c <_ZN10MCP_OutputC1Ev>
    20c2:	88 e1       	ldi	r24, 0x18	; 24
    20c4:	93 e0       	ldi	r25, 0x03	; 3
    20c6:	0e 94 8e 01 	call	0x31c	; 0x31c <_ZN10MCP_OutputC1Ev>
    20ca:	8c e1       	ldi	r24, 0x1C	; 28
    20cc:	93 e0       	ldi	r25, 0x03	; 3
    20ce:	0e 94 8e 01 	call	0x31c	; 0x31c <_ZN10MCP_OutputC1Ev>
    20d2:	80 e2       	ldi	r24, 0x20	; 32
    20d4:	93 e0       	ldi	r25, 0x03	; 3
    20d6:	0e 94 8e 01 	call	0x31c	; 0x31c <_ZN10MCP_OutputC1Ev>
    20da:	c4 ef       	ldi	r28, 0xF4	; 244
    20dc:	d2 e0       	ldi	r29, 0x02	; 2
    20de:	04 e1       	ldi	r16, 0x14	; 20
    20e0:	13 e0       	ldi	r17, 0x03	; 3

MCP_Output LoopRelays[NUMBER_OF_LOOPS];
    20e2:	ce 01       	movw	r24, r28
    20e4:	0e 94 8e 01 	call	0x31c	; 0x31c <_ZN10MCP_OutputC1Ev>
    20e8:	24 96       	adiw	r28, 0x04	; 4
    20ea:	c0 17       	cp	r28, r16
    20ec:	d1 07       	cpc	r29, r17
    20ee:	c9 f7       	brne	.-14     	; 0x20e2 <_GLOBAL__sub_I_ModeRunLED+0x5e>
MCP_Output CtrlSwitchRelays[NUMBER_OF_CTRL_SWITCHES];
    20f0:	84 ee       	ldi	r24, 0xE4	; 228
    20f2:	92 e0       	ldi	r25, 0x02	; 2
    20f4:	0e 94 8e 01 	call	0x31c	; 0x31c <_ZN10MCP_OutputC1Ev>
    20f8:	88 ee       	ldi	r24, 0xE8	; 232
    20fa:	92 e0       	ldi	r25, 0x02	; 2
    20fc:	0e 94 8e 01 	call	0x31c	; 0x31c <_ZN10MCP_OutputC1Ev>
    2100:	8c ee       	ldi	r24, 0xEC	; 236
    2102:	92 e0       	ldi	r25, 0x02	; 2
    2104:	0e 94 8e 01 	call	0x31c	; 0x31c <_ZN10MCP_OutputC1Ev>
    2108:	80 ef       	ldi	r24, 0xF0	; 240
    210a:	92 e0       	ldi	r25, 0x02	; 2
    210c:	0e 94 8e 01 	call	0x31c	; 0x31c <_ZN10MCP_OutputC1Ev>
		//CtrlSwitchRelays[i] = MCP_Output(MCP23017_RELAYS_ADDR, PortB, (MCP23017_Pin)i);
	//}
	
	/* Set auto toggle speed */
	MCP_Output::SetAutoToggleSpeed(360/*ms*/);
}
    2110:	df 91       	pop	r29
    2112:	cf 91       	pop	r28
    2114:	1f 91       	pop	r17
    2116:	0f 91       	pop	r16
    2118:	08 95       	ret

0000211a <_Z12Util_Bit2Inth>:
    211a:	88 23       	and	r24, r24
    211c:	31 f0       	breq	.+12     	; 0x212a <_Z12Util_Bit2Inth+0x10>
    211e:	90 e0       	ldi	r25, 0x00	; 0
    2120:	86 95       	lsr	r24
    2122:	9f 5f       	subi	r25, 0xFF	; 255
    2124:	81 11       	cpse	r24, r1
    2126:	fc cf       	rjmp	.-8      	; 0x2120 <_Z12Util_Bit2Inth+0x6>
    2128:	01 c0       	rjmp	.+2      	; 0x212c <_Z12Util_Bit2Inth+0x12>
    212a:	90 e0       	ldi	r25, 0x00	; 0
    212c:	89 2f       	mov	r24, r25
    212e:	08 95       	ret

00002130 <__divmodhi4>:
    2130:	97 fb       	bst	r25, 7
    2132:	07 2e       	mov	r0, r23
    2134:	16 f4       	brtc	.+4      	; 0x213a <__divmodhi4+0xa>
    2136:	00 94       	com	r0
    2138:	07 d0       	rcall	.+14     	; 0x2148 <__divmodhi4_neg1>
    213a:	77 fd       	sbrc	r23, 7
    213c:	09 d0       	rcall	.+18     	; 0x2150 <__divmodhi4_neg2>
    213e:	0e 94 df 10 	call	0x21be	; 0x21be <__udivmodhi4>
    2142:	07 fc       	sbrc	r0, 7
    2144:	05 d0       	rcall	.+10     	; 0x2150 <__divmodhi4_neg2>
    2146:	3e f4       	brtc	.+14     	; 0x2156 <__divmodhi4_exit>

00002148 <__divmodhi4_neg1>:
    2148:	90 95       	com	r25
    214a:	81 95       	neg	r24
    214c:	9f 4f       	sbci	r25, 0xFF	; 255
    214e:	08 95       	ret

00002150 <__divmodhi4_neg2>:
    2150:	70 95       	com	r23
    2152:	61 95       	neg	r22
    2154:	7f 4f       	sbci	r23, 0xFF	; 255

00002156 <__divmodhi4_exit>:
    2156:	08 95       	ret

00002158 <__udivmodsi4>:
    2158:	a1 e2       	ldi	r26, 0x21	; 33
    215a:	1a 2e       	mov	r1, r26
    215c:	aa 1b       	sub	r26, r26
    215e:	bb 1b       	sub	r27, r27
    2160:	fd 01       	movw	r30, r26
    2162:	0d c0       	rjmp	.+26     	; 0x217e <__udivmodsi4_ep>

00002164 <__udivmodsi4_loop>:
    2164:	aa 1f       	adc	r26, r26
    2166:	bb 1f       	adc	r27, r27
    2168:	ee 1f       	adc	r30, r30
    216a:	ff 1f       	adc	r31, r31
    216c:	a2 17       	cp	r26, r18
    216e:	b3 07       	cpc	r27, r19
    2170:	e4 07       	cpc	r30, r20
    2172:	f5 07       	cpc	r31, r21
    2174:	20 f0       	brcs	.+8      	; 0x217e <__udivmodsi4_ep>
    2176:	a2 1b       	sub	r26, r18
    2178:	b3 0b       	sbc	r27, r19
    217a:	e4 0b       	sbc	r30, r20
    217c:	f5 0b       	sbc	r31, r21

0000217e <__udivmodsi4_ep>:
    217e:	66 1f       	adc	r22, r22
    2180:	77 1f       	adc	r23, r23
    2182:	88 1f       	adc	r24, r24
    2184:	99 1f       	adc	r25, r25
    2186:	1a 94       	dec	r1
    2188:	69 f7       	brne	.-38     	; 0x2164 <__udivmodsi4_loop>
    218a:	60 95       	com	r22
    218c:	70 95       	com	r23
    218e:	80 95       	com	r24
    2190:	90 95       	com	r25
    2192:	9b 01       	movw	r18, r22
    2194:	ac 01       	movw	r20, r24
    2196:	bd 01       	movw	r22, r26
    2198:	cf 01       	movw	r24, r30
    219a:	08 95       	ret

0000219c <__tablejump2__>:
    219c:	ee 0f       	add	r30, r30
    219e:	ff 1f       	adc	r31, r31
    21a0:	05 90       	lpm	r0, Z+
    21a2:	f4 91       	lpm	r31, Z
    21a4:	e0 2d       	mov	r30, r0
    21a6:	09 94       	ijmp

000021a8 <__muluhisi3>:
    21a8:	0e 94 f3 10 	call	0x21e6	; 0x21e6 <__umulhisi3>
    21ac:	a5 9f       	mul	r26, r21
    21ae:	90 0d       	add	r25, r0
    21b0:	b4 9f       	mul	r27, r20
    21b2:	90 0d       	add	r25, r0
    21b4:	a4 9f       	mul	r26, r20
    21b6:	80 0d       	add	r24, r0
    21b8:	91 1d       	adc	r25, r1
    21ba:	11 24       	eor	r1, r1
    21bc:	08 95       	ret

000021be <__udivmodhi4>:
    21be:	aa 1b       	sub	r26, r26
    21c0:	bb 1b       	sub	r27, r27
    21c2:	51 e1       	ldi	r21, 0x11	; 17
    21c4:	07 c0       	rjmp	.+14     	; 0x21d4 <__udivmodhi4_ep>

000021c6 <__udivmodhi4_loop>:
    21c6:	aa 1f       	adc	r26, r26
    21c8:	bb 1f       	adc	r27, r27
    21ca:	a6 17       	cp	r26, r22
    21cc:	b7 07       	cpc	r27, r23
    21ce:	10 f0       	brcs	.+4      	; 0x21d4 <__udivmodhi4_ep>
    21d0:	a6 1b       	sub	r26, r22
    21d2:	b7 0b       	sbc	r27, r23

000021d4 <__udivmodhi4_ep>:
    21d4:	88 1f       	adc	r24, r24
    21d6:	99 1f       	adc	r25, r25
    21d8:	5a 95       	dec	r21
    21da:	a9 f7       	brne	.-22     	; 0x21c6 <__udivmodhi4_loop>
    21dc:	80 95       	com	r24
    21de:	90 95       	com	r25
    21e0:	bc 01       	movw	r22, r24
    21e2:	cd 01       	movw	r24, r26
    21e4:	08 95       	ret

000021e6 <__umulhisi3>:
    21e6:	a2 9f       	mul	r26, r18
    21e8:	b0 01       	movw	r22, r0
    21ea:	b3 9f       	mul	r27, r19
    21ec:	c0 01       	movw	r24, r0
    21ee:	a3 9f       	mul	r26, r19
    21f0:	70 0d       	add	r23, r0
    21f2:	81 1d       	adc	r24, r1
    21f4:	11 24       	eor	r1, r1
    21f6:	91 1d       	adc	r25, r1
    21f8:	b2 9f       	mul	r27, r18
    21fa:	70 0d       	add	r23, r0
    21fc:	81 1d       	adc	r24, r1
    21fe:	11 24       	eor	r1, r1
    2200:	91 1d       	adc	r25, r1
    2202:	08 95       	ret

00002204 <eeprom_read_block>:
    2204:	dc 01       	movw	r26, r24
    2206:	cb 01       	movw	r24, r22

00002208 <eeprom_read_blraw>:
    2208:	fc 01       	movw	r30, r24
    220a:	f9 99       	sbic	0x1f, 1	; 31
    220c:	fe cf       	rjmp	.-4      	; 0x220a <eeprom_read_blraw+0x2>
    220e:	06 c0       	rjmp	.+12     	; 0x221c <eeprom_read_blraw+0x14>
    2210:	f2 bd       	out	0x22, r31	; 34
    2212:	e1 bd       	out	0x21, r30	; 33
    2214:	f8 9a       	sbi	0x1f, 0	; 31
    2216:	31 96       	adiw	r30, 0x01	; 1
    2218:	00 b4       	in	r0, 0x20	; 32
    221a:	0d 92       	st	X+, r0
    221c:	41 50       	subi	r20, 0x01	; 1
    221e:	50 40       	sbci	r21, 0x00	; 0
    2220:	b8 f7       	brcc	.-18     	; 0x2210 <eeprom_read_blraw+0x8>
    2222:	08 95       	ret

00002224 <eeprom_read_byte>:
    2224:	f9 99       	sbic	0x1f, 1	; 31
    2226:	fe cf       	rjmp	.-4      	; 0x2224 <eeprom_read_byte>
    2228:	92 bd       	out	0x22, r25	; 34
    222a:	81 bd       	out	0x21, r24	; 33
    222c:	f8 9a       	sbi	0x1f, 0	; 31
    222e:	99 27       	eor	r25, r25
    2230:	80 b5       	in	r24, 0x20	; 32
    2232:	08 95       	ret

00002234 <eeprom_write_block>:
    2234:	dc 01       	movw	r26, r24
    2236:	cb 01       	movw	r24, r22
    2238:	03 c0       	rjmp	.+6      	; 0x2240 <eeprom_write_block+0xc>
    223a:	2d 91       	ld	r18, X+
    223c:	0e 94 25 11 	call	0x224a	; 0x224a <eeprom_write_r18>
    2240:	41 50       	subi	r20, 0x01	; 1
    2242:	50 40       	sbci	r21, 0x00	; 0
    2244:	d0 f7       	brcc	.-12     	; 0x223a <eeprom_write_block+0x6>
    2246:	08 95       	ret

00002248 <eeprom_write_byte>:
    2248:	26 2f       	mov	r18, r22

0000224a <eeprom_write_r18>:
    224a:	f9 99       	sbic	0x1f, 1	; 31
    224c:	fe cf       	rjmp	.-4      	; 0x224a <eeprom_write_r18>
    224e:	1f ba       	out	0x1f, r1	; 31
    2250:	92 bd       	out	0x22, r25	; 34
    2252:	81 bd       	out	0x21, r24	; 33
    2254:	20 bd       	out	0x20, r18	; 32
    2256:	0f b6       	in	r0, 0x3f	; 63
    2258:	f8 94       	cli
    225a:	fa 9a       	sbi	0x1f, 2	; 31
    225c:	f9 9a       	sbi	0x1f, 1	; 31
    225e:	0f be       	out	0x3f, r0	; 63
    2260:	01 96       	adiw	r24, 0x01	; 1
    2262:	08 95       	ret

00002264 <_exit>:
    2264:	f8 94       	cli

00002266 <__stop_program>:
    2266:	ff cf       	rjmp	.-2      	; 0x2266 <__stop_program>
