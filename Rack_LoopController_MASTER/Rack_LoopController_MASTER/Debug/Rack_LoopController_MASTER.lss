
Rack_LoopController_MASTER.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000d2  00800100  0000231e  000023b2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000231e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000204  008001d2  008001d2  00002484  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00002484  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000024b4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000450  00000000  00000000  000024f8  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00004ccb  00000000  00000000  00002948  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001a3b  00000000  00000000  00007613  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000026d2  00000000  00000000  0000904e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000964  00000000  00000000  0000b720  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00001cad  00000000  00000000  0000c084  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001d2f  00000000  00000000  0000dd31  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000340  00000000  00000000  0000fa60  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__ctors_end>
       4:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
       8:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
       c:	0c 94 af 05 	jmp	0xb5e	; 0xb5e <__vector_3>
      10:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
      14:	0c 94 8e 05 	jmp	0xb1c	; 0xb1c <__vector_5>
      18:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
      1c:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
      20:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
      24:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
      28:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
      2c:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
      30:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
      34:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
      38:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
      3c:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
      40:	0c 94 0b 0d 	jmp	0x1a16	; 0x1a16 <__vector_16>
      44:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
      48:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
      4c:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
      50:	0c 94 ba 0e 	jmp	0x1d74	; 0x1d74 <__vector_20>
      54:	0c 94 e5 0e 	jmp	0x1dca	; 0x1dca <__vector_21>
      58:	0c 94 47 05 	jmp	0xa8e	; 0xa8e <__vector_22>
      5c:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
      60:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
      64:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
      68:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
      6c:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
      70:	0c 94 bc 0f 	jmp	0x1f78	; 0x1f78 <__vector_28>
      74:	0c 94 e7 0f 	jmp	0x1fce	; 0x1fce <__vector_29>
      78:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
      7c:	e2 07       	cpc	r30, r18
      7e:	e8 09       	sbc	r30, r8
      80:	e8 09       	sbc	r30, r8
      82:	1c 08       	sbc	r1, r12
      84:	e8 09       	sbc	r30, r8
      86:	1c 08       	sbc	r1, r12
      88:	e8 09       	sbc	r30, r8
      8a:	e8 09       	sbc	r30, r8
      8c:	e8 09       	sbc	r30, r8
      8e:	5d 08       	sbc	r5, r13
      90:	e8 09       	sbc	r30, r8
      92:	9e 08       	sbc	r9, r14
      94:	e8 09       	sbc	r30, r8
      96:	16 09       	sbc	r17, r6
      98:	e8 09       	sbc	r30, r8
      9a:	45 09       	sbc	r20, r5
      9c:	98 0a       	sbc	r9, r24
      9e:	dc 0a       	sbc	r13, r28
      a0:	ff 0a       	sbc	r15, r31
      a2:	22 0b       	sbc	r18, r18
      a4:	31 0b       	sbc	r19, r17
      a6:	5d 0b       	sbc	r21, r29
      a8:	74 0b       	sbc	r23, r20
      aa:	ce 0c       	add	r12, r14
      ac:	ce 0c       	add	r12, r14
      ae:	b2 0b       	sbc	r27, r18
      b0:	bd 0b       	sbc	r27, r29
      b2:	fa 0b       	sbc	r31, r26
      b4:	23 0c       	add	r2, r3
      b6:	5f 0c       	add	r5, r15
      b8:	ce 0c       	add	r12, r14
      ba:	84 0c       	add	r8, r4

000000bc <__ctors_start>:
      bc:	9d 10       	cpse	r9, r13

000000be <__ctors_end>:
      be:	11 24       	eor	r1, r1
      c0:	1f be       	out	0x3f, r1	; 63
      c2:	cf ef       	ldi	r28, 0xFF	; 255
      c4:	d8 e0       	ldi	r29, 0x08	; 8
      c6:	de bf       	out	0x3e, r29	; 62
      c8:	cd bf       	out	0x3d, r28	; 61

000000ca <__do_copy_data>:
      ca:	11 e0       	ldi	r17, 0x01	; 1
      cc:	a0 e0       	ldi	r26, 0x00	; 0
      ce:	b1 e0       	ldi	r27, 0x01	; 1
      d0:	ee e1       	ldi	r30, 0x1E	; 30
      d2:	f3 e2       	ldi	r31, 0x23	; 35
      d4:	02 c0       	rjmp	.+4      	; 0xda <__do_copy_data+0x10>
      d6:	05 90       	lpm	r0, Z+
      d8:	0d 92       	st	X+, r0
      da:	a2 3d       	cpi	r26, 0xD2	; 210
      dc:	b1 07       	cpc	r27, r17
      de:	d9 f7       	brne	.-10     	; 0xd6 <__do_copy_data+0xc>

000000e0 <__do_clear_bss>:
      e0:	23 e0       	ldi	r18, 0x03	; 3
      e2:	a2 ed       	ldi	r26, 0xD2	; 210
      e4:	b1 e0       	ldi	r27, 0x01	; 1
      e6:	01 c0       	rjmp	.+2      	; 0xea <.do_clear_bss_start>

000000e8 <.do_clear_bss_loop>:
      e8:	1d 92       	st	X+, r1

000000ea <.do_clear_bss_start>:
      ea:	a6 3d       	cpi	r26, 0xD6	; 214
      ec:	b2 07       	cpc	r27, r18
      ee:	e1 f7       	brne	.-8      	; 0xe8 <.do_clear_bss_loop>

000000f0 <__do_global_ctors>:
      f0:	10 e0       	ldi	r17, 0x00	; 0
      f2:	cf e5       	ldi	r28, 0x5F	; 95
      f4:	d0 e0       	ldi	r29, 0x00	; 0
      f6:	04 c0       	rjmp	.+8      	; 0x100 <__do_global_ctors+0x10>
      f8:	21 97       	sbiw	r28, 0x01	; 1
      fa:	fe 01       	movw	r30, r28
      fc:	0e 94 29 11 	call	0x2252	; 0x2252 <__tablejump2__>
     100:	ce 35       	cpi	r28, 0x5E	; 94
     102:	d1 07       	cpc	r29, r17
     104:	c9 f7       	brne	.-14     	; 0xf8 <__do_global_ctors+0x8>
     106:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <main>
     10a:	0c 94 8d 11 	jmp	0x231a	; 0x231a <_exit>

0000010e <__bad_interrupt>:
     10e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000112 <_Z8i2c_initv>:
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWEA);
	while(!(TWCR & (1<<TWINT)));    

    return TWDR;

}/* i2c_readAck */
     112:	10 92 b9 00 	sts	0x00B9, r1	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
     116:	8c e5       	ldi	r24, 0x5C	; 92
     118:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7e00b8>
     11c:	08 95       	ret

0000011e <_Z9i2c_starth>:
     11e:	94 ea       	ldi	r25, 0xA4	; 164
     120:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
     124:	ec eb       	ldi	r30, 0xBC	; 188
     126:	f0 e0       	ldi	r31, 0x00	; 0
     128:	90 81       	ld	r25, Z
     12a:	99 23       	and	r25, r25
     12c:	ec f7       	brge	.-6      	; 0x128 <_Z9i2c_starth+0xa>
     12e:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
     132:	98 7f       	andi	r25, 0xF8	; 248
     134:	98 30       	cpi	r25, 0x08	; 8
     136:	11 f0       	breq	.+4      	; 0x13c <_Z9i2c_starth+0x1e>
     138:	90 31       	cpi	r25, 0x10	; 16
     13a:	a1 f4       	brne	.+40     	; 0x164 <_Z9i2c_starth+0x46>
     13c:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
     140:	84 e8       	ldi	r24, 0x84	; 132
     142:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
     146:	ec eb       	ldi	r30, 0xBC	; 188
     148:	f0 e0       	ldi	r31, 0x00	; 0
     14a:	80 81       	ld	r24, Z
     14c:	88 23       	and	r24, r24
     14e:	ec f7       	brge	.-6      	; 0x14a <_Z9i2c_starth+0x2c>
     150:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
     154:	98 7f       	andi	r25, 0xF8	; 248
     156:	98 31       	cpi	r25, 0x18	; 24
     158:	39 f0       	breq	.+14     	; 0x168 <_Z9i2c_starth+0x4a>
     15a:	81 e0       	ldi	r24, 0x01	; 1
     15c:	90 34       	cpi	r25, 0x40	; 64
     15e:	29 f4       	brne	.+10     	; 0x16a <_Z9i2c_starth+0x4c>
     160:	80 e0       	ldi	r24, 0x00	; 0
     162:	08 95       	ret
     164:	81 e0       	ldi	r24, 0x01	; 1
     166:	08 95       	ret
     168:	80 e0       	ldi	r24, 0x00	; 0
     16a:	08 95       	ret

0000016c <_Z8i2c_stopv>:
     16c:	84 e9       	ldi	r24, 0x94	; 148
     16e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
     172:	ec eb       	ldi	r30, 0xBC	; 188
     174:	f0 e0       	ldi	r31, 0x00	; 0
     176:	80 81       	ld	r24, Z
     178:	84 fd       	sbrc	r24, 4
     17a:	fd cf       	rjmp	.-6      	; 0x176 <_Z8i2c_stopv+0xa>
     17c:	08 95       	ret

0000017e <_Z9i2c_writeh>:
     17e:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
     182:	84 e8       	ldi	r24, 0x84	; 132
     184:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
     188:	ec eb       	ldi	r30, 0xBC	; 188
     18a:	f0 e0       	ldi	r31, 0x00	; 0
     18c:	80 81       	ld	r24, Z
     18e:	88 23       	and	r24, r24
     190:	ec f7       	brge	.-6      	; 0x18c <_Z9i2c_writeh+0xe>
     192:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
     196:	98 7f       	andi	r25, 0xF8	; 248
     198:	81 e0       	ldi	r24, 0x01	; 1
     19a:	98 32       	cpi	r25, 0x28	; 40
     19c:	09 f4       	brne	.+2      	; 0x1a0 <_Z9i2c_writeh+0x22>
     19e:	80 e0       	ldi	r24, 0x00	; 0
     1a0:	08 95       	ret

000001a2 <_Z11i2c_readNakv>:
 
 Return:  byte read from I2C device
*************************************************************************/
unsigned char i2c_readNak(void)
{
	TWCR = (1<<TWINT) | (1<<TWEN);
     1a2:	84 e8       	ldi	r24, 0x84	; 132
     1a4:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	while(!(TWCR & (1<<TWINT)));
     1a8:	ec eb       	ldi	r30, 0xBC	; 188
     1aa:	f0 e0       	ldi	r31, 0x00	; 0
     1ac:	80 81       	ld	r24, Z
     1ae:	88 23       	and	r24, r24
     1b0:	ec f7       	brge	.-6      	; 0x1ac <_Z11i2c_readNakv+0xa>
	
    return TWDR;
     1b2:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>

}/* i2c_readNak */
     1b6:	08 95       	ret

000001b8 <main>:

/* Main application */
int main(void)
{
	/* Initialization */
	Timer0_Init();
     1b8:	0e 94 ed 0c 	call	0x19da	; 0x19da <_Z11Timer0_Initv>
	i2c_init();
     1bc:	0e 94 89 00 	call	0x112	; 0x112 <_Z8i2c_initv>
	UART0_Init(PEDAL_UART_BAUDRATE, UART_2_STOP_BITS, UART_NO_PARITY);
     1c0:	40 e0       	ldi	r20, 0x00	; 0
     1c2:	62 e0       	ldi	r22, 0x02	; 2
     1c4:	80 e0       	ldi	r24, 0x00	; 0
     1c6:	9b e4       	ldi	r25, 0x4B	; 75
     1c8:	0e 94 0b 0e 	call	0x1c16	; 0x1c16 <_Z10UART0_Initjhh>
	UART1_Init(MIDI_UART_BAUDRATE, UART_1_STOP_BIT, UART_NO_PARITY);
     1cc:	40 e0       	ldi	r20, 0x00	; 0
     1ce:	61 e0       	ldi	r22, 0x01	; 1
     1d0:	82 e1       	ldi	r24, 0x12	; 18
     1d2:	9a e7       	ldi	r25, 0x7A	; 122
     1d4:	0e 94 0f 0f 	call	0x1e1e	; 0x1e1e <_Z10UART1_Initjhh>
	PedalCom_Init();
     1d8:	0e 94 35 05 	call	0xa6a	; 0xa6a <_Z13PedalCom_Initv>
	
	RotaryEncoder_Init();
     1dc:	0e 94 6c 05 	call	0xad8	; 0xad8 <_Z18RotaryEncoder_Initv>
	SP10281_Init();
     1e0:	0e 94 60 06 	call	0xcc0	; 0xcc0 <_Z12SP10281_Initv>
	UI_Init();
     1e4:	0e 94 11 10 	call	0x2022	; 0x2022 <_Z7UI_Initv>
	
	/* Global Enable Interrupt */
	sei();
     1e8:	78 94       	sei
		/* Send NACK if full command frame was not received before timeout */
		if (PedalCom_FullFrameTimeoutFlag)
		{
			PedalCom_FullFrameTimeoutFlag = false;
			UART0_QueueChar(NACK_BYTE);
			PedalCom_DelayTxFlag = true;
     1ea:	c1 e0       	ldi	r28, 0x01	; 1
	
	/* Main loop */
    while (1) 
    {
		/* Handle incoming MIDI */
		if (UART1_Available())
     1ec:	0e 94 b1 0f 	call	0x1f62	; 0x1f62 <_Z15UART1_Availablev>
     1f0:	89 2b       	or	r24, r25
     1f2:	11 f0       	breq	.+4      	; 0x1f8 <main+0x40>
		{
			MIDI_ReceiveIncoming();
     1f4:	0e 94 93 02 	call	0x526	; 0x526 <_Z20MIDI_ReceiveIncomingv>
		}
		
		if (MIDI_ProgramChangeFlag)
     1f8:	80 91 d8 01 	lds	r24, 0x01D8	; 0x8001d8 <MIDI_ProgramChangeFlag>
     1fc:	88 23       	and	r24, r24
     1fe:	21 f0       	breq	.+8      	; 0x208 <main+0x50>
		{
			MIDI_ProgramChangeFlag = false;
     200:	10 92 d8 01 	sts	0x01D8, r1	; 0x8001d8 <MIDI_ProgramChangeFlag>
			System_HandleMIDIProgramChange();
     204:	0e 94 5e 07 	call	0xebc	; 0xebc <_Z30System_HandleMIDIProgramChangev>
		}
		
		/* Handle incoming data from Pedal */
		while (UART0_Available())
     208:	0e 94 8c 0e 	call	0x1d18	; 0x1d18 <_Z15UART0_Availablev>
     20c:	89 2b       	or	r24, r25
     20e:	19 f0       	breq	.+6      	; 0x216 <main+0x5e>
		{
			PedalCom_Receive();
     210:	0e 94 45 04 	call	0x88a	; 0x88a <_Z16PedalCom_Receivev>
			MIDI_ProgramChangeFlag = false;
			System_HandleMIDIProgramChange();
		}
		
		/* Handle incoming data from Pedal */
		while (UART0_Available())
     214:	f9 cf       	rjmp	.-14     	; 0x208 <main+0x50>
		{
			PedalCom_Receive();
		}
		
		/* Handle command received from Pedal. (Only once per program loop) */
		if (PedalCom_RxAvailable())
     216:	0e 94 e5 02 	call	0x5ca	; 0x5ca <_Z20PedalCom_RxAvailablev>
     21a:	81 11       	cpse	r24, r1
		{
			PedalCom_HandleReceived();
     21c:	0e 94 09 03 	call	0x612	; 0x612 <_Z23PedalCom_HandleReceivedv>
		}
		
		/* Handle TX Command queue */
		if (PedalCom_TxAvailable())
     220:	0e 94 ee 02 	call	0x5dc	; 0x5dc <_Z20PedalCom_TxAvailablev>
     224:	81 11       	cpse	r24, r1
		{
			PedalCom_PutCommand();
     226:	0e 94 93 03 	call	0x726	; 0x726 <_Z19PedalCom_PutCommandv>
		}
		
		/* Transmit data to Pedal */
		if (PedalCom_DelayTxFlag)
     22a:	80 91 1e 02 	lds	r24, 0x021E	; 0x80021e <PedalCom_DelayTxFlag>
     22e:	88 23       	and	r24, r24
     230:	41 f0       	breq	.+16     	; 0x242 <main+0x8a>
		{
			PedalCom_DelayTxFlag = false;
     232:	10 92 1e 02 	sts	0x021E, r1	; 0x80021e <PedalCom_DelayTxFlag>
			
			if (!UART0_QueueIsEmpty())
     236:	0e 94 b2 0e 	call	0x1d64	; 0x1d64 <_Z18UART0_QueueIsEmptyv>
     23a:	81 11       	cpse	r24, r1
     23c:	02 c0       	rjmp	.+4      	; 0x242 <main+0x8a>
			{
				PedalCom_Transmit();
     23e:	0e 94 41 05 	call	0xa82	; 0xa82 <_Z17PedalCom_Transmitv>
			}
		}
		
		/* Retransmit command if no response was received */
		if (PedalCom_ResponseTimeoutFlag)
     242:	80 91 1a 02 	lds	r24, 0x021A	; 0x80021a <PedalCom_ResponseTimeoutFlag>
     246:	88 23       	and	r24, r24
     248:	21 f0       	breq	.+8      	; 0x252 <main+0x9a>
		{
			PedalCom_ResponseTimeoutFlag = false;
     24a:	10 92 1a 02 	sts	0x021A, r1	; 0x80021a <PedalCom_ResponseTimeoutFlag>
			PedalCom_PrepareRetransmit();
     24e:	0e 94 2f 04 	call	0x85e	; 0x85e <_Z26PedalCom_PrepareRetransmitv>
		}
		
		/* Send NACK if full command frame was not received before timeout */
		if (PedalCom_FullFrameTimeoutFlag)
     252:	80 91 17 02 	lds	r24, 0x0217	; 0x800217 <PedalCom_FullFrameTimeoutFlag>
     256:	88 23       	and	r24, r24
     258:	39 f0       	breq	.+14     	; 0x268 <main+0xb0>
		{
			PedalCom_FullFrameTimeoutFlag = false;
     25a:	10 92 17 02 	sts	0x0217, r1	; 0x800217 <PedalCom_FullFrameTimeoutFlag>
			UART0_QueueChar(NACK_BYTE);
     25e:	8a e2       	ldi	r24, 0x2A	; 42
     260:	0e 94 97 0e 	call	0x1d2e	; 0x1d2e <_Z15UART0_QueueCharh>
			PedalCom_DelayTxFlag = true;
     264:	c0 93 1e 02 	sts	0x021E, r28	; 0x80021e <PedalCom_DelayTxFlag>
		}
		
		/* Send current System State to Pedal (Heartbeat) */
		if (PedalCom_HeartbeatFlag)
     268:	80 91 16 02 	lds	r24, 0x0216	; 0x800216 <PedalCom_HeartbeatFlag>
     26c:	88 23       	and	r24, r24
     26e:	89 f0       	breq	.+34     	; 0x292 <main+0xda>
		{
			PedalCom_HeartbeatFlag = false;
     270:	10 92 16 02 	sts	0x0216, r1	; 0x800216 <PedalCom_HeartbeatFlag>
			
			/* If last command did not get an ACK */
			if (PedalCom_TxAvailable())
     274:	0e 94 ee 02 	call	0x5dc	; 0x5dc <_Z20PedalCom_TxAvailablev>
     278:	88 23       	and	r24, r24
     27a:	29 f0       	breq	.+10     	; 0x286 <main+0xce>
			{
				PedalCom_ConnectionOpen = false;
     27c:	10 92 42 01 	sts	0x0142, r1	; 0x800142 <PedalCom_ConnectionOpen>
				PedalCom_FlushTxQueue();
     280:	0e 94 f7 02 	call	0x5ee	; 0x5ee <_Z21PedalCom_FlushTxQueuev>
     284:	06 c0       	rjmp	.+12     	; 0x292 <main+0xda>
			}
			else
			{
				PedalCom_QueueCommand(UpdateSystemState, 1, (uint8_t *)&SystemState);
     286:	49 e5       	ldi	r20, 0x59	; 89
     288:	52 e0       	ldi	r21, 0x02	; 2
     28a:	6c 2f       	mov	r22, r28
     28c:	85 ed       	ldi	r24, 0xD5	; 213
     28e:	0e 94 3a 03 	call	0x674	; 0x674 <_Z21PedalCom_QueueCommand3CMDhPh>
			}
		}
		
		/* Service 7-segment display */
		if (SP10281_OvfFlag)
     292:	80 91 23 02 	lds	r24, 0x0223	; 0x800223 <SP10281_OvfFlag>
     296:	88 23       	and	r24, r24
     298:	21 f0       	breq	.+8      	; 0x2a2 <main+0xea>
		{
			SP10281_OvfFlag = 0;
     29a:	10 92 23 02 	sts	0x0223, r1	; 0x800223 <SP10281_OvfFlag>
			SP10281_Update();
     29e:	0e 94 cd 05 	call	0xb9a	; 0xb9a <_Z14SP10281_Updatev>
		}
		
		/* Blink UI LEDs */
		if (MCP_Output::AutoToggle_Flag)
     2a2:	80 91 d4 01 	lds	r24, 0x01D4	; 0x8001d4 <_ZN10MCP_Output15AutoToggle_FlagE>
     2a6:	88 23       	and	r24, r24
     2a8:	29 f0       	breq	.+10     	; 0x2b4 <main+0xfc>
		{
			MCP_Output::AutoToggle_Flag = 0;
     2aa:	10 92 d4 01 	sts	0x01D4, r1	; 0x8001d4 <_ZN10MCP_Output15AutoToggle_FlagE>
			MCP_Output::PerformAutoToggle(MCP23017_UI_LEDS_ADDR);
     2ae:	80 e0       	ldi	r24, 0x00	; 0
     2b0:	0e 94 74 02 	call	0x4e8	; 0x4e8 <_ZN10MCP_Output17PerformAutoToggleEh>
		}
		
		/* Handle input from rotary encoder */
		if (RotEnc_State != IDLE && RotEnc_State != PRESSED)
     2b4:	80 91 1f 02 	lds	r24, 0x021F	; 0x80021f <RotEnc_State>
     2b8:	88 23       	and	r24, r24
     2ba:	21 f0       	breq	.+8      	; 0x2c4 <main+0x10c>
     2bc:	80 91 1f 02 	lds	r24, 0x021F	; 0x80021f <RotEnc_State>
     2c0:	84 30       	cpi	r24, 0x04	; 4
     2c2:	99 f4       	brne	.+38     	; 0x2ea <main+0x132>
			RotEnc_State = IDLE;
			RotaryEncoder_EnableInterrupt();
		}
		
		/* Handle temp select timeout condition */
		if (System_TempSelectFlag)
     2c4:	80 91 5d 02 	lds	r24, 0x025D	; 0x80025d <System_TempSelectFlag>
     2c8:	88 23       	and	r24, r24
     2ca:	21 f0       	breq	.+8      	; 0x2d4 <main+0x11c>
		{
			System_TempSelectFlag = false;
     2cc:	10 92 5d 02 	sts	0x025D, r1	; 0x80025d <System_TempSelectFlag>
			System_HandleTempSelectTimeout();
     2d0:	0e 94 6a 06 	call	0xcd4	; 0xcd4 <_Z30System_HandleTempSelectTimeoutv>
		}
		
		/* Reset UI LEDs after selection mark */
		if (System_MarkSelectionFlag)
     2d4:	80 91 5a 02 	lds	r24, 0x025A	; 0x80025a <System_MarkSelectionFlag>
     2d8:	88 23       	and	r24, r24
     2da:	21 f0       	breq	.+8      	; 0x2e4 <main+0x12c>
		{
			System_MarkSelectionFlag = false;
     2dc:	10 92 5a 02 	sts	0x025A, r1	; 0x80025a <System_MarkSelectionFlag>
			System_HandleMarkSelection();
     2e0:	0e 94 c4 06 	call	0xd88	; 0xd88 <_Z26System_HandleMarkSelectionv>
		}
		
		/* The grand state machine */
		System_Run();
     2e4:	0e 94 89 0a 	call	0x1512	; 0x1512 <_Z10System_Runv>
	
	/* Global Enable Interrupt */
	sei();
	
	/* Main loop */
    while (1) 
     2e8:	81 cf       	rjmp	.-254    	; 0x1ec <main+0x34>
		}
		
		/* Handle input from rotary encoder */
		if (RotEnc_State != IDLE && RotEnc_State != PRESSED)
		{
			System_HandleRotaryEncoderInput();
     2ea:	0e 94 d2 07 	call	0xfa4	; 0xfa4 <_Z31System_HandleRotaryEncoderInputv>
			
			RotEnc_State = IDLE;
     2ee:	10 92 1f 02 	sts	0x021F, r1	; 0x80021f <RotEnc_State>
			RotaryEncoder_EnableInterrupt();
     2f2:	0e 94 85 05 	call	0xb0a	; 0xb0a <_Z29RotaryEncoder_EnableInterruptv>
     2f6:	e6 cf       	rjmp	.-52     	; 0x2c4 <main+0x10c>

000002f8 <_Z17MCP23017_WriteReghhh>:
	{
		this->Set();
	} 
	else if (State == SET)
	{
		this->Clear();
     2f8:	cf 93       	push	r28
     2fa:	df 93       	push	r29
     2fc:	d6 2f       	mov	r29, r22
     2fe:	c4 2f       	mov	r28, r20
     300:	80 62       	ori	r24, 0x20	; 32
     302:	88 0f       	add	r24, r24
     304:	0e 94 8f 00 	call	0x11e	; 0x11e <_Z9i2c_starth>
     308:	8d 2f       	mov	r24, r29
     30a:	0e 94 bf 00 	call	0x17e	; 0x17e <_Z9i2c_writeh>
     30e:	8c 2f       	mov	r24, r28
     310:	0e 94 bf 00 	call	0x17e	; 0x17e <_Z9i2c_writeh>
     314:	0e 94 b6 00 	call	0x16c	; 0x16c <_Z8i2c_stopv>
     318:	df 91       	pop	r29
     31a:	cf 91       	pop	r28
     31c:	08 95       	ret

0000031e <_Z16MCP23017_ReadReghh>:
     31e:	cf 93       	push	r28
     320:	df 93       	push	r29
     322:	d6 2f       	mov	r29, r22
     324:	80 62       	ori	r24, 0x20	; 32
     326:	c8 2f       	mov	r28, r24
     328:	cc 0f       	add	r28, r28
     32a:	8c 2f       	mov	r24, r28
     32c:	0e 94 8f 00 	call	0x11e	; 0x11e <_Z9i2c_starth>
     330:	8d 2f       	mov	r24, r29
     332:	0e 94 bf 00 	call	0x17e	; 0x17e <_Z9i2c_writeh>
     336:	0e 94 b6 00 	call	0x16c	; 0x16c <_Z8i2c_stopv>
     33a:	8c 2f       	mov	r24, r28
     33c:	81 60       	ori	r24, 0x01	; 1
     33e:	0e 94 8f 00 	call	0x11e	; 0x11e <_Z9i2c_starth>
     342:	0e 94 d1 00 	call	0x1a2	; 0x1a2 <_Z11i2c_readNakv>
     346:	df 91       	pop	r29
     348:	cf 91       	pop	r28
     34a:	08 95       	ret

0000034c <_ZN10MCP_OutputC1Ev>:
     34c:	08 95       	ret

0000034e <_ZN10MCP_Output8getStateEv>:
     34e:	fc 01       	movw	r30, r24
     350:	83 81       	ldd	r24, Z+3	; 0x03
     352:	08 95       	ret

00000354 <_ZN10MCP_Output3SetEv>:
     354:	1f 93       	push	r17
     356:	cf 93       	push	r28
     358:	df 93       	push	r29
     35a:	ec 01       	movw	r28, r24
     35c:	89 81       	ldd	r24, Y+1	; 0x01
     35e:	81 11       	cpse	r24, r1
     360:	10 c0       	rjmp	.+32     	; 0x382 <_ZN10MCP_Output3SetEv+0x2e>
     362:	20 91 d3 01 	lds	r18, 0x01D3	; 0x8001d3 <_ZN10MCP_Output16AutoToggle_PortAE>
     366:	81 e0       	ldi	r24, 0x01	; 1
     368:	90 e0       	ldi	r25, 0x00	; 0
     36a:	0a 80       	ldd	r0, Y+2	; 0x02
     36c:	02 c0       	rjmp	.+4      	; 0x372 <_ZN10MCP_Output3SetEv+0x1e>
     36e:	88 0f       	add	r24, r24
     370:	99 1f       	adc	r25, r25
     372:	0a 94       	dec	r0
     374:	e2 f7       	brpl	.-8      	; 0x36e <_ZN10MCP_Output3SetEv+0x1a>
     376:	80 95       	com	r24
     378:	82 23       	and	r24, r18
     37a:	80 93 d3 01 	sts	0x01D3, r24	; 0x8001d3 <_ZN10MCP_Output16AutoToggle_PortAE>
     37e:	14 e1       	ldi	r17, 0x14	; 20
     380:	0f c0       	rjmp	.+30     	; 0x3a0 <_ZN10MCP_Output3SetEv+0x4c>
     382:	20 91 d2 01 	lds	r18, 0x01D2	; 0x8001d2 <__data_end>
     386:	81 e0       	ldi	r24, 0x01	; 1
     388:	90 e0       	ldi	r25, 0x00	; 0
     38a:	0a 80       	ldd	r0, Y+2	; 0x02
     38c:	02 c0       	rjmp	.+4      	; 0x392 <_ZN10MCP_Output3SetEv+0x3e>
     38e:	88 0f       	add	r24, r24
     390:	99 1f       	adc	r25, r25
     392:	0a 94       	dec	r0
     394:	e2 f7       	brpl	.-8      	; 0x38e <_ZN10MCP_Output3SetEv+0x3a>
     396:	80 95       	com	r24
     398:	82 23       	and	r24, r18
     39a:	80 93 d2 01 	sts	0x01D2, r24	; 0x8001d2 <__data_end>
     39e:	15 e1       	ldi	r17, 0x15	; 21
     3a0:	61 2f       	mov	r22, r17
     3a2:	88 81       	ld	r24, Y
     3a4:	0e 94 8f 01 	call	0x31e	; 0x31e <_Z16MCP23017_ReadReghh>
     3a8:	41 e0       	ldi	r20, 0x01	; 1
     3aa:	50 e0       	ldi	r21, 0x00	; 0
     3ac:	0a 80       	ldd	r0, Y+2	; 0x02
     3ae:	02 c0       	rjmp	.+4      	; 0x3b4 <_ZN10MCP_Output3SetEv+0x60>
     3b0:	44 0f       	add	r20, r20
     3b2:	55 1f       	adc	r21, r21
     3b4:	0a 94       	dec	r0
     3b6:	e2 f7       	brpl	.-8      	; 0x3b0 <_ZN10MCP_Output3SetEv+0x5c>
     3b8:	48 2b       	or	r20, r24
     3ba:	61 2f       	mov	r22, r17
     3bc:	88 81       	ld	r24, Y
     3be:	0e 94 7c 01 	call	0x2f8	; 0x2f8 <_Z17MCP23017_WriteReghhh>
     3c2:	81 e0       	ldi	r24, 0x01	; 1
     3c4:	8b 83       	std	Y+3, r24	; 0x03
     3c6:	df 91       	pop	r29
     3c8:	cf 91       	pop	r28
     3ca:	1f 91       	pop	r17
     3cc:	08 95       	ret

000003ce <_ZN10MCP_Output5ClearEv>:
     3ce:	1f 93       	push	r17
     3d0:	cf 93       	push	r28
     3d2:	df 93       	push	r29
     3d4:	ec 01       	movw	r28, r24
     3d6:	89 81       	ldd	r24, Y+1	; 0x01
     3d8:	81 11       	cpse	r24, r1
     3da:	10 c0       	rjmp	.+32     	; 0x3fc <_ZN10MCP_Output5ClearEv+0x2e>
     3dc:	20 91 d3 01 	lds	r18, 0x01D3	; 0x8001d3 <_ZN10MCP_Output16AutoToggle_PortAE>
     3e0:	81 e0       	ldi	r24, 0x01	; 1
     3e2:	90 e0       	ldi	r25, 0x00	; 0
     3e4:	0a 80       	ldd	r0, Y+2	; 0x02
     3e6:	02 c0       	rjmp	.+4      	; 0x3ec <_ZN10MCP_Output5ClearEv+0x1e>
     3e8:	88 0f       	add	r24, r24
     3ea:	99 1f       	adc	r25, r25
     3ec:	0a 94       	dec	r0
     3ee:	e2 f7       	brpl	.-8      	; 0x3e8 <_ZN10MCP_Output5ClearEv+0x1a>
     3f0:	80 95       	com	r24
     3f2:	82 23       	and	r24, r18
     3f4:	80 93 d3 01 	sts	0x01D3, r24	; 0x8001d3 <_ZN10MCP_Output16AutoToggle_PortAE>
     3f8:	14 e1       	ldi	r17, 0x14	; 20
     3fa:	0f c0       	rjmp	.+30     	; 0x41a <__LOCK_REGION_LENGTH__+0x1a>
     3fc:	20 91 d2 01 	lds	r18, 0x01D2	; 0x8001d2 <__data_end>
     400:	81 e0       	ldi	r24, 0x01	; 1
     402:	90 e0       	ldi	r25, 0x00	; 0
     404:	0a 80       	ldd	r0, Y+2	; 0x02
     406:	02 c0       	rjmp	.+4      	; 0x40c <__LOCK_REGION_LENGTH__+0xc>
     408:	88 0f       	add	r24, r24
     40a:	99 1f       	adc	r25, r25
     40c:	0a 94       	dec	r0
     40e:	e2 f7       	brpl	.-8      	; 0x408 <__LOCK_REGION_LENGTH__+0x8>
     410:	80 95       	com	r24
     412:	82 23       	and	r24, r18
     414:	80 93 d2 01 	sts	0x01D2, r24	; 0x8001d2 <__data_end>
     418:	15 e1       	ldi	r17, 0x15	; 21
     41a:	61 2f       	mov	r22, r17
     41c:	88 81       	ld	r24, Y
     41e:	0e 94 8f 01 	call	0x31e	; 0x31e <_Z16MCP23017_ReadReghh>
     422:	41 e0       	ldi	r20, 0x01	; 1
     424:	50 e0       	ldi	r21, 0x00	; 0
     426:	0a 80       	ldd	r0, Y+2	; 0x02
     428:	02 c0       	rjmp	.+4      	; 0x42e <__LOCK_REGION_LENGTH__+0x2e>
     42a:	44 0f       	add	r20, r20
     42c:	55 1f       	adc	r21, r21
     42e:	0a 94       	dec	r0
     430:	e2 f7       	brpl	.-8      	; 0x42a <__LOCK_REGION_LENGTH__+0x2a>
     432:	40 95       	com	r20
     434:	48 23       	and	r20, r24
     436:	61 2f       	mov	r22, r17
     438:	88 81       	ld	r24, Y
     43a:	0e 94 7c 01 	call	0x2f8	; 0x2f8 <_Z17MCP23017_WriteReghhh>
     43e:	1b 82       	std	Y+3, r1	; 0x03
     440:	df 91       	pop	r29
     442:	cf 91       	pop	r28
     444:	1f 91       	pop	r17
     446:	08 95       	ret

00000448 <_ZN10MCP_OutputC1Eh13MCP23017_Port12MCP23017_Pin>:
     448:	1f 93       	push	r17
     44a:	cf 93       	push	r28
     44c:	df 93       	push	r29
     44e:	ec 01       	movw	r28, r24
     450:	86 2f       	mov	r24, r22
     452:	68 83       	st	Y, r22
     454:	49 83       	std	Y+1, r20	; 0x01
     456:	2a 83       	std	Y+2, r18	; 0x02
     458:	11 e0       	ldi	r17, 0x01	; 1
     45a:	41 11       	cpse	r20, r1
     45c:	01 c0       	rjmp	.+2      	; 0x460 <_ZN10MCP_OutputC1Eh13MCP23017_Port12MCP23017_Pin+0x18>
     45e:	10 e0       	ldi	r17, 0x00	; 0
     460:	61 2f       	mov	r22, r17
     462:	0e 94 8f 01 	call	0x31e	; 0x31e <_Z16MCP23017_ReadReghh>
     466:	41 e0       	ldi	r20, 0x01	; 1
     468:	50 e0       	ldi	r21, 0x00	; 0
     46a:	0a 80       	ldd	r0, Y+2	; 0x02
     46c:	02 c0       	rjmp	.+4      	; 0x472 <_ZN10MCP_OutputC1Eh13MCP23017_Port12MCP23017_Pin+0x2a>
     46e:	44 0f       	add	r20, r20
     470:	55 1f       	adc	r21, r21
     472:	0a 94       	dec	r0
     474:	e2 f7       	brpl	.-8      	; 0x46e <_ZN10MCP_OutputC1Eh13MCP23017_Port12MCP23017_Pin+0x26>
     476:	40 95       	com	r20
     478:	48 23       	and	r20, r24
     47a:	61 2f       	mov	r22, r17
     47c:	88 81       	ld	r24, Y
     47e:	0e 94 7c 01 	call	0x2f8	; 0x2f8 <_Z17MCP23017_WriteReghhh>
     482:	ce 01       	movw	r24, r28
     484:	0e 94 e7 01 	call	0x3ce	; 0x3ce <_ZN10MCP_Output5ClearEv>
     488:	df 91       	pop	r29
     48a:	cf 91       	pop	r28
     48c:	1f 91       	pop	r17
     48e:	08 95       	ret

00000490 <_ZN10MCP_Output10AutoToggleEv>:
	}
}

void MCP_Output::AutoToggle()
{
     490:	fc 01       	movw	r30, r24
	State = AUTO_TOGGLE;
     492:	82 e0       	ldi	r24, 0x02	; 2
     494:	83 83       	std	Z+3, r24	; 0x03
	
	if (Port == PortA)
     496:	81 81       	ldd	r24, Z+1	; 0x01
     498:	81 11       	cpse	r24, r1
     49a:	0e c0       	rjmp	.+28     	; 0x4b8 <_ZN10MCP_Output10AutoToggleEv+0x28>
	{
		MCP_Output::AutoToggle_PortA |= (1 << Pin);
     49c:	20 91 d3 01 	lds	r18, 0x01D3	; 0x8001d3 <_ZN10MCP_Output16AutoToggle_PortAE>
     4a0:	81 e0       	ldi	r24, 0x01	; 1
     4a2:	90 e0       	ldi	r25, 0x00	; 0
     4a4:	02 80       	ldd	r0, Z+2	; 0x02
     4a6:	02 c0       	rjmp	.+4      	; 0x4ac <_ZN10MCP_Output10AutoToggleEv+0x1c>
     4a8:	88 0f       	add	r24, r24
     4aa:	99 1f       	adc	r25, r25
     4ac:	0a 94       	dec	r0
     4ae:	e2 f7       	brpl	.-8      	; 0x4a8 <_ZN10MCP_Output10AutoToggleEv+0x18>
     4b0:	82 2b       	or	r24, r18
     4b2:	80 93 d3 01 	sts	0x01D3, r24	; 0x8001d3 <_ZN10MCP_Output16AutoToggle_PortAE>
     4b6:	08 95       	ret
	}
	else
	{
		MCP_Output::AutoToggle_PortB |= (1 << Pin);
     4b8:	20 91 d2 01 	lds	r18, 0x01D2	; 0x8001d2 <__data_end>
     4bc:	81 e0       	ldi	r24, 0x01	; 1
     4be:	90 e0       	ldi	r25, 0x00	; 0
     4c0:	02 80       	ldd	r0, Z+2	; 0x02
     4c2:	02 c0       	rjmp	.+4      	; 0x4c8 <_ZN10MCP_Output10AutoToggleEv+0x38>
     4c4:	88 0f       	add	r24, r24
     4c6:	99 1f       	adc	r25, r25
     4c8:	0a 94       	dec	r0
     4ca:	e2 f7       	brpl	.-8      	; 0x4c4 <_ZN10MCP_Output10AutoToggleEv+0x34>
     4cc:	82 2b       	or	r24, r18
     4ce:	80 93 d2 01 	sts	0x01D2, r24	; 0x8001d2 <__data_end>
     4d2:	08 95       	ret

000004d4 <_ZN10MCP_Output18SetAutoToggleSpeedEj>:
	}
}

void MCP_Output::SetAutoToggleSpeed(uint16_t ms)
{
	AutoToggle_Timeout = (uint16_t)Timer0_ms2cnt(ms);
     4d4:	bc 01       	movw	r22, r24
     4d6:	80 e0       	ldi	r24, 0x00	; 0
     4d8:	90 e0       	ldi	r25, 0x00	; 0
     4da:	0e 94 fc 0c 	call	0x19f8	; 0x19f8 <_Z13Timer0_ms2cntm>
     4de:	70 93 01 01 	sts	0x0101, r23	; 0x800101 <_ZN10MCP_Output18AutoToggle_TimeoutE+0x1>
     4e2:	60 93 00 01 	sts	0x0100, r22	; 0x800100 <_ZN10MCP_Output18AutoToggle_TimeoutE>
     4e6:	08 95       	ret

000004e8 <_ZN10MCP_Output17PerformAutoToggleEh>:
}

void MCP_Output::PerformAutoToggle(uint8_t addr)
{
     4e8:	1f 93       	push	r17
     4ea:	cf 93       	push	r28
     4ec:	df 93       	push	r29
     4ee:	c8 2f       	mov	r28, r24
	uint8_t valA = MCP23017_ReadReg(addr, OLATA);
     4f0:	64 e1       	ldi	r22, 0x14	; 20
     4f2:	0e 94 8f 01 	call	0x31e	; 0x31e <_Z16MCP23017_ReadReghh>
     4f6:	18 2f       	mov	r17, r24
	uint8_t valB = MCP23017_ReadReg(addr, OLATB);
     4f8:	65 e1       	ldi	r22, 0x15	; 21
     4fa:	8c 2f       	mov	r24, r28
     4fc:	0e 94 8f 01 	call	0x31e	; 0x31e <_Z16MCP23017_ReadReghh>
	
	valA ^= MCP_Output::AutoToggle_PortA;
     500:	40 91 d3 01 	lds	r20, 0x01D3	; 0x8001d3 <_ZN10MCP_Output16AutoToggle_PortAE>
	valB ^= MCP_Output::AutoToggle_PortB;
     504:	d0 91 d2 01 	lds	r29, 0x01D2	; 0x8001d2 <__data_end>
     508:	d8 27       	eor	r29, r24
	
	MCP23017_WriteReg(addr, OLATA, valA);
     50a:	41 27       	eor	r20, r17
     50c:	64 e1       	ldi	r22, 0x14	; 20
     50e:	8c 2f       	mov	r24, r28
     510:	0e 94 7c 01 	call	0x2f8	; 0x2f8 <_Z17MCP23017_WriteReghhh>
	MCP23017_WriteReg(addr, OLATB, valB);
     514:	4d 2f       	mov	r20, r29
     516:	65 e1       	ldi	r22, 0x15	; 21
     518:	8c 2f       	mov	r24, r28
     51a:	0e 94 7c 01 	call	0x2f8	; 0x2f8 <_Z17MCP23017_WriteReghhh>
}
     51e:	df 91       	pop	r29
     520:	cf 91       	pop	r28
     522:	1f 91       	pop	r17
     524:	08 95       	ret

00000526 <_Z20MIDI_ReceiveIncomingv>:
volatile char MIDI_TxBuffer[MIDI_BUF_SIZE] = {0};
volatile uint8_t MIDI_ReceivedProgram = 0;
volatile bool MIDI_ProgramChangeFlag = false;

void MIDI_ReceiveIncoming()
{
     526:	cf 93       	push	r28
     528:	df 93       	push	r29
	static uint8_t RX_ByteCnt = 0;
	
	MIDI_RxBuffer[RX_ByteCnt] = UART1_GetChar();
     52a:	c0 91 d7 01 	lds	r28, 0x01D7	; 0x8001d7 <_ZZ20MIDI_ReceiveIncomingvE10RX_ByteCnt>
     52e:	d0 e0       	ldi	r29, 0x00	; 0
     530:	0e 94 72 0f 	call	0x1ee4	; 0x1ee4 <_Z13UART1_GetCharv>
     534:	c3 52       	subi	r28, 0x23	; 35
     536:	de 4f       	sbci	r29, 0xFE	; 254
     538:	88 83       	st	Y, r24
	
	if (RX_ByteCnt == 0)
     53a:	80 91 d7 01 	lds	r24, 0x01D7	; 0x8001d7 <_ZZ20MIDI_ReceiveIncomingvE10RX_ByteCnt>
     53e:	81 11       	cpse	r24, r1
     540:	18 c0       	rjmp	.+48     	; 0x572 <_Z20MIDI_ReceiveIncomingv+0x4c>
	{
		/* Check if command is a Program Change */
		if ( (MIDI_RxBuffer[RX_ByteCnt] & 0xF0) == 0xC0 )
     542:	80 91 dd 01 	lds	r24, 0x01DD	; 0x8001dd <MIDI_RxBuffer>
     546:	80 7f       	andi	r24, 0xF0	; 240
     548:	80 3c       	cpi	r24, 0xC0	; 192
     54a:	29 f5       	brne	.+74     	; 0x596 <_Z20MIDI_ReceiveIncomingv+0x70>
		{
			/* Check if command is relevant to this device */
			if ( (System_MidiChannel == MIDI_CH_OMNI) || ( (MIDI_RxBuffer[RX_ByteCnt] & 0x0F) != (System_MidiChannel-1) ) )
     54c:	80 91 50 02 	lds	r24, 0x0250	; 0x800250 <System_MidiChannel>
     550:	88 23       	and	r24, r24
     552:	59 f0       	breq	.+22     	; 0x56a <_Z20MIDI_ReceiveIncomingv+0x44>
     554:	20 91 dd 01 	lds	r18, 0x01DD	; 0x8001dd <MIDI_RxBuffer>
     558:	80 91 50 02 	lds	r24, 0x0250	; 0x800250 <System_MidiChannel>
     55c:	2f 70       	andi	r18, 0x0F	; 15
     55e:	30 e0       	ldi	r19, 0x00	; 0
     560:	90 e0       	ldi	r25, 0x00	; 0
     562:	01 97       	sbiw	r24, 0x01	; 1
     564:	28 17       	cp	r18, r24
     566:	39 07       	cpc	r19, r25
     568:	b1 f0       	breq	.+44     	; 0x596 <_Z20MIDI_ReceiveIncomingv+0x70>
			{
				RX_ByteCnt++;
     56a:	81 e0       	ldi	r24, 0x01	; 1
     56c:	80 93 d7 01 	sts	0x01D7, r24	; 0x8001d7 <_ZZ20MIDI_ReceiveIncomingvE10RX_ByteCnt>
     570:	12 c0       	rjmp	.+36     	; 0x596 <_Z20MIDI_ReceiveIncomingv+0x70>
		}
	}
	else if (RX_ByteCnt > 0)
	{
		/* Check if data byte contains a valid MIDI program (is between 0 and 127) */
		if (MIDI_RxBuffer[RX_ByteCnt] <= MIDI_PC_MAX)
     572:	90 e0       	ldi	r25, 0x00	; 0
     574:	fc 01       	movw	r30, r24
     576:	e3 52       	subi	r30, 0x23	; 35
     578:	fe 4f       	sbci	r31, 0xFE	; 254
     57a:	20 81       	ld	r18, Z
     57c:	22 23       	and	r18, r18
     57e:	4c f0       	brlt	.+18     	; 0x592 <_Z20MIDI_ReceiveIncomingv+0x6c>
		{
			MIDI_ReceivedProgram = MIDI_RxBuffer[RX_ByteCnt];
     580:	fc 01       	movw	r30, r24
     582:	e3 52       	subi	r30, 0x23	; 35
     584:	fe 4f       	sbci	r31, 0xFE	; 254
     586:	80 81       	ld	r24, Z
     588:	80 93 d9 01 	sts	0x01D9, r24	; 0x8001d9 <MIDI_ReceivedProgram>
			MIDI_ProgramChangeFlag = true;
     58c:	81 e0       	ldi	r24, 0x01	; 1
     58e:	80 93 d8 01 	sts	0x01D8, r24	; 0x8001d8 <MIDI_ProgramChangeFlag>
		}
		
		RX_ByteCnt = 0;
     592:	10 92 d7 01 	sts	0x01D7, r1	; 0x8001d7 <_ZZ20MIDI_ReceiveIncomingvE10RX_ByteCnt>
	}
}
     596:	df 91       	pop	r29
     598:	cf 91       	pop	r28
     59a:	08 95       	ret

0000059c <_Z26MIDI_TransmitProgramChangeh>:

void MIDI_TransmitProgramChange(uint8_t prg)
{
	MIDI_TxBuffer[0] = 0xC0;
     59c:	90 ec       	ldi	r25, 0xC0	; 192
     59e:	90 93 da 01 	sts	0x01DA, r25	; 0x8001da <MIDI_TxBuffer>
	
	if (System_MidiChannel != MIDI_CH_OMNI)
     5a2:	90 91 50 02 	lds	r25, 0x0250	; 0x800250 <System_MidiChannel>
     5a6:	99 23       	and	r25, r25
     5a8:	41 f0       	breq	.+16     	; 0x5ba <_Z26MIDI_TransmitProgramChangeh+0x1e>
	{
		MIDI_TxBuffer[0] |= (System_MidiChannel - 1);
     5aa:	90 91 50 02 	lds	r25, 0x0250	; 0x800250 <System_MidiChannel>
     5ae:	ea ed       	ldi	r30, 0xDA	; 218
     5b0:	f1 e0       	ldi	r31, 0x01	; 1
     5b2:	20 81       	ld	r18, Z
     5b4:	91 50       	subi	r25, 0x01	; 1
     5b6:	92 2b       	or	r25, r18
     5b8:	90 83       	st	Z, r25
	}
	
	MIDI_TxBuffer[1] = (char)prg;
     5ba:	ea ed       	ldi	r30, 0xDA	; 218
     5bc:	f1 e0       	ldi	r31, 0x01	; 1
     5be:	81 83       	std	Z+1, r24	; 0x01
	MIDI_TxBuffer[2] = 0;
     5c0:	12 82       	std	Z+2, r1	; 0x02
	
	UART1_PutString((char*)MIDI_TxBuffer);
     5c2:	cf 01       	movw	r24, r30
     5c4:	0e 94 a2 0f 	call	0x1f44	; 0x1f44 <_Z15UART1_PutStringPKc>
     5c8:	08 95       	ret

000005ca <_Z20PedalCom_RxAvailablev>:
	UCSR0B |= (1 << TXCIE0);
}

uint8_t PedalCom_RxAvailable()
{
	return (RxHead != RxTail);
     5ca:	20 91 e5 01 	lds	r18, 0x01E5	; 0x8001e5 <RxHead>
     5ce:	90 91 e4 01 	lds	r25, 0x01E4	; 0x8001e4 <RxTail>
     5d2:	81 e0       	ldi	r24, 0x01	; 1
     5d4:	29 13       	cpse	r18, r25
     5d6:	01 c0       	rjmp	.+2      	; 0x5da <_Z20PedalCom_RxAvailablev+0x10>
     5d8:	80 e0       	ldi	r24, 0x00	; 0
}
     5da:	08 95       	ret

000005dc <_Z20PedalCom_TxAvailablev>:

uint8_t PedalCom_TxAvailable()
{
	return (TxHead != TxTail);
     5dc:	20 91 e3 01 	lds	r18, 0x01E3	; 0x8001e3 <TxHead>
     5e0:	90 91 e2 01 	lds	r25, 0x01E2	; 0x8001e2 <TxTail>
     5e4:	81 e0       	ldi	r24, 0x01	; 1
     5e6:	29 13       	cpse	r18, r25
     5e8:	01 c0       	rjmp	.+2      	; 0x5ec <_Z20PedalCom_TxAvailablev+0x10>
     5ea:	80 e0       	ldi	r24, 0x00	; 0
}
     5ec:	08 95       	ret

000005ee <_Z21PedalCom_FlushTxQueuev>:

void PedalCom_FlushTxQueue()
{
	TxTail = TxHead;
     5ee:	80 91 e3 01 	lds	r24, 0x01E3	; 0x8001e3 <TxHead>
     5f2:	80 93 e2 01 	sts	0x01E2, r24	; 0x8001e2 <TxTail>
	TX_CommandQueue[TxHead].acked = true;
     5f6:	e0 91 e3 01 	lds	r30, 0x01E3	; 0x8001e3 <TxHead>
     5fa:	f0 e0       	ldi	r31, 0x00	; 0
     5fc:	ee 0f       	add	r30, r30
     5fe:	ff 1f       	adc	r31, r31
     600:	ee 0f       	add	r30, r30
     602:	ff 1f       	adc	r31, r31
     604:	ee 0f       	add	r30, r30
     606:	ff 1f       	adc	r31, r31
     608:	ee 5f       	subi	r30, 0xFE	; 254
     60a:	fe 4f       	sbci	r31, 0xFE	; 254
     60c:	81 e0       	ldi	r24, 0x01	; 1
     60e:	87 83       	std	Z+7, r24	; 0x07
     610:	08 95       	ret

00000612 <_Z23PedalCom_HandleReceivedv>:


void PedalCom_HandleReceived()
{
	unsigned char response;
	response = System_HandlePedalCommand(RX_CommandQueue[RxTail].command, RX_CommandQueue[RxTail].length, (uint8_t *)RX_CommandQueue[RxTail].data);
     612:	40 91 e4 01 	lds	r20, 0x01E4	; 0x8001e4 <RxTail>
     616:	e0 91 e4 01 	lds	r30, 0x01E4	; 0x8001e4 <RxTail>
     61a:	f0 e0       	ldi	r31, 0x00	; 0
     61c:	ee 0f       	add	r30, r30
     61e:	ff 1f       	adc	r31, r31
     620:	ee 0f       	add	r30, r30
     622:	ff 1f       	adc	r31, r31
     624:	ee 0f       	add	r30, r30
     626:	ff 1f       	adc	r31, r31
     628:	ea 51       	subi	r30, 0x1A	; 26
     62a:	fe 4f       	sbci	r31, 0xFE	; 254
     62c:	61 81       	ldd	r22, Z+1	; 0x01
     62e:	e0 91 e4 01 	lds	r30, 0x01E4	; 0x8001e4 <RxTail>
     632:	f0 e0       	ldi	r31, 0x00	; 0
     634:	ee 0f       	add	r30, r30
     636:	ff 1f       	adc	r31, r31
     638:	ee 0f       	add	r30, r30
     63a:	ff 1f       	adc	r31, r31
     63c:	ee 0f       	add	r30, r30
     63e:	ff 1f       	adc	r31, r31
     640:	ea 51       	subi	r30, 0x1A	; 26
     642:	fe 4f       	sbci	r31, 0xFE	; 254
     644:	80 81       	ld	r24, Z
     646:	50 e0       	ldi	r21, 0x00	; 0
     648:	44 0f       	add	r20, r20
     64a:	55 1f       	adc	r21, r21
     64c:	44 0f       	add	r20, r20
     64e:	55 1f       	adc	r21, r21
     650:	44 0f       	add	r20, r20
     652:	55 1f       	adc	r21, r21
     654:	48 51       	subi	r20, 0x18	; 24
     656:	5e 4f       	sbci	r21, 0xFE	; 254
     658:	0e 94 db 06 	call	0xdb6	; 0xdb6 <_Z25System_HandlePedalCommand3CMDhPh>
		
	/* Calculate and store new queue index */
	RxTail = (RxTail + 1) & RX_QUEUE_MASK;
     65c:	90 91 e4 01 	lds	r25, 0x01E4	; 0x8001e4 <RxTail>
     660:	9f 5f       	subi	r25, 0xFF	; 255
     662:	93 70       	andi	r25, 0x03	; 3
     664:	90 93 e4 01 	sts	0x01E4, r25	; 0x8001e4 <RxTail>

	/* Prepare Transmit response */
	UART0_QueueChar(response);
     668:	0e 94 97 0e 	call	0x1d2e	; 0x1d2e <_Z15UART0_QueueCharh>
	
	/* Start/reset Delay TX timer */
	PedalCom_DelayTXOvfCnt = 1;
     66c:	81 e0       	ldi	r24, 0x01	; 1
     66e:	80 93 1d 02 	sts	0x021D, r24	; 0x80021d <PedalCom_DelayTXOvfCnt>
     672:	08 95       	ret

00000674 <_Z21PedalCom_QueueCommand3CMDhPh>:


bool PedalCom_QueueCommand(CMD cmd, uint8_t datLen, uint8_t *dat)
{
	/* Calculate new queue head index */
	uint8_t tmpHead = (TxHead + 1) & TX_QUEUE_MASK;
     674:	20 91 e3 01 	lds	r18, 0x01E3	; 0x8001e3 <TxHead>
     678:	2f 5f       	subi	r18, 0xFF	; 255
     67a:	27 70       	andi	r18, 0x07	; 7
	
	/* Check for free space in queue */
	if ( tmpHead == TxTail )
     67c:	90 91 e2 01 	lds	r25, 0x01E2	; 0x8001e2 <TxTail>
     680:	29 17       	cp	r18, r25
     682:	09 f4       	brne	.+2      	; 0x686 <_Z21PedalCom_QueueCommand3CMDhPh+0x12>
     684:	4e c0       	rjmp	.+156    	; 0x722 <_Z21PedalCom_QueueCommand3CMDhPh+0xae>
		return false;
	
	/* Copy command to queue */
	TX_CommandQueue[TxHead].command = cmd;
     686:	e0 91 e3 01 	lds	r30, 0x01E3	; 0x8001e3 <TxHead>
     68a:	f0 e0       	ldi	r31, 0x00	; 0
     68c:	ee 0f       	add	r30, r30
     68e:	ff 1f       	adc	r31, r31
     690:	ee 0f       	add	r30, r30
     692:	ff 1f       	adc	r31, r31
     694:	ee 0f       	add	r30, r30
     696:	ff 1f       	adc	r31, r31
     698:	ee 5f       	subi	r30, 0xFE	; 254
     69a:	fe 4f       	sbci	r31, 0xFE	; 254
     69c:	80 83       	st	Z, r24
	TX_CommandQueue[TxHead].length = datLen + CMD_HEADER_SIZE;
     69e:	e0 91 e3 01 	lds	r30, 0x01E3	; 0x8001e3 <TxHead>
     6a2:	f0 e0       	ldi	r31, 0x00	; 0
     6a4:	ee 0f       	add	r30, r30
     6a6:	ff 1f       	adc	r31, r31
     6a8:	ee 0f       	add	r30, r30
     6aa:	ff 1f       	adc	r31, r31
     6ac:	ee 0f       	add	r30, r30
     6ae:	ff 1f       	adc	r31, r31
     6b0:	ee 5f       	subi	r30, 0xFE	; 254
     6b2:	fe 4f       	sbci	r31, 0xFE	; 254
     6b4:	84 e0       	ldi	r24, 0x04	; 4
     6b6:	86 0f       	add	r24, r22
     6b8:	81 83       	std	Z+1, r24	; 0x01
	TX_CommandQueue[TxHead].sent = false;
     6ba:	e0 91 e3 01 	lds	r30, 0x01E3	; 0x8001e3 <TxHead>
     6be:	f0 e0       	ldi	r31, 0x00	; 0
     6c0:	ee 0f       	add	r30, r30
     6c2:	ff 1f       	adc	r31, r31
     6c4:	ee 0f       	add	r30, r30
     6c6:	ff 1f       	adc	r31, r31
     6c8:	ee 0f       	add	r30, r30
     6ca:	ff 1f       	adc	r31, r31
     6cc:	ee 5f       	subi	r30, 0xFE	; 254
     6ce:	fe 4f       	sbci	r31, 0xFE	; 254
     6d0:	16 82       	std	Z+6, r1	; 0x06
	TX_CommandQueue[TxHead].acked = false;
     6d2:	e0 91 e3 01 	lds	r30, 0x01E3	; 0x8001e3 <TxHead>
     6d6:	f0 e0       	ldi	r31, 0x00	; 0
     6d8:	ee 0f       	add	r30, r30
     6da:	ff 1f       	adc	r31, r31
     6dc:	ee 0f       	add	r30, r30
     6de:	ff 1f       	adc	r31, r31
     6e0:	ee 0f       	add	r30, r30
     6e2:	ff 1f       	adc	r31, r31
     6e4:	ee 5f       	subi	r30, 0xFE	; 254
     6e6:	fe 4f       	sbci	r31, 0xFE	; 254
     6e8:	17 82       	std	Z+7, r1	; 0x07
	
	for (uint8_t i = 0; i < datLen; i++)
     6ea:	66 23       	and	r22, r22
     6ec:	b1 f0       	breq	.+44     	; 0x71a <_Z21PedalCom_QueueCommand3CMDhPh+0xa6>
     6ee:	a4 2f       	mov	r26, r20
     6f0:	b5 2f       	mov	r27, r21
     6f2:	80 e0       	ldi	r24, 0x00	; 0
     6f4:	90 e0       	ldi	r25, 0x00	; 0
	{
		TX_CommandQueue[TxHead].data[i] = dat[i];
     6f6:	e0 91 e3 01 	lds	r30, 0x01E3	; 0x8001e3 <TxHead>
     6fa:	f0 e0       	ldi	r31, 0x00	; 0
     6fc:	3d 91       	ld	r19, X+
     6fe:	ee 0f       	add	r30, r30
     700:	ff 1f       	adc	r31, r31
     702:	ee 0f       	add	r30, r30
     704:	ff 1f       	adc	r31, r31
     706:	ee 0f       	add	r30, r30
     708:	ff 1f       	adc	r31, r31
     70a:	ee 5f       	subi	r30, 0xFE	; 254
     70c:	fe 4f       	sbci	r31, 0xFE	; 254
     70e:	e8 0f       	add	r30, r24
     710:	f9 1f       	adc	r31, r25
     712:	32 83       	std	Z+2, r19	; 0x02
     714:	01 96       	adiw	r24, 0x01	; 1
	TX_CommandQueue[TxHead].command = cmd;
	TX_CommandQueue[TxHead].length = datLen + CMD_HEADER_SIZE;
	TX_CommandQueue[TxHead].sent = false;
	TX_CommandQueue[TxHead].acked = false;
	
	for (uint8_t i = 0; i < datLen; i++)
     716:	86 17       	cp	r24, r22
     718:	70 f3       	brcs	.-36     	; 0x6f6 <_Z21PedalCom_QueueCommand3CMDhPh+0x82>
	{
		TX_CommandQueue[TxHead].data[i] = dat[i];
	}
	
	/* Update queue head */
	TxHead = tmpHead;
     71a:	20 93 e3 01 	sts	0x01E3, r18	; 0x8001e3 <TxHead>
	
	return true;
     71e:	81 e0       	ldi	r24, 0x01	; 1
     720:	08 95       	ret
	/* Calculate new queue head index */
	uint8_t tmpHead = (TxHead + 1) & TX_QUEUE_MASK;
	
	/* Check for free space in queue */
	if ( tmpHead == TxTail )
		return false;
     722:	80 e0       	ldi	r24, 0x00	; 0
	
	/* Update queue head */
	TxHead = tmpHead;
	
	return true;
}
     724:	08 95       	ret

00000726 <_Z19PedalCom_PutCommandv>:

void PedalCom_PutCommand()
{
     726:	cf 93       	push	r28
	/* Only transmit new command if previous one got an ACK */
	if (TX_CommandQueue[TxTail].acked)
     728:	e0 91 e2 01 	lds	r30, 0x01E2	; 0x8001e2 <TxTail>
     72c:	f0 e0       	ldi	r31, 0x00	; 0
     72e:	ee 0f       	add	r30, r30
     730:	ff 1f       	adc	r31, r31
     732:	ee 0f       	add	r30, r30
     734:	ff 1f       	adc	r31, r31
     736:	ee 0f       	add	r30, r30
     738:	ff 1f       	adc	r31, r31
     73a:	ee 5f       	subi	r30, 0xFE	; 254
     73c:	fe 4f       	sbci	r31, 0xFE	; 254
     73e:	87 81       	ldd	r24, Z+7	; 0x07
     740:	88 23       	and	r24, r24
     742:	39 f0       	breq	.+14     	; 0x752 <_Z19PedalCom_PutCommandv+0x2c>
	{
		/* Calculate and store new queue tail index */
		TxTail = (TxTail + 1) & TX_QUEUE_MASK;
     744:	80 91 e2 01 	lds	r24, 0x01E2	; 0x8001e2 <TxTail>
     748:	8f 5f       	subi	r24, 0xFF	; 255
     74a:	87 70       	andi	r24, 0x07	; 7
     74c:	80 93 e2 01 	sts	0x01E2, r24	; 0x8001e2 <TxTail>
     750:	84 c0       	rjmp	.+264    	; 0x85a <_Z19PedalCom_PutCommandv+0x134>
	}
	else if (!(TX_CommandQueue[TxTail].sent))
     752:	e0 91 e2 01 	lds	r30, 0x01E2	; 0x8001e2 <TxTail>
     756:	f0 e0       	ldi	r31, 0x00	; 0
     758:	ee 0f       	add	r30, r30
     75a:	ff 1f       	adc	r31, r31
     75c:	ee 0f       	add	r30, r30
     75e:	ff 1f       	adc	r31, r31
     760:	ee 0f       	add	r30, r30
     762:	ff 1f       	adc	r31, r31
     764:	ee 5f       	subi	r30, 0xFE	; 254
     766:	fe 4f       	sbci	r31, 0xFE	; 254
     768:	86 81       	ldd	r24, Z+6	; 0x06
     76a:	81 11       	cpse	r24, r1
     76c:	76 c0       	rjmp	.+236    	; 0x85a <_Z19PedalCom_PutCommandv+0x134>
	{
		/* Send command frame to UART TX buffer */
		UART0_QueueChar(SOF_BYTE);
     76e:	8f e5       	ldi	r24, 0x5F	; 95
     770:	0e 94 97 0e 	call	0x1d2e	; 0x1d2e <_Z15UART0_QueueCharh>
		UART0_QueueChar((unsigned char)TX_CommandQueue[TxTail].length);
     774:	e0 91 e2 01 	lds	r30, 0x01E2	; 0x8001e2 <TxTail>
     778:	f0 e0       	ldi	r31, 0x00	; 0
     77a:	ee 0f       	add	r30, r30
     77c:	ff 1f       	adc	r31, r31
     77e:	ee 0f       	add	r30, r30
     780:	ff 1f       	adc	r31, r31
     782:	ee 0f       	add	r30, r30
     784:	ff 1f       	adc	r31, r31
     786:	ee 5f       	subi	r30, 0xFE	; 254
     788:	fe 4f       	sbci	r31, 0xFE	; 254
     78a:	81 81       	ldd	r24, Z+1	; 0x01
     78c:	0e 94 97 0e 	call	0x1d2e	; 0x1d2e <_Z15UART0_QueueCharh>
		UART0_QueueChar((unsigned char)TX_CommandQueue[TxTail].command);
     790:	e0 91 e2 01 	lds	r30, 0x01E2	; 0x8001e2 <TxTail>
     794:	f0 e0       	ldi	r31, 0x00	; 0
     796:	ee 0f       	add	r30, r30
     798:	ff 1f       	adc	r31, r31
     79a:	ee 0f       	add	r30, r30
     79c:	ff 1f       	adc	r31, r31
     79e:	ee 0f       	add	r30, r30
     7a0:	ff 1f       	adc	r31, r31
     7a2:	ee 5f       	subi	r30, 0xFE	; 254
     7a4:	fe 4f       	sbci	r31, 0xFE	; 254
     7a6:	80 81       	ld	r24, Z
     7a8:	0e 94 97 0e 	call	0x1d2e	; 0x1d2e <_Z15UART0_QueueCharh>
		
		for (uint8_t i = 0; i < (TX_CommandQueue[TxTail].length - CMD_HEADER_SIZE); i++)
     7ac:	e0 91 e2 01 	lds	r30, 0x01E2	; 0x8001e2 <TxTail>
     7b0:	f0 e0       	ldi	r31, 0x00	; 0
     7b2:	ee 0f       	add	r30, r30
     7b4:	ff 1f       	adc	r31, r31
     7b6:	ee 0f       	add	r30, r30
     7b8:	ff 1f       	adc	r31, r31
     7ba:	ee 0f       	add	r30, r30
     7bc:	ff 1f       	adc	r31, r31
     7be:	ee 5f       	subi	r30, 0xFE	; 254
     7c0:	fe 4f       	sbci	r31, 0xFE	; 254
     7c2:	81 81       	ldd	r24, Z+1	; 0x01
     7c4:	90 e0       	ldi	r25, 0x00	; 0
     7c6:	04 97       	sbiw	r24, 0x04	; 4
     7c8:	18 16       	cp	r1, r24
     7ca:	19 06       	cpc	r1, r25
     7cc:	4c f5       	brge	.+82     	; 0x820 <_Z19PedalCom_PutCommandv+0xfa>
     7ce:	20 e0       	ldi	r18, 0x00	; 0
     7d0:	30 e0       	ldi	r19, 0x00	; 0
     7d2:	c0 e0       	ldi	r28, 0x00	; 0
		{
			UART0_QueueChar((unsigned char)TX_CommandQueue[TxTail].data[i]);
     7d4:	80 91 e2 01 	lds	r24, 0x01E2	; 0x8001e2 <TxTail>
     7d8:	e8 2f       	mov	r30, r24
     7da:	f0 e0       	ldi	r31, 0x00	; 0
     7dc:	ee 0f       	add	r30, r30
     7de:	ff 1f       	adc	r31, r31
     7e0:	ee 0f       	add	r30, r30
     7e2:	ff 1f       	adc	r31, r31
     7e4:	ee 0f       	add	r30, r30
     7e6:	ff 1f       	adc	r31, r31
     7e8:	ee 5f       	subi	r30, 0xFE	; 254
     7ea:	fe 4f       	sbci	r31, 0xFE	; 254
     7ec:	e2 0f       	add	r30, r18
     7ee:	f3 1f       	adc	r31, r19
     7f0:	82 81       	ldd	r24, Z+2	; 0x02
     7f2:	0e 94 97 0e 	call	0x1d2e	; 0x1d2e <_Z15UART0_QueueCharh>
		/* Send command frame to UART TX buffer */
		UART0_QueueChar(SOF_BYTE);
		UART0_QueueChar((unsigned char)TX_CommandQueue[TxTail].length);
		UART0_QueueChar((unsigned char)TX_CommandQueue[TxTail].command);
		
		for (uint8_t i = 0; i < (TX_CommandQueue[TxTail].length - CMD_HEADER_SIZE); i++)
     7f6:	cf 5f       	subi	r28, 0xFF	; 255
     7f8:	2c 2f       	mov	r18, r28
     7fa:	30 e0       	ldi	r19, 0x00	; 0
     7fc:	a0 91 e2 01 	lds	r26, 0x01E2	; 0x8001e2 <TxTail>
     800:	b0 e0       	ldi	r27, 0x00	; 0
     802:	aa 0f       	add	r26, r26
     804:	bb 1f       	adc	r27, r27
     806:	aa 0f       	add	r26, r26
     808:	bb 1f       	adc	r27, r27
     80a:	aa 0f       	add	r26, r26
     80c:	bb 1f       	adc	r27, r27
     80e:	ae 5f       	subi	r26, 0xFE	; 254
     810:	be 4f       	sbci	r27, 0xFE	; 254
     812:	11 96       	adiw	r26, 0x01	; 1
     814:	8c 91       	ld	r24, X
     816:	90 e0       	ldi	r25, 0x00	; 0
     818:	04 97       	sbiw	r24, 0x04	; 4
     81a:	28 17       	cp	r18, r24
     81c:	39 07       	cpc	r19, r25
     81e:	d4 f2       	brlt	.-76     	; 0x7d4 <_Z19PedalCom_PutCommandv+0xae>
		{
			UART0_QueueChar((unsigned char)TX_CommandQueue[TxTail].data[i]);
		}
		
		UART0_QueueChar(EOF_BYTE);
     820:	8f ee       	ldi	r24, 0xEF	; 239
     822:	0e 94 97 0e 	call	0x1d2e	; 0x1d2e <_Z15UART0_QueueCharh>
		
		/* If no data is waiting to be transmitted */
		if (PedalCom_DelayTXOvfCnt == 0)
     826:	80 91 1d 02 	lds	r24, 0x021D	; 0x80021d <PedalCom_DelayTXOvfCnt>
     82a:	81 11       	cpse	r24, r1
     82c:	03 c0       	rjmp	.+6      	; 0x834 <_Z19PedalCom_PutCommandv+0x10e>
		{
			/* Signal that data is waiting to be transmitted without delay */
			PedalCom_DelayTxFlag = true;
     82e:	81 e0       	ldi	r24, 0x01	; 1
     830:	80 93 1e 02 	sts	0x021E, r24	; 0x80021e <PedalCom_DelayTxFlag>
		}
		
		TX_CommandQueue[TxTail].sent = true;
     834:	e0 91 e2 01 	lds	r30, 0x01E2	; 0x8001e2 <TxTail>
     838:	f0 e0       	ldi	r31, 0x00	; 0
     83a:	ee 0f       	add	r30, r30
     83c:	ff 1f       	adc	r31, r31
     83e:	ee 0f       	add	r30, r30
     840:	ff 1f       	adc	r31, r31
     842:	ee 0f       	add	r30, r30
     844:	ff 1f       	adc	r31, r31
     846:	ee 5f       	subi	r30, 0xFE	; 254
     848:	fe 4f       	sbci	r31, 0xFE	; 254
     84a:	81 e0       	ldi	r24, 0x01	; 1
     84c:	86 83       	std	Z+6, r24	; 0x06
		
		/* Start response timer */
		PedalCom_ResponseTimeoutOvfCnt = 1;
     84e:	81 e0       	ldi	r24, 0x01	; 1
     850:	90 e0       	ldi	r25, 0x00	; 0
     852:	90 93 1c 02 	sts	0x021C, r25	; 0x80021c <PedalCom_ResponseTimeoutOvfCnt+0x1>
     856:	80 93 1b 02 	sts	0x021B, r24	; 0x80021b <PedalCom_ResponseTimeoutOvfCnt>
	}
}
     85a:	cf 91       	pop	r28
     85c:	08 95       	ret

0000085e <_Z26PedalCom_PrepareRetransmitv>:

void PedalCom_PrepareRetransmit()
{
	if (RetransmitCnt < MAX_RETRANSMITS)
     85e:	80 91 e1 01 	lds	r24, 0x01E1	; 0x8001e1 <RetransmitCnt>
     862:	85 30       	cpi	r24, 0x05	; 5
     864:	88 f4       	brcc	.+34     	; 0x888 <_Z26PedalCom_PrepareRetransmitv+0x2a>
	{
		RetransmitCnt++;
     866:	80 91 e1 01 	lds	r24, 0x01E1	; 0x8001e1 <RetransmitCnt>
     86a:	8f 5f       	subi	r24, 0xFF	; 255
     86c:	80 93 e1 01 	sts	0x01E1, r24	; 0x8001e1 <RetransmitCnt>
		
		/* Prepare retransmit latest command */
		TX_CommandQueue[TxTail].sent = false;
     870:	e0 91 e2 01 	lds	r30, 0x01E2	; 0x8001e2 <TxTail>
     874:	f0 e0       	ldi	r31, 0x00	; 0
     876:	ee 0f       	add	r30, r30
     878:	ff 1f       	adc	r31, r31
     87a:	ee 0f       	add	r30, r30
     87c:	ff 1f       	adc	r31, r31
     87e:	ee 0f       	add	r30, r30
     880:	ff 1f       	adc	r31, r31
     882:	ee 5f       	subi	r30, 0xFE	; 254
     884:	fe 4f       	sbci	r31, 0xFE	; 254
     886:	16 82       	std	Z+6, r1	; 0x06
     888:	08 95       	ret

0000088a <_Z16PedalCom_Receivev>:
	TX_CommandQueue[TxHead].acked = true;
}


void PedalCom_Receive()
{
     88a:	cf 93       	push	r28
     88c:	df 93       	push	r29
	static uint8_t RX_ByteCnt = 0;
	
	/* Start/reset Delay TX timer. Both in case a NACK needs to be sent, and also to
	   prevent response to previous command being sent while still receiving new data. */
	if (PedalCom_DelayTXOvfCnt != 0)
     88e:	80 91 1d 02 	lds	r24, 0x021D	; 0x80021d <PedalCom_DelayTXOvfCnt>
     892:	88 23       	and	r24, r24
     894:	19 f0       	breq	.+6      	; 0x89c <_Z16PedalCom_Receivev+0x12>
	{
		PedalCom_DelayTXOvfCnt = 1;
     896:	81 e0       	ldi	r24, 0x01	; 1
     898:	80 93 1d 02 	sts	0x021D, r24	; 0x80021d <PedalCom_DelayTXOvfCnt>
	}
	
	/* Fetch new byte from UART buffer */
	RX_Buffer[RX_ByteCnt] = UART0_GetChar();
     89c:	c0 91 e0 01 	lds	r28, 0x01E0	; 0x8001e0 <_ZZ16PedalCom_ReceivevE10RX_ByteCnt>
     8a0:	d0 e0       	ldi	r29, 0x00	; 0
     8a2:	0e 94 71 0e 	call	0x1ce2	; 0x1ce2 <_Z13UART0_GetCharv>
     8a6:	ca 5f       	subi	r28, 0xFA	; 250
     8a8:	dd 4f       	sbci	r29, 0xFD	; 253
     8aa:	88 83       	st	Y, r24
	RX_ByteCnt++;
     8ac:	80 91 e0 01 	lds	r24, 0x01E0	; 0x8001e0 <_ZZ16PedalCom_ReceivevE10RX_ByteCnt>
     8b0:	8f 5f       	subi	r24, 0xFF	; 255
     8b2:	80 93 e0 01 	sts	0x01E0, r24	; 0x8001e0 <_ZZ16PedalCom_ReceivevE10RX_ByteCnt>
	
	/* Handle new byte */
	if ((RX_ByteCnt - 1) == SOF_BYTE_IDX)
     8b6:	81 30       	cpi	r24, 0x01	; 1
     8b8:	d1 f5       	brne	.+116    	; 0x92e <__stack+0x2f>
	{
		PedalCom_ResponseTimeoutOvfCnt = 0;		// Stop counter
     8ba:	10 92 1c 02 	sts	0x021C, r1	; 0x80021c <PedalCom_ResponseTimeoutOvfCnt+0x1>
     8be:	10 92 1b 02 	sts	0x021B, r1	; 0x80021b <PedalCom_ResponseTimeoutOvfCnt>
		
		if (RX_Buffer[SOF_BYTE_IDX] == SOF_BYTE)
     8c2:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <RX_Buffer>
     8c6:	8f 35       	cpi	r24, 0x5F	; 95
     8c8:	39 f4       	brne	.+14     	; 0x8d8 <_Z16PedalCom_Receivev+0x4e>
		{
			PedalCom_FullFrameTimeoutOvfCnt = 1;
     8ca:	81 e0       	ldi	r24, 0x01	; 1
     8cc:	90 e0       	ldi	r25, 0x00	; 0
     8ce:	90 93 19 02 	sts	0x0219, r25	; 0x800219 <PedalCom_FullFrameTimeoutOvfCnt+0x1>
     8d2:	80 93 18 02 	sts	0x0218, r24	; 0x800218 <PedalCom_FullFrameTimeoutOvfCnt>
     8d6:	be c0       	rjmp	.+380    	; 0xa54 <__stack+0x155>
		}
		else
		{
			RX_ByteCnt = 0;
     8d8:	10 92 e0 01 	sts	0x01E0, r1	; 0x8001e0 <_ZZ16PedalCom_ReceivevE10RX_ByteCnt>
			PedalCom_DelayTXOvfCnt = 1;	// Start/reset Delay TX counter in case a new message is in queue to be sent
     8dc:	81 e0       	ldi	r24, 0x01	; 1
     8de:	80 93 1d 02 	sts	0x021D, r24	; 0x80021d <PedalCom_DelayTXOvfCnt>
				
			if (RX_Buffer[SOF_BYTE_IDX] == ACK_BYTE)
     8e2:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <RX_Buffer>
     8e6:	8c 3a       	cpi	r24, 0xAC	; 172
     8e8:	d1 f4       	brne	.+52     	; 0x91e <__stack+0x1f>
			{
				RetransmitCnt = 0;	// Reset retransmit counter
     8ea:	10 92 e1 01 	sts	0x01E1, r1	; 0x8001e1 <RetransmitCnt>
				TX_CommandQueue[TxTail].acked = true;
     8ee:	e0 91 e2 01 	lds	r30, 0x01E2	; 0x8001e2 <TxTail>
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	ee 0f       	add	r30, r30
     8f6:	ff 1f       	adc	r31, r31
     8f8:	ee 0f       	add	r30, r30
     8fa:	ff 1f       	adc	r31, r31
     8fc:	ee 0f       	add	r30, r30
     8fe:	ff 1f       	adc	r31, r31
     900:	ee 5f       	subi	r30, 0xFE	; 254
     902:	fe 4f       	sbci	r31, 0xFE	; 254
     904:	81 e0       	ldi	r24, 0x01	; 1
     906:	87 83       	std	Z+7, r24	; 0x07
				
				if (!PedalCom_ConnectionOpen)
     908:	80 91 42 01 	lds	r24, 0x0142	; 0x800142 <PedalCom_ConnectionOpen>
     90c:	81 11       	cpse	r24, r1
     90e:	a2 c0       	rjmp	.+324    	; 0xa54 <__stack+0x155>
				{
					PedalCom_ConnectionOpen = true;
     910:	81 e0       	ldi	r24, 0x01	; 1
     912:	80 93 42 01 	sts	0x0142, r24	; 0x800142 <PedalCom_ConnectionOpen>
					
					/* Set system state to initialize Pedal */
					SystemState = INITIALIZE_SYSTEM;
     916:	82 e0       	ldi	r24, 0x02	; 2
     918:	80 93 59 02 	sts	0x0259, r24	; 0x800259 <SystemState>
     91c:	9b c0       	rjmp	.+310    	; 0xa54 <__stack+0x155>
				}
			}
			else if (RX_Buffer[SOF_BYTE_IDX] == NACK_BYTE)
     91e:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <RX_Buffer>
     922:	8a 32       	cpi	r24, 0x2A	; 42
     924:	09 f0       	breq	.+2      	; 0x928 <__stack+0x29>
     926:	96 c0       	rjmp	.+300    	; 0xa54 <__stack+0x155>
			{
				PedalCom_PrepareRetransmit();
     928:	0e 94 2f 04 	call	0x85e	; 0x85e <_Z26PedalCom_PrepareRetransmitv>
     92c:	93 c0       	rjmp	.+294    	; 0xa54 <__stack+0x155>
			}
		}
	}
	else if ((RX_ByteCnt - 1) == LENGTH_BYTE_IDX)
     92e:	82 30       	cpi	r24, 0x02	; 2
     930:	79 f4       	brne	.+30     	; 0x950 <__stack+0x51>
	{
		RX_CommandQueue[RxHead].length = RX_Buffer[LENGTH_BYTE_IDX];
     932:	e0 91 e5 01 	lds	r30, 0x01E5	; 0x8001e5 <RxHead>
     936:	f0 e0       	ldi	r31, 0x00	; 0
     938:	80 91 07 02 	lds	r24, 0x0207	; 0x800207 <RX_Buffer+0x1>
     93c:	ee 0f       	add	r30, r30
     93e:	ff 1f       	adc	r31, r31
     940:	ee 0f       	add	r30, r30
     942:	ff 1f       	adc	r31, r31
     944:	ee 0f       	add	r30, r30
     946:	ff 1f       	adc	r31, r31
     948:	ea 51       	subi	r30, 0x1A	; 26
     94a:	fe 4f       	sbci	r31, 0xFE	; 254
     94c:	81 83       	std	Z+1, r24	; 0x01
     94e:	82 c0       	rjmp	.+260    	; 0xa54 <__stack+0x155>
	}
	else if (RX_ByteCnt == RX_CommandQueue[RxHead].length)
     950:	e0 91 e5 01 	lds	r30, 0x01E5	; 0x8001e5 <RxHead>
     954:	f0 e0       	ldi	r31, 0x00	; 0
     956:	ee 0f       	add	r30, r30
     958:	ff 1f       	adc	r31, r31
     95a:	ee 0f       	add	r30, r30
     95c:	ff 1f       	adc	r31, r31
     95e:	ee 0f       	add	r30, r30
     960:	ff 1f       	adc	r31, r31
     962:	ea 51       	subi	r30, 0x1A	; 26
     964:	fe 4f       	sbci	r31, 0xFE	; 254
     966:	91 81       	ldd	r25, Z+1	; 0x01
     968:	89 13       	cpse	r24, r25
     96a:	74 c0       	rjmp	.+232    	; 0xa54 <__stack+0x155>
	{
		PedalCom_FullFrameTimeoutOvfCnt = 0;
     96c:	10 92 19 02 	sts	0x0219, r1	; 0x800219 <PedalCom_FullFrameTimeoutOvfCnt+0x1>
     970:	10 92 18 02 	sts	0x0218, r1	; 0x800218 <PedalCom_FullFrameTimeoutOvfCnt>
		
		/* If full frame received */
		if (RX_Buffer[RX_CommandQueue[RxHead].length - 1] == EOF_BYTE)
     974:	e0 91 e5 01 	lds	r30, 0x01E5	; 0x8001e5 <RxHead>
     978:	f0 e0       	ldi	r31, 0x00	; 0
     97a:	ee 0f       	add	r30, r30
     97c:	ff 1f       	adc	r31, r31
     97e:	ee 0f       	add	r30, r30
     980:	ff 1f       	adc	r31, r31
     982:	ee 0f       	add	r30, r30
     984:	ff 1f       	adc	r31, r31
     986:	ea 51       	subi	r30, 0x1A	; 26
     988:	fe 4f       	sbci	r31, 0xFE	; 254
     98a:	e1 81       	ldd	r30, Z+1	; 0x01
     98c:	f0 e0       	ldi	r31, 0x00	; 0
     98e:	eb 5f       	subi	r30, 0xFB	; 251
     990:	fd 4f       	sbci	r31, 0xFD	; 253
     992:	80 81       	ld	r24, Z
     994:	8f 3e       	cpi	r24, 0xEF	; 239
     996:	09 f0       	breq	.+2      	; 0x99a <__stack+0x9b>
     998:	55 c0       	rjmp	.+170    	; 0xa44 <__stack+0x145>
		{
			RX_CommandQueue[RxHead].command = (CMD)RX_Buffer[CMD_BYTE_IDX];
     99a:	e0 91 e5 01 	lds	r30, 0x01E5	; 0x8001e5 <RxHead>
     99e:	f0 e0       	ldi	r31, 0x00	; 0
     9a0:	80 91 08 02 	lds	r24, 0x0208	; 0x800208 <RX_Buffer+0x2>
     9a4:	ee 0f       	add	r30, r30
     9a6:	ff 1f       	adc	r31, r31
     9a8:	ee 0f       	add	r30, r30
     9aa:	ff 1f       	adc	r31, r31
     9ac:	ee 0f       	add	r30, r30
     9ae:	ff 1f       	adc	r31, r31
     9b0:	ea 51       	subi	r30, 0x1A	; 26
     9b2:	fe 4f       	sbci	r31, 0xFE	; 254
     9b4:	80 83       	st	Z, r24
			
			for (uint8_t i = 0; i < (RX_CommandQueue[RxHead].length - CMD_HEADER_SIZE); i++)
     9b6:	e0 91 e5 01 	lds	r30, 0x01E5	; 0x8001e5 <RxHead>
     9ba:	f0 e0       	ldi	r31, 0x00	; 0
     9bc:	ee 0f       	add	r30, r30
     9be:	ff 1f       	adc	r31, r31
     9c0:	ee 0f       	add	r30, r30
     9c2:	ff 1f       	adc	r31, r31
     9c4:	ee 0f       	add	r30, r30
     9c6:	ff 1f       	adc	r31, r31
     9c8:	ea 51       	subi	r30, 0x1A	; 26
     9ca:	fe 4f       	sbci	r31, 0xFE	; 254
     9cc:	81 81       	ldd	r24, Z+1	; 0x01
     9ce:	90 e0       	ldi	r25, 0x00	; 0
     9d0:	04 97       	sbiw	r24, 0x04	; 4
     9d2:	18 16       	cp	r1, r24
     9d4:	19 06       	cpc	r1, r25
     9d6:	5c f5       	brge	.+86     	; 0xa2e <__stack+0x12f>
     9d8:	20 e0       	ldi	r18, 0x00	; 0
     9da:	30 e0       	ldi	r19, 0x00	; 0
     9dc:	40 e0       	ldi	r20, 0x00	; 0
			{
				RX_CommandQueue[RxHead].data[i] = RX_Buffer[DATA_BYTE_IDX + i];
     9de:	80 91 e5 01 	lds	r24, 0x01E5	; 0x8001e5 <RxHead>
     9e2:	e8 2f       	mov	r30, r24
     9e4:	f0 e0       	ldi	r31, 0x00	; 0
     9e6:	d9 01       	movw	r26, r18
     9e8:	a7 5f       	subi	r26, 0xF7	; 247
     9ea:	bd 4f       	sbci	r27, 0xFD	; 253
     9ec:	8c 91       	ld	r24, X
     9ee:	ee 0f       	add	r30, r30
     9f0:	ff 1f       	adc	r31, r31
     9f2:	ee 0f       	add	r30, r30
     9f4:	ff 1f       	adc	r31, r31
     9f6:	ee 0f       	add	r30, r30
     9f8:	ff 1f       	adc	r31, r31
     9fa:	ea 51       	subi	r30, 0x1A	; 26
     9fc:	fe 4f       	sbci	r31, 0xFE	; 254
     9fe:	e2 0f       	add	r30, r18
     a00:	f3 1f       	adc	r31, r19
     a02:	82 83       	std	Z+2, r24	; 0x02
		/* If full frame received */
		if (RX_Buffer[RX_CommandQueue[RxHead].length - 1] == EOF_BYTE)
		{
			RX_CommandQueue[RxHead].command = (CMD)RX_Buffer[CMD_BYTE_IDX];
			
			for (uint8_t i = 0; i < (RX_CommandQueue[RxHead].length - CMD_HEADER_SIZE); i++)
     a04:	4f 5f       	subi	r20, 0xFF	; 255
     a06:	24 2f       	mov	r18, r20
     a08:	30 e0       	ldi	r19, 0x00	; 0
     a0a:	a0 91 e5 01 	lds	r26, 0x01E5	; 0x8001e5 <RxHead>
     a0e:	b0 e0       	ldi	r27, 0x00	; 0
     a10:	aa 0f       	add	r26, r26
     a12:	bb 1f       	adc	r27, r27
     a14:	aa 0f       	add	r26, r26
     a16:	bb 1f       	adc	r27, r27
     a18:	aa 0f       	add	r26, r26
     a1a:	bb 1f       	adc	r27, r27
     a1c:	aa 51       	subi	r26, 0x1A	; 26
     a1e:	be 4f       	sbci	r27, 0xFE	; 254
     a20:	11 96       	adiw	r26, 0x01	; 1
     a22:	8c 91       	ld	r24, X
     a24:	90 e0       	ldi	r25, 0x00	; 0
     a26:	04 97       	sbiw	r24, 0x04	; 4
     a28:	28 17       	cp	r18, r24
     a2a:	39 07       	cpc	r19, r25
     a2c:	c4 f2       	brlt	.-80     	; 0x9de <__stack+0xdf>
			{
				RX_CommandQueue[RxHead].data[i] = RX_Buffer[DATA_BYTE_IDX + i];
			}
			
			/* calculate new RX head index */
			uint8_t tmpHead = (RxHead + 1) & RX_QUEUE_MASK;
     a2e:	80 91 e5 01 	lds	r24, 0x01E5	; 0x8001e5 <RxHead>
     a32:	8f 5f       	subi	r24, 0xFF	; 255
     a34:	83 70       	andi	r24, 0x03	; 3
				
			if ( tmpHead == RxTail )
     a36:	90 91 e4 01 	lds	r25, 0x01E4	; 0x8001e4 <RxTail>
     a3a:	89 17       	cp	r24, r25
     a3c:	49 f0       	breq	.+18     	; 0xa50 <__stack+0x151>
				/* error: RX command queue overflow */
			}
			else
			{
				/* store new index */
				RxHead = tmpHead;
     a3e:	80 93 e5 01 	sts	0x01E5, r24	; 0x8001e5 <RxHead>
     a42:	06 c0       	rjmp	.+12     	; 0xa50 <__stack+0x151>
			}
		}
		else
		{
			/* Prepare Transmit NACK */
			UART0_QueueChar(NACK_BYTE);
     a44:	8a e2       	ldi	r24, 0x2A	; 42
     a46:	0e 94 97 0e 	call	0x1d2e	; 0x1d2e <_Z15UART0_QueueCharh>
			PedalCom_DelayTXOvfCnt = 1;	// Start/reset Delay TX timer
     a4a:	81 e0       	ldi	r24, 0x01	; 1
     a4c:	80 93 1d 02 	sts	0x021D, r24	; 0x80021d <PedalCom_DelayTXOvfCnt>
		}
			
		RX_ByteCnt = 0;
     a50:	10 92 e0 01 	sts	0x01E0, r1	; 0x8001e0 <_ZZ16PedalCom_ReceivevE10RX_ByteCnt>
	}	
}
     a54:	df 91       	pop	r29
     a56:	cf 91       	pop	r28
     a58:	08 95       	ret

00000a5a <_Z12Select_RX_TXh>:
}


void Select_RX_TX(uint8_t dir)
{
	if (dir == DIR_TRANSMIT)
     a5a:	81 11       	cpse	r24, r1
     a5c:	03 c0       	rjmp	.+6      	; 0xa64 <_Z12Select_RX_TXh+0xa>
	{
		SELECT_RX_TX_PORT &= ~(SELECT_RX_MASK);
     a5e:	2b 98       	cbi	0x05, 3	; 5
		SELECT_RX_TX_PORT |= SELECT_TX_MASK;
     a60:	2c 9a       	sbi	0x05, 4	; 5
     a62:	08 95       	ret
	}
	else
	{
		SELECT_RX_TX_PORT |= SELECT_RX_MASK;
     a64:	2b 9a       	sbi	0x05, 3	; 5
		SELECT_RX_TX_PORT &= ~(SELECT_TX_MASK);
     a66:	2c 98       	cbi	0x05, 4	; 5
     a68:	08 95       	ret

00000a6a <_Z13PedalCom_Initv>:

/* Function implementations */
void PedalCom_Init()
{
	/* Set RX/TX Select GPIOs to output */
	SELECT_RX_TX_DDR |= (SELECT_RX_MASK | SELECT_TX_MASK);
     a6a:	84 b1       	in	r24, 0x04	; 4
     a6c:	88 61       	ori	r24, 0x18	; 24
     a6e:	84 b9       	out	0x04, r24	; 4
	
	/* Activate receive */
	Select_RX_TX(DIR_RECEIVE);
     a70:	81 e0       	ldi	r24, 0x01	; 1
     a72:	0e 94 2d 05 	call	0xa5a	; 0xa5a <_Z12Select_RX_TXh>
	
	/* Enable TX Complete Interrupt */
	UCSR0B |= (1 << TXCIE0);
     a76:	e1 ec       	ldi	r30, 0xC1	; 193
     a78:	f0 e0       	ldi	r31, 0x00	; 0
     a7a:	80 81       	ld	r24, Z
     a7c:	80 64       	ori	r24, 0x40	; 64
     a7e:	80 83       	st	Z, r24
     a80:	08 95       	ret

00000a82 <_Z17PedalCom_Transmitv>:


void PedalCom_Transmit()
{
	/* Activate Transmit */
	Select_RX_TX(DIR_TRANSMIT);
     a82:	80 e0       	ldi	r24, 0x00	; 0
     a84:	0e 94 2d 05 	call	0xa5a	; 0xa5a <_Z12Select_RX_TXh>
	
	/* Start transmit */
	UART0_PutQueue();
     a88:	0e 94 ac 0e 	call	0x1d58	; 0x1d58 <_Z14UART0_PutQueuev>
     a8c:	08 95       	ret

00000a8e <__vector_22>:
	}
}

/* TX Complete Interrupt ISR */
ISR(USART0_TX_vect)
{
     a8e:	1f 92       	push	r1
     a90:	0f 92       	push	r0
     a92:	0f b6       	in	r0, 0x3f	; 63
     a94:	0f 92       	push	r0
     a96:	11 24       	eor	r1, r1
     a98:	2f 93       	push	r18
     a9a:	3f 93       	push	r19
     a9c:	4f 93       	push	r20
     a9e:	5f 93       	push	r21
     aa0:	6f 93       	push	r22
     aa2:	7f 93       	push	r23
     aa4:	8f 93       	push	r24
     aa6:	9f 93       	push	r25
     aa8:	af 93       	push	r26
     aaa:	bf 93       	push	r27
     aac:	ef 93       	push	r30
     aae:	ff 93       	push	r31
	/* Deactivate Transmit */
	Select_RX_TX(DIR_RECEIVE);
     ab0:	81 e0       	ldi	r24, 0x01	; 1
     ab2:	0e 94 2d 05 	call	0xa5a	; 0xa5a <_Z12Select_RX_TXh>
     ab6:	ff 91       	pop	r31
     ab8:	ef 91       	pop	r30
     aba:	bf 91       	pop	r27
     abc:	af 91       	pop	r26
     abe:	9f 91       	pop	r25
     ac0:	8f 91       	pop	r24
     ac2:	7f 91       	pop	r23
     ac4:	6f 91       	pop	r22
     ac6:	5f 91       	pop	r21
     ac8:	4f 91       	pop	r20
     aca:	3f 91       	pop	r19
     acc:	2f 91       	pop	r18
     ace:	0f 90       	pop	r0
     ad0:	0f be       	out	0x3f, r0	; 63
     ad2:	0f 90       	pop	r0
     ad4:	1f 90       	pop	r1
     ad6:	18 95       	reti

00000ad8 <_Z18RotaryEncoder_Initv>:
     ad8:	84 b1       	in	r24, 0x04	; 4
     ada:	88 7f       	andi	r24, 0xF8	; 248
     adc:	84 b9       	out	0x04, r24	; 4
     ade:	ec e6       	ldi	r30, 0x6C	; 108
     ae0:	f0 e0       	ldi	r31, 0x00	; 0
     ae2:	80 81       	ld	r24, Z
     ae4:	81 60       	ori	r24, 0x01	; 1
     ae6:	80 83       	st	Z, r24
     ae8:	e8 e6       	ldi	r30, 0x68	; 104
     aea:	f0 e0       	ldi	r31, 0x00	; 0
     aec:	80 81       	ld	r24, Z
     aee:	82 60       	ori	r24, 0x02	; 2
     af0:	80 83       	st	Z, r24
     af2:	e9 e6       	ldi	r30, 0x69	; 105
     af4:	f0 e0       	ldi	r31, 0x00	; 0
     af6:	80 81       	ld	r24, Z
     af8:	80 63       	ori	r24, 0x30	; 48
     afa:	80 83       	st	Z, r24
     afc:	ea 9a       	sbi	0x1d, 2	; 29
     afe:	08 95       	ret

00000b00 <_Z23RotaryEncoder_IsPressedv>:
     b00:	83 b1       	in	r24, 0x03	; 3
     b02:	82 fb       	bst	r24, 2
     b04:	88 27       	eor	r24, r24
     b06:	80 f9       	bld	r24, 0
     b08:	08 95       	ret

00000b0a <_Z29RotaryEncoder_EnableInterruptv>:
     b0a:	e2 9a       	sbi	0x1c, 2	; 28
     b0c:	d9 9a       	sbi	0x1b, 1	; 27
     b0e:	ea 9a       	sbi	0x1d, 2	; 29
     b10:	e8 e6       	ldi	r30, 0x68	; 104
     b12:	f0 e0       	ldi	r31, 0x00	; 0
     b14:	80 81       	ld	r24, Z
     b16:	82 60       	ori	r24, 0x02	; 2
     b18:	80 83       	st	Z, r24
     b1a:	08 95       	ret

00000b1c <__vector_5>:
     b1c:	1f 92       	push	r1
     b1e:	0f 92       	push	r0
     b20:	0f b6       	in	r0, 0x3f	; 63
     b22:	0f 92       	push	r0
     b24:	11 24       	eor	r1, r1
     b26:	8f 93       	push	r24
     b28:	ef 93       	push	r30
     b2a:	ff 93       	push	r31
     b2c:	18 9b       	sbis	0x03, 0	; 3
     b2e:	0f c0       	rjmp	.+30     	; 0xb4e <__vector_5+0x32>
     b30:	ea 98       	cbi	0x1d, 2	; 29
     b32:	e8 e6       	ldi	r30, 0x68	; 104
     b34:	f0 e0       	ldi	r31, 0x00	; 0
     b36:	80 81       	ld	r24, Z
     b38:	8d 7f       	andi	r24, 0xFD	; 253
     b3a:	80 83       	st	Z, r24
     b3c:	19 9b       	sbis	0x03, 1	; 3
     b3e:	04 c0       	rjmp	.+8      	; 0xb48 <__vector_5+0x2c>
     b40:	81 e0       	ldi	r24, 0x01	; 1
     b42:	80 93 1f 02 	sts	0x021F, r24	; 0x80021f <RotEnc_State>
     b46:	03 c0       	rjmp	.+6      	; 0xb4e <__vector_5+0x32>
     b48:	82 e0       	ldi	r24, 0x02	; 2
     b4a:	80 93 1f 02 	sts	0x021F, r24	; 0x80021f <RotEnc_State>
     b4e:	ff 91       	pop	r31
     b50:	ef 91       	pop	r30
     b52:	8f 91       	pop	r24
     b54:	0f 90       	pop	r0
     b56:	0f be       	out	0x3f, r0	; 63
     b58:	0f 90       	pop	r0
     b5a:	1f 90       	pop	r1
     b5c:	18 95       	reti

00000b5e <__vector_3>:
     b5e:	1f 92       	push	r1
     b60:	0f 92       	push	r0
     b62:	0f b6       	in	r0, 0x3f	; 63
     b64:	0f 92       	push	r0
     b66:	11 24       	eor	r1, r1
     b68:	8f 93       	push	r24
     b6a:	9f 93       	push	r25
     b6c:	ef 93       	push	r30
     b6e:	ff 93       	push	r31
     b70:	81 e0       	ldi	r24, 0x01	; 1
     b72:	90 e0       	ldi	r25, 0x00	; 0
     b74:	90 93 21 02 	sts	0x0221, r25	; 0x800221 <RotaryEncoder_OvfCnt+0x1>
     b78:	80 93 20 02 	sts	0x0220, r24	; 0x800220 <RotaryEncoder_OvfCnt>
     b7c:	ea 98       	cbi	0x1d, 2	; 29
     b7e:	e8 e6       	ldi	r30, 0x68	; 104
     b80:	f0 e0       	ldi	r31, 0x00	; 0
     b82:	80 81       	ld	r24, Z
     b84:	8d 7f       	andi	r24, 0xFD	; 253
     b86:	80 83       	st	Z, r24
     b88:	ff 91       	pop	r31
     b8a:	ef 91       	pop	r30
     b8c:	9f 91       	pop	r25
     b8e:	8f 91       	pop	r24
     b90:	0f 90       	pop	r0
     b92:	0f be       	out	0x3f, r0	; 63
     b94:	0f 90       	pop	r0
     b96:	1f 90       	pop	r1
     b98:	18 95       	reti

00000b9a <_Z14SP10281_Updatev>:
void SP10281_Update()
{
	static unsigned char tmp = 0;

	/* Increment digit counter */
	if (++SP10281_DigitCnt >= SP10281_NUMBER_OF_DIGITS)
     b9a:	80 91 25 02 	lds	r24, 0x0225	; 0x800225 <SP10281_DigitCnt>
     b9e:	8f 5f       	subi	r24, 0xFF	; 255
     ba0:	80 93 25 02 	sts	0x0225, r24	; 0x800225 <SP10281_DigitCnt>
     ba4:	83 30       	cpi	r24, 0x03	; 3
     ba6:	10 f0       	brcs	.+4      	; 0xbac <_Z14SP10281_Updatev+0x12>
		SP10281_DigitCnt = 0;
     ba8:	10 92 25 02 	sts	0x0225, r1	; 0x800225 <SP10281_DigitCnt>

	/* Activate next digit */
	tmp = (1 << (SP10281_DigitCnt + GPIO_SP10281_DIGIT0_PIN));
     bac:	90 91 25 02 	lds	r25, 0x0225	; 0x800225 <SP10281_DigitCnt>
     bb0:	9b 5f       	subi	r25, 0xFB	; 251
     bb2:	81 e0       	ldi	r24, 0x01	; 1
     bb4:	01 c0       	rjmp	.+2      	; 0xbb8 <_Z14SP10281_Updatev+0x1e>
     bb6:	88 0f       	add	r24, r24
     bb8:	9a 95       	dec	r25
     bba:	ea f7       	brpl	.-6      	; 0xbb6 <_Z14SP10281_Updatev+0x1c>
     bbc:	80 93 22 02 	sts	0x0222, r24	; 0x800222 <_ZZ14SP10281_UpdatevE3tmp>
	GPIO_SP10281_DIGIT_PORT |= GPIO_SP10281_DIGIT_MASK;
     bc0:	85 b1       	in	r24, 0x05	; 5
     bc2:	80 6e       	ori	r24, 0xE0	; 224
     bc4:	85 b9       	out	0x05, r24	; 5
	GPIO_SP10281_DIGIT_PORT &= ~tmp;
     bc6:	95 b1       	in	r25, 0x05	; 5
     bc8:	80 91 22 02 	lds	r24, 0x0222	; 0x800222 <_ZZ14SP10281_UpdatevE3tmp>
     bcc:	80 95       	com	r24
     bce:	89 23       	and	r24, r25
     bd0:	85 b9       	out	0x05, r24	; 5

	/* Update segments */
	GPIO_SP10281_SEGMENT_PORT = SP10281_DigitData[SP10281_DigitCnt];
     bd2:	e0 91 25 02 	lds	r30, 0x0225	; 0x800225 <SP10281_DigitCnt>
     bd6:	f0 e0       	ldi	r31, 0x00	; 0
     bd8:	ea 5d       	subi	r30, 0xDA	; 218
     bda:	fd 4f       	sbci	r31, 0xFD	; 253
     bdc:	80 81       	ld	r24, Z
     bde:	82 b9       	out	0x02, r24	; 2
     be0:	08 95       	ret

00000be2 <_Z19SP10281_WriteSinglehch>:
}

void SP10281_WriteSingle(unsigned char dig, char data, unsigned char dot)
{	
	SP10281_DigitData[dig] = SP10281_DigitTable[(unsigned char)data];
     be2:	90 e0       	ldi	r25, 0x00	; 0
     be4:	e6 2f       	mov	r30, r22
     be6:	f0 e0       	ldi	r31, 0x00	; 0
     be8:	eb 5b       	subi	r30, 0xBB	; 187
     bea:	fe 4f       	sbci	r31, 0xFE	; 254
     bec:	20 81       	ld	r18, Z
     bee:	fc 01       	movw	r30, r24
     bf0:	ea 5d       	subi	r30, 0xDA	; 218
     bf2:	fd 4f       	sbci	r31, 0xFD	; 253
     bf4:	20 83       	st	Z, r18
	
	/* Set or clear dot */
	if (dot)
     bf6:	44 23       	and	r20, r20
     bf8:	39 f0       	breq	.+14     	; 0xc08 <_Z19SP10281_WriteSinglehch+0x26>
		SP10281_DigitData[dig] &= 0b01111111;
     bfa:	fc 01       	movw	r30, r24
     bfc:	ea 5d       	subi	r30, 0xDA	; 218
     bfe:	fd 4f       	sbci	r31, 0xFD	; 253
     c00:	80 81       	ld	r24, Z
     c02:	8f 77       	andi	r24, 0x7F	; 127
     c04:	80 83       	st	Z, r24
     c06:	08 95       	ret
	else
		SP10281_DigitData[dig] |= 0b10000000;
     c08:	fc 01       	movw	r30, r24
     c0a:	ea 5d       	subi	r30, 0xDA	; 218
     c0c:	fd 4f       	sbci	r31, 0xFD	; 253
     c0e:	80 81       	ld	r24, Z
     c10:	80 68       	ori	r24, 0x80	; 128
     c12:	80 83       	st	Z, r24
     c14:	08 95       	ret

00000c16 <_Z16SP10281_WriteAllccchhh>:
}

void SP10281_WriteAll(char c2, char c1, char c0, unsigned char dot2, unsigned char dot1, unsigned char dot0)
{
     c16:	ef 92       	push	r14
     c18:	0f 93       	push	r16
     c1a:	1f 93       	push	r17
     c1c:	cf 93       	push	r28
     c1e:	df 93       	push	r29
     c20:	c8 2f       	mov	r28, r24
     c22:	16 2f       	mov	r17, r22
     c24:	64 2f       	mov	r22, r20
     c26:	d2 2f       	mov	r29, r18
     c28:	4e 2d       	mov	r20, r14
	SP10281_WriteSingle(SP10281_DIGIT_0, c0, dot0);
     c2a:	80 e0       	ldi	r24, 0x00	; 0
     c2c:	0e 94 f1 05 	call	0xbe2	; 0xbe2 <_Z19SP10281_WriteSinglehch>
	SP10281_WriteSingle(SP10281_DIGIT_1, c1, dot1);
     c30:	40 2f       	mov	r20, r16
     c32:	61 2f       	mov	r22, r17
     c34:	81 e0       	ldi	r24, 0x01	; 1
     c36:	0e 94 f1 05 	call	0xbe2	; 0xbe2 <_Z19SP10281_WriteSinglehch>
	SP10281_WriteSingle(SP10281_DIGIT_2, c2, dot2);
     c3a:	4d 2f       	mov	r20, r29
     c3c:	6c 2f       	mov	r22, r28
     c3e:	82 e0       	ldi	r24, 0x02	; 2
     c40:	0e 94 f1 05 	call	0xbe2	; 0xbe2 <_Z19SP10281_WriteSinglehch>
}
     c44:	df 91       	pop	r29
     c46:	cf 91       	pop	r28
     c48:	1f 91       	pop	r17
     c4a:	0f 91       	pop	r16
     c4c:	ef 90       	pop	r14
     c4e:	08 95       	ret

00000c50 <_Z19SP10281_WriteNumbers>:

/* Writes a number between -99 and 999 to the display */
void SP10281_WriteNumber(short num)
{
     c50:	cf 93       	push	r28
     c52:	df 93       	push	r29
	short tmp = 0;
	
	if (num >= -99 && num <= 999)
     c54:	9c 01       	movw	r18, r24
     c56:	2d 59       	subi	r18, 0x9D	; 157
     c58:	3f 4f       	sbci	r19, 0xFF	; 255
     c5a:	2b 34       	cpi	r18, 0x4B	; 75
     c5c:	34 40       	sbci	r19, 0x04	; 4
     c5e:	68 f5       	brcc	.+90     	; 0xcba <_Z19SP10281_WriteNumbers+0x6a>
     c60:	ec 01       	movw	r28, r24
	{
		if (num < 0)
     c62:	99 23       	and	r25, r25
     c64:	54 f4       	brge	.+20     	; 0xc7a <_Z19SP10281_WriteNumbers+0x2a>
		{
			SP10281_WriteSingle(SP10281_DIGIT_2, '-', 0);
     c66:	40 e0       	ldi	r20, 0x00	; 0
     c68:	6d e2       	ldi	r22, 0x2D	; 45
     c6a:	82 e0       	ldi	r24, 0x02	; 2
     c6c:	0e 94 f1 05 	call	0xbe2	; 0xbe2 <_Z19SP10281_WriteSinglehch>
			num = -num;
     c70:	88 27       	eor	r24, r24
     c72:	99 27       	eor	r25, r25
     c74:	8c 1b       	sub	r24, r28
     c76:	9d 0b       	sbc	r25, r29
     c78:	0e c0       	rjmp	.+28     	; 0xc96 <_Z19SP10281_WriteNumbers+0x46>
		}
		else
		{
			tmp = num / 100;
     c7a:	64 e6       	ldi	r22, 0x64	; 100
     c7c:	70 e0       	ldi	r23, 0x00	; 0
     c7e:	0e 94 f3 10 	call	0x21e6	; 0x21e6 <__divmodhi4>
     c82:	d8 2f       	mov	r29, r24
     c84:	c9 2f       	mov	r28, r25
			tmp += '0';
			SP10281_WriteSingle(SP10281_DIGIT_2, tmp, 0);
     c86:	60 5d       	subi	r22, 0xD0	; 208
     c88:	7f 4f       	sbci	r23, 0xFF	; 255
     c8a:	40 e0       	ldi	r20, 0x00	; 0
     c8c:	82 e0       	ldi	r24, 0x02	; 2
     c8e:	0e 94 f1 05 	call	0xbe2	; 0xbe2 <_Z19SP10281_WriteSinglehch>
			num %= 100;
     c92:	8d 2f       	mov	r24, r29
     c94:	9c 2f       	mov	r25, r28
		}
		
		tmp = num / 10;
     c96:	6a e0       	ldi	r22, 0x0A	; 10
     c98:	70 e0       	ldi	r23, 0x00	; 0
     c9a:	0e 94 f3 10 	call	0x21e6	; 0x21e6 <__divmodhi4>
     c9e:	ec 01       	movw	r28, r24
		tmp += '0';
		SP10281_WriteSingle(SP10281_DIGIT_1, tmp, 0);
     ca0:	60 5d       	subi	r22, 0xD0	; 208
     ca2:	7f 4f       	sbci	r23, 0xFF	; 255
     ca4:	40 e0       	ldi	r20, 0x00	; 0
     ca6:	81 e0       	ldi	r24, 0x01	; 1
     ca8:	0e 94 f1 05 	call	0xbe2	; 0xbe2 <_Z19SP10281_WriteSinglehch>
		num %= 10;
		
		tmp = num + '0';
		SP10281_WriteSingle(SP10281_DIGIT_0, tmp, 0);
     cac:	be 01       	movw	r22, r28
     cae:	60 5d       	subi	r22, 0xD0	; 208
     cb0:	7f 4f       	sbci	r23, 0xFF	; 255
     cb2:	40 e0       	ldi	r20, 0x00	; 0
     cb4:	80 e0       	ldi	r24, 0x00	; 0
     cb6:	0e 94 f1 05 	call	0xbe2	; 0xbe2 <_Z19SP10281_WriteSinglehch>
	}
}
     cba:	df 91       	pop	r29
     cbc:	cf 91       	pop	r28
     cbe:	08 95       	ret

00000cc0 <_Z12SP10281_Initv>:
};

void SP10281_Init()
{
	/* Setup GPIOs */
	GPIO_SP10281_DIGIT_DDR |= GPIO_SP10281_DIGIT_MASK;	// Set GPIO output pins for digit control
     cc0:	84 b1       	in	r24, 0x04	; 4
     cc2:	80 6e       	ori	r24, 0xE0	; 224
     cc4:	84 b9       	out	0x04, r24	; 4
	GPIO_SP10281_SEGMENT_DDR = 0xFF;					// Set GPIO output pins for individual segments
     cc6:	8f ef       	ldi	r24, 0xFF	; 255
     cc8:	81 b9       	out	0x01, r24	; 1
	
	SP10281_WriteNumber(123);
     cca:	8b e7       	ldi	r24, 0x7B	; 123
     ccc:	90 e0       	ldi	r25, 0x00	; 0
     cce:	0e 94 28 06 	call	0xc50	; 0xc50 <_Z19SP10281_WriteNumbers>
     cd2:	08 95       	ret

00000cd4 <_Z30System_HandleTempSelectTimeoutv>:
			{
				CtrlSwitchRelays[i].Clear();
			}
		}
	}
}
     cd4:	ef 92       	push	r14
     cd6:	0f 93       	push	r16
     cd8:	80 91 59 02 	lds	r24, 0x0259	; 0x800259 <SystemState>
     cdc:	84 30       	cpi	r24, 0x04	; 4
     cde:	71 f0       	breq	.+28     	; 0xcfc <_Z30System_HandleTempSelectTimeoutv+0x28>
     ce0:	18 f4       	brcc	.+6      	; 0xce8 <_Z30System_HandleTempSelectTimeoutv+0x14>
     ce2:	81 30       	cpi	r24, 0x01	; 1
     ce4:	31 f0       	breq	.+12     	; 0xcf2 <_Z30System_HandleTempSelectTimeoutv+0x1e>
     ce6:	4d c0       	rjmp	.+154    	; 0xd82 <_Z30System_HandleTempSelectTimeoutv+0xae>
     ce8:	86 30       	cpi	r24, 0x06	; 6
     cea:	e9 f0       	breq	.+58     	; 0xd26 <_Z30System_HandleTempSelectTimeoutv+0x52>
     cec:	80 31       	cpi	r24, 0x10	; 16
     cee:	99 f1       	breq	.+102    	; 0xd56 <_Z30System_HandleTempSelectTimeoutv+0x82>
     cf0:	48 c0       	rjmp	.+144    	; 0xd82 <_Z30System_HandleTempSelectTimeoutv+0xae>
     cf2:	80 91 50 02 	lds	r24, 0x0250	; 0x800250 <System_MidiChannel>
     cf6:	80 93 52 02 	sts	0x0252, r24	; 0x800252 <TempSelectMidiChannel>
     cfa:	43 c0       	rjmp	.+134    	; 0xd82 <_Z30System_HandleTempSelectTimeoutv+0xae>
     cfc:	0e 94 80 05 	call	0xb00	; 0xb00 <_Z23RotaryEncoder_IsPressedv>
     d00:	88 23       	and	r24, r24
     d02:	29 f0       	breq	.+10     	; 0xd0e <_Z30System_HandleTempSelectTimeoutv+0x3a>
     d04:	80 91 55 02 	lds	r24, 0x0255	; 0x800255 <TempSelectPreset>
     d08:	80 93 57 02 	sts	0x0257, r24	; 0x800257 <ActivePreset>
     d0c:	08 c0       	rjmp	.+16     	; 0xd1e <_Z30System_HandleTempSelectTimeoutv+0x4a>
     d0e:	80 91 57 02 	lds	r24, 0x0257	; 0x800257 <ActivePreset>
     d12:	80 93 55 02 	sts	0x0255, r24	; 0x800255 <TempSelectPreset>
     d16:	80 91 57 02 	lds	r24, 0x0257	; 0x800257 <ActivePreset>
     d1a:	80 93 54 02 	sts	0x0254, r24	; 0x800254 <LastTempSelectPreset>
     d1e:	83 e0       	ldi	r24, 0x03	; 3
     d20:	80 93 59 02 	sts	0x0259, r24	; 0x800259 <SystemState>
     d24:	2e c0       	rjmp	.+92     	; 0xd82 <_Z30System_HandleTempSelectTimeoutv+0xae>
     d26:	0e 94 80 05 	call	0xb00	; 0xb00 <_Z23RotaryEncoder_IsPressedv>
     d2a:	88 23       	and	r24, r24
     d2c:	41 f0       	breq	.+16     	; 0xd3e <_Z30System_HandleTempSelectTimeoutv+0x6a>
     d2e:	80 91 55 02 	lds	r24, 0x0255	; 0x800255 <TempSelectPreset>
     d32:	80 93 57 02 	sts	0x0257, r24	; 0x800257 <ActivePreset>
     d36:	83 e0       	ldi	r24, 0x03	; 3
     d38:	80 93 59 02 	sts	0x0259, r24	; 0x800259 <SystemState>
     d3c:	22 c0       	rjmp	.+68     	; 0xd82 <_Z30System_HandleTempSelectTimeoutv+0xae>
     d3e:	80 91 57 02 	lds	r24, 0x0257	; 0x800257 <ActivePreset>
     d42:	80 93 55 02 	sts	0x0255, r24	; 0x800255 <TempSelectPreset>
     d46:	80 91 57 02 	lds	r24, 0x0257	; 0x800257 <ActivePreset>
     d4a:	80 93 54 02 	sts	0x0254, r24	; 0x800254 <LastTempSelectPreset>
     d4e:	85 e0       	ldi	r24, 0x05	; 5
     d50:	80 93 59 02 	sts	0x0259, r24	; 0x800259 <SystemState>
     d54:	16 c0       	rjmp	.+44     	; 0xd82 <_Z30System_HandleTempSelectTimeoutv+0xae>
     d56:	80 91 4b 02 	lds	r24, 0x024B	; 0x80024b <LastTempSelectMidiPC>
     d5a:	80 93 4c 02 	sts	0x024C, r24	; 0x80024c <TempSelectMidiPC>
     d5e:	80 91 4c 02 	lds	r24, 0x024C	; 0x80024c <TempSelectMidiPC>
     d62:	8f 3f       	cpi	r24, 0xFF	; 255
     d64:	49 f4       	brne	.+18     	; 0xd78 <_Z30System_HandleTempSelectTimeoutv+0xa4>
     d66:	e1 2c       	mov	r14, r1
     d68:	00 e0       	ldi	r16, 0x00	; 0
     d6a:	20 e0       	ldi	r18, 0x00	; 0
     d6c:	46 e6       	ldi	r20, 0x66	; 102
     d6e:	66 e6       	ldi	r22, 0x66	; 102
     d70:	8f e6       	ldi	r24, 0x6F	; 111
     d72:	0e 94 0b 06 	call	0xc16	; 0xc16 <_Z16SP10281_WriteAllccchhh>
     d76:	05 c0       	rjmp	.+10     	; 0xd82 <_Z30System_HandleTempSelectTimeoutv+0xae>
     d78:	80 91 4c 02 	lds	r24, 0x024C	; 0x80024c <TempSelectMidiPC>
     d7c:	90 e0       	ldi	r25, 0x00	; 0
     d7e:	0e 94 28 06 	call	0xc50	; 0xc50 <_Z19SP10281_WriteNumbers>
     d82:	0f 91       	pop	r16
     d84:	ef 90       	pop	r14
     d86:	08 95       	ret

00000d88 <_Z26System_HandleMarkSelectionv>:
     d88:	cf 93       	push	r28
     d8a:	df 93       	push	r29
     d8c:	80 91 59 02 	lds	r24, 0x0259	; 0x800259 <SystemState>
     d90:	8c 30       	cpi	r24, 0x0C	; 12
     d92:	71 f4       	brne	.+28     	; 0xdb0 <_Z26System_HandleMarkSelectionv+0x28>
     d94:	c9 ec       	ldi	r28, 0xC9	; 201
     d96:	d1 e0       	ldi	r29, 0x01	; 1
     d98:	48 81       	ld	r20, Y
     d9a:	64 e1       	ldi	r22, 0x14	; 20
     d9c:	80 e0       	ldi	r24, 0x00	; 0
     d9e:	0e 94 7c 01 	call	0x2f8	; 0x2f8 <_Z17MCP23017_WriteReghhh>
     da2:	49 81       	ldd	r20, Y+1	; 0x01
     da4:	4f 70       	andi	r20, 0x0F	; 15
     da6:	40 64       	ori	r20, 0x40	; 64
     da8:	65 e1       	ldi	r22, 0x15	; 21
     daa:	80 e0       	ldi	r24, 0x00	; 0
     dac:	0e 94 7c 01 	call	0x2f8	; 0x2f8 <_Z17MCP23017_WriteReghhh>
     db0:	df 91       	pop	r29
     db2:	cf 91       	pop	r28
     db4:	08 95       	ret

00000db6 <_Z25System_HandlePedalCommand3CMDhPh>:
     db6:	81 3b       	cpi	r24, 0xB1	; 177
     db8:	99 f5       	brne	.+102    	; 0xe20 <_Z25System_HandlePedalCommand3CMDhPh+0x6a>
     dba:	80 91 59 02 	lds	r24, 0x0259	; 0x800259 <SystemState>
     dbe:	84 30       	cpi	r24, 0x04	; 4
     dc0:	c1 f4       	brne	.+48     	; 0xdf2 <_Z25System_HandlePedalCommand3CMDhPh+0x3c>
     dc2:	fa 01       	movw	r30, r20
     dc4:	80 81       	ld	r24, Z
     dc6:	0e 94 e8 10 	call	0x21d0	; 0x21d0 <_Z12Util_Bit2Inth>
     dca:	81 50       	subi	r24, 0x01	; 1
     dcc:	90 91 57 02 	lds	r25, 0x0257	; 0x800257 <ActivePreset>
     dd0:	89 13       	cpse	r24, r25
     dd2:	07 c0       	rjmp	.+14     	; 0xde2 <_Z25System_HandlePedalCommand3CMDhPh+0x2c>
     dd4:	90 91 57 02 	lds	r25, 0x0257	; 0x800257 <ActivePreset>
     dd8:	81 e0       	ldi	r24, 0x01	; 1
     dda:	89 27       	eor	r24, r25
     ddc:	80 93 56 02 	sts	0x0256, r24	; 0x800256 <LastActivePreset>
     de0:	02 c0       	rjmp	.+4      	; 0xde6 <_Z25System_HandlePedalCommand3CMDhPh+0x30>
     de2:	80 93 57 02 	sts	0x0257, r24	; 0x800257 <ActivePreset>
     de6:	80 91 57 02 	lds	r24, 0x0257	; 0x800257 <ActivePreset>
     dea:	80 93 55 02 	sts	0x0255, r24	; 0x800255 <TempSelectPreset>
     dee:	8c ea       	ldi	r24, 0xAC	; 172
     df0:	08 95       	ret
     df2:	80 91 59 02 	lds	r24, 0x0259	; 0x800259 <SystemState>
     df6:	86 30       	cpi	r24, 0x06	; 6
     df8:	49 f4       	brne	.+18     	; 0xe0c <_Z25System_HandlePedalCommand3CMDhPh+0x56>
     dfa:	e9 ec       	ldi	r30, 0xC9	; 201
     dfc:	f1 e0       	ldi	r31, 0x01	; 1
     dfe:	90 81       	ld	r25, Z
     e00:	da 01       	movw	r26, r20
     e02:	8c 91       	ld	r24, X
     e04:	89 27       	eor	r24, r25
     e06:	80 83       	st	Z, r24
     e08:	8c ea       	ldi	r24, 0xAC	; 172
     e0a:	08 95       	ret
     e0c:	80 91 59 02 	lds	r24, 0x0259	; 0x800259 <SystemState>
     e10:	88 30       	cpi	r24, 0x08	; 8
     e12:	09 f0       	breq	.+2      	; 0xe16 <_Z25System_HandlePedalCommand3CMDhPh+0x60>
     e14:	4b c0       	rjmp	.+150    	; 0xeac <_Z25System_HandlePedalCommand3CMDhPh+0xf6>
     e16:	82 e0       	ldi	r24, 0x02	; 2
     e18:	80 93 59 02 	sts	0x0259, r24	; 0x800259 <SystemState>
     e1c:	8c ea       	ldi	r24, 0xAC	; 172
     e1e:	08 95       	ret
     e20:	82 3b       	cpi	r24, 0xB2	; 178
     e22:	61 f5       	brne	.+88     	; 0xe7c <_Z25System_HandlePedalCommand3CMDhPh+0xc6>
     e24:	80 91 59 02 	lds	r24, 0x0259	; 0x800259 <SystemState>
     e28:	84 30       	cpi	r24, 0x04	; 4
     e2a:	41 f4       	brne	.+16     	; 0xe3c <_Z25System_HandlePedalCommand3CMDhPh+0x86>
     e2c:	81 e0       	ldi	r24, 0x01	; 1
     e2e:	80 93 53 02 	sts	0x0253, r24	; 0x800253 <SystemRunMode>
     e32:	82 e0       	ldi	r24, 0x02	; 2
     e34:	80 93 59 02 	sts	0x0259, r24	; 0x800259 <SystemState>
     e38:	8c ea       	ldi	r24, 0xAC	; 172
     e3a:	08 95       	ret
     e3c:	80 91 59 02 	lds	r24, 0x0259	; 0x800259 <SystemState>
     e40:	86 30       	cpi	r24, 0x06	; 6
     e42:	99 f4       	brne	.+38     	; 0xe6a <_Z25System_HandlePedalCommand3CMDhPh+0xb4>
     e44:	fa 01       	movw	r30, r20
     e46:	80 81       	ld	r24, Z
     e48:	98 2f       	mov	r25, r24
     e4a:	9f 70       	andi	r25, 0x0F	; 15
     e4c:	39 f0       	breq	.+14     	; 0xe5c <_Z25System_HandlePedalCommand3CMDhPh+0xa6>
     e4e:	e9 ec       	ldi	r30, 0xC9	; 201
     e50:	f1 e0       	ldi	r31, 0x01	; 1
     e52:	91 81       	ldd	r25, Z+1	; 0x01
     e54:	89 27       	eor	r24, r25
     e56:	81 83       	std	Z+1, r24	; 0x01
     e58:	8c ea       	ldi	r24, 0xAC	; 172
     e5a:	08 95       	ret
     e5c:	10 92 53 02 	sts	0x0253, r1	; 0x800253 <SystemRunMode>
     e60:	82 e0       	ldi	r24, 0x02	; 2
     e62:	80 93 59 02 	sts	0x0259, r24	; 0x800259 <SystemState>
     e66:	8c ea       	ldi	r24, 0xAC	; 172
     e68:	08 95       	ret
     e6a:	80 91 59 02 	lds	r24, 0x0259	; 0x800259 <SystemState>
     e6e:	88 30       	cpi	r24, 0x08	; 8
     e70:	f9 f4       	brne	.+62     	; 0xeb0 <_Z25System_HandlePedalCommand3CMDhPh+0xfa>
     e72:	82 e0       	ldi	r24, 0x02	; 2
     e74:	80 93 59 02 	sts	0x0259, r24	; 0x800259 <SystemState>
     e78:	8c ea       	ldi	r24, 0xAC	; 172
     e7a:	08 95       	ret
     e7c:	84 3b       	cpi	r24, 0xB4	; 180
     e7e:	d1 f4       	brne	.+52     	; 0xeb4 <_Z25System_HandlePedalCommand3CMDhPh+0xfe>
     e80:	80 91 59 02 	lds	r24, 0x0259	; 0x800259 <SystemState>
     e84:	84 30       	cpi	r24, 0x04	; 4
     e86:	21 f0       	breq	.+8      	; 0xe90 <_Z25System_HandlePedalCommand3CMDhPh+0xda>
     e88:	80 91 59 02 	lds	r24, 0x0259	; 0x800259 <SystemState>
     e8c:	86 30       	cpi	r24, 0x06	; 6
     e8e:	29 f4       	brne	.+10     	; 0xe9a <_Z25System_HandlePedalCommand3CMDhPh+0xe4>
     e90:	88 e0       	ldi	r24, 0x08	; 8
     e92:	80 93 59 02 	sts	0x0259, r24	; 0x800259 <SystemState>
     e96:	8c ea       	ldi	r24, 0xAC	; 172
     e98:	08 95       	ret
     e9a:	80 91 59 02 	lds	r24, 0x0259	; 0x800259 <SystemState>
     e9e:	88 30       	cpi	r24, 0x08	; 8
     ea0:	59 f4       	brne	.+22     	; 0xeb8 <_Z25System_HandlePedalCommand3CMDhPh+0x102>
     ea2:	82 e0       	ldi	r24, 0x02	; 2
     ea4:	80 93 59 02 	sts	0x0259, r24	; 0x800259 <SystemState>
     ea8:	8c ea       	ldi	r24, 0xAC	; 172
     eaa:	08 95       	ret
     eac:	8c ea       	ldi	r24, 0xAC	; 172
     eae:	08 95       	ret
     eb0:	8c ea       	ldi	r24, 0xAC	; 172
     eb2:	08 95       	ret
     eb4:	8a e2       	ldi	r24, 0x2A	; 42
     eb6:	08 95       	ret
     eb8:	8c ea       	ldi	r24, 0xAC	; 172
     eba:	08 95       	ret

00000ebc <_Z30System_HandleMIDIProgramChangev>:
     ebc:	eb e2       	ldi	r30, 0x2B	; 43
     ebe:	f2 e0       	ldi	r31, 0x02	; 2
     ec0:	80 e0       	ldi	r24, 0x00	; 0
     ec2:	90 91 d9 01 	lds	r25, 0x01D9	; 0x8001d9 <MIDI_ReceivedProgram>
     ec6:	22 81       	ldd	r18, Z+2	; 0x02
     ec8:	29 13       	cpse	r18, r25
     eca:	02 c0       	rjmp	.+4      	; 0xed0 <_Z30System_HandleMIDIProgramChangev+0x14>
     ecc:	80 93 57 02 	sts	0x0257, r24	; 0x800257 <ActivePreset>
     ed0:	8f 5f       	subi	r24, 0xFF	; 255
     ed2:	34 96       	adiw	r30, 0x04	; 4
     ed4:	88 30       	cpi	r24, 0x08	; 8
     ed6:	a9 f7       	brne	.-22     	; 0xec2 <_Z30System_HandleMIDIProgramChangev+0x6>
     ed8:	08 95       	ret

00000eda <_Z20System_UpdateUI_LEDsv>:
     eda:	ef 92       	push	r14
     edc:	ff 92       	push	r15
     ede:	0f 93       	push	r16
     ee0:	1f 93       	push	r17
     ee2:	cf 93       	push	r28
     ee4:	df 93       	push	r29
     ee6:	0a ea       	ldi	r16, 0xAA	; 170
     ee8:	13 e0       	ldi	r17, 0x03	; 3
     eea:	c0 e0       	ldi	r28, 0x00	; 0
     eec:	d0 e0       	ldi	r29, 0x00	; 0
     eee:	0f 2e       	mov	r0, r31
     ef0:	f9 ec       	ldi	r31, 0xC9	; 201
     ef2:	ef 2e       	mov	r14, r31
     ef4:	f1 e0       	ldi	r31, 0x01	; 1
     ef6:	ff 2e       	mov	r15, r31
     ef8:	f0 2d       	mov	r31, r0
     efa:	f7 01       	movw	r30, r14
     efc:	80 81       	ld	r24, Z
     efe:	90 e0       	ldi	r25, 0x00	; 0
     f00:	0c 2e       	mov	r0, r28
     f02:	02 c0       	rjmp	.+4      	; 0xf08 <_Z20System_UpdateUI_LEDsv+0x2e>
     f04:	95 95       	asr	r25
     f06:	87 95       	ror	r24
     f08:	0a 94       	dec	r0
     f0a:	e2 f7       	brpl	.-8      	; 0xf04 <_Z20System_UpdateUI_LEDsv+0x2a>
     f0c:	80 ff       	sbrs	r24, 0
     f0e:	09 c0       	rjmp	.+18     	; 0xf22 <_Z20System_UpdateUI_LEDsv+0x48>
     f10:	c8 01       	movw	r24, r16
     f12:	0e 94 a7 01 	call	0x34e	; 0x34e <_ZN10MCP_Output8getStateEv>
     f16:	81 30       	cpi	r24, 0x01	; 1
     f18:	61 f0       	breq	.+24     	; 0xf32 <_Z20System_UpdateUI_LEDsv+0x58>
     f1a:	c8 01       	movw	r24, r16
     f1c:	0e 94 aa 01 	call	0x354	; 0x354 <_ZN10MCP_Output3SetEv>
     f20:	08 c0       	rjmp	.+16     	; 0xf32 <_Z20System_UpdateUI_LEDsv+0x58>
     f22:	c8 01       	movw	r24, r16
     f24:	0e 94 a7 01 	call	0x34e	; 0x34e <_ZN10MCP_Output8getStateEv>
     f28:	88 23       	and	r24, r24
     f2a:	19 f0       	breq	.+6      	; 0xf32 <_Z20System_UpdateUI_LEDsv+0x58>
     f2c:	c8 01       	movw	r24, r16
     f2e:	0e 94 e7 01 	call	0x3ce	; 0x3ce <_ZN10MCP_Output5ClearEv>
     f32:	21 96       	adiw	r28, 0x01	; 1
     f34:	0c 5f       	subi	r16, 0xFC	; 252
     f36:	1f 4f       	sbci	r17, 0xFF	; 255
     f38:	c8 30       	cpi	r28, 0x08	; 8
     f3a:	d1 05       	cpc	r29, r1
     f3c:	f1 f6       	brne	.-68     	; 0xefa <_Z20System_UpdateUI_LEDsv+0x20>
     f3e:	0a e9       	ldi	r16, 0x9A	; 154
     f40:	13 e0       	ldi	r17, 0x03	; 3
     f42:	c0 e0       	ldi	r28, 0x00	; 0
     f44:	d0 e0       	ldi	r29, 0x00	; 0
     f46:	0f 2e       	mov	r0, r31
     f48:	f9 ec       	ldi	r31, 0xC9	; 201
     f4a:	ef 2e       	mov	r14, r31
     f4c:	f1 e0       	ldi	r31, 0x01	; 1
     f4e:	ff 2e       	mov	r15, r31
     f50:	f0 2d       	mov	r31, r0
     f52:	f7 01       	movw	r30, r14
     f54:	81 81       	ldd	r24, Z+1	; 0x01
     f56:	90 e0       	ldi	r25, 0x00	; 0
     f58:	0c 2e       	mov	r0, r28
     f5a:	02 c0       	rjmp	.+4      	; 0xf60 <_Z20System_UpdateUI_LEDsv+0x86>
     f5c:	95 95       	asr	r25
     f5e:	87 95       	ror	r24
     f60:	0a 94       	dec	r0
     f62:	e2 f7       	brpl	.-8      	; 0xf5c <_Z20System_UpdateUI_LEDsv+0x82>
     f64:	80 ff       	sbrs	r24, 0
     f66:	09 c0       	rjmp	.+18     	; 0xf7a <_Z20System_UpdateUI_LEDsv+0xa0>
     f68:	c8 01       	movw	r24, r16
     f6a:	0e 94 a7 01 	call	0x34e	; 0x34e <_ZN10MCP_Output8getStateEv>
     f6e:	81 30       	cpi	r24, 0x01	; 1
     f70:	61 f0       	breq	.+24     	; 0xf8a <_Z20System_UpdateUI_LEDsv+0xb0>
     f72:	c8 01       	movw	r24, r16
     f74:	0e 94 aa 01 	call	0x354	; 0x354 <_ZN10MCP_Output3SetEv>
     f78:	08 c0       	rjmp	.+16     	; 0xf8a <_Z20System_UpdateUI_LEDsv+0xb0>
     f7a:	c8 01       	movw	r24, r16
     f7c:	0e 94 a7 01 	call	0x34e	; 0x34e <_ZN10MCP_Output8getStateEv>
     f80:	88 23       	and	r24, r24
     f82:	19 f0       	breq	.+6      	; 0xf8a <_Z20System_UpdateUI_LEDsv+0xb0>
     f84:	c8 01       	movw	r24, r16
     f86:	0e 94 e7 01 	call	0x3ce	; 0x3ce <_ZN10MCP_Output5ClearEv>
     f8a:	21 96       	adiw	r28, 0x01	; 1
     f8c:	0c 5f       	subi	r16, 0xFC	; 252
     f8e:	1f 4f       	sbci	r17, 0xFF	; 255
     f90:	c4 30       	cpi	r28, 0x04	; 4
     f92:	d1 05       	cpc	r29, r1
     f94:	f1 f6       	brne	.-68     	; 0xf52 <_Z20System_UpdateUI_LEDsv+0x78>
     f96:	df 91       	pop	r29
     f98:	cf 91       	pop	r28
     f9a:	1f 91       	pop	r17
     f9c:	0f 91       	pop	r16
     f9e:	ff 90       	pop	r15
     fa0:	ef 90       	pop	r14
     fa2:	08 95       	ret

00000fa4 <_Z31System_HandleRotaryEncoderInputv>:
     fa4:	ef 92       	push	r14
     fa6:	0f 93       	push	r16
     fa8:	e0 91 59 02 	lds	r30, 0x0259	; 0x800259 <SystemState>
     fac:	8e 2f       	mov	r24, r30
     fae:	90 e0       	ldi	r25, 0x00	; 0
     fb0:	fc 01       	movw	r30, r24
     fb2:	31 97       	sbiw	r30, 0x01	; 1
     fb4:	e0 31       	cpi	r30, 0x10	; 16
     fb6:	f1 05       	cpc	r31, r1
     fb8:	08 f0       	brcs	.+2      	; 0xfbc <_Z31System_HandleRotaryEncoderInputv+0x18>
     fba:	0a c2       	rjmp	.+1044   	; 0x13d0 <_Z31System_HandleRotaryEncoderInputv+0x42c>
     fbc:	e2 5c       	subi	r30, 0xC2	; 194
     fbe:	ff 4f       	sbci	r31, 0xFF	; 255
     fc0:	0c 94 29 11 	jmp	0x2252	; 0x2252 <__tablejump2__>
     fc4:	80 91 1f 02 	lds	r24, 0x021F	; 0x80021f <RotEnc_State>
     fc8:	83 30       	cpi	r24, 0x03	; 3
     fca:	29 f4       	brne	.+10     	; 0xfd6 <_Z31System_HandleRotaryEncoderInputv+0x32>
     fcc:	80 91 52 02 	lds	r24, 0x0252	; 0x800252 <TempSelectMidiChannel>
     fd0:	80 93 50 02 	sts	0x0250, r24	; 0x800250 <System_MidiChannel>
     fd4:	fd c1       	rjmp	.+1018   	; 0x13d0 <_Z31System_HandleRotaryEncoderInputv+0x42c>
     fd6:	80 91 1f 02 	lds	r24, 0x021F	; 0x80021f <RotEnc_State>
     fda:	85 30       	cpi	r24, 0x05	; 5
     fdc:	71 f4       	brne	.+28     	; 0xffa <_Z31System_HandleRotaryEncoderInputv+0x56>
     fde:	80 91 52 02 	lds	r24, 0x0252	; 0x800252 <TempSelectMidiChannel>
     fe2:	80 93 50 02 	sts	0x0250, r24	; 0x800250 <System_MidiChannel>
     fe6:	60 91 50 02 	lds	r22, 0x0250	; 0x800250 <System_MidiChannel>
     fea:	80 e0       	ldi	r24, 0x00	; 0
     fec:	90 e0       	ldi	r25, 0x00	; 0
     fee:	0e 94 7f 11 	call	0x22fe	; 0x22fe <eeprom_write_byte>
     ff2:	82 e0       	ldi	r24, 0x02	; 2
     ff4:	80 93 59 02 	sts	0x0259, r24	; 0x800259 <SystemState>
     ff8:	eb c1       	rjmp	.+982    	; 0x13d0 <_Z31System_HandleRotaryEncoderInputv+0x42c>
     ffa:	80 91 1f 02 	lds	r24, 0x021F	; 0x80021f <RotEnc_State>
     ffe:	81 30       	cpi	r24, 0x01	; 1
    1000:	59 f4       	brne	.+22     	; 0x1018 <_Z31System_HandleRotaryEncoderInputv+0x74>
    1002:	80 91 52 02 	lds	r24, 0x0252	; 0x800252 <TempSelectMidiChannel>
    1006:	80 31       	cpi	r24, 0x10	; 16
    1008:	08 f0       	brcs	.+2      	; 0x100c <_Z31System_HandleRotaryEncoderInputv+0x68>
    100a:	e2 c1       	rjmp	.+964    	; 0x13d0 <_Z31System_HandleRotaryEncoderInputv+0x42c>
    100c:	80 91 52 02 	lds	r24, 0x0252	; 0x800252 <TempSelectMidiChannel>
    1010:	8f 5f       	subi	r24, 0xFF	; 255
    1012:	80 93 52 02 	sts	0x0252, r24	; 0x800252 <TempSelectMidiChannel>
    1016:	dc c1       	rjmp	.+952    	; 0x13d0 <_Z31System_HandleRotaryEncoderInputv+0x42c>
    1018:	80 91 1f 02 	lds	r24, 0x021F	; 0x80021f <RotEnc_State>
    101c:	82 30       	cpi	r24, 0x02	; 2
    101e:	09 f0       	breq	.+2      	; 0x1022 <_Z31System_HandleRotaryEncoderInputv+0x7e>
    1020:	d7 c1       	rjmp	.+942    	; 0x13d0 <_Z31System_HandleRotaryEncoderInputv+0x42c>
    1022:	80 91 52 02 	lds	r24, 0x0252	; 0x800252 <TempSelectMidiChannel>
    1026:	88 23       	and	r24, r24
    1028:	09 f4       	brne	.+2      	; 0x102c <_Z31System_HandleRotaryEncoderInputv+0x88>
    102a:	d2 c1       	rjmp	.+932    	; 0x13d0 <_Z31System_HandleRotaryEncoderInputv+0x42c>
    102c:	80 91 52 02 	lds	r24, 0x0252	; 0x800252 <TempSelectMidiChannel>
    1030:	81 50       	subi	r24, 0x01	; 1
    1032:	80 93 52 02 	sts	0x0252, r24	; 0x800252 <TempSelectMidiChannel>
    1036:	cc c1       	rjmp	.+920    	; 0x13d0 <_Z31System_HandleRotaryEncoderInputv+0x42c>
    1038:	80 91 1f 02 	lds	r24, 0x021F	; 0x80021f <RotEnc_State>
    103c:	83 30       	cpi	r24, 0x03	; 3
    103e:	41 f4       	brne	.+16     	; 0x1050 <_Z31System_HandleRotaryEncoderInputv+0xac>
    1040:	80 91 55 02 	lds	r24, 0x0255	; 0x800255 <TempSelectPreset>
    1044:	80 93 57 02 	sts	0x0257, r24	; 0x800257 <ActivePreset>
    1048:	83 e0       	ldi	r24, 0x03	; 3
    104a:	80 93 59 02 	sts	0x0259, r24	; 0x800259 <SystemState>
    104e:	c0 c1       	rjmp	.+896    	; 0x13d0 <_Z31System_HandleRotaryEncoderInputv+0x42c>
    1050:	80 91 1f 02 	lds	r24, 0x021F	; 0x80021f <RotEnc_State>
    1054:	85 30       	cpi	r24, 0x05	; 5
    1056:	41 f4       	brne	.+16     	; 0x1068 <_Z31System_HandleRotaryEncoderInputv+0xc4>
    1058:	80 91 55 02 	lds	r24, 0x0255	; 0x800255 <TempSelectPreset>
    105c:	80 93 57 02 	sts	0x0257, r24	; 0x800257 <ActivePreset>
    1060:	89 e0       	ldi	r24, 0x09	; 9
    1062:	80 93 59 02 	sts	0x0259, r24	; 0x800259 <SystemState>
    1066:	b4 c1       	rjmp	.+872    	; 0x13d0 <_Z31System_HandleRotaryEncoderInputv+0x42c>
    1068:	80 91 1f 02 	lds	r24, 0x021F	; 0x80021f <RotEnc_State>
    106c:	81 30       	cpi	r24, 0x01	; 1
    106e:	81 f4       	brne	.+32     	; 0x1090 <_Z31System_HandleRotaryEncoderInputv+0xec>
    1070:	80 91 55 02 	lds	r24, 0x0255	; 0x800255 <TempSelectPreset>
    1074:	87 30       	cpi	r24, 0x07	; 7
    1076:	28 f4       	brcc	.+10     	; 0x1082 <_Z31System_HandleRotaryEncoderInputv+0xde>
    1078:	80 91 55 02 	lds	r24, 0x0255	; 0x800255 <TempSelectPreset>
    107c:	8f 5f       	subi	r24, 0xFF	; 255
    107e:	80 93 55 02 	sts	0x0255, r24	; 0x800255 <TempSelectPreset>
    1082:	81 e0       	ldi	r24, 0x01	; 1
    1084:	90 e0       	ldi	r25, 0x00	; 0
    1086:	90 93 5f 02 	sts	0x025F, r25	; 0x80025f <System_TempSelectOvfCnt+0x1>
    108a:	80 93 5e 02 	sts	0x025E, r24	; 0x80025e <System_TempSelectOvfCnt>
    108e:	a0 c1       	rjmp	.+832    	; 0x13d0 <_Z31System_HandleRotaryEncoderInputv+0x42c>
    1090:	80 91 1f 02 	lds	r24, 0x021F	; 0x80021f <RotEnc_State>
    1094:	82 30       	cpi	r24, 0x02	; 2
    1096:	09 f0       	breq	.+2      	; 0x109a <_Z31System_HandleRotaryEncoderInputv+0xf6>
    1098:	9b c1       	rjmp	.+822    	; 0x13d0 <_Z31System_HandleRotaryEncoderInputv+0x42c>
    109a:	80 91 55 02 	lds	r24, 0x0255	; 0x800255 <TempSelectPreset>
    109e:	88 23       	and	r24, r24
    10a0:	29 f0       	breq	.+10     	; 0x10ac <_Z31System_HandleRotaryEncoderInputv+0x108>
    10a2:	80 91 55 02 	lds	r24, 0x0255	; 0x800255 <TempSelectPreset>
    10a6:	81 50       	subi	r24, 0x01	; 1
    10a8:	80 93 55 02 	sts	0x0255, r24	; 0x800255 <TempSelectPreset>
    10ac:	81 e0       	ldi	r24, 0x01	; 1
    10ae:	90 e0       	ldi	r25, 0x00	; 0
    10b0:	90 93 5f 02 	sts	0x025F, r25	; 0x80025f <System_TempSelectOvfCnt+0x1>
    10b4:	80 93 5e 02 	sts	0x025E, r24	; 0x80025e <System_TempSelectOvfCnt>
    10b8:	8b c1       	rjmp	.+790    	; 0x13d0 <_Z31System_HandleRotaryEncoderInputv+0x42c>
    10ba:	80 91 1f 02 	lds	r24, 0x021F	; 0x80021f <RotEnc_State>
    10be:	83 30       	cpi	r24, 0x03	; 3
    10c0:	c9 f4       	brne	.+50     	; 0x10f4 <_Z31System_HandleRotaryEncoderInputv+0x150>
    10c2:	80 91 4f 02 	lds	r24, 0x024F	; 0x80024f <SystemUIMode>
    10c6:	81 11       	cpse	r24, r1
    10c8:	04 c0       	rjmp	.+8      	; 0x10d2 <_Z31System_HandleRotaryEncoderInputv+0x12e>
    10ca:	82 e0       	ldi	r24, 0x02	; 2
    10cc:	80 93 59 02 	sts	0x0259, r24	; 0x800259 <SystemState>
    10d0:	7f c1       	rjmp	.+766    	; 0x13d0 <_Z31System_HandleRotaryEncoderInputv+0x42c>
    10d2:	80 91 4f 02 	lds	r24, 0x024F	; 0x80024f <SystemUIMode>
    10d6:	81 30       	cpi	r24, 0x01	; 1
    10d8:	21 f4       	brne	.+8      	; 0x10e2 <_Z31System_HandleRotaryEncoderInputv+0x13e>
    10da:	8b e0       	ldi	r24, 0x0B	; 11
    10dc:	80 93 59 02 	sts	0x0259, r24	; 0x800259 <SystemState>
    10e0:	77 c1       	rjmp	.+750    	; 0x13d0 <_Z31System_HandleRotaryEncoderInputv+0x42c>
    10e2:	80 91 4f 02 	lds	r24, 0x024F	; 0x80024f <SystemUIMode>
    10e6:	82 30       	cpi	r24, 0x02	; 2
    10e8:	09 f0       	breq	.+2      	; 0x10ec <_Z31System_HandleRotaryEncoderInputv+0x148>
    10ea:	72 c1       	rjmp	.+740    	; 0x13d0 <_Z31System_HandleRotaryEncoderInputv+0x42c>
    10ec:	8d e0       	ldi	r24, 0x0D	; 13
    10ee:	80 93 59 02 	sts	0x0259, r24	; 0x800259 <SystemState>
    10f2:	6e c1       	rjmp	.+732    	; 0x13d0 <_Z31System_HandleRotaryEncoderInputv+0x42c>
    10f4:	80 91 1f 02 	lds	r24, 0x021F	; 0x80021f <RotEnc_State>
    10f8:	85 30       	cpi	r24, 0x05	; 5
    10fa:	09 f4       	brne	.+2      	; 0x10fe <_Z31System_HandleRotaryEncoderInputv+0x15a>
    10fc:	69 c1       	rjmp	.+722    	; 0x13d0 <_Z31System_HandleRotaryEncoderInputv+0x42c>
    10fe:	80 91 1f 02 	lds	r24, 0x021F	; 0x80021f <RotEnc_State>
    1102:	81 30       	cpi	r24, 0x01	; 1
    1104:	59 f4       	brne	.+22     	; 0x111c <_Z31System_HandleRotaryEncoderInputv+0x178>
    1106:	80 91 4f 02 	lds	r24, 0x024F	; 0x80024f <SystemUIMode>
    110a:	82 30       	cpi	r24, 0x02	; 2
    110c:	08 f0       	brcs	.+2      	; 0x1110 <_Z31System_HandleRotaryEncoderInputv+0x16c>
    110e:	60 c1       	rjmp	.+704    	; 0x13d0 <_Z31System_HandleRotaryEncoderInputv+0x42c>
    1110:	80 91 4f 02 	lds	r24, 0x024F	; 0x80024f <SystemUIMode>
    1114:	8f 5f       	subi	r24, 0xFF	; 255
    1116:	80 93 4f 02 	sts	0x024F, r24	; 0x80024f <SystemUIMode>
    111a:	5a c1       	rjmp	.+692    	; 0x13d0 <_Z31System_HandleRotaryEncoderInputv+0x42c>
    111c:	80 91 1f 02 	lds	r24, 0x021F	; 0x80021f <RotEnc_State>
    1120:	82 30       	cpi	r24, 0x02	; 2
    1122:	09 f0       	breq	.+2      	; 0x1126 <_Z31System_HandleRotaryEncoderInputv+0x182>
    1124:	55 c1       	rjmp	.+682    	; 0x13d0 <_Z31System_HandleRotaryEncoderInputv+0x42c>
    1126:	80 91 4f 02 	lds	r24, 0x024F	; 0x80024f <SystemUIMode>
    112a:	88 23       	and	r24, r24
    112c:	09 f4       	brne	.+2      	; 0x1130 <_Z31System_HandleRotaryEncoderInputv+0x18c>
    112e:	50 c1       	rjmp	.+672    	; 0x13d0 <_Z31System_HandleRotaryEncoderInputv+0x42c>
    1130:	80 91 4f 02 	lds	r24, 0x024F	; 0x80024f <SystemUIMode>
    1134:	81 50       	subi	r24, 0x01	; 1
    1136:	80 93 4f 02 	sts	0x024F, r24	; 0x80024f <SystemUIMode>
    113a:	4a c1       	rjmp	.+660    	; 0x13d0 <_Z31System_HandleRotaryEncoderInputv+0x42c>
    113c:	80 91 1f 02 	lds	r24, 0x021F	; 0x80021f <RotEnc_State>
    1140:	83 30       	cpi	r24, 0x03	; 3
    1142:	29 f5       	brne	.+74     	; 0x118e <_Z31System_HandleRotaryEncoderInputv+0x1ea>
    1144:	80 91 2a 02 	lds	r24, 0x022A	; 0x80022a <UserEditSelection>
    1148:	88 30       	cpi	r24, 0x08	; 8
    114a:	78 f4       	brcc	.+30     	; 0x116a <_Z31System_HandleRotaryEncoderInputv+0x1c6>
    114c:	20 91 2a 02 	lds	r18, 0x022A	; 0x80022a <UserEditSelection>
    1150:	e9 ec       	ldi	r30, 0xC9	; 201
    1152:	f1 e0       	ldi	r31, 0x01	; 1
    1154:	81 e0       	ldi	r24, 0x01	; 1
    1156:	90 e0       	ldi	r25, 0x00	; 0
    1158:	02 c0       	rjmp	.+4      	; 0x115e <_Z31System_HandleRotaryEncoderInputv+0x1ba>
    115a:	88 0f       	add	r24, r24
    115c:	99 1f       	adc	r25, r25
    115e:	2a 95       	dec	r18
    1160:	e2 f7       	brpl	.-8      	; 0x115a <_Z31System_HandleRotaryEncoderInputv+0x1b6>
    1162:	90 81       	ld	r25, Z
    1164:	89 27       	eor	r24, r25
    1166:	80 83       	st	Z, r24
    1168:	0f c0       	rjmp	.+30     	; 0x1188 <_Z31System_HandleRotaryEncoderInputv+0x1e4>
    116a:	20 91 2a 02 	lds	r18, 0x022A	; 0x80022a <UserEditSelection>
    116e:	e9 ec       	ldi	r30, 0xC9	; 201
    1170:	f1 e0       	ldi	r31, 0x01	; 1
    1172:	28 50       	subi	r18, 0x08	; 8
    1174:	81 e0       	ldi	r24, 0x01	; 1
    1176:	90 e0       	ldi	r25, 0x00	; 0
    1178:	02 c0       	rjmp	.+4      	; 0x117e <_Z31System_HandleRotaryEncoderInputv+0x1da>
    117a:	88 0f       	add	r24, r24
    117c:	99 1f       	adc	r25, r25
    117e:	2a 95       	dec	r18
    1180:	e2 f7       	brpl	.-8      	; 0x117a <_Z31System_HandleRotaryEncoderInputv+0x1d6>
    1182:	91 81       	ldd	r25, Z+1	; 0x01
    1184:	89 27       	eor	r24, r25
    1186:	81 83       	std	Z+1, r24	; 0x01
    1188:	0e 94 6d 07 	call	0xeda	; 0xeda <_Z20System_UpdateUI_LEDsv>
    118c:	21 c1       	rjmp	.+578    	; 0x13d0 <_Z31System_HandleRotaryEncoderInputv+0x42c>
    118e:	80 91 1f 02 	lds	r24, 0x021F	; 0x80021f <RotEnc_State>
    1192:	85 30       	cpi	r24, 0x05	; 5
    1194:	61 f5       	brne	.+88     	; 0x11ee <_Z31System_HandleRotaryEncoderInputv+0x24a>
    1196:	60 91 57 02 	lds	r22, 0x0257	; 0x800257 <ActivePreset>
    119a:	70 e0       	ldi	r23, 0x00	; 0
    119c:	66 0f       	add	r22, r22
    119e:	77 1f       	adc	r23, r23
    11a0:	66 0f       	add	r22, r22
    11a2:	77 1f       	adc	r23, r23
    11a4:	6c 59       	subi	r22, 0x9C	; 156
    11a6:	7f 4f       	sbci	r23, 0xFF	; 255
    11a8:	42 e0       	ldi	r20, 0x02	; 2
    11aa:	50 e0       	ldi	r21, 0x00	; 0
    11ac:	89 ec       	ldi	r24, 0xC9	; 201
    11ae:	91 e0       	ldi	r25, 0x01	; 1
    11b0:	0e 94 75 11 	call	0x22ea	; 0x22ea <eeprom_write_block>
    11b4:	e0 91 57 02 	lds	r30, 0x0257	; 0x800257 <ActivePreset>
    11b8:	f0 e0       	ldi	r31, 0x00	; 0
    11ba:	ee 0f       	add	r30, r30
    11bc:	ff 1f       	adc	r31, r31
    11be:	ee 0f       	add	r30, r30
    11c0:	ff 1f       	adc	r31, r31
    11c2:	e5 5d       	subi	r30, 0xD5	; 213
    11c4:	fd 4f       	sbci	r31, 0xFD	; 253
    11c6:	a9 ec       	ldi	r26, 0xC9	; 201
    11c8:	b1 e0       	ldi	r27, 0x01	; 1
    11ca:	8c 91       	ld	r24, X
    11cc:	80 83       	st	Z, r24
    11ce:	e0 91 57 02 	lds	r30, 0x0257	; 0x800257 <ActivePreset>
    11d2:	f0 e0       	ldi	r31, 0x00	; 0
    11d4:	ee 0f       	add	r30, r30
    11d6:	ff 1f       	adc	r31, r31
    11d8:	ee 0f       	add	r30, r30
    11da:	ff 1f       	adc	r31, r31
    11dc:	e5 5d       	subi	r30, 0xD5	; 213
    11de:	fd 4f       	sbci	r31, 0xFD	; 253
    11e0:	11 96       	adiw	r26, 0x01	; 1
    11e2:	8c 91       	ld	r24, X
    11e4:	81 83       	std	Z+1, r24	; 0x01
    11e6:	89 e0       	ldi	r24, 0x09	; 9
    11e8:	80 93 59 02 	sts	0x0259, r24	; 0x800259 <SystemState>
    11ec:	f1 c0       	rjmp	.+482    	; 0x13d0 <_Z31System_HandleRotaryEncoderInputv+0x42c>
    11ee:	80 91 1f 02 	lds	r24, 0x021F	; 0x80021f <RotEnc_State>
    11f2:	81 30       	cpi	r24, 0x01	; 1
    11f4:	59 f4       	brne	.+22     	; 0x120c <_Z31System_HandleRotaryEncoderInputv+0x268>
    11f6:	80 91 2a 02 	lds	r24, 0x022A	; 0x80022a <UserEditSelection>
    11fa:	8b 30       	cpi	r24, 0x0B	; 11
    11fc:	08 f0       	brcs	.+2      	; 0x1200 <_Z31System_HandleRotaryEncoderInputv+0x25c>
    11fe:	e8 c0       	rjmp	.+464    	; 0x13d0 <_Z31System_HandleRotaryEncoderInputv+0x42c>
    1200:	80 91 2a 02 	lds	r24, 0x022A	; 0x80022a <UserEditSelection>
    1204:	8f 5f       	subi	r24, 0xFF	; 255
    1206:	80 93 2a 02 	sts	0x022A, r24	; 0x80022a <UserEditSelection>
    120a:	e2 c0       	rjmp	.+452    	; 0x13d0 <_Z31System_HandleRotaryEncoderInputv+0x42c>
    120c:	80 91 1f 02 	lds	r24, 0x021F	; 0x80021f <RotEnc_State>
    1210:	82 30       	cpi	r24, 0x02	; 2
    1212:	09 f0       	breq	.+2      	; 0x1216 <_Z31System_HandleRotaryEncoderInputv+0x272>
    1214:	dd c0       	rjmp	.+442    	; 0x13d0 <_Z31System_HandleRotaryEncoderInputv+0x42c>
    1216:	80 91 2a 02 	lds	r24, 0x022A	; 0x80022a <UserEditSelection>
    121a:	88 23       	and	r24, r24
    121c:	09 f4       	brne	.+2      	; 0x1220 <_Z31System_HandleRotaryEncoderInputv+0x27c>
    121e:	d8 c0       	rjmp	.+432    	; 0x13d0 <_Z31System_HandleRotaryEncoderInputv+0x42c>
    1220:	80 91 2a 02 	lds	r24, 0x022A	; 0x80022a <UserEditSelection>
    1224:	81 50       	subi	r24, 0x01	; 1
    1226:	80 93 2a 02 	sts	0x022A, r24	; 0x80022a <UserEditSelection>
    122a:	d2 c0       	rjmp	.+420    	; 0x13d0 <_Z31System_HandleRotaryEncoderInputv+0x42c>
    122c:	80 91 1f 02 	lds	r24, 0x021F	; 0x80021f <RotEnc_State>
    1230:	83 30       	cpi	r24, 0x03	; 3
    1232:	21 f4       	brne	.+8      	; 0x123c <_Z31System_HandleRotaryEncoderInputv+0x298>
    1234:	8f e0       	ldi	r24, 0x0F	; 15
    1236:	80 93 59 02 	sts	0x0259, r24	; 0x800259 <SystemState>
    123a:	ca c0       	rjmp	.+404    	; 0x13d0 <_Z31System_HandleRotaryEncoderInputv+0x42c>
    123c:	80 91 1f 02 	lds	r24, 0x021F	; 0x80021f <RotEnc_State>
    1240:	85 30       	cpi	r24, 0x05	; 5
    1242:	21 f4       	brne	.+8      	; 0x124c <_Z31System_HandleRotaryEncoderInputv+0x2a8>
    1244:	89 e0       	ldi	r24, 0x09	; 9
    1246:	80 93 59 02 	sts	0x0259, r24	; 0x800259 <SystemState>
    124a:	c2 c0       	rjmp	.+388    	; 0x13d0 <_Z31System_HandleRotaryEncoderInputv+0x42c>
    124c:	80 91 1f 02 	lds	r24, 0x021F	; 0x80021f <RotEnc_State>
    1250:	81 30       	cpi	r24, 0x01	; 1
    1252:	59 f4       	brne	.+22     	; 0x126a <_Z31System_HandleRotaryEncoderInputv+0x2c6>
    1254:	80 93 4d 02 	sts	0x024D, r24	; 0x80024d <SetMidiEdit>
    1258:	e1 2c       	mov	r14, r1
    125a:	00 e0       	ldi	r16, 0x00	; 0
    125c:	20 e0       	ldi	r18, 0x00	; 0
    125e:	44 e7       	ldi	r20, 0x74	; 116
    1260:	65 e7       	ldi	r22, 0x75	; 117
    1262:	8f e6       	ldi	r24, 0x6F	; 111
    1264:	0e 94 0b 06 	call	0xc16	; 0xc16 <_Z16SP10281_WriteAllccchhh>
    1268:	b3 c0       	rjmp	.+358    	; 0x13d0 <_Z31System_HandleRotaryEncoderInputv+0x42c>
    126a:	80 91 1f 02 	lds	r24, 0x021F	; 0x80021f <RotEnc_State>
    126e:	82 30       	cpi	r24, 0x02	; 2
    1270:	09 f0       	breq	.+2      	; 0x1274 <_Z31System_HandleRotaryEncoderInputv+0x2d0>
    1272:	ae c0       	rjmp	.+348    	; 0x13d0 <_Z31System_HandleRotaryEncoderInputv+0x42c>
    1274:	10 92 4d 02 	sts	0x024D, r1	; 0x80024d <SetMidiEdit>
    1278:	e1 2c       	mov	r14, r1
    127a:	00 e0       	ldi	r16, 0x00	; 0
    127c:	20 e0       	ldi	r18, 0x00	; 0
    127e:	40 e2       	ldi	r20, 0x20	; 32
    1280:	6e e6       	ldi	r22, 0x6E	; 110
    1282:	89 e6       	ldi	r24, 0x69	; 105
    1284:	0e 94 0b 06 	call	0xc16	; 0xc16 <_Z16SP10281_WriteAllccchhh>
    1288:	a3 c0       	rjmp	.+326    	; 0x13d0 <_Z31System_HandleRotaryEncoderInputv+0x42c>
    128a:	80 91 1f 02 	lds	r24, 0x021F	; 0x80021f <RotEnc_State>
    128e:	83 30       	cpi	r24, 0x03	; 3
    1290:	49 f4       	brne	.+18     	; 0x12a4 <_Z31System_HandleRotaryEncoderInputv+0x300>
    1292:	10 92 5f 02 	sts	0x025F, r1	; 0x80025f <System_TempSelectOvfCnt+0x1>
    1296:	10 92 5e 02 	sts	0x025E, r1	; 0x80025e <System_TempSelectOvfCnt>
    129a:	80 91 4c 02 	lds	r24, 0x024C	; 0x80024c <TempSelectMidiPC>
    129e:	80 93 4b 02 	sts	0x024B, r24	; 0x80024b <LastTempSelectMidiPC>
    12a2:	96 c0       	rjmp	.+300    	; 0x13d0 <_Z31System_HandleRotaryEncoderInputv+0x42c>
    12a4:	80 91 1f 02 	lds	r24, 0x021F	; 0x80021f <RotEnc_State>
    12a8:	85 30       	cpi	r24, 0x05	; 5
    12aa:	d9 f5       	brne	.+118    	; 0x1322 <_Z31System_HandleRotaryEncoderInputv+0x37e>
    12ac:	80 91 4d 02 	lds	r24, 0x024D	; 0x80024d <SetMidiEdit>
    12b0:	81 11       	cpse	r24, r1
    12b2:	1a c0       	rjmp	.+52     	; 0x12e8 <_Z31System_HandleRotaryEncoderInputv+0x344>
    12b4:	e0 91 57 02 	lds	r30, 0x0257	; 0x800257 <ActivePreset>
    12b8:	80 91 4c 02 	lds	r24, 0x024C	; 0x80024c <TempSelectMidiPC>
    12bc:	f0 e0       	ldi	r31, 0x00	; 0
    12be:	ee 0f       	add	r30, r30
    12c0:	ff 1f       	adc	r31, r31
    12c2:	ee 0f       	add	r30, r30
    12c4:	ff 1f       	adc	r31, r31
    12c6:	e5 5d       	subi	r30, 0xD5	; 213
    12c8:	fd 4f       	sbci	r31, 0xFD	; 253
    12ca:	82 83       	std	Z+2, r24	; 0x02
    12cc:	60 91 4c 02 	lds	r22, 0x024C	; 0x80024c <TempSelectMidiPC>
    12d0:	80 91 57 02 	lds	r24, 0x0257	; 0x800257 <ActivePreset>
    12d4:	90 e0       	ldi	r25, 0x00	; 0
    12d6:	88 0f       	add	r24, r24
    12d8:	99 1f       	adc	r25, r25
    12da:	88 0f       	add	r24, r24
    12dc:	99 1f       	adc	r25, r25
    12de:	8a 59       	subi	r24, 0x9A	; 154
    12e0:	9f 4f       	sbci	r25, 0xFF	; 255
    12e2:	0e 94 7f 11 	call	0x22fe	; 0x22fe <eeprom_write_byte>
    12e6:	19 c0       	rjmp	.+50     	; 0x131a <_Z31System_HandleRotaryEncoderInputv+0x376>
    12e8:	e0 91 57 02 	lds	r30, 0x0257	; 0x800257 <ActivePreset>
    12ec:	80 91 4c 02 	lds	r24, 0x024C	; 0x80024c <TempSelectMidiPC>
    12f0:	f0 e0       	ldi	r31, 0x00	; 0
    12f2:	ee 0f       	add	r30, r30
    12f4:	ff 1f       	adc	r31, r31
    12f6:	ee 0f       	add	r30, r30
    12f8:	ff 1f       	adc	r31, r31
    12fa:	e5 5d       	subi	r30, 0xD5	; 213
    12fc:	fd 4f       	sbci	r31, 0xFD	; 253
    12fe:	83 83       	std	Z+3, r24	; 0x03
    1300:	60 91 4c 02 	lds	r22, 0x024C	; 0x80024c <TempSelectMidiPC>
    1304:	80 91 57 02 	lds	r24, 0x0257	; 0x800257 <ActivePreset>
    1308:	90 e0       	ldi	r25, 0x00	; 0
    130a:	88 0f       	add	r24, r24
    130c:	99 1f       	adc	r25, r25
    130e:	88 0f       	add	r24, r24
    1310:	99 1f       	adc	r25, r25
    1312:	89 59       	subi	r24, 0x99	; 153
    1314:	9f 4f       	sbci	r25, 0xFF	; 255
    1316:	0e 94 7f 11 	call	0x22fe	; 0x22fe <eeprom_write_byte>
    131a:	8d e0       	ldi	r24, 0x0D	; 13
    131c:	80 93 59 02 	sts	0x0259, r24	; 0x800259 <SystemState>
    1320:	57 c0       	rjmp	.+174    	; 0x13d0 <_Z31System_HandleRotaryEncoderInputv+0x42c>
    1322:	80 91 1f 02 	lds	r24, 0x021F	; 0x80021f <RotEnc_State>
    1326:	81 30       	cpi	r24, 0x01	; 1
    1328:	11 f5       	brne	.+68     	; 0x136e <_Z31System_HandleRotaryEncoderInputv+0x3ca>
    132a:	80 91 4c 02 	lds	r24, 0x024C	; 0x80024c <TempSelectMidiPC>
    132e:	8f 37       	cpi	r24, 0x7F	; 127
    1330:	29 f0       	breq	.+10     	; 0x133c <_Z31System_HandleRotaryEncoderInputv+0x398>
    1332:	80 91 4c 02 	lds	r24, 0x024C	; 0x80024c <TempSelectMidiPC>
    1336:	8f 5f       	subi	r24, 0xFF	; 255
    1338:	80 93 4c 02 	sts	0x024C, r24	; 0x80024c <TempSelectMidiPC>
    133c:	80 91 4c 02 	lds	r24, 0x024C	; 0x80024c <TempSelectMidiPC>
    1340:	8f 3f       	cpi	r24, 0xFF	; 255
    1342:	49 f4       	brne	.+18     	; 0x1356 <_Z31System_HandleRotaryEncoderInputv+0x3b2>
    1344:	e1 2c       	mov	r14, r1
    1346:	00 e0       	ldi	r16, 0x00	; 0
    1348:	20 e0       	ldi	r18, 0x00	; 0
    134a:	46 e6       	ldi	r20, 0x66	; 102
    134c:	66 e6       	ldi	r22, 0x66	; 102
    134e:	8f e6       	ldi	r24, 0x6F	; 111
    1350:	0e 94 0b 06 	call	0xc16	; 0xc16 <_Z16SP10281_WriteAllccchhh>
    1354:	05 c0       	rjmp	.+10     	; 0x1360 <_Z31System_HandleRotaryEncoderInputv+0x3bc>
    1356:	80 91 4c 02 	lds	r24, 0x024C	; 0x80024c <TempSelectMidiPC>
    135a:	90 e0       	ldi	r25, 0x00	; 0
    135c:	0e 94 28 06 	call	0xc50	; 0xc50 <_Z19SP10281_WriteNumbers>
    1360:	81 e0       	ldi	r24, 0x01	; 1
    1362:	90 e0       	ldi	r25, 0x00	; 0
    1364:	90 93 5f 02 	sts	0x025F, r25	; 0x80025f <System_TempSelectOvfCnt+0x1>
    1368:	80 93 5e 02 	sts	0x025E, r24	; 0x80025e <System_TempSelectOvfCnt>
    136c:	31 c0       	rjmp	.+98     	; 0x13d0 <_Z31System_HandleRotaryEncoderInputv+0x42c>
    136e:	80 91 1f 02 	lds	r24, 0x021F	; 0x80021f <RotEnc_State>
    1372:	82 30       	cpi	r24, 0x02	; 2
    1374:	69 f5       	brne	.+90     	; 0x13d0 <_Z31System_HandleRotaryEncoderInputv+0x42c>
    1376:	80 91 4c 02 	lds	r24, 0x024C	; 0x80024c <TempSelectMidiPC>
    137a:	88 23       	and	r24, r24
    137c:	24 f0       	brlt	.+8      	; 0x1386 <_Z31System_HandleRotaryEncoderInputv+0x3e2>
    137e:	80 91 4c 02 	lds	r24, 0x024C	; 0x80024c <TempSelectMidiPC>
    1382:	81 11       	cpse	r24, r1
    1384:	04 c0       	rjmp	.+8      	; 0x138e <_Z31System_HandleRotaryEncoderInputv+0x3ea>
    1386:	8f ef       	ldi	r24, 0xFF	; 255
    1388:	80 93 4c 02 	sts	0x024C, r24	; 0x80024c <TempSelectMidiPC>
    138c:	09 c0       	rjmp	.+18     	; 0x13a0 <_Z31System_HandleRotaryEncoderInputv+0x3fc>
    138e:	80 91 4c 02 	lds	r24, 0x024C	; 0x80024c <TempSelectMidiPC>
    1392:	88 23       	and	r24, r24
    1394:	29 f0       	breq	.+10     	; 0x13a0 <_Z31System_HandleRotaryEncoderInputv+0x3fc>
    1396:	80 91 4c 02 	lds	r24, 0x024C	; 0x80024c <TempSelectMidiPC>
    139a:	81 50       	subi	r24, 0x01	; 1
    139c:	80 93 4c 02 	sts	0x024C, r24	; 0x80024c <TempSelectMidiPC>
    13a0:	80 91 4c 02 	lds	r24, 0x024C	; 0x80024c <TempSelectMidiPC>
    13a4:	8f 3f       	cpi	r24, 0xFF	; 255
    13a6:	49 f4       	brne	.+18     	; 0x13ba <_Z31System_HandleRotaryEncoderInputv+0x416>
    13a8:	e1 2c       	mov	r14, r1
    13aa:	00 e0       	ldi	r16, 0x00	; 0
    13ac:	20 e0       	ldi	r18, 0x00	; 0
    13ae:	46 e6       	ldi	r20, 0x66	; 102
    13b0:	66 e6       	ldi	r22, 0x66	; 102
    13b2:	8f e6       	ldi	r24, 0x6F	; 111
    13b4:	0e 94 0b 06 	call	0xc16	; 0xc16 <_Z16SP10281_WriteAllccchhh>
    13b8:	05 c0       	rjmp	.+10     	; 0x13c4 <_Z31System_HandleRotaryEncoderInputv+0x420>
    13ba:	80 91 4c 02 	lds	r24, 0x024C	; 0x80024c <TempSelectMidiPC>
    13be:	90 e0       	ldi	r25, 0x00	; 0
    13c0:	0e 94 28 06 	call	0xc50	; 0xc50 <_Z19SP10281_WriteNumbers>
    13c4:	81 e0       	ldi	r24, 0x01	; 1
    13c6:	90 e0       	ldi	r25, 0x00	; 0
    13c8:	90 93 5f 02 	sts	0x025F, r25	; 0x80025f <System_TempSelectOvfCnt+0x1>
    13cc:	80 93 5e 02 	sts	0x025E, r24	; 0x80025e <System_TempSelectOvfCnt>
    13d0:	0f 91       	pop	r16
    13d2:	ef 90       	pop	r14
    13d4:	08 95       	ret

000013d6 <_Z19System_ChangePresetv>:

void System_ChangePreset()
{
    13d6:	cf 93       	push	r28
    13d8:	df 93       	push	r29
    13da:	00 d0       	rcall	.+0      	; 0x13dc <_Z19System_ChangePresetv+0x6>
    13dc:	cd b7       	in	r28, 0x3d	; 61
    13de:	de b7       	in	r29, 0x3e	; 62
	LoopModePreset = PresetTable[ActivePreset];
    13e0:	e0 91 57 02 	lds	r30, 0x0257	; 0x800257 <ActivePreset>
    13e4:	f0 e0       	ldi	r31, 0x00	; 0
    13e6:	ee 0f       	add	r30, r30
    13e8:	ff 1f       	adc	r31, r31
    13ea:	ee 0f       	add	r30, r30
    13ec:	ff 1f       	adc	r31, r31
    13ee:	e5 5d       	subi	r30, 0xD5	; 213
    13f0:	fd 4f       	sbci	r31, 0xFD	; 253
    13f2:	80 81       	ld	r24, Z
    13f4:	91 81       	ldd	r25, Z+1	; 0x01
    13f6:	a2 81       	ldd	r26, Z+2	; 0x02
    13f8:	b3 81       	ldd	r27, Z+3	; 0x03
    13fa:	80 93 c9 01 	sts	0x01C9, r24	; 0x8001c9 <LoopModePreset>
    13fe:	90 93 ca 01 	sts	0x01CA, r25	; 0x8001ca <LoopModePreset+0x1>
    1402:	a0 93 cb 01 	sts	0x01CB, r26	; 0x8001cb <LoopModePreset+0x2>
    1406:	b0 93 cc 01 	sts	0x01CC, r27	; 0x8001cc <LoopModePreset+0x3>
	
	/* Update relays */
	//System_UpdateUI_Relays();
				
	/* Send MIDI PC message if MIDI Out is set for preset */
	if (PresetTable[ActivePreset].MIDI_PC_Out != MIDI_PC_OFF)
    140a:	e0 91 57 02 	lds	r30, 0x0257	; 0x800257 <ActivePreset>
    140e:	f0 e0       	ldi	r31, 0x00	; 0
    1410:	ee 0f       	add	r30, r30
    1412:	ff 1f       	adc	r31, r31
    1414:	ee 0f       	add	r30, r30
    1416:	ff 1f       	adc	r31, r31
    1418:	e5 5d       	subi	r30, 0xD5	; 213
    141a:	fd 4f       	sbci	r31, 0xFD	; 253
    141c:	83 81       	ldd	r24, Z+3	; 0x03
    141e:	8f 3f       	cpi	r24, 0xFF	; 255
    1420:	61 f0       	breq	.+24     	; 0x143a <_Z19System_ChangePresetv+0x64>
	{
		MIDI_TransmitProgramChange(PresetTable[ActivePreset].MIDI_PC_Out);
    1422:	e0 91 57 02 	lds	r30, 0x0257	; 0x800257 <ActivePreset>
    1426:	f0 e0       	ldi	r31, 0x00	; 0
    1428:	ee 0f       	add	r30, r30
    142a:	ff 1f       	adc	r31, r31
    142c:	ee 0f       	add	r30, r30
    142e:	ff 1f       	adc	r31, r31
    1430:	e5 5d       	subi	r30, 0xD5	; 213
    1432:	fd 4f       	sbci	r31, 0xFD	; 253
    1434:	83 81       	ldd	r24, Z+3	; 0x03
    1436:	0e 94 ce 02 	call	0x59c	; 0x59c <_Z26MIDI_TransmitProgramChangeh>
	}
				
	/* Update Pedal display */
	uint8_t tmp[2] = {0};
    143a:	1a 82       	std	Y+2, r1	; 0x02
    143c:	19 82       	std	Y+1, r1	; 0x01
	PedalCom_QueueCommand(UpdateTunerLEDs, 2, (uint8_t*)tmp);
    143e:	ae 01       	movw	r20, r28
    1440:	4f 5f       	subi	r20, 0xFF	; 255
    1442:	5f 4f       	sbci	r21, 0xFF	; 255
    1444:	62 e0       	ldi	r22, 0x02	; 2
    1446:	83 ed       	ldi	r24, 0xD3	; 211
    1448:	0e 94 3a 03 	call	0x674	; 0x674 <_Z21PedalCom_QueueCommand3CMDhPh>
	PedalCom_QueueCommand(Update7segments, 4, (uint8_t*)"Pre ");
    144c:	4d ec       	ldi	r20, 0xCD	; 205
    144e:	51 e0       	ldi	r21, 0x01	; 1
    1450:	64 e0       	ldi	r22, 0x04	; 4
    1452:	87 ed       	ldi	r24, 0xD7	; 215
    1454:	0e 94 3a 03 	call	0x674	; 0x674 <_Z21PedalCom_QueueCommand3CMDhPh>
	
	tmp[0] = (1 << ActivePreset);
    1458:	90 91 57 02 	lds	r25, 0x0257	; 0x800257 <ActivePreset>
    145c:	81 e0       	ldi	r24, 0x01	; 1
    145e:	01 c0       	rjmp	.+2      	; 0x1462 <_Z19System_ChangePresetv+0x8c>
    1460:	88 0f       	add	r24, r24
    1462:	9a 95       	dec	r25
    1464:	ea f7       	brpl	.-6      	; 0x1460 <_Z19System_ChangePresetv+0x8a>
    1466:	89 83       	std	Y+1, r24	; 0x01
	PedalCom_QueueCommand(UpdatePresetLoopLEDs, 1, (uint8_t*)tmp);
    1468:	ae 01       	movw	r20, r28
    146a:	4f 5f       	subi	r20, 0xFF	; 255
    146c:	5f 4f       	sbci	r21, 0xFF	; 255
    146e:	61 e0       	ldi	r22, 0x01	; 1
    1470:	80 ed       	ldi	r24, 0xD0	; 208
    1472:	0e 94 3a 03 	call	0x674	; 0x674 <_Z21PedalCom_QueueCommand3CMDhPh>
				
	/* Update 7-segment display */
	SP10281_WriteNumber(ActivePreset + 1);
    1476:	80 91 57 02 	lds	r24, 0x0257	; 0x800257 <ActivePreset>
    147a:	90 e0       	ldi	r25, 0x00	; 0
    147c:	01 96       	adiw	r24, 0x01	; 1
    147e:	0e 94 28 06 	call	0xc50	; 0xc50 <_Z19SP10281_WriteNumbers>
				
	/* Update UI LEDs */
	System_UpdateUI_LEDs();
    1482:	0e 94 6d 07 	call	0xeda	; 0xeda <_Z20System_UpdateUI_LEDsv>
}
    1486:	0f 90       	pop	r0
    1488:	0f 90       	pop	r0
    148a:	df 91       	pop	r29
    148c:	cf 91       	pop	r28
    148e:	08 95       	ret

00001490 <_Z21System_UpdateLoopCtrlv>:

void System_UpdateLoopCtrl()
{
    1490:	cf 93       	push	r28
    1492:	df 93       	push	r29
    1494:	00 d0       	rcall	.+0      	; 0x1496 <_Z21System_UpdateLoopCtrlv+0x6>
    1496:	00 d0       	rcall	.+0      	; 0x1498 <_Z21System_UpdateLoopCtrlv+0x8>
    1498:	cd b7       	in	r28, 0x3d	; 61
    149a:	de b7       	in	r29, 0x3e	; 62
	/* Update relays */
	//System_UpdateUI_Relays();
	
	/* Update Pedal display */
	uint8_t tmp[NUMBER_OF_CTRL_SWITCHES] = {0};
    149c:	19 82       	std	Y+1, r1	; 0x01
    149e:	1a 82       	std	Y+2, r1	; 0x02
    14a0:	1b 82       	std	Y+3, r1	; 0x03
    14a2:	1c 82       	std	Y+4, r1	; 0x04
	PedalCom_QueueCommand(UpdateTunerLEDs, 2, (uint8_t*)&tmp);
    14a4:	ae 01       	movw	r20, r28
    14a6:	4f 5f       	subi	r20, 0xFF	; 255
    14a8:	5f 4f       	sbci	r21, 0xFF	; 255
    14aa:	62 e0       	ldi	r22, 0x02	; 2
    14ac:	83 ed       	ldi	r24, 0xD3	; 211
    14ae:	0e 94 3a 03 	call	0x674	; 0x674 <_Z21PedalCom_QueueCommand3CMDhPh>
	PedalCom_QueueCommand(UpdatePresetLoopLEDs, 1, (uint8_t*)&LoopModePreset.Active_Loops);
    14b2:	49 ec       	ldi	r20, 0xC9	; 201
    14b4:	51 e0       	ldi	r21, 0x01	; 1
    14b6:	61 e0       	ldi	r22, 0x01	; 1
    14b8:	80 ed       	ldi	r24, 0xD0	; 208
    14ba:	0e 94 3a 03 	call	0x674	; 0x674 <_Z21PedalCom_QueueCommand3CMDhPh>
	
	for (uint8_t i = 0; i < NUMBER_OF_CTRL_SWITCHES; i++)
	{
		if (LoopModePreset.Active_CtrlSwitches & (1 << i))
    14be:	40 91 ca 01 	lds	r20, 0x01CA	; 0x8001ca <LoopModePreset+0x1>
    14c2:	50 e0       	ldi	r21, 0x00	; 0
    14c4:	fe 01       	movw	r30, r28
    14c6:	31 96       	adiw	r30, 0x01	; 1
    14c8:	80 e0       	ldi	r24, 0x00	; 0
    14ca:	90 e0       	ldi	r25, 0x00	; 0
		{
			tmp[i] = '/';
		}
		else
		{
			tmp[i] = '_';
    14cc:	7f e5       	ldi	r23, 0x5F	; 95
	
	for (uint8_t i = 0; i < NUMBER_OF_CTRL_SWITCHES; i++)
	{
		if (LoopModePreset.Active_CtrlSwitches & (1 << i))
		{
			tmp[i] = '/';
    14ce:	6f e2       	ldi	r22, 0x2F	; 47
	PedalCom_QueueCommand(UpdateTunerLEDs, 2, (uint8_t*)&tmp);
	PedalCom_QueueCommand(UpdatePresetLoopLEDs, 1, (uint8_t*)&LoopModePreset.Active_Loops);
	
	for (uint8_t i = 0; i < NUMBER_OF_CTRL_SWITCHES; i++)
	{
		if (LoopModePreset.Active_CtrlSwitches & (1 << i))
    14d0:	9a 01       	movw	r18, r20
    14d2:	08 2e       	mov	r0, r24
    14d4:	02 c0       	rjmp	.+4      	; 0x14da <_Z21System_UpdateLoopCtrlv+0x4a>
    14d6:	35 95       	asr	r19
    14d8:	27 95       	ror	r18
    14da:	0a 94       	dec	r0
    14dc:	e2 f7       	brpl	.-8      	; 0x14d6 <_Z21System_UpdateLoopCtrlv+0x46>
    14de:	20 ff       	sbrs	r18, 0
    14e0:	02 c0       	rjmp	.+4      	; 0x14e6 <_Z21System_UpdateLoopCtrlv+0x56>
		{
			tmp[i] = '/';
    14e2:	60 83       	st	Z, r22
    14e4:	01 c0       	rjmp	.+2      	; 0x14e8 <_Z21System_UpdateLoopCtrlv+0x58>
		}
		else
		{
			tmp[i] = '_';
    14e6:	70 83       	st	Z, r23
    14e8:	01 96       	adiw	r24, 0x01	; 1
    14ea:	31 96       	adiw	r30, 0x01	; 1
	/* Update Pedal display */
	uint8_t tmp[NUMBER_OF_CTRL_SWITCHES] = {0};
	PedalCom_QueueCommand(UpdateTunerLEDs, 2, (uint8_t*)&tmp);
	PedalCom_QueueCommand(UpdatePresetLoopLEDs, 1, (uint8_t*)&LoopModePreset.Active_Loops);
	
	for (uint8_t i = 0; i < NUMBER_OF_CTRL_SWITCHES; i++)
    14ec:	84 30       	cpi	r24, 0x04	; 4
    14ee:	91 05       	cpc	r25, r1
    14f0:	79 f7       	brne	.-34     	; 0x14d0 <_Z21System_UpdateLoopCtrlv+0x40>
		{
			tmp[i] = '_';
		}
	}
	
	PedalCom_QueueCommand(Update7segments, 4, (uint8_t*)tmp);
    14f2:	ae 01       	movw	r20, r28
    14f4:	4f 5f       	subi	r20, 0xFF	; 255
    14f6:	5f 4f       	sbci	r21, 0xFF	; 255
    14f8:	64 e0       	ldi	r22, 0x04	; 4
    14fa:	87 ed       	ldi	r24, 0xD7	; 215
    14fc:	0e 94 3a 03 	call	0x674	; 0x674 <_Z21PedalCom_QueueCommand3CMDhPh>
	
	/* Update UI LEDs */
	System_UpdateUI_LEDs();
    1500:	0e 94 6d 07 	call	0xeda	; 0xeda <_Z20System_UpdateUI_LEDsv>
}
    1504:	0f 90       	pop	r0
    1506:	0f 90       	pop	r0
    1508:	0f 90       	pop	r0
    150a:	0f 90       	pop	r0
    150c:	df 91       	pop	r29
    150e:	cf 91       	pop	r28
    1510:	08 95       	ret

00001512 <_Z10System_Runv>:

volatile uint8_t UserEditSelection = 0;
volatile uint8_t LastUserEditSelection = 0;

void System_Run()
{
    1512:	ef 92       	push	r14
    1514:	0f 93       	push	r16
	switch (SystemState)
    1516:	e0 91 59 02 	lds	r30, 0x0259	; 0x800259 <SystemState>
    151a:	8e 2f       	mov	r24, r30
    151c:	90 e0       	ldi	r25, 0x00	; 0
    151e:	80 31       	cpi	r24, 0x10	; 16
    1520:	91 05       	cpc	r25, r1
    1522:	08 f0       	brcs	.+2      	; 0x1526 <_Z10System_Runv+0x14>
    1524:	3b c2       	rjmp	.+1142   	; 0x199c <_Z10System_Runv+0x48a>
    1526:	fc 01       	movw	r30, r24
    1528:	e2 5b       	subi	r30, 0xB2	; 178
    152a:	ff 4f       	sbci	r31, 0xFF	; 255
    152c:	0c 94 29 11 	jmp	0x2252	; 0x2252 <__tablejump2__>
	{
		case BOOT_UP:
			/* Fill preset table from EEPROM */
			eeprom_read_block((void*)PresetTable, (void*)EEPROM_PRESETS_BASE_ADDR, sizeof(Preset) * NUMBER_OF_PRESETS);
    1530:	40 e2       	ldi	r20, 0x20	; 32
    1532:	50 e0       	ldi	r21, 0x00	; 0
    1534:	64 e6       	ldi	r22, 0x64	; 100
    1536:	70 e0       	ldi	r23, 0x00	; 0
    1538:	8b e2       	ldi	r24, 0x2B	; 43
    153a:	92 e0       	ldi	r25, 0x02	; 2
    153c:	0e 94 5d 11 	call	0x22ba	; 0x22ba <eeprom_read_block>
			
			/* Get device MIDI channel from EEPROM */
			System_MidiChannel = (MIDI_Channel)eeprom_read_byte((uint8_t*)EEPROM_MIDI_CH_ADDR);
    1540:	80 e0       	ldi	r24, 0x00	; 0
    1542:	90 e0       	ldi	r25, 0x00	; 0
    1544:	0e 94 6d 11 	call	0x22da	; 0x22da <eeprom_read_byte>
    1548:	80 93 50 02 	sts	0x0250, r24	; 0x800250 <System_MidiChannel>
			
			if (System_MidiChannel > MIDI_CH_MAX)
    154c:	80 91 50 02 	lds	r24, 0x0250	; 0x800250 <System_MidiChannel>
    1550:	81 31       	cpi	r24, 0x11	; 17
    1552:	40 f0       	brcs	.+16     	; 0x1564 <_Z10System_Runv+0x52>
			{
				System_MidiChannel = MIDI_CH_OMNI;
    1554:	10 92 50 02 	sts	0x0250, r1	; 0x800250 <System_MidiChannel>
				eeprom_write_byte((uint8_t*)EEPROM_MIDI_CH_ADDR, System_MidiChannel);
    1558:	60 91 50 02 	lds	r22, 0x0250	; 0x800250 <System_MidiChannel>
    155c:	80 e0       	ldi	r24, 0x00	; 0
    155e:	90 e0       	ldi	r25, 0x00	; 0
    1560:	0e 94 7f 11 	call	0x22fe	; 0x22fe <eeprom_write_byte>
			}
			
			/* Check if button pressed for MIDI channel edit */
			if (RotaryEncoder_IsPressed())
    1564:	0e 94 80 05 	call	0xb00	; 0xb00 <_Z23RotaryEncoder_IsPressedv>
    1568:	88 23       	and	r24, r24
    156a:	11 f1       	breq	.+68     	; 0x15b0 <_Z10System_Runv+0x9e>
			{
				/* Update UI mode LEDs */
				ModeRunLED.Clear();
    156c:	82 ed       	ldi	r24, 0xD2	; 210
    156e:	93 e0       	ldi	r25, 0x03	; 3
    1570:	0e 94 e7 01 	call	0x3ce	; 0x3ce <_ZN10MCP_Output5ClearEv>
				ModeEditPresetLED.Clear();
    1574:	8e ec       	ldi	r24, 0xCE	; 206
    1576:	93 e0       	ldi	r25, 0x03	; 3
    1578:	0e 94 e7 01 	call	0x3ce	; 0x3ce <_ZN10MCP_Output5ClearEv>
				ModeEditMidiLED.Set();
    157c:	8a ec       	ldi	r24, 0xCA	; 202
    157e:	93 e0       	ldi	r25, 0x03	; 3
    1580:	0e 94 aa 01 	call	0x354	; 0x354 <_ZN10MCP_Output3SetEv>
				
				if (System_MidiChannel == MIDI_CH_OMNI)
    1584:	80 91 50 02 	lds	r24, 0x0250	; 0x800250 <System_MidiChannel>
    1588:	81 11       	cpse	r24, r1
    158a:	09 c0       	rjmp	.+18     	; 0x159e <_Z10System_Runv+0x8c>
				{
					SP10281_WriteAll('o', 'm', 'n', 0, 0, 0);
    158c:	e1 2c       	mov	r14, r1
    158e:	00 e0       	ldi	r16, 0x00	; 0
    1590:	20 e0       	ldi	r18, 0x00	; 0
    1592:	4e e6       	ldi	r20, 0x6E	; 110
    1594:	6d e6       	ldi	r22, 0x6D	; 109
    1596:	8f e6       	ldi	r24, 0x6F	; 111
    1598:	0e 94 0b 06 	call	0xc16	; 0xc16 <_Z16SP10281_WriteAllccchhh>
    159c:	05 c0       	rjmp	.+10     	; 0x15a8 <_Z10System_Runv+0x96>
				} 
				else
				{
					SP10281_WriteNumber(System_MidiChannel);
    159e:	80 91 50 02 	lds	r24, 0x0250	; 0x800250 <System_MidiChannel>
    15a2:	90 e0       	ldi	r25, 0x00	; 0
    15a4:	0e 94 28 06 	call	0xc50	; 0xc50 <_Z19SP10281_WriteNumbers>
				}
				
				SystemState = EDIT_MIDI_CHANNEL;
    15a8:	81 e0       	ldi	r24, 0x01	; 1
    15aa:	80 93 59 02 	sts	0x0259, r24	; 0x800259 <SystemState>
    15ae:	f6 c1       	rjmp	.+1004   	; 0x199c <_Z10System_Runv+0x48a>
			} 
			else
			{
				SystemState = INITIALIZE_SYSTEM;
    15b0:	82 e0       	ldi	r24, 0x02	; 2
    15b2:	80 93 59 02 	sts	0x0259, r24	; 0x800259 <SystemState>
    15b6:	f2 c1       	rjmp	.+996    	; 0x199c <_Z10System_Runv+0x48a>
			
			break;
		
		case EDIT_MIDI_CHANNEL:
			/* If user is selecting new MIDI channel */
			if (TempSelectMidiChannel != LastTempSelectMidiChannel)
    15b8:	90 91 52 02 	lds	r25, 0x0252	; 0x800252 <TempSelectMidiChannel>
    15bc:	80 91 51 02 	lds	r24, 0x0251	; 0x800251 <LastTempSelectMidiChannel>
    15c0:	98 17       	cp	r25, r24
    15c2:	c1 f0       	breq	.+48     	; 0x15f4 <_Z10System_Runv+0xe2>
			{
				/* Write selected MIDI channel to 7-segment display */
				if (TempSelectMidiChannel == MIDI_CH_OMNI)
    15c4:	80 91 52 02 	lds	r24, 0x0252	; 0x800252 <TempSelectMidiChannel>
    15c8:	81 11       	cpse	r24, r1
    15ca:	09 c0       	rjmp	.+18     	; 0x15de <_Z10System_Runv+0xcc>
				{
					SP10281_WriteAll('o', 'm', 'n', 0, 0, 0);
    15cc:	e1 2c       	mov	r14, r1
    15ce:	00 e0       	ldi	r16, 0x00	; 0
    15d0:	20 e0       	ldi	r18, 0x00	; 0
    15d2:	4e e6       	ldi	r20, 0x6E	; 110
    15d4:	6d e6       	ldi	r22, 0x6D	; 109
    15d6:	8f e6       	ldi	r24, 0x6F	; 111
    15d8:	0e 94 0b 06 	call	0xc16	; 0xc16 <_Z16SP10281_WriteAllccchhh>
    15dc:	05 c0       	rjmp	.+10     	; 0x15e8 <_Z10System_Runv+0xd6>
				}
				else
				{
					SP10281_WriteNumber(TempSelectMidiChannel);
    15de:	80 91 52 02 	lds	r24, 0x0252	; 0x800252 <TempSelectMidiChannel>
    15e2:	90 e0       	ldi	r25, 0x00	; 0
    15e4:	0e 94 28 06 	call	0xc50	; 0xc50 <_Z19SP10281_WriteNumbers>
				}
				
				/* Start timer */
				System_TempSelectOvfCnt = 1;
    15e8:	81 e0       	ldi	r24, 0x01	; 1
    15ea:	90 e0       	ldi	r25, 0x00	; 0
    15ec:	90 93 5f 02 	sts	0x025F, r25	; 0x80025f <System_TempSelectOvfCnt+0x1>
    15f0:	80 93 5e 02 	sts	0x025E, r24	; 0x80025e <System_TempSelectOvfCnt>
			}
			
			LastTempSelectMidiChannel = TempSelectMidiChannel;
    15f4:	80 91 52 02 	lds	r24, 0x0252	; 0x800252 <TempSelectMidiChannel>
    15f8:	80 93 51 02 	sts	0x0251, r24	; 0x800251 <LastTempSelectMidiChannel>
			
			break;
    15fc:	cf c1       	rjmp	.+926    	; 0x199c <_Z10System_Runv+0x48a>
		
		case INITIALIZE_SYSTEM:			
			/* Write active preset to 7-segment display */
			SP10281_WriteNumber(ActivePreset+1);
    15fe:	80 91 57 02 	lds	r24, 0x0257	; 0x800257 <ActivePreset>
    1602:	90 e0       	ldi	r25, 0x00	; 0
    1604:	01 96       	adiw	r24, 0x01	; 1
    1606:	0e 94 28 06 	call	0xc50	; 0xc50 <_Z19SP10281_WriteNumbers>
			
			/* Update mode LEDs */
			ModeRunLED.Set();
    160a:	82 ed       	ldi	r24, 0xD2	; 210
    160c:	93 e0       	ldi	r25, 0x03	; 3
    160e:	0e 94 aa 01 	call	0x354	; 0x354 <_ZN10MCP_Output3SetEv>
			ModeEditPresetLED.Clear();
    1612:	8e ec       	ldi	r24, 0xCE	; 206
    1614:	93 e0       	ldi	r25, 0x03	; 3
    1616:	0e 94 e7 01 	call	0x3ce	; 0x3ce <_ZN10MCP_Output5ClearEv>
			ModeEditMidiLED.Clear();
    161a:	8a ec       	ldi	r24, 0xCA	; 202
    161c:	93 e0       	ldi	r25, 0x03	; 3
    161e:	0e 94 e7 01 	call	0x3ce	; 0x3ce <_ZN10MCP_Output5ClearEv>
			
			/* Set appropriate System State */
			if (SystemRunMode == RUN_PRESET_MODE)
    1622:	80 91 53 02 	lds	r24, 0x0253	; 0x800253 <SystemRunMode>
    1626:	81 11       	cpse	r24, r1
    1628:	04 c0       	rjmp	.+8      	; 0x1632 <_Z10System_Runv+0x120>
			{
				SystemState = ENTER_RUN_PRESET_CTRL;
    162a:	83 e0       	ldi	r24, 0x03	; 3
    162c:	80 93 59 02 	sts	0x0259, r24	; 0x800259 <SystemState>
    1630:	b5 c1       	rjmp	.+874    	; 0x199c <_Z10System_Runv+0x48a>
			}
			else if (SystemRunMode == RUN_LOOP_MODE)
    1632:	80 91 53 02 	lds	r24, 0x0253	; 0x800253 <SystemRunMode>
    1636:	81 30       	cpi	r24, 0x01	; 1
    1638:	09 f0       	breq	.+2      	; 0x163c <_Z10System_Runv+0x12a>
    163a:	b0 c1       	rjmp	.+864    	; 0x199c <_Z10System_Runv+0x48a>
			{
				SystemState = ENTER_RUN_LOOP_CTRL;
    163c:	85 e0       	ldi	r24, 0x05	; 5
    163e:	80 93 59 02 	sts	0x0259, r24	; 0x800259 <SystemState>
    1642:	ac c1       	rjmp	.+856    	; 0x199c <_Z10System_Runv+0x48a>
			
			break;
			
		case ENTER_RUN_PRESET_CTRL:
			/* Update state variables */
			SystemRunMode = RUN_PRESET_MODE;
    1644:	10 92 53 02 	sts	0x0253, r1	; 0x800253 <SystemRunMode>
			SystemState = RUN_PRESET_CTRL;
    1648:	84 e0       	ldi	r24, 0x04	; 4
    164a:	80 93 59 02 	sts	0x0259, r24	; 0x800259 <SystemState>
			
			/* Stop timer */
			System_TempSelectOvfCnt = 0;
    164e:	10 92 5f 02 	sts	0x025F, r1	; 0x80025f <System_TempSelectOvfCnt+0x1>
    1652:	10 92 5e 02 	sts	0x025E, r1	; 0x80025e <System_TempSelectOvfCnt>
			
			/* Change LastActivePreset to force update */
			LastActivePreset = System_Preset(ActivePreset ^ (1 << 0));
    1656:	90 91 57 02 	lds	r25, 0x0257	; 0x800257 <ActivePreset>
    165a:	81 e0       	ldi	r24, 0x01	; 1
    165c:	89 27       	eor	r24, r25
    165e:	80 93 56 02 	sts	0x0256, r24	; 0x800256 <LastActivePreset>
			
		case RUN_PRESET_CTRL:
			/* If active preset has changed since last cycle then update system */
			if (ActivePreset != LastActivePreset)
    1662:	90 91 57 02 	lds	r25, 0x0257	; 0x800257 <ActivePreset>
    1666:	80 91 56 02 	lds	r24, 0x0256	; 0x800256 <LastActivePreset>
    166a:	98 13       	cpse	r25, r24
			{
				System_ChangePreset();
    166c:	0e 94 eb 09 	call	0x13d6	; 0x13d6 <_Z19System_ChangePresetv>
			}
			
			/* If user is browsing presets */
			if (TempSelectPreset != LastTempSelectPreset)
    1670:	90 91 55 02 	lds	r25, 0x0255	; 0x800255 <TempSelectPreset>
    1674:	80 91 54 02 	lds	r24, 0x0254	; 0x800254 <LastTempSelectPreset>
    1678:	98 17       	cp	r25, r24
    167a:	09 f4       	brne	.+2      	; 0x167e <_Z10System_Runv+0x16c>
    167c:	8f c1       	rjmp	.+798    	; 0x199c <_Z10System_Runv+0x48a>
			{
				/* Update 7-segment display */
				SP10281_WriteNumber(TempSelectPreset + 1);
    167e:	80 91 55 02 	lds	r24, 0x0255	; 0x800255 <TempSelectPreset>
    1682:	90 e0       	ldi	r25, 0x00	; 0
    1684:	01 96       	adiw	r24, 0x01	; 1
    1686:	0e 94 28 06 	call	0xc50	; 0xc50 <_Z19SP10281_WriteNumbers>
								
				/* Update UI LEDs */
				LoopModePreset = PresetTable[TempSelectPreset];
    168a:	e0 91 55 02 	lds	r30, 0x0255	; 0x800255 <TempSelectPreset>
    168e:	f0 e0       	ldi	r31, 0x00	; 0
    1690:	ee 0f       	add	r30, r30
    1692:	ff 1f       	adc	r31, r31
    1694:	ee 0f       	add	r30, r30
    1696:	ff 1f       	adc	r31, r31
    1698:	e5 5d       	subi	r30, 0xD5	; 213
    169a:	fd 4f       	sbci	r31, 0xFD	; 253
    169c:	80 81       	ld	r24, Z
    169e:	91 81       	ldd	r25, Z+1	; 0x01
    16a0:	a2 81       	ldd	r26, Z+2	; 0x02
    16a2:	b3 81       	ldd	r27, Z+3	; 0x03
    16a4:	80 93 c9 01 	sts	0x01C9, r24	; 0x8001c9 <LoopModePreset>
    16a8:	90 93 ca 01 	sts	0x01CA, r25	; 0x8001ca <LoopModePreset+0x1>
    16ac:	a0 93 cb 01 	sts	0x01CB, r26	; 0x8001cb <LoopModePreset+0x2>
    16b0:	b0 93 cc 01 	sts	0x01CC, r27	; 0x8001cc <LoopModePreset+0x3>
				System_UpdateUI_LEDs();
    16b4:	0e 94 6d 07 	call	0xeda	; 0xeda <_Z20System_UpdateUI_LEDsv>
    16b8:	71 c1       	rjmp	.+738    	; 0x199c <_Z10System_Runv+0x48a>
			
			break;
		
		case ENTER_RUN_LOOP_CTRL:
			/* Update 7-segment display */
			SP10281_WriteAll('M', 'L', 'C', 0, 0, 0);
    16ba:	e1 2c       	mov	r14, r1
    16bc:	00 e0       	ldi	r16, 0x00	; 0
    16be:	20 e0       	ldi	r18, 0x00	; 0
    16c0:	43 e4       	ldi	r20, 0x43	; 67
    16c2:	6c e4       	ldi	r22, 0x4C	; 76
    16c4:	8d e4       	ldi	r24, 0x4D	; 77
    16c6:	0e 94 0b 06 	call	0xc16	; 0xc16 <_Z16SP10281_WriteAllccchhh>
			
			/* Update state variables */
			SystemRunMode = RUN_LOOP_MODE;
    16ca:	81 e0       	ldi	r24, 0x01	; 1
    16cc:	80 93 53 02 	sts	0x0253, r24	; 0x800253 <SystemRunMode>
			SystemState = RUN_LOOP_CTRL;
    16d0:	96 e0       	ldi	r25, 0x06	; 6
    16d2:	90 93 59 02 	sts	0x0259, r25	; 0x800259 <SystemState>
			
			/* Stop timer */
			System_TempSelectOvfCnt = 0;
    16d6:	10 92 5f 02 	sts	0x025F, r1	; 0x80025f <System_TempSelectOvfCnt+0x1>
    16da:	10 92 5e 02 	sts	0x025E, r1	; 0x80025e <System_TempSelectOvfCnt>
			
			/* Change LastLoopModePreset to force update */
			LastLoopModePreset.Active_Loops = LoopModePreset.Active_Loops ^ (1 << 0);
    16de:	90 91 c9 01 	lds	r25, 0x01C9	; 0x8001c9 <LoopModePreset>
    16e2:	89 27       	eor	r24, r25
    16e4:	80 93 c5 01 	sts	0x01C5, r24	; 0x8001c5 <LastLoopModePreset>
inline bool operator!=(const Preset& lhs, const Preset& rhs)
{
	return	(	lhs.Active_Loops != rhs.Active_Loops
			||	lhs.Active_CtrlSwitches != rhs.Active_CtrlSwitches
			||	lhs.MIDI_PC_In != rhs.MIDI_PC_In
			||	lhs.MIDI_PC_Out != rhs.MIDI_PC_Out);
    16e8:	90 91 c9 01 	lds	r25, 0x01C9	; 0x8001c9 <LoopModePreset>
    16ec:	80 91 c5 01 	lds	r24, 0x01C5	; 0x8001c5 <LastLoopModePreset>
    16f0:	98 13       	cpse	r25, r24
    16f2:	11 c0       	rjmp	.+34     	; 0x1716 <_Z10System_Runv+0x204>
}

inline bool operator!=(const Preset& lhs, const Preset& rhs)
{
	return	(	lhs.Active_Loops != rhs.Active_Loops
			||	lhs.Active_CtrlSwitches != rhs.Active_CtrlSwitches
    16f4:	90 91 ca 01 	lds	r25, 0x01CA	; 0x8001ca <LoopModePreset+0x1>
    16f8:	80 91 c6 01 	lds	r24, 0x01C6	; 0x8001c6 <LastLoopModePreset+0x1>
    16fc:	98 13       	cpse	r25, r24
    16fe:	0b c0       	rjmp	.+22     	; 0x1716 <_Z10System_Runv+0x204>
			||	lhs.MIDI_PC_In != rhs.MIDI_PC_In
    1700:	90 91 cb 01 	lds	r25, 0x01CB	; 0x8001cb <LoopModePreset+0x2>
    1704:	80 91 c7 01 	lds	r24, 0x01C7	; 0x8001c7 <LastLoopModePreset+0x2>
    1708:	98 13       	cpse	r25, r24
    170a:	05 c0       	rjmp	.+10     	; 0x1716 <_Z10System_Runv+0x204>
			
		case RUN_LOOP_CTRL:
			/* If active loops or ctrl switches has changed since last cycle */
			if (LoopModePreset != LastLoopModePreset)
    170c:	90 91 cc 01 	lds	r25, 0x01CC	; 0x8001cc <LoopModePreset+0x3>
    1710:	80 91 c8 01 	lds	r24, 0x01C8	; 0x8001c8 <LastLoopModePreset+0x3>
    1714:	98 13       	cpse	r25, r24
			{
				System_UpdateLoopCtrl();
    1716:	0e 94 48 0a 	call	0x1490	; 0x1490 <_Z21System_UpdateLoopCtrlv>
			}
			
			/* If user is browsing presets */
			if (TempSelectPreset != LastTempSelectPreset)
    171a:	90 91 55 02 	lds	r25, 0x0255	; 0x800255 <TempSelectPreset>
    171e:	80 91 54 02 	lds	r24, 0x0254	; 0x800254 <LastTempSelectPreset>
    1722:	98 17       	cp	r25, r24
    1724:	09 f4       	brne	.+2      	; 0x1728 <_Z10System_Runv+0x216>
    1726:	3a c1       	rjmp	.+628    	; 0x199c <_Z10System_Runv+0x48a>
			{
				/* Update 7-segment display */
				SP10281_WriteNumber(TempSelectPreset + 1);
    1728:	80 91 55 02 	lds	r24, 0x0255	; 0x800255 <TempSelectPreset>
    172c:	90 e0       	ldi	r25, 0x00	; 0
    172e:	01 96       	adiw	r24, 0x01	; 1
    1730:	0e 94 28 06 	call	0xc50	; 0xc50 <_Z19SP10281_WriteNumbers>
							
				/* Update UI LEDs */
				LoopModePreset = PresetTable[TempSelectPreset];
    1734:	e0 91 55 02 	lds	r30, 0x0255	; 0x800255 <TempSelectPreset>
    1738:	f0 e0       	ldi	r31, 0x00	; 0
    173a:	ee 0f       	add	r30, r30
    173c:	ff 1f       	adc	r31, r31
    173e:	ee 0f       	add	r30, r30
    1740:	ff 1f       	adc	r31, r31
    1742:	e5 5d       	subi	r30, 0xD5	; 213
    1744:	fd 4f       	sbci	r31, 0xFD	; 253
    1746:	80 81       	ld	r24, Z
    1748:	91 81       	ldd	r25, Z+1	; 0x01
    174a:	a2 81       	ldd	r26, Z+2	; 0x02
    174c:	b3 81       	ldd	r27, Z+3	; 0x03
    174e:	80 93 c9 01 	sts	0x01C9, r24	; 0x8001c9 <LoopModePreset>
    1752:	90 93 ca 01 	sts	0x01CA, r25	; 0x8001ca <LoopModePreset+0x1>
    1756:	a0 93 cb 01 	sts	0x01CB, r26	; 0x8001cb <LoopModePreset+0x2>
    175a:	b0 93 cc 01 	sts	0x01CC, r27	; 0x8001cc <LoopModePreset+0x3>
				System_UpdateUI_LEDs();
    175e:	0e 94 6d 07 	call	0xeda	; 0xeda <_Z20System_UpdateUI_LEDsv>
    1762:	1c c1       	rjmp	.+568    	; 0x199c <_Z10System_Runv+0x48a>
		case TUNER:
			break;
		
		case ENTER_EDIT_UI_MODE:
			/* Change LastSystemUIMode to force update */
			LastSystemUIMode = System_UI_Mode(SystemUIMode ^ (1 << 0));
    1764:	90 91 4f 02 	lds	r25, 0x024F	; 0x80024f <SystemUIMode>
    1768:	81 e0       	ldi	r24, 0x01	; 1
    176a:	89 27       	eor	r24, r25
    176c:	80 93 4e 02 	sts	0x024E, r24	; 0x80024e <LastSystemUIMode>
			
			System_ChangePreset();
    1770:	0e 94 eb 09 	call	0x13d6	; 0x13d6 <_Z19System_ChangePresetv>
			
			SystemState = EDIT_UI_MODE;
    1774:	8a e0       	ldi	r24, 0x0A	; 10
    1776:	80 93 59 02 	sts	0x0259, r24	; 0x800259 <SystemState>
			
		case EDIT_UI_MODE:
			/* If user is changing the UI mode then update mode LEDs*/
			if (SystemUIMode != LastSystemUIMode)
    177a:	90 91 4f 02 	lds	r25, 0x024F	; 0x80024f <SystemUIMode>
    177e:	80 91 4e 02 	lds	r24, 0x024E	; 0x80024e <LastSystemUIMode>
    1782:	98 17       	cp	r25, r24
    1784:	91 f1       	breq	.+100    	; 0x17ea <_Z10System_Runv+0x2d8>
			{
				if (SystemUIMode == MODE_RUN)
    1786:	80 91 4f 02 	lds	r24, 0x024F	; 0x80024f <SystemUIMode>
    178a:	81 11       	cpse	r24, r1
    178c:	0d c0       	rjmp	.+26     	; 0x17a8 <_Z10System_Runv+0x296>
				{
					ModeRunLED.AutoToggle();
    178e:	82 ed       	ldi	r24, 0xD2	; 210
    1790:	93 e0       	ldi	r25, 0x03	; 3
    1792:	0e 94 48 02 	call	0x490	; 0x490 <_ZN10MCP_Output10AutoToggleEv>
					ModeEditPresetLED.Clear();
    1796:	8e ec       	ldi	r24, 0xCE	; 206
    1798:	93 e0       	ldi	r25, 0x03	; 3
    179a:	0e 94 e7 01 	call	0x3ce	; 0x3ce <_ZN10MCP_Output5ClearEv>
					ModeEditMidiLED.Clear();
    179e:	8a ec       	ldi	r24, 0xCA	; 202
    17a0:	93 e0       	ldi	r25, 0x03	; 3
    17a2:	0e 94 e7 01 	call	0x3ce	; 0x3ce <_ZN10MCP_Output5ClearEv>
    17a6:	21 c0       	rjmp	.+66     	; 0x17ea <_Z10System_Runv+0x2d8>
				}
				else if (SystemUIMode == MODE_EDIT_PRESET)
    17a8:	80 91 4f 02 	lds	r24, 0x024F	; 0x80024f <SystemUIMode>
    17ac:	81 30       	cpi	r24, 0x01	; 1
    17ae:	69 f4       	brne	.+26     	; 0x17ca <_Z10System_Runv+0x2b8>
				{
					ModeRunLED.Clear();
    17b0:	82 ed       	ldi	r24, 0xD2	; 210
    17b2:	93 e0       	ldi	r25, 0x03	; 3
    17b4:	0e 94 e7 01 	call	0x3ce	; 0x3ce <_ZN10MCP_Output5ClearEv>
					ModeEditPresetLED.AutoToggle();
    17b8:	8e ec       	ldi	r24, 0xCE	; 206
    17ba:	93 e0       	ldi	r25, 0x03	; 3
    17bc:	0e 94 48 02 	call	0x490	; 0x490 <_ZN10MCP_Output10AutoToggleEv>
					ModeEditMidiLED.Clear();
    17c0:	8a ec       	ldi	r24, 0xCA	; 202
    17c2:	93 e0       	ldi	r25, 0x03	; 3
    17c4:	0e 94 e7 01 	call	0x3ce	; 0x3ce <_ZN10MCP_Output5ClearEv>
    17c8:	10 c0       	rjmp	.+32     	; 0x17ea <_Z10System_Runv+0x2d8>
				}
				else if (SystemUIMode == MODE_EDIT_MIDI)
    17ca:	80 91 4f 02 	lds	r24, 0x024F	; 0x80024f <SystemUIMode>
    17ce:	82 30       	cpi	r24, 0x02	; 2
    17d0:	61 f4       	brne	.+24     	; 0x17ea <_Z10System_Runv+0x2d8>
				{
					ModeRunLED.Clear();
    17d2:	82 ed       	ldi	r24, 0xD2	; 210
    17d4:	93 e0       	ldi	r25, 0x03	; 3
    17d6:	0e 94 e7 01 	call	0x3ce	; 0x3ce <_ZN10MCP_Output5ClearEv>
					ModeEditPresetLED.Clear();
    17da:	8e ec       	ldi	r24, 0xCE	; 206
    17dc:	93 e0       	ldi	r25, 0x03	; 3
    17de:	0e 94 e7 01 	call	0x3ce	; 0x3ce <_ZN10MCP_Output5ClearEv>
					ModeEditMidiLED.AutoToggle();
    17e2:	8a ec       	ldi	r24, 0xCA	; 202
    17e4:	93 e0       	ldi	r25, 0x03	; 3
    17e6:	0e 94 48 02 	call	0x490	; 0x490 <_ZN10MCP_Output10AutoToggleEv>
				}
			}
			
			LastSystemUIMode = SystemUIMode;
    17ea:	80 91 4f 02 	lds	r24, 0x024F	; 0x80024f <SystemUIMode>
    17ee:	80 93 4e 02 	sts	0x024E, r24	; 0x80024e <LastSystemUIMode>
			
			break;
    17f2:	d4 c0       	rjmp	.+424    	; 0x199c <_Z10System_Runv+0x48a>
		
		case ENTER_EDIT_PRESET:
			/* Disable Auto toggle */
			ModeRunLED.Clear();
    17f4:	82 ed       	ldi	r24, 0xD2	; 210
    17f6:	93 e0       	ldi	r25, 0x03	; 3
    17f8:	0e 94 e7 01 	call	0x3ce	; 0x3ce <_ZN10MCP_Output5ClearEv>
			ModeEditPresetLED.Set();
    17fc:	8e ec       	ldi	r24, 0xCE	; 206
    17fe:	93 e0       	ldi	r25, 0x03	; 3
    1800:	0e 94 aa 01 	call	0x354	; 0x354 <_ZN10MCP_Output3SetEv>
			ModeEditMidiLED.Clear();
    1804:	8a ec       	ldi	r24, 0xCA	; 202
    1806:	93 e0       	ldi	r25, 0x03	; 3
    1808:	0e 94 e7 01 	call	0x3ce	; 0x3ce <_ZN10MCP_Output5ClearEv>
			
			LoopModePreset = PresetTable[ActivePreset];
    180c:	e0 91 57 02 	lds	r30, 0x0257	; 0x800257 <ActivePreset>
    1810:	f0 e0       	ldi	r31, 0x00	; 0
    1812:	ee 0f       	add	r30, r30
    1814:	ff 1f       	adc	r31, r31
    1816:	ee 0f       	add	r30, r30
    1818:	ff 1f       	adc	r31, r31
    181a:	e5 5d       	subi	r30, 0xD5	; 213
    181c:	fd 4f       	sbci	r31, 0xFD	; 253
    181e:	80 81       	ld	r24, Z
    1820:	91 81       	ldd	r25, Z+1	; 0x01
    1822:	a2 81       	ldd	r26, Z+2	; 0x02
    1824:	b3 81       	ldd	r27, Z+3	; 0x03
    1826:	80 93 c9 01 	sts	0x01C9, r24	; 0x8001c9 <LoopModePreset>
    182a:	90 93 ca 01 	sts	0x01CA, r25	; 0x8001ca <LoopModePreset+0x1>
    182e:	a0 93 cb 01 	sts	0x01CB, r26	; 0x8001cb <LoopModePreset+0x2>
    1832:	b0 93 cc 01 	sts	0x01CC, r27	; 0x8001cc <LoopModePreset+0x3>
			
			UserEditSelection = 0;
    1836:	10 92 2a 02 	sts	0x022A, r1	; 0x80022a <UserEditSelection>
			LastUserEditSelection = 1;
    183a:	81 e0       	ldi	r24, 0x01	; 1
    183c:	80 93 29 02 	sts	0x0229, r24	; 0x800229 <LastUserEditSelection>
			
			SystemState = EDIT_PRESET;
    1840:	8c e0       	ldi	r24, 0x0C	; 12
    1842:	80 93 59 02 	sts	0x0259, r24	; 0x800259 <SystemState>
			
		case EDIT_PRESET:
			/* If user is selecting */
			if (UserEditSelection != LastUserEditSelection)
    1846:	90 91 2a 02 	lds	r25, 0x022A	; 0x80022a <UserEditSelection>
    184a:	80 91 29 02 	lds	r24, 0x0229	; 0x800229 <LastUserEditSelection>
    184e:	98 17       	cp	r25, r24
    1850:	89 f1       	breq	.+98     	; 0x18b4 <_Z10System_Runv+0x3a2>
			{
				/* Blank LEDs except from selection */
				if (UserEditSelection <= 7)
    1852:	80 91 2a 02 	lds	r24, 0x022A	; 0x80022a <UserEditSelection>
    1856:	88 30       	cpi	r24, 0x08	; 8
    1858:	98 f4       	brcc	.+38     	; 0x1880 <_Z10System_Runv+0x36e>
				{
					MCP23017_WriteReg(MCP23017_UI_LEDS_ADDR, OLATA, (1 << UserEditSelection));
    185a:	80 91 2a 02 	lds	r24, 0x022A	; 0x80022a <UserEditSelection>
    185e:	41 e0       	ldi	r20, 0x01	; 1
    1860:	50 e0       	ldi	r21, 0x00	; 0
    1862:	02 c0       	rjmp	.+4      	; 0x1868 <_Z10System_Runv+0x356>
    1864:	44 0f       	add	r20, r20
    1866:	55 1f       	adc	r21, r21
    1868:	8a 95       	dec	r24
    186a:	e2 f7       	brpl	.-8      	; 0x1864 <_Z10System_Runv+0x352>
    186c:	64 e1       	ldi	r22, 0x14	; 20
    186e:	80 e0       	ldi	r24, 0x00	; 0
    1870:	0e 94 7c 01 	call	0x2f8	; 0x2f8 <_Z17MCP23017_WriteReghhh>
					MCP23017_WriteReg(MCP23017_UI_LEDS_ADDR, OLATB, (1 << UI_MODE_PRESET_LED_PIN));
    1874:	40 e4       	ldi	r20, 0x40	; 64
    1876:	65 e1       	ldi	r22, 0x15	; 21
    1878:	80 e0       	ldi	r24, 0x00	; 0
    187a:	0e 94 7c 01 	call	0x2f8	; 0x2f8 <_Z17MCP23017_WriteReghhh>
    187e:	14 c0       	rjmp	.+40     	; 0x18a8 <_Z10System_Runv+0x396>
				}
				else
				{
					MCP23017_WriteReg(MCP23017_UI_LEDS_ADDR, OLATA, 0x00);
    1880:	40 e0       	ldi	r20, 0x00	; 0
    1882:	64 e1       	ldi	r22, 0x14	; 20
    1884:	80 e0       	ldi	r24, 0x00	; 0
    1886:	0e 94 7c 01 	call	0x2f8	; 0x2f8 <_Z17MCP23017_WriteReghhh>
					MCP23017_WriteReg(MCP23017_UI_LEDS_ADDR, OLATB, ((1 << UI_MODE_PRESET_LED_PIN) | (1 << (UserEditSelection - 8))));
    188a:	80 91 2a 02 	lds	r24, 0x022A	; 0x80022a <UserEditSelection>
    188e:	88 50       	subi	r24, 0x08	; 8
    1890:	41 e0       	ldi	r20, 0x01	; 1
    1892:	50 e0       	ldi	r21, 0x00	; 0
    1894:	02 c0       	rjmp	.+4      	; 0x189a <_Z10System_Runv+0x388>
    1896:	44 0f       	add	r20, r20
    1898:	55 1f       	adc	r21, r21
    189a:	8a 95       	dec	r24
    189c:	e2 f7       	brpl	.-8      	; 0x1896 <_Z10System_Runv+0x384>
    189e:	40 64       	ori	r20, 0x40	; 64
    18a0:	65 e1       	ldi	r22, 0x15	; 21
    18a2:	80 e0       	ldi	r24, 0x00	; 0
    18a4:	0e 94 7c 01 	call	0x2f8	; 0x2f8 <_Z17MCP23017_WriteReghhh>
				}
				
				/* Start timer */
				System_MarkSelectionOvfCnt = 1;
    18a8:	81 e0       	ldi	r24, 0x01	; 1
    18aa:	90 e0       	ldi	r25, 0x00	; 0
    18ac:	90 93 5c 02 	sts	0x025C, r25	; 0x80025c <System_MarkSelectionOvfCnt+0x1>
    18b0:	80 93 5b 02 	sts	0x025B, r24	; 0x80025b <System_MarkSelectionOvfCnt>
			}
			
			LastUserEditSelection = UserEditSelection;
    18b4:	80 91 2a 02 	lds	r24, 0x022A	; 0x80022a <UserEditSelection>
    18b8:	80 93 29 02 	sts	0x0229, r24	; 0x800229 <LastUserEditSelection>
			break;
    18bc:	6f c0       	rjmp	.+222    	; 0x199c <_Z10System_Runv+0x48a>
			
		case ENTER_EDIT_MIDI_IN_OUT:
			/* Disable Auto toggle */
			ModeRunLED.Clear();
    18be:	82 ed       	ldi	r24, 0xD2	; 210
    18c0:	93 e0       	ldi	r25, 0x03	; 3
    18c2:	0e 94 e7 01 	call	0x3ce	; 0x3ce <_ZN10MCP_Output5ClearEv>
			ModeEditPresetLED.Clear();
    18c6:	8e ec       	ldi	r24, 0xCE	; 206
    18c8:	93 e0       	ldi	r25, 0x03	; 3
    18ca:	0e 94 e7 01 	call	0x3ce	; 0x3ce <_ZN10MCP_Output5ClearEv>
			ModeEditMidiLED.Set();
    18ce:	8a ec       	ldi	r24, 0xCA	; 202
    18d0:	93 e0       	ldi	r25, 0x03	; 3
    18d2:	0e 94 aa 01 	call	0x354	; 0x354 <_ZN10MCP_Output3SetEv>
			
			/* Update 7-segment display */
			if (SetMidiEdit == MIDI_IN)
    18d6:	80 91 4d 02 	lds	r24, 0x024D	; 0x80024d <SetMidiEdit>
    18da:	81 11       	cpse	r24, r1
    18dc:	09 c0       	rjmp	.+18     	; 0x18f0 <_Z10System_Runv+0x3de>
			{
				SP10281_WriteAll('i', 'n', ' ', 0, 0, 0);
    18de:	e1 2c       	mov	r14, r1
    18e0:	00 e0       	ldi	r16, 0x00	; 0
    18e2:	20 e0       	ldi	r18, 0x00	; 0
    18e4:	40 e2       	ldi	r20, 0x20	; 32
    18e6:	6e e6       	ldi	r22, 0x6E	; 110
    18e8:	89 e6       	ldi	r24, 0x69	; 105
    18ea:	0e 94 0b 06 	call	0xc16	; 0xc16 <_Z16SP10281_WriteAllccchhh>
    18ee:	08 c0       	rjmp	.+16     	; 0x1900 <_Z10System_Runv+0x3ee>
			}
			else
			{
				SP10281_WriteAll('o', 'u', 't', 0, 0, 0);
    18f0:	e1 2c       	mov	r14, r1
    18f2:	00 e0       	ldi	r16, 0x00	; 0
    18f4:	20 e0       	ldi	r18, 0x00	; 0
    18f6:	44 e7       	ldi	r20, 0x74	; 116
    18f8:	65 e7       	ldi	r22, 0x75	; 117
    18fa:	8f e6       	ldi	r24, 0x6F	; 111
    18fc:	0e 94 0b 06 	call	0xc16	; 0xc16 <_Z16SP10281_WriteAllccchhh>
			}
			
			SystemState = EDIT_MIDI_IN_OUT;
    1900:	8e e0       	ldi	r24, 0x0E	; 14
    1902:	80 93 59 02 	sts	0x0259, r24	; 0x800259 <SystemState>
    1906:	4a c0       	rjmp	.+148    	; 0x199c <_Z10System_Runv+0x48a>
		case EDIT_MIDI_IN_OUT:
			break;
		
		case ENTER_EDIT_MIDI_PC:
			/* Get setup for active preset */
			if (SetMidiEdit == MIDI_IN)
    1908:	80 91 4d 02 	lds	r24, 0x024D	; 0x80024d <SetMidiEdit>
    190c:	81 11       	cpse	r24, r1
    190e:	19 c0       	rjmp	.+50     	; 0x1942 <_Z10System_Runv+0x430>
			{
				TempSelectMidiPC = PresetTable[ActivePreset].MIDI_PC_In;
    1910:	e0 91 57 02 	lds	r30, 0x0257	; 0x800257 <ActivePreset>
    1914:	f0 e0       	ldi	r31, 0x00	; 0
    1916:	ee 0f       	add	r30, r30
    1918:	ff 1f       	adc	r31, r31
    191a:	ee 0f       	add	r30, r30
    191c:	ff 1f       	adc	r31, r31
    191e:	e5 5d       	subi	r30, 0xD5	; 213
    1920:	fd 4f       	sbci	r31, 0xFD	; 253
    1922:	82 81       	ldd	r24, Z+2	; 0x02
    1924:	80 93 4c 02 	sts	0x024C, r24	; 0x80024c <TempSelectMidiPC>
				LastTempSelectMidiPC = PresetTable[ActivePreset].MIDI_PC_In;
    1928:	e0 91 57 02 	lds	r30, 0x0257	; 0x800257 <ActivePreset>
    192c:	f0 e0       	ldi	r31, 0x00	; 0
    192e:	ee 0f       	add	r30, r30
    1930:	ff 1f       	adc	r31, r31
    1932:	ee 0f       	add	r30, r30
    1934:	ff 1f       	adc	r31, r31
    1936:	e5 5d       	subi	r30, 0xD5	; 213
    1938:	fd 4f       	sbci	r31, 0xFD	; 253
    193a:	82 81       	ldd	r24, Z+2	; 0x02
    193c:	80 93 4b 02 	sts	0x024B, r24	; 0x80024b <LastTempSelectMidiPC>
    1940:	18 c0       	rjmp	.+48     	; 0x1972 <_Z10System_Runv+0x460>
			}
			else
			{
				TempSelectMidiPC = PresetTable[ActivePreset].MIDI_PC_Out;
    1942:	e0 91 57 02 	lds	r30, 0x0257	; 0x800257 <ActivePreset>
    1946:	f0 e0       	ldi	r31, 0x00	; 0
    1948:	ee 0f       	add	r30, r30
    194a:	ff 1f       	adc	r31, r31
    194c:	ee 0f       	add	r30, r30
    194e:	ff 1f       	adc	r31, r31
    1950:	e5 5d       	subi	r30, 0xD5	; 213
    1952:	fd 4f       	sbci	r31, 0xFD	; 253
    1954:	83 81       	ldd	r24, Z+3	; 0x03
    1956:	80 93 4c 02 	sts	0x024C, r24	; 0x80024c <TempSelectMidiPC>
				LastTempSelectMidiPC = PresetTable[ActivePreset].MIDI_PC_Out;
    195a:	e0 91 57 02 	lds	r30, 0x0257	; 0x800257 <ActivePreset>
    195e:	f0 e0       	ldi	r31, 0x00	; 0
    1960:	ee 0f       	add	r30, r30
    1962:	ff 1f       	adc	r31, r31
    1964:	ee 0f       	add	r30, r30
    1966:	ff 1f       	adc	r31, r31
    1968:	e5 5d       	subi	r30, 0xD5	; 213
    196a:	fd 4f       	sbci	r31, 0xFD	; 253
    196c:	83 81       	ldd	r24, Z+3	; 0x03
    196e:	80 93 4b 02 	sts	0x024B, r24	; 0x80024b <LastTempSelectMidiPC>
			}
			
			/* Update 7-segment display */
			if (TempSelectMidiPC == MIDI_PC_OFF)
    1972:	80 91 4c 02 	lds	r24, 0x024C	; 0x80024c <TempSelectMidiPC>
    1976:	8f 3f       	cpi	r24, 0xFF	; 255
    1978:	49 f4       	brne	.+18     	; 0x198c <_Z10System_Runv+0x47a>
			{
				SP10281_WriteAll('o', 'f', 'f', 0, 0, 0);
    197a:	e1 2c       	mov	r14, r1
    197c:	00 e0       	ldi	r16, 0x00	; 0
    197e:	20 e0       	ldi	r18, 0x00	; 0
    1980:	46 e6       	ldi	r20, 0x66	; 102
    1982:	66 e6       	ldi	r22, 0x66	; 102
    1984:	8f e6       	ldi	r24, 0x6F	; 111
    1986:	0e 94 0b 06 	call	0xc16	; 0xc16 <_Z16SP10281_WriteAllccchhh>
    198a:	05 c0       	rjmp	.+10     	; 0x1996 <_Z10System_Runv+0x484>
			}
			else
			{
				SP10281_WriteNumber(TempSelectMidiPC);
    198c:	80 91 4c 02 	lds	r24, 0x024C	; 0x80024c <TempSelectMidiPC>
    1990:	90 e0       	ldi	r25, 0x00	; 0
    1992:	0e 94 28 06 	call	0xc50	; 0xc50 <_Z19SP10281_WriteNumbers>
			}
			
			SystemState = EDIT_MIDI_PC;
    1996:	80 e1       	ldi	r24, 0x10	; 16
    1998:	80 93 59 02 	sts	0x0259, r24	; 0x800259 <SystemState>
		
		default:
			break;
	}
	
	LastActivePreset = ActivePreset;
    199c:	80 91 57 02 	lds	r24, 0x0257	; 0x800257 <ActivePreset>
    19a0:	80 93 56 02 	sts	0x0256, r24	; 0x800256 <LastActivePreset>
	LastSystemState = SystemState;
    19a4:	80 91 59 02 	lds	r24, 0x0259	; 0x800259 <SystemState>
    19a8:	80 93 58 02 	sts	0x0258, r24	; 0x800258 <LastSystemState>
	LastLoopModePreset = LoopModePreset;
    19ac:	80 91 c9 01 	lds	r24, 0x01C9	; 0x8001c9 <LoopModePreset>
    19b0:	90 91 ca 01 	lds	r25, 0x01CA	; 0x8001ca <LoopModePreset+0x1>
    19b4:	a0 91 cb 01 	lds	r26, 0x01CB	; 0x8001cb <LoopModePreset+0x2>
    19b8:	b0 91 cc 01 	lds	r27, 0x01CC	; 0x8001cc <LoopModePreset+0x3>
    19bc:	80 93 c5 01 	sts	0x01C5, r24	; 0x8001c5 <LastLoopModePreset>
    19c0:	90 93 c6 01 	sts	0x01C6, r25	; 0x8001c6 <LastLoopModePreset+0x1>
    19c4:	a0 93 c7 01 	sts	0x01C7, r26	; 0x8001c7 <LastLoopModePreset+0x2>
    19c8:	b0 93 c8 01 	sts	0x01C8, r27	; 0x8001c8 <LastLoopModePreset+0x3>
	LastTempSelectPreset = TempSelectPreset;
    19cc:	80 91 55 02 	lds	r24, 0x0255	; 0x800255 <TempSelectPreset>
    19d0:	80 93 54 02 	sts	0x0254, r24	; 0x800254 <LastTempSelectPreset>
}
    19d4:	0f 91       	pop	r16
    19d6:	ef 90       	pop	r14
    19d8:	08 95       	ret

000019da <_Z11Timer0_Initv>:
#include "System.h"

void Timer0_Init()
{
	/* Setup Timer */
	TCCR0A |= (1 << WGM01);		// Set Timer to CTC mode (Clear Timer on Compare match)
    19da:	84 b5       	in	r24, 0x24	; 36
    19dc:	82 60       	ori	r24, 0x02	; 2
    19de:	84 bd       	out	0x24, r24	; 36
	TCNT0 = 0;					// Clear counter register
    19e0:	16 bc       	out	0x26, r1	; 38
	OCR0A = 155;				// Set Output Compare value (78125Hz / 156 = 500,8Hz (1,997ms))
    19e2:	8b e9       	ldi	r24, 0x9B	; 155
    19e4:	87 bd       	out	0x27, r24	; 39
	TIMSK0 |= (1 << OCIE0A);	// Output Compare A Match Interrupt Enable
    19e6:	ee e6       	ldi	r30, 0x6E	; 110
    19e8:	f0 e0       	ldi	r31, 0x00	; 0
    19ea:	80 81       	ld	r24, Z
    19ec:	82 60       	ori	r24, 0x02	; 2
    19ee:	80 83       	st	Z, r24
	
	/* Start Timer */
	TCCR0B |= (1 << CS02);		// Set clock prescaler to 256 (20MHz / 256 = 78125Hz)
    19f0:	85 b5       	in	r24, 0x25	; 37
    19f2:	84 60       	ori	r24, 0x04	; 4
    19f4:	85 bd       	out	0x25, r24	; 37
    19f6:	08 95       	ret

000019f8 <_Z13Timer0_ms2cntm>:
}

uint32_t Timer0_ms2cnt(uint32_t ms)
{
    19f8:	9b 01       	movw	r18, r22
    19fa:	ac 01       	movw	r20, r24
	ms *= 1000;
	return (uint32_t)(ms / TIMER0_PERIOD_US);
    19fc:	a8 ee       	ldi	r26, 0xE8	; 232
    19fe:	b3 e0       	ldi	r27, 0x03	; 3
    1a00:	0e 94 2f 11 	call	0x225e	; 0x225e <__muluhisi3>
    1a04:	2d ec       	ldi	r18, 0xCD	; 205
    1a06:	37 e0       	ldi	r19, 0x07	; 7
    1a08:	40 e0       	ldi	r20, 0x00	; 0
    1a0a:	50 e0       	ldi	r21, 0x00	; 0
    1a0c:	0e 94 07 11 	call	0x220e	; 0x220e <__udivmodsi4>
}
    1a10:	ca 01       	movw	r24, r20
    1a12:	b9 01       	movw	r22, r18
    1a14:	08 95       	ret

00001a16 <__vector_16>:

/* Timer0 Compare A Match Interrupt Service Routine */
ISR(TIMER0_COMPA_vect)
{
    1a16:	1f 92       	push	r1
    1a18:	0f 92       	push	r0
    1a1a:	0f b6       	in	r0, 0x3f	; 63
    1a1c:	0f 92       	push	r0
    1a1e:	11 24       	eor	r1, r1
    1a20:	2f 93       	push	r18
    1a22:	3f 93       	push	r19
    1a24:	8f 93       	push	r24
    1a26:	9f 93       	push	r25
	/* Overflow counter to reset parameter if user doesn't commit */
	if (System_TempSelectOvfCnt)
    1a28:	80 91 5e 02 	lds	r24, 0x025E	; 0x80025e <System_TempSelectOvfCnt>
    1a2c:	90 91 5f 02 	lds	r25, 0x025F	; 0x80025f <System_TempSelectOvfCnt+0x1>
    1a30:	89 2b       	or	r24, r25
    1a32:	99 f0       	breq	.+38     	; 0x1a5a <__vector_16+0x44>
	{
		if (++System_TempSelectOvfCnt > SYSTEM_TEMP_SELECT_TIMEOUT)
    1a34:	80 91 5e 02 	lds	r24, 0x025E	; 0x80025e <System_TempSelectOvfCnt>
    1a38:	90 91 5f 02 	lds	r25, 0x025F	; 0x80025f <System_TempSelectOvfCnt+0x1>
    1a3c:	01 96       	adiw	r24, 0x01	; 1
    1a3e:	90 93 5f 02 	sts	0x025F, r25	; 0x80025f <System_TempSelectOvfCnt+0x1>
    1a42:	80 93 5e 02 	sts	0x025E, r24	; 0x80025e <System_TempSelectOvfCnt>
    1a46:	8d 3d       	cpi	r24, 0xDD	; 221
    1a48:	95 40       	sbci	r25, 0x05	; 5
    1a4a:	38 f0       	brcs	.+14     	; 0x1a5a <__vector_16+0x44>
		{
			System_TempSelectOvfCnt = 0;
    1a4c:	10 92 5f 02 	sts	0x025F, r1	; 0x80025f <System_TempSelectOvfCnt+0x1>
    1a50:	10 92 5e 02 	sts	0x025E, r1	; 0x80025e <System_TempSelectOvfCnt>
			System_TempSelectFlag = true;
    1a54:	81 e0       	ldi	r24, 0x01	; 1
    1a56:	80 93 5d 02 	sts	0x025D, r24	; 0x80025d <System_TempSelectFlag>
		}
	}
	
	/* Overflow counter to shortly blank LEDs to mark selection */
	if (System_MarkSelectionOvfCnt)
    1a5a:	80 91 5b 02 	lds	r24, 0x025B	; 0x80025b <System_MarkSelectionOvfCnt>
    1a5e:	90 91 5c 02 	lds	r25, 0x025C	; 0x80025c <System_MarkSelectionOvfCnt+0x1>
    1a62:	89 2b       	or	r24, r25
    1a64:	99 f0       	breq	.+38     	; 0x1a8c <__vector_16+0x76>
	{
		if (++System_MarkSelectionOvfCnt > SYSTEM_MARK_SELECTION_TIMEOUT)
    1a66:	80 91 5b 02 	lds	r24, 0x025B	; 0x80025b <System_MarkSelectionOvfCnt>
    1a6a:	90 91 5c 02 	lds	r25, 0x025C	; 0x80025c <System_MarkSelectionOvfCnt+0x1>
    1a6e:	01 96       	adiw	r24, 0x01	; 1
    1a70:	90 93 5c 02 	sts	0x025C, r25	; 0x80025c <System_MarkSelectionOvfCnt+0x1>
    1a74:	80 93 5b 02 	sts	0x025B, r24	; 0x80025b <System_MarkSelectionOvfCnt>
    1a78:	87 39       	cpi	r24, 0x97	; 151
    1a7a:	91 05       	cpc	r25, r1
    1a7c:	38 f0       	brcs	.+14     	; 0x1a8c <__vector_16+0x76>
		{
			System_MarkSelectionOvfCnt = 0;		// Stop counter
    1a7e:	10 92 5c 02 	sts	0x025C, r1	; 0x80025c <System_MarkSelectionOvfCnt+0x1>
    1a82:	10 92 5b 02 	sts	0x025B, r1	; 0x80025b <System_MarkSelectionOvfCnt>
			System_MarkSelectionFlag = true;
    1a86:	81 e0       	ldi	r24, 0x01	; 1
    1a88:	80 93 5a 02 	sts	0x025A, r24	; 0x80025a <System_MarkSelectionFlag>
		}
	}
	
	/* Overflow counter for delaying transmit to Pedal */
	if (PedalCom_DelayTXOvfCnt)
    1a8c:	80 91 1d 02 	lds	r24, 0x021D	; 0x80021d <PedalCom_DelayTXOvfCnt>
    1a90:	88 23       	and	r24, r24
    1a92:	61 f0       	breq	.+24     	; 0x1aac <__vector_16+0x96>
	{
		if (++PedalCom_DelayTXOvfCnt > PEDALCOM_DELAY_TX_TIMEOUT)
    1a94:	80 91 1d 02 	lds	r24, 0x021D	; 0x80021d <PedalCom_DelayTXOvfCnt>
    1a98:	8f 5f       	subi	r24, 0xFF	; 255
    1a9a:	80 93 1d 02 	sts	0x021D, r24	; 0x80021d <PedalCom_DelayTXOvfCnt>
    1a9e:	83 30       	cpi	r24, 0x03	; 3
    1aa0:	28 f0       	brcs	.+10     	; 0x1aac <__vector_16+0x96>
		{
			PedalCom_DelayTXOvfCnt = 0;	// Stop counter
    1aa2:	10 92 1d 02 	sts	0x021D, r1	; 0x80021d <PedalCom_DelayTXOvfCnt>
			PedalCom_DelayTxFlag = true;
    1aa6:	81 e0       	ldi	r24, 0x01	; 1
    1aa8:	80 93 1e 02 	sts	0x021E, r24	; 0x80021e <PedalCom_DelayTxFlag>
		}
	}

	/* Overflow counter for Pedal heartbeat */
	if (++PedalCom_HeartbeatOvfCnt > PEDALCOM_HEARTBEAT_TIMEOUT)
    1aac:	80 91 43 01 	lds	r24, 0x0143	; 0x800143 <PedalCom_HeartbeatOvfCnt>
    1ab0:	90 91 44 01 	lds	r25, 0x0144	; 0x800144 <PedalCom_HeartbeatOvfCnt+0x1>
    1ab4:	01 96       	adiw	r24, 0x01	; 1
    1ab6:	90 93 44 01 	sts	0x0144, r25	; 0x800144 <PedalCom_HeartbeatOvfCnt+0x1>
    1aba:	80 93 43 01 	sts	0x0143, r24	; 0x800143 <PedalCom_HeartbeatOvfCnt>
    1abe:	8d 3d       	cpi	r24, 0xDD	; 221
    1ac0:	95 40       	sbci	r25, 0x05	; 5
    1ac2:	40 f0       	brcs	.+16     	; 0x1ad4 <__vector_16+0xbe>
	{
		PedalCom_HeartbeatOvfCnt = 1;	// Reset counter
    1ac4:	81 e0       	ldi	r24, 0x01	; 1
    1ac6:	90 e0       	ldi	r25, 0x00	; 0
    1ac8:	90 93 44 01 	sts	0x0144, r25	; 0x800144 <PedalCom_HeartbeatOvfCnt+0x1>
    1acc:	80 93 43 01 	sts	0x0143, r24	; 0x800143 <PedalCom_HeartbeatOvfCnt>
		PedalCom_HeartbeatFlag = true;
    1ad0:	80 93 16 02 	sts	0x0216, r24	; 0x800216 <PedalCom_HeartbeatFlag>
	}
	
	/* Overflow counter for Pedal response timeout */
	if (PedalCom_ResponseTimeoutOvfCnt)
    1ad4:	80 91 1b 02 	lds	r24, 0x021B	; 0x80021b <PedalCom_ResponseTimeoutOvfCnt>
    1ad8:	90 91 1c 02 	lds	r25, 0x021C	; 0x80021c <PedalCom_ResponseTimeoutOvfCnt+0x1>
    1adc:	89 2b       	or	r24, r25
    1ade:	91 f0       	breq	.+36     	; 0x1b04 <__vector_16+0xee>
	{
		if (++PedalCom_ResponseTimeoutOvfCnt > PEDALCOM_RESPONSE_TIMEOUT)
    1ae0:	80 91 1b 02 	lds	r24, 0x021B	; 0x80021b <PedalCom_ResponseTimeoutOvfCnt>
    1ae4:	90 91 1c 02 	lds	r25, 0x021C	; 0x80021c <PedalCom_ResponseTimeoutOvfCnt+0x1>
    1ae8:	01 96       	adiw	r24, 0x01	; 1
    1aea:	90 93 1c 02 	sts	0x021C, r25	; 0x80021c <PedalCom_ResponseTimeoutOvfCnt+0x1>
    1aee:	80 93 1b 02 	sts	0x021B, r24	; 0x80021b <PedalCom_ResponseTimeoutOvfCnt>
    1af2:	41 97       	sbiw	r24, 0x11	; 17
    1af4:	38 f0       	brcs	.+14     	; 0x1b04 <__vector_16+0xee>
		{
			PedalCom_ResponseTimeoutOvfCnt = 0;	// Stop counter
    1af6:	10 92 1c 02 	sts	0x021C, r1	; 0x80021c <PedalCom_ResponseTimeoutOvfCnt+0x1>
    1afa:	10 92 1b 02 	sts	0x021B, r1	; 0x80021b <PedalCom_ResponseTimeoutOvfCnt>
			PedalCom_ResponseTimeoutFlag = true;
    1afe:	81 e0       	ldi	r24, 0x01	; 1
    1b00:	80 93 1a 02 	sts	0x021A, r24	; 0x80021a <PedalCom_ResponseTimeoutFlag>
		}
	}
	
	/* Overflow counter for receiving full command frame */
	if (PedalCom_FullFrameTimeoutOvfCnt)
    1b04:	80 91 18 02 	lds	r24, 0x0218	; 0x800218 <PedalCom_FullFrameTimeoutOvfCnt>
    1b08:	90 91 19 02 	lds	r25, 0x0219	; 0x800219 <PedalCom_FullFrameTimeoutOvfCnt+0x1>
    1b0c:	89 2b       	or	r24, r25
    1b0e:	91 f0       	breq	.+36     	; 0x1b34 <__vector_16+0x11e>
	{
		if (++PedalCom_FullFrameTimeoutOvfCnt > PEDALCOM_FULL_FRAME_TIMEOUT)
    1b10:	80 91 18 02 	lds	r24, 0x0218	; 0x800218 <PedalCom_FullFrameTimeoutOvfCnt>
    1b14:	90 91 19 02 	lds	r25, 0x0219	; 0x800219 <PedalCom_FullFrameTimeoutOvfCnt+0x1>
    1b18:	01 96       	adiw	r24, 0x01	; 1
    1b1a:	90 93 19 02 	sts	0x0219, r25	; 0x800219 <PedalCom_FullFrameTimeoutOvfCnt+0x1>
    1b1e:	80 93 18 02 	sts	0x0218, r24	; 0x800218 <PedalCom_FullFrameTimeoutOvfCnt>
    1b22:	06 97       	sbiw	r24, 0x06	; 6
    1b24:	38 f0       	brcs	.+14     	; 0x1b34 <__vector_16+0x11e>
		{
			PedalCom_FullFrameTimeoutOvfCnt = 0;	// Stop counter
    1b26:	10 92 19 02 	sts	0x0219, r1	; 0x800219 <PedalCom_FullFrameTimeoutOvfCnt+0x1>
    1b2a:	10 92 18 02 	sts	0x0218, r1	; 0x800218 <PedalCom_FullFrameTimeoutOvfCnt>
			PedalCom_FullFrameTimeoutFlag = true;
    1b2e:	81 e0       	ldi	r24, 0x01	; 1
    1b30:	80 93 17 02 	sts	0x0217, r24	; 0x800217 <PedalCom_FullFrameTimeoutFlag>
		}
	}
	
	/* Overflow counter for multiplexing 3x7-segment display */
	if (++SP10281_OvfCnt >= SP10281_OVF_RESET)
    1b34:	80 91 24 02 	lds	r24, 0x0224	; 0x800224 <SP10281_OvfCnt>
    1b38:	8f 5f       	subi	r24, 0xFF	; 255
    1b3a:	80 93 24 02 	sts	0x0224, r24	; 0x800224 <SP10281_OvfCnt>
    1b3e:	83 30       	cpi	r24, 0x03	; 3
    1b40:	28 f0       	brcs	.+10     	; 0x1b4c <__vector_16+0x136>
	{
		SP10281_OvfCnt = 0;		// Stop counter
    1b42:	10 92 24 02 	sts	0x0224, r1	; 0x800224 <SP10281_OvfCnt>
		SP10281_OvfFlag = 1;
    1b46:	81 e0       	ldi	r24, 0x01	; 1
    1b48:	80 93 23 02 	sts	0x0223, r24	; 0x800223 <SP10281_OvfFlag>
	}
	
	/* Overflow counter for blinking UI LEDs */
	if (++(MCP_Output::AutoToggle_OvfCnt) > MCP_Output::AutoToggle_Timeout)
    1b4c:	80 91 d5 01 	lds	r24, 0x01D5	; 0x8001d5 <_ZN10MCP_Output17AutoToggle_OvfCntE>
    1b50:	90 91 d6 01 	lds	r25, 0x01D6	; 0x8001d6 <_ZN10MCP_Output17AutoToggle_OvfCntE+0x1>
    1b54:	01 96       	adiw	r24, 0x01	; 1
    1b56:	90 93 d6 01 	sts	0x01D6, r25	; 0x8001d6 <_ZN10MCP_Output17AutoToggle_OvfCntE+0x1>
    1b5a:	80 93 d5 01 	sts	0x01D5, r24	; 0x8001d5 <_ZN10MCP_Output17AutoToggle_OvfCntE>
    1b5e:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <_ZN10MCP_Output18AutoToggle_TimeoutE>
    1b62:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <_ZN10MCP_Output18AutoToggle_TimeoutE+0x1>
    1b66:	28 17       	cp	r18, r24
    1b68:	39 07       	cpc	r19, r25
    1b6a:	78 f4       	brcc	.+30     	; 0x1b8a <__vector_16+0x174>
	{
		MCP_Output::AutoToggle_OvfCnt = 0;		// Reset counter
    1b6c:	10 92 d6 01 	sts	0x01D6, r1	; 0x8001d6 <_ZN10MCP_Output17AutoToggle_OvfCntE+0x1>
    1b70:	10 92 d5 01 	sts	0x01D5, r1	; 0x8001d5 <_ZN10MCP_Output17AutoToggle_OvfCntE>
		
		if (MCP_Output::AutoToggle_PortA || MCP_Output::AutoToggle_PortB)
    1b74:	80 91 d3 01 	lds	r24, 0x01D3	; 0x8001d3 <_ZN10MCP_Output16AutoToggle_PortAE>
    1b78:	81 11       	cpse	r24, r1
    1b7a:	04 c0       	rjmp	.+8      	; 0x1b84 <__vector_16+0x16e>
    1b7c:	80 91 d2 01 	lds	r24, 0x01D2	; 0x8001d2 <__data_end>
    1b80:	88 23       	and	r24, r24
    1b82:	19 f0       	breq	.+6      	; 0x1b8a <__vector_16+0x174>
		{
			MCP_Output::AutoToggle_Flag = 1;
    1b84:	81 e0       	ldi	r24, 0x01	; 1
    1b86:	80 93 d4 01 	sts	0x01D4, r24	; 0x8001d4 <_ZN10MCP_Output15AutoToggle_FlagE>
		}
	}
	
	/* Overflow counter for rotary encoder handling */
	if (RotaryEncoder_OvfCnt)
    1b8a:	80 91 20 02 	lds	r24, 0x0220	; 0x800220 <RotaryEncoder_OvfCnt>
    1b8e:	90 91 21 02 	lds	r25, 0x0221	; 0x800221 <RotaryEncoder_OvfCnt+0x1>
    1b92:	89 2b       	or	r24, r25
    1b94:	b9 f1       	breq	.+110    	; 0x1c04 <__vector_16+0x1ee>
	{
		RotaryEncoder_OvfCnt++;
    1b96:	80 91 20 02 	lds	r24, 0x0220	; 0x800220 <RotaryEncoder_OvfCnt>
    1b9a:	90 91 21 02 	lds	r25, 0x0221	; 0x800221 <RotaryEncoder_OvfCnt+0x1>
    1b9e:	01 96       	adiw	r24, 0x01	; 1
    1ba0:	90 93 21 02 	sts	0x0221, r25	; 0x800221 <RotaryEncoder_OvfCnt+0x1>
    1ba4:	80 93 20 02 	sts	0x0220, r24	; 0x800220 <RotaryEncoder_OvfCnt>
		
		if (RotaryEncoder_OvfCnt > ROT_ENC_LONG_PRESS_OVF)
    1ba8:	80 91 20 02 	lds	r24, 0x0220	; 0x800220 <RotaryEncoder_OvfCnt>
    1bac:	90 91 21 02 	lds	r25, 0x0221	; 0x800221 <RotaryEncoder_OvfCnt+0x1>
    1bb0:	89 35       	cpi	r24, 0x59	; 89
    1bb2:	92 40       	sbci	r25, 0x02	; 2
    1bb4:	68 f0       	brcs	.+26     	; 0x1bd0 <__vector_16+0x1ba>
		{
			/* If button is still pressed */
			if ( GPIO_ROT_ENC_PIN & GPIO_ROT_ENC_PRESS_MASK )
    1bb6:	1a 9b       	sbis	0x03, 2	; 3
    1bb8:	04 c0       	rjmp	.+8      	; 0x1bc2 <__vector_16+0x1ac>
			{
				RotEnc_State = LONG_PRESS;
    1bba:	85 e0       	ldi	r24, 0x05	; 5
    1bbc:	80 93 1f 02 	sts	0x021F, r24	; 0x80021f <RotEnc_State>
    1bc0:	02 c0       	rjmp	.+4      	; 0x1bc6 <__vector_16+0x1b0>
			}
			else
			{
				RotEnc_State = IDLE;
    1bc2:	10 92 1f 02 	sts	0x021F, r1	; 0x80021f <RotEnc_State>
			}
			
			RotaryEncoder_OvfCnt = 0;		// Stop overflow counter
    1bc6:	10 92 21 02 	sts	0x0221, r1	; 0x800221 <RotaryEncoder_OvfCnt+0x1>
    1bca:	10 92 20 02 	sts	0x0220, r1	; 0x800220 <RotaryEncoder_OvfCnt>
    1bce:	1a c0       	rjmp	.+52     	; 0x1c04 <__vector_16+0x1ee>
		}
		else if (RotaryEncoder_OvfCnt > ROT_ENC_PRESS_OVF && RotEnc_State == IDLE)
    1bd0:	80 91 20 02 	lds	r24, 0x0220	; 0x800220 <RotaryEncoder_OvfCnt>
    1bd4:	90 91 21 02 	lds	r25, 0x0221	; 0x800221 <RotaryEncoder_OvfCnt+0x1>
    1bd8:	cd 97       	sbiw	r24, 0x3d	; 61
    1bda:	a0 f0       	brcs	.+40     	; 0x1c04 <__vector_16+0x1ee>
    1bdc:	80 91 1f 02 	lds	r24, 0x021F	; 0x80021f <RotEnc_State>
    1be0:	88 23       	and	r24, r24
    1be2:	69 f0       	breq	.+26     	; 0x1bfe <__vector_16+0x1e8>
    1be4:	0f c0       	rjmp	.+30     	; 0x1c04 <__vector_16+0x1ee>
		{
			/* If button is no longer pressed */
			if ( !(GPIO_ROT_ENC_PIN & GPIO_ROT_ENC_PRESS_MASK) )
			{
				RotEnc_State = SHORT_PRESS;
    1be6:	83 e0       	ldi	r24, 0x03	; 3
    1be8:	80 93 1f 02 	sts	0x021F, r24	; 0x80021f <RotEnc_State>
				RotaryEncoder_OvfCnt = 0;	// Stop overflow counter
    1bec:	10 92 21 02 	sts	0x0221, r1	; 0x800221 <RotaryEncoder_OvfCnt+0x1>
    1bf0:	10 92 20 02 	sts	0x0220, r1	; 0x800220 <RotaryEncoder_OvfCnt>
    1bf4:	07 c0       	rjmp	.+14     	; 0x1c04 <__vector_16+0x1ee>
			}
			else
			RotEnc_State = PRESSED;
    1bf6:	84 e0       	ldi	r24, 0x04	; 4
    1bf8:	80 93 1f 02 	sts	0x021F, r24	; 0x80021f <RotEnc_State>

		}
	}
    1bfc:	03 c0       	rjmp	.+6      	; 0x1c04 <__vector_16+0x1ee>
			RotaryEncoder_OvfCnt = 0;		// Stop overflow counter
		}
		else if (RotaryEncoder_OvfCnt > ROT_ENC_PRESS_OVF && RotEnc_State == IDLE)
		{
			/* If button is no longer pressed */
			if ( !(GPIO_ROT_ENC_PIN & GPIO_ROT_ENC_PRESS_MASK) )
    1bfe:	1a 99       	sbic	0x03, 2	; 3
    1c00:	fa cf       	rjmp	.-12     	; 0x1bf6 <__vector_16+0x1e0>
    1c02:	f1 cf       	rjmp	.-30     	; 0x1be6 <__vector_16+0x1d0>
			else
			RotEnc_State = PRESSED;

		}
	}
    1c04:	9f 91       	pop	r25
    1c06:	8f 91       	pop	r24
    1c08:	3f 91       	pop	r19
    1c0a:	2f 91       	pop	r18
    1c0c:	0f 90       	pop	r0
    1c0e:	0f be       	out	0x3f, r0	; 63
    1c10:	0f 90       	pop	r0
    1c12:	1f 90       	pop	r1
    1c14:	18 95       	reti

00001c16 <_Z10UART0_Initjhh>:
Input:    None
Returns:  None
**************************************************************************/
void UART1_Flush(void)
{
	UART1_RxHead = UART1_RxTail;
    1c16:	cf 93       	push	r28
    1c18:	df 93       	push	r29
    1c1a:	d6 2f       	mov	r29, r22
    1c1c:	c4 2f       	mov	r28, r20
    1c1e:	51 9a       	sbi	0x0a, 1	; 10
    1c20:	59 9a       	sbi	0x0b, 1	; 11
    1c22:	10 92 e9 02 	sts	0x02E9, r1	; 0x8002e9 <_ZL12UART0_TxHead>
    1c26:	10 92 e8 02 	sts	0x02E8, r1	; 0x8002e8 <_ZL12UART0_TxTail>
    1c2a:	10 92 e7 02 	sts	0x02E7, r1	; 0x8002e7 <_ZL12UART0_RxHead>
    1c2e:	10 92 e6 02 	sts	0x02E6, r1	; 0x8002e6 <_ZL12UART0_RxTail>
    1c32:	a0 e0       	ldi	r26, 0x00	; 0
    1c34:	b0 e0       	ldi	r27, 0x00	; 0
    1c36:	88 0f       	add	r24, r24
    1c38:	99 1f       	adc	r25, r25
    1c3a:	aa 1f       	adc	r26, r26
    1c3c:	bb 1f       	adc	r27, r27
    1c3e:	88 0f       	add	r24, r24
    1c40:	99 1f       	adc	r25, r25
    1c42:	aa 1f       	adc	r26, r26
    1c44:	bb 1f       	adc	r27, r27
    1c46:	9c 01       	movw	r18, r24
    1c48:	ad 01       	movw	r20, r26
    1c4a:	22 0f       	add	r18, r18
    1c4c:	33 1f       	adc	r19, r19
    1c4e:	44 1f       	adc	r20, r20
    1c50:	55 1f       	adc	r21, r21
    1c52:	22 0f       	add	r18, r18
    1c54:	33 1f       	adc	r19, r19
    1c56:	44 1f       	adc	r20, r20
    1c58:	55 1f       	adc	r21, r21
    1c5a:	60 e0       	ldi	r22, 0x00	; 0
    1c5c:	7d e2       	ldi	r23, 0x2D	; 45
    1c5e:	81 e3       	ldi	r24, 0x31	; 49
    1c60:	91 e0       	ldi	r25, 0x01	; 1
    1c62:	0e 94 07 11 	call	0x220e	; 0x220e <__udivmodsi4>
    1c66:	21 50       	subi	r18, 0x01	; 1
    1c68:	31 09       	sbc	r19, r1
    1c6a:	30 93 c5 00 	sts	0x00C5, r19	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
    1c6e:	20 93 c4 00 	sts	0x00C4, r18	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
    1c72:	e2 ec       	ldi	r30, 0xC2	; 194
    1c74:	f0 e0       	ldi	r31, 0x00	; 0
    1c76:	80 81       	ld	r24, Z
    1c78:	8f 73       	andi	r24, 0x3F	; 63
    1c7a:	80 83       	st	Z, r24
    1c7c:	d2 30       	cpi	r29, 0x02	; 2
    1c7e:	21 f4       	brne	.+8      	; 0x1c88 <_Z10UART0_Initjhh+0x72>
    1c80:	80 81       	ld	r24, Z
    1c82:	88 60       	ori	r24, 0x08	; 8
    1c84:	80 83       	st	Z, r24
    1c86:	05 c0       	rjmp	.+10     	; 0x1c92 <_Z10UART0_Initjhh+0x7c>
    1c88:	e2 ec       	ldi	r30, 0xC2	; 194
    1c8a:	f0 e0       	ldi	r31, 0x00	; 0
    1c8c:	80 81       	ld	r24, Z
    1c8e:	87 7f       	andi	r24, 0xF7	; 247
    1c90:	80 83       	st	Z, r24
    1c92:	c2 30       	cpi	r28, 0x02	; 2
    1c94:	49 f4       	brne	.+18     	; 0x1ca8 <_Z10UART0_Initjhh+0x92>
    1c96:	e2 ec       	ldi	r30, 0xC2	; 194
    1c98:	f0 e0       	ldi	r31, 0x00	; 0
    1c9a:	80 81       	ld	r24, Z
    1c9c:	8f 7e       	andi	r24, 0xEF	; 239
    1c9e:	80 83       	st	Z, r24
    1ca0:	80 81       	ld	r24, Z
    1ca2:	80 62       	ori	r24, 0x20	; 32
    1ca4:	80 83       	st	Z, r24
    1ca6:	0d c0       	rjmp	.+26     	; 0x1cc2 <_Z10UART0_Initjhh+0xac>
    1ca8:	c3 30       	cpi	r28, 0x03	; 3
    1caa:	31 f4       	brne	.+12     	; 0x1cb8 <_Z10UART0_Initjhh+0xa2>
    1cac:	e2 ec       	ldi	r30, 0xC2	; 194
    1cae:	f0 e0       	ldi	r31, 0x00	; 0
    1cb0:	80 81       	ld	r24, Z
    1cb2:	80 63       	ori	r24, 0x30	; 48
    1cb4:	80 83       	st	Z, r24
    1cb6:	05 c0       	rjmp	.+10     	; 0x1cc2 <_Z10UART0_Initjhh+0xac>
    1cb8:	e2 ec       	ldi	r30, 0xC2	; 194
    1cba:	f0 e0       	ldi	r31, 0x00	; 0
    1cbc:	80 81       	ld	r24, Z
    1cbe:	8f 7c       	andi	r24, 0xCF	; 207
    1cc0:	80 83       	st	Z, r24
    1cc2:	e2 ec       	ldi	r30, 0xC2	; 194
    1cc4:	f0 e0       	ldi	r31, 0x00	; 0
    1cc6:	80 81       	ld	r24, Z
    1cc8:	86 60       	ori	r24, 0x06	; 6
    1cca:	80 83       	st	Z, r24
    1ccc:	e1 ec       	ldi	r30, 0xC1	; 193
    1cce:	f0 e0       	ldi	r31, 0x00	; 0
    1cd0:	80 81       	ld	r24, Z
    1cd2:	80 6a       	ori	r24, 0xA0	; 160
    1cd4:	80 83       	st	Z, r24
    1cd6:	80 81       	ld	r24, Z
    1cd8:	88 61       	ori	r24, 0x18	; 24
    1cda:	80 83       	st	Z, r24
    1cdc:	df 91       	pop	r29
    1cde:	cf 91       	pop	r28
    1ce0:	08 95       	ret

00001ce2 <_Z13UART0_GetCharv>:
    1ce2:	90 91 e7 02 	lds	r25, 0x02E7	; 0x8002e7 <_ZL12UART0_RxHead>
    1ce6:	80 91 e6 02 	lds	r24, 0x02E6	; 0x8002e6 <_ZL12UART0_RxTail>
    1cea:	98 17       	cp	r25, r24
    1cec:	91 f0       	breq	.+36     	; 0x1d12 <_Z13UART0_GetCharv+0x30>
    1cee:	e0 91 e6 02 	lds	r30, 0x02E6	; 0x8002e6 <_ZL12UART0_RxTail>
    1cf2:	ef 5f       	subi	r30, 0xFF	; 255
    1cf4:	ef 73       	andi	r30, 0x3F	; 63
    1cf6:	e0 93 e6 02 	sts	0x02E6, r30	; 0x8002e6 <_ZL12UART0_RxTail>
    1cfa:	f0 e0       	ldi	r31, 0x00	; 0
    1cfc:	e6 51       	subi	r30, 0x16	; 22
    1cfe:	fd 4f       	sbci	r31, 0xFD	; 253
    1d00:	20 81       	ld	r18, Z
    1d02:	80 91 e5 02 	lds	r24, 0x02E5	; 0x8002e5 <_ZL17UART0_LastRxError>
    1d06:	90 e0       	ldi	r25, 0x00	; 0
    1d08:	98 2f       	mov	r25, r24
    1d0a:	88 27       	eor	r24, r24
    1d0c:	82 0f       	add	r24, r18
    1d0e:	91 1d       	adc	r25, r1
    1d10:	08 95       	ret
    1d12:	80 e0       	ldi	r24, 0x00	; 0
    1d14:	91 e0       	ldi	r25, 0x01	; 1
    1d16:	08 95       	ret

00001d18 <_Z15UART0_Availablev>:
    1d18:	30 91 e7 02 	lds	r19, 0x02E7	; 0x8002e7 <_ZL12UART0_RxHead>
    1d1c:	20 91 e6 02 	lds	r18, 0x02E6	; 0x8002e6 <_ZL12UART0_RxTail>
    1d20:	81 e0       	ldi	r24, 0x01	; 1
    1d22:	90 e0       	ldi	r25, 0x00	; 0
    1d24:	32 13       	cpse	r19, r18
    1d26:	02 c0       	rjmp	.+4      	; 0x1d2c <_Z15UART0_Availablev+0x14>
    1d28:	80 e0       	ldi	r24, 0x00	; 0
    1d2a:	90 e0       	ldi	r25, 0x00	; 0
    1d2c:	08 95       	ret

00001d2e <_Z15UART0_QueueCharh>:
    1d2e:	90 91 e9 02 	lds	r25, 0x02E9	; 0x8002e9 <_ZL12UART0_TxHead>
    1d32:	9f 5f       	subi	r25, 0xFF	; 255
    1d34:	9f 73       	andi	r25, 0x3F	; 63
    1d36:	20 91 e8 02 	lds	r18, 0x02E8	; 0x8002e8 <_ZL12UART0_TxTail>
    1d3a:	92 17       	cp	r25, r18
    1d3c:	51 f0       	breq	.+20     	; 0x1d52 <_Z15UART0_QueueCharh+0x24>
    1d3e:	e9 2f       	mov	r30, r25
    1d40:	f0 e0       	ldi	r31, 0x00	; 0
    1d42:	e6 5d       	subi	r30, 0xD6	; 214
    1d44:	fc 4f       	sbci	r31, 0xFC	; 252
    1d46:	80 83       	st	Z, r24
    1d48:	90 93 e9 02 	sts	0x02E9, r25	; 0x8002e9 <_ZL12UART0_TxHead>
    1d4c:	81 e0       	ldi	r24, 0x01	; 1
    1d4e:	90 e0       	ldi	r25, 0x00	; 0
    1d50:	08 95       	ret
    1d52:	80 e0       	ldi	r24, 0x00	; 0
    1d54:	90 e0       	ldi	r25, 0x00	; 0
    1d56:	08 95       	ret

00001d58 <_Z14UART0_PutQueuev>:
    1d58:	e1 ec       	ldi	r30, 0xC1	; 193
    1d5a:	f0 e0       	ldi	r31, 0x00	; 0
    1d5c:	80 81       	ld	r24, Z
    1d5e:	80 62       	ori	r24, 0x20	; 32
    1d60:	80 83       	st	Z, r24
    1d62:	08 95       	ret

00001d64 <_Z18UART0_QueueIsEmptyv>:
    1d64:	20 91 e9 02 	lds	r18, 0x02E9	; 0x8002e9 <_ZL12UART0_TxHead>
    1d68:	90 91 e8 02 	lds	r25, 0x02E8	; 0x8002e8 <_ZL12UART0_TxTail>
    1d6c:	81 e0       	ldi	r24, 0x01	; 1
    1d6e:	29 13       	cpse	r18, r25
    1d70:	80 e0       	ldi	r24, 0x00	; 0
    1d72:	08 95       	ret

00001d74 <__vector_20>:
    1d74:	1f 92       	push	r1
    1d76:	0f 92       	push	r0
    1d78:	0f b6       	in	r0, 0x3f	; 63
    1d7a:	0f 92       	push	r0
    1d7c:	11 24       	eor	r1, r1
    1d7e:	2f 93       	push	r18
    1d80:	8f 93       	push	r24
    1d82:	9f 93       	push	r25
    1d84:	ef 93       	push	r30
    1d86:	ff 93       	push	r31
    1d88:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
    1d8c:	20 91 c6 00 	lds	r18, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
    1d90:	87 70       	andi	r24, 0x07	; 7
    1d92:	e0 91 e7 02 	lds	r30, 0x02E7	; 0x8002e7 <_ZL12UART0_RxHead>
    1d96:	ef 5f       	subi	r30, 0xFF	; 255
    1d98:	ef 73       	andi	r30, 0x3F	; 63
    1d9a:	90 91 e6 02 	lds	r25, 0x02E6	; 0x8002e6 <_ZL12UART0_RxTail>
    1d9e:	e9 17       	cp	r30, r25
    1da0:	39 f0       	breq	.+14     	; 0x1db0 <__vector_20+0x3c>
    1da2:	e0 93 e7 02 	sts	0x02E7, r30	; 0x8002e7 <_ZL12UART0_RxHead>
    1da6:	f0 e0       	ldi	r31, 0x00	; 0
    1da8:	e6 51       	subi	r30, 0x16	; 22
    1daa:	fd 4f       	sbci	r31, 0xFD	; 253
    1dac:	20 83       	st	Z, r18
    1dae:	01 c0       	rjmp	.+2      	; 0x1db2 <__vector_20+0x3e>
    1db0:	82 e0       	ldi	r24, 0x02	; 2
    1db2:	80 93 e5 02 	sts	0x02E5, r24	; 0x8002e5 <_ZL17UART0_LastRxError>
    1db6:	ff 91       	pop	r31
    1db8:	ef 91       	pop	r30
    1dba:	9f 91       	pop	r25
    1dbc:	8f 91       	pop	r24
    1dbe:	2f 91       	pop	r18
    1dc0:	0f 90       	pop	r0
    1dc2:	0f be       	out	0x3f, r0	; 63
    1dc4:	0f 90       	pop	r0
    1dc6:	1f 90       	pop	r1
    1dc8:	18 95       	reti

00001dca <__vector_21>:
    1dca:	1f 92       	push	r1
    1dcc:	0f 92       	push	r0
    1dce:	0f b6       	in	r0, 0x3f	; 63
    1dd0:	0f 92       	push	r0
    1dd2:	11 24       	eor	r1, r1
    1dd4:	8f 93       	push	r24
    1dd6:	9f 93       	push	r25
    1dd8:	ef 93       	push	r30
    1dda:	ff 93       	push	r31
    1ddc:	90 91 e9 02 	lds	r25, 0x02E9	; 0x8002e9 <_ZL12UART0_TxHead>
    1de0:	80 91 e8 02 	lds	r24, 0x02E8	; 0x8002e8 <_ZL12UART0_TxTail>
    1de4:	98 17       	cp	r25, r24
    1de6:	69 f0       	breq	.+26     	; 0x1e02 <__vector_21+0x38>
    1de8:	e0 91 e8 02 	lds	r30, 0x02E8	; 0x8002e8 <_ZL12UART0_TxTail>
    1dec:	ef 5f       	subi	r30, 0xFF	; 255
    1dee:	ef 73       	andi	r30, 0x3F	; 63
    1df0:	e0 93 e8 02 	sts	0x02E8, r30	; 0x8002e8 <_ZL12UART0_TxTail>
    1df4:	f0 e0       	ldi	r31, 0x00	; 0
    1df6:	e6 5d       	subi	r30, 0xD6	; 214
    1df8:	fc 4f       	sbci	r31, 0xFC	; 252
    1dfa:	80 81       	ld	r24, Z
    1dfc:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
    1e00:	05 c0       	rjmp	.+10     	; 0x1e0c <__vector_21+0x42>
    1e02:	e1 ec       	ldi	r30, 0xC1	; 193
    1e04:	f0 e0       	ldi	r31, 0x00	; 0
    1e06:	80 81       	ld	r24, Z
    1e08:	8f 7d       	andi	r24, 0xDF	; 223
    1e0a:	80 83       	st	Z, r24
    1e0c:	ff 91       	pop	r31
    1e0e:	ef 91       	pop	r30
    1e10:	9f 91       	pop	r25
    1e12:	8f 91       	pop	r24
    1e14:	0f 90       	pop	r0
    1e16:	0f be       	out	0x3f, r0	; 63
    1e18:	0f 90       	pop	r0
    1e1a:	1f 90       	pop	r1
    1e1c:	18 95       	reti

00001e1e <_Z10UART1_Initjhh>:
    1e1e:	cf 93       	push	r28
    1e20:	df 93       	push	r29
    1e22:	d6 2f       	mov	r29, r22
    1e24:	c4 2f       	mov	r28, r20
    1e26:	53 9a       	sbi	0x0a, 3	; 10
    1e28:	5b 9a       	sbi	0x0b, 3	; 11
    1e2a:	10 92 64 02 	sts	0x0264, r1	; 0x800264 <_ZL12UART1_TxHead>
    1e2e:	10 92 63 02 	sts	0x0263, r1	; 0x800263 <_ZL12UART1_TxTail>
    1e32:	10 92 62 02 	sts	0x0262, r1	; 0x800262 <_ZL12UART1_RxHead>
    1e36:	10 92 61 02 	sts	0x0261, r1	; 0x800261 <_ZL12UART1_RxTail>
    1e3a:	a0 e0       	ldi	r26, 0x00	; 0
    1e3c:	b0 e0       	ldi	r27, 0x00	; 0
    1e3e:	88 0f       	add	r24, r24
    1e40:	99 1f       	adc	r25, r25
    1e42:	aa 1f       	adc	r26, r26
    1e44:	bb 1f       	adc	r27, r27
    1e46:	88 0f       	add	r24, r24
    1e48:	99 1f       	adc	r25, r25
    1e4a:	aa 1f       	adc	r26, r26
    1e4c:	bb 1f       	adc	r27, r27
    1e4e:	9c 01       	movw	r18, r24
    1e50:	ad 01       	movw	r20, r26
    1e52:	22 0f       	add	r18, r18
    1e54:	33 1f       	adc	r19, r19
    1e56:	44 1f       	adc	r20, r20
    1e58:	55 1f       	adc	r21, r21
    1e5a:	22 0f       	add	r18, r18
    1e5c:	33 1f       	adc	r19, r19
    1e5e:	44 1f       	adc	r20, r20
    1e60:	55 1f       	adc	r21, r21
    1e62:	60 e0       	ldi	r22, 0x00	; 0
    1e64:	7d e2       	ldi	r23, 0x2D	; 45
    1e66:	81 e3       	ldi	r24, 0x31	; 49
    1e68:	91 e0       	ldi	r25, 0x01	; 1
    1e6a:	0e 94 07 11 	call	0x220e	; 0x220e <__udivmodsi4>
    1e6e:	21 50       	subi	r18, 0x01	; 1
    1e70:	31 09       	sbc	r19, r1
    1e72:	30 93 cd 00 	sts	0x00CD, r19	; 0x8000cd <__TEXT_REGION_LENGTH__+0x7e00cd>
    1e76:	20 93 cc 00 	sts	0x00CC, r18	; 0x8000cc <__TEXT_REGION_LENGTH__+0x7e00cc>
    1e7a:	ea ec       	ldi	r30, 0xCA	; 202
    1e7c:	f0 e0       	ldi	r31, 0x00	; 0
    1e7e:	80 81       	ld	r24, Z
    1e80:	8f 73       	andi	r24, 0x3F	; 63
    1e82:	80 83       	st	Z, r24
    1e84:	d2 30       	cpi	r29, 0x02	; 2
    1e86:	21 f4       	brne	.+8      	; 0x1e90 <_Z10UART1_Initjhh+0x72>
    1e88:	80 81       	ld	r24, Z
    1e8a:	88 60       	ori	r24, 0x08	; 8
    1e8c:	80 83       	st	Z, r24
    1e8e:	05 c0       	rjmp	.+10     	; 0x1e9a <_Z10UART1_Initjhh+0x7c>
    1e90:	ea ec       	ldi	r30, 0xCA	; 202
    1e92:	f0 e0       	ldi	r31, 0x00	; 0
    1e94:	80 81       	ld	r24, Z
    1e96:	87 7f       	andi	r24, 0xF7	; 247
    1e98:	80 83       	st	Z, r24
    1e9a:	c2 30       	cpi	r28, 0x02	; 2
    1e9c:	31 f4       	brne	.+12     	; 0x1eaa <_Z10UART1_Initjhh+0x8c>
    1e9e:	ea ec       	ldi	r30, 0xCA	; 202
    1ea0:	f0 e0       	ldi	r31, 0x00	; 0
    1ea2:	80 81       	ld	r24, Z
    1ea4:	80 62       	ori	r24, 0x20	; 32
    1ea6:	80 83       	st	Z, r24
    1ea8:	0d c0       	rjmp	.+26     	; 0x1ec4 <_Z10UART1_Initjhh+0xa6>
    1eaa:	c3 30       	cpi	r28, 0x03	; 3
    1eac:	31 f4       	brne	.+12     	; 0x1eba <_Z10UART1_Initjhh+0x9c>
    1eae:	ea ec       	ldi	r30, 0xCA	; 202
    1eb0:	f0 e0       	ldi	r31, 0x00	; 0
    1eb2:	80 81       	ld	r24, Z
    1eb4:	80 63       	ori	r24, 0x30	; 48
    1eb6:	80 83       	st	Z, r24
    1eb8:	05 c0       	rjmp	.+10     	; 0x1ec4 <_Z10UART1_Initjhh+0xa6>
    1eba:	ea ec       	ldi	r30, 0xCA	; 202
    1ebc:	f0 e0       	ldi	r31, 0x00	; 0
    1ebe:	80 81       	ld	r24, Z
    1ec0:	8f 7c       	andi	r24, 0xCF	; 207
    1ec2:	80 83       	st	Z, r24
    1ec4:	ea ec       	ldi	r30, 0xCA	; 202
    1ec6:	f0 e0       	ldi	r31, 0x00	; 0
    1ec8:	80 81       	ld	r24, Z
    1eca:	86 60       	ori	r24, 0x06	; 6
    1ecc:	80 83       	st	Z, r24
    1ece:	e9 ec       	ldi	r30, 0xC9	; 201
    1ed0:	f0 e0       	ldi	r31, 0x00	; 0
    1ed2:	80 81       	ld	r24, Z
    1ed4:	80 6a       	ori	r24, 0xA0	; 160
    1ed6:	80 83       	st	Z, r24
    1ed8:	80 81       	ld	r24, Z
    1eda:	88 61       	ori	r24, 0x18	; 24
    1edc:	80 83       	st	Z, r24
    1ede:	df 91       	pop	r29
    1ee0:	cf 91       	pop	r28
    1ee2:	08 95       	ret

00001ee4 <_Z13UART1_GetCharv>:
    1ee4:	90 91 62 02 	lds	r25, 0x0262	; 0x800262 <_ZL12UART1_RxHead>
    1ee8:	80 91 61 02 	lds	r24, 0x0261	; 0x800261 <_ZL12UART1_RxTail>
    1eec:	98 17       	cp	r25, r24
    1eee:	91 f0       	breq	.+36     	; 0x1f14 <_Z13UART1_GetCharv+0x30>
    1ef0:	e0 91 61 02 	lds	r30, 0x0261	; 0x800261 <_ZL12UART1_RxTail>
    1ef4:	ef 5f       	subi	r30, 0xFF	; 255
    1ef6:	ef 73       	andi	r30, 0x3F	; 63
    1ef8:	e0 93 61 02 	sts	0x0261, r30	; 0x800261 <_ZL12UART1_RxTail>
    1efc:	f0 e0       	ldi	r31, 0x00	; 0
    1efe:	eb 59       	subi	r30, 0x9B	; 155
    1f00:	fd 4f       	sbci	r31, 0xFD	; 253
    1f02:	20 81       	ld	r18, Z
    1f04:	80 91 60 02 	lds	r24, 0x0260	; 0x800260 <_ZL17UART1_LastRxError>
    1f08:	90 e0       	ldi	r25, 0x00	; 0
    1f0a:	98 2f       	mov	r25, r24
    1f0c:	88 27       	eor	r24, r24
    1f0e:	82 0f       	add	r24, r18
    1f10:	91 1d       	adc	r25, r1
    1f12:	08 95       	ret
    1f14:	80 e0       	ldi	r24, 0x00	; 0
    1f16:	91 e0       	ldi	r25, 0x01	; 1
    1f18:	08 95       	ret

00001f1a <_Z13UART1_PutCharh>:
    1f1a:	20 91 64 02 	lds	r18, 0x0264	; 0x800264 <_ZL12UART1_TxHead>
    1f1e:	2f 5f       	subi	r18, 0xFF	; 255
    1f20:	2f 73       	andi	r18, 0x3F	; 63
    1f22:	90 91 63 02 	lds	r25, 0x0263	; 0x800263 <_ZL12UART1_TxTail>
    1f26:	29 17       	cp	r18, r25
    1f28:	e1 f3       	breq	.-8      	; 0x1f22 <_Z13UART1_PutCharh+0x8>
    1f2a:	e2 2f       	mov	r30, r18
    1f2c:	f0 e0       	ldi	r31, 0x00	; 0
    1f2e:	eb 55       	subi	r30, 0x5B	; 91
    1f30:	fd 4f       	sbci	r31, 0xFD	; 253
    1f32:	80 83       	st	Z, r24
    1f34:	20 93 64 02 	sts	0x0264, r18	; 0x800264 <_ZL12UART1_TxHead>
    1f38:	e9 ec       	ldi	r30, 0xC9	; 201
    1f3a:	f0 e0       	ldi	r31, 0x00	; 0
    1f3c:	80 81       	ld	r24, Z
    1f3e:	80 62       	ori	r24, 0x20	; 32
    1f40:	80 83       	st	Z, r24
    1f42:	08 95       	ret

00001f44 <_Z15UART1_PutStringPKc>:
    1f44:	cf 93       	push	r28
    1f46:	df 93       	push	r29
    1f48:	ec 01       	movw	r28, r24
    1f4a:	88 81       	ld	r24, Y
    1f4c:	88 23       	and	r24, r24
    1f4e:	31 f0       	breq	.+12     	; 0x1f5c <_Z15UART1_PutStringPKc+0x18>
    1f50:	21 96       	adiw	r28, 0x01	; 1
    1f52:	0e 94 8d 0f 	call	0x1f1a	; 0x1f1a <_Z13UART1_PutCharh>
    1f56:	89 91       	ld	r24, Y+
    1f58:	81 11       	cpse	r24, r1
    1f5a:	fb cf       	rjmp	.-10     	; 0x1f52 <_Z15UART1_PutStringPKc+0xe>
    1f5c:	df 91       	pop	r29
    1f5e:	cf 91       	pop	r28
    1f60:	08 95       	ret

00001f62 <_Z15UART1_Availablev>:
    1f62:	30 91 62 02 	lds	r19, 0x0262	; 0x800262 <_ZL12UART1_RxHead>
    1f66:	20 91 61 02 	lds	r18, 0x0261	; 0x800261 <_ZL12UART1_RxTail>
    1f6a:	81 e0       	ldi	r24, 0x01	; 1
    1f6c:	90 e0       	ldi	r25, 0x00	; 0
    1f6e:	32 13       	cpse	r19, r18
    1f70:	02 c0       	rjmp	.+4      	; 0x1f76 <_Z15UART1_Availablev+0x14>
    1f72:	80 e0       	ldi	r24, 0x00	; 0
    1f74:	90 e0       	ldi	r25, 0x00	; 0
    1f76:	08 95       	ret

00001f78 <__vector_28>:
/*************************************************************************
Function: UART1 Receive Complete interrupt
Purpose:  called when the UART has received a character
**************************************************************************/
ISR(USART1_RX_vect)
{
    1f78:	1f 92       	push	r1
    1f7a:	0f 92       	push	r0
    1f7c:	0f b6       	in	r0, 0x3f	; 63
    1f7e:	0f 92       	push	r0
    1f80:	11 24       	eor	r1, r1
    1f82:	2f 93       	push	r18
    1f84:	8f 93       	push	r24
    1f86:	9f 93       	push	r25
    1f88:	ef 93       	push	r30
    1f8a:	ff 93       	push	r31
	unsigned char usr;
	unsigned char lastRxError;
	
	
	/* read UART status register and UART data register */
	usr  = UCSR1A;
    1f8c:	80 91 c8 00 	lds	r24, 0x00C8	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7e00c8>
	data = UDR1;
    1f90:	20 91 ce 00 	lds	r18, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7e00ce>
	
	/* */
	lastRxError = (usr & (FE1 | DOR1));
    1f94:	87 70       	andi	r24, 0x07	; 7
	
	/* calculate buffer index */
	tmphead = ( UART1_RxHead + 1) & UART1_RX_BUFFER_MASK;
    1f96:	e0 91 62 02 	lds	r30, 0x0262	; 0x800262 <_ZL12UART1_RxHead>
    1f9a:	ef 5f       	subi	r30, 0xFF	; 255
    1f9c:	ef 73       	andi	r30, 0x3F	; 63
	
	if ( tmphead == UART1_RxTail )
    1f9e:	90 91 61 02 	lds	r25, 0x0261	; 0x800261 <_ZL12UART1_RxTail>
    1fa2:	e9 17       	cp	r30, r25
    1fa4:	39 f0       	breq	.+14     	; 0x1fb4 <__vector_28+0x3c>
		lastRxError = UART_BUFFER_OVERFLOW >> 8;
	}
	else
	{
		/* store new index */
		UART1_RxHead = tmphead;
    1fa6:	e0 93 62 02 	sts	0x0262, r30	; 0x800262 <_ZL12UART1_RxHead>
		/* store received data in buffer */
		UART1_RxBuf[tmphead] = data;
    1faa:	f0 e0       	ldi	r31, 0x00	; 0
    1fac:	eb 59       	subi	r30, 0x9B	; 155
    1fae:	fd 4f       	sbci	r31, 0xFD	; 253
    1fb0:	20 83       	st	Z, r18
    1fb2:	01 c0       	rjmp	.+2      	; 0x1fb6 <__vector_28+0x3e>
	tmphead = ( UART1_RxHead + 1) & UART1_RX_BUFFER_MASK;
	
	if ( tmphead == UART1_RxTail )
	{
		/* error: receive buffer overflow */
		lastRxError = UART_BUFFER_OVERFLOW >> 8;
    1fb4:	82 e0       	ldi	r24, 0x02	; 2
		UART1_RxHead = tmphead;
		/* store received data in buffer */
		UART1_RxBuf[tmphead] = data;
	}

	UART1_LastRxError = lastRxError;
    1fb6:	80 93 60 02 	sts	0x0260, r24	; 0x800260 <_ZL17UART1_LastRxError>
}
    1fba:	ff 91       	pop	r31
    1fbc:	ef 91       	pop	r30
    1fbe:	9f 91       	pop	r25
    1fc0:	8f 91       	pop	r24
    1fc2:	2f 91       	pop	r18
    1fc4:	0f 90       	pop	r0
    1fc6:	0f be       	out	0x3f, r0	; 63
    1fc8:	0f 90       	pop	r0
    1fca:	1f 90       	pop	r1
    1fcc:	18 95       	reti

00001fce <__vector_29>:
/*************************************************************************
Function: UART1 Data Register Empty interrupt
Purpose:  called when the UART is ready to transmit the next byte
**************************************************************************/
ISR(USART1_UDRE_vect)
{
    1fce:	1f 92       	push	r1
    1fd0:	0f 92       	push	r0
    1fd2:	0f b6       	in	r0, 0x3f	; 63
    1fd4:	0f 92       	push	r0
    1fd6:	11 24       	eor	r1, r1
    1fd8:	8f 93       	push	r24
    1fda:	9f 93       	push	r25
    1fdc:	ef 93       	push	r30
    1fde:	ff 93       	push	r31
	unsigned char tmptail;
	
	if ( UART1_TxHead != UART1_TxTail)
    1fe0:	90 91 64 02 	lds	r25, 0x0264	; 0x800264 <_ZL12UART1_TxHead>
    1fe4:	80 91 63 02 	lds	r24, 0x0263	; 0x800263 <_ZL12UART1_TxTail>
    1fe8:	98 17       	cp	r25, r24
    1fea:	69 f0       	breq	.+26     	; 0x2006 <__vector_29+0x38>
	{
		/* calculate and store new buffer index */
		tmptail = (UART1_TxTail + 1) & UART1_TX_BUFFER_MASK;
    1fec:	e0 91 63 02 	lds	r30, 0x0263	; 0x800263 <_ZL12UART1_TxTail>
    1ff0:	ef 5f       	subi	r30, 0xFF	; 255
    1ff2:	ef 73       	andi	r30, 0x3F	; 63
		UART1_TxTail = tmptail;
    1ff4:	e0 93 63 02 	sts	0x0263, r30	; 0x800263 <_ZL12UART1_TxTail>

		/* get one byte from buffer and write it to UART */
		UDR1 = UART1_TxBuf[tmptail];  /* start transmission */
    1ff8:	f0 e0       	ldi	r31, 0x00	; 0
    1ffa:	eb 55       	subi	r30, 0x5B	; 91
    1ffc:	fd 4f       	sbci	r31, 0xFD	; 253
    1ffe:	80 81       	ld	r24, Z
    2000:	80 93 ce 00 	sts	0x00CE, r24	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7e00ce>
    2004:	05 c0       	rjmp	.+10     	; 0x2010 <__vector_29+0x42>
	}
	else
	{
		/* tx buffer empty, disable UDRE interrupt */
		UCSR1B &= ~(1 << UDRIE1);
    2006:	e9 ec       	ldi	r30, 0xC9	; 201
    2008:	f0 e0       	ldi	r31, 0x00	; 0
    200a:	80 81       	ld	r24, Z
    200c:	8f 7d       	andi	r24, 0xDF	; 223
    200e:	80 83       	st	Z, r24
	}
    2010:	ff 91       	pop	r31
    2012:	ef 91       	pop	r30
    2014:	9f 91       	pop	r25
    2016:	8f 91       	pop	r24
    2018:	0f 90       	pop	r0
    201a:	0f be       	out	0x3f, r0	; 63
    201c:	0f 90       	pop	r0
    201e:	1f 90       	pop	r1
    2020:	18 95       	reti

00002022 <_Z7UI_Initv>:

MCP_Output LoopRelays[NUMBER_OF_LOOPS];
MCP_Output CtrlSwitchRelays[NUMBER_OF_CTRL_SWITCHES];

void UI_Init()
{
    2022:	ef 92       	push	r14
    2024:	ff 92       	push	r15
    2026:	1f 93       	push	r17
    2028:	cf 93       	push	r28
    202a:	df 93       	push	r29
    202c:	cd b7       	in	r28, 0x3d	; 61
    202e:	de b7       	in	r29, 0x3e	; 62
    2030:	64 97       	sbiw	r28, 0x14	; 20
    2032:	0f b6       	in	r0, 0x3f	; 63
    2034:	f8 94       	cli
    2036:	de bf       	out	0x3e, r29	; 62
    2038:	0f be       	out	0x3f, r0	; 63
    203a:	cd bf       	out	0x3d, r28	; 61
	/* Initialize outputs UI LEDs */
	ModeRunLED = MCP_Output(MCP23017_UI_LEDS_ADDR, PortB, (MCP23017_Pin)UI_MODE_RUN_LED_PIN);
    203c:	25 e0       	ldi	r18, 0x05	; 5
    203e:	41 e0       	ldi	r20, 0x01	; 1
    2040:	60 e0       	ldi	r22, 0x00	; 0
    2042:	ce 01       	movw	r24, r28
    2044:	41 96       	adiw	r24, 0x11	; 17
    2046:	0e 94 24 02 	call	0x448	; 0x448 <_ZN10MCP_OutputC1Eh13MCP23017_Port12MCP23017_Pin>
    204a:	89 89       	ldd	r24, Y+17	; 0x11
    204c:	9a 89       	ldd	r25, Y+18	; 0x12
    204e:	ab 89       	ldd	r26, Y+19	; 0x13
    2050:	bc 89       	ldd	r27, Y+20	; 0x14
    2052:	80 93 d2 03 	sts	0x03D2, r24	; 0x8003d2 <ModeRunLED>
    2056:	90 93 d3 03 	sts	0x03D3, r25	; 0x8003d3 <ModeRunLED+0x1>
    205a:	a0 93 d4 03 	sts	0x03D4, r26	; 0x8003d4 <ModeRunLED+0x2>
    205e:	b0 93 d5 03 	sts	0x03D5, r27	; 0x8003d5 <ModeRunLED+0x3>
	ModeEditPresetLED = MCP_Output(MCP23017_UI_LEDS_ADDR, PortB, (MCP23017_Pin)UI_MODE_PRESET_LED_PIN);
    2062:	26 e0       	ldi	r18, 0x06	; 6
    2064:	41 e0       	ldi	r20, 0x01	; 1
    2066:	60 e0       	ldi	r22, 0x00	; 0
    2068:	ce 01       	movw	r24, r28
    206a:	0d 96       	adiw	r24, 0x0d	; 13
    206c:	0e 94 24 02 	call	0x448	; 0x448 <_ZN10MCP_OutputC1Eh13MCP23017_Port12MCP23017_Pin>
    2070:	8d 85       	ldd	r24, Y+13	; 0x0d
    2072:	9e 85       	ldd	r25, Y+14	; 0x0e
    2074:	af 85       	ldd	r26, Y+15	; 0x0f
    2076:	b8 89       	ldd	r27, Y+16	; 0x10
    2078:	80 93 ce 03 	sts	0x03CE, r24	; 0x8003ce <ModeEditPresetLED>
    207c:	90 93 cf 03 	sts	0x03CF, r25	; 0x8003cf <ModeEditPresetLED+0x1>
    2080:	a0 93 d0 03 	sts	0x03D0, r26	; 0x8003d0 <ModeEditPresetLED+0x2>
    2084:	b0 93 d1 03 	sts	0x03D1, r27	; 0x8003d1 <ModeEditPresetLED+0x3>
	ModeEditMidiLED = MCP_Output(MCP23017_UI_LEDS_ADDR, PortB, (MCP23017_Pin)UI_MODE_MIDI_LED_PIN);
    2088:	27 e0       	ldi	r18, 0x07	; 7
    208a:	41 e0       	ldi	r20, 0x01	; 1
    208c:	60 e0       	ldi	r22, 0x00	; 0
    208e:	ce 01       	movw	r24, r28
    2090:	09 96       	adiw	r24, 0x09	; 9
    2092:	0e 94 24 02 	call	0x448	; 0x448 <_ZN10MCP_OutputC1Eh13MCP23017_Port12MCP23017_Pin>
    2096:	89 85       	ldd	r24, Y+9	; 0x09
    2098:	9a 85       	ldd	r25, Y+10	; 0x0a
    209a:	ab 85       	ldd	r26, Y+11	; 0x0b
    209c:	bc 85       	ldd	r27, Y+12	; 0x0c
    209e:	80 93 ca 03 	sts	0x03CA, r24	; 0x8003ca <ModeEditMidiLED>
    20a2:	90 93 cb 03 	sts	0x03CB, r25	; 0x8003cb <ModeEditMidiLED+0x1>
    20a6:	a0 93 cc 03 	sts	0x03CC, r26	; 0x8003cc <ModeEditMidiLED+0x2>
    20aa:	b0 93 cd 03 	sts	0x03CD, r27	; 0x8003cd <ModeEditMidiLED+0x3>
    20ae:	0f 2e       	mov	r0, r31
    20b0:	fa ea       	ldi	r31, 0xAA	; 170
    20b2:	ef 2e       	mov	r14, r31
    20b4:	f3 e0       	ldi	r31, 0x03	; 3
    20b6:	ff 2e       	mov	r15, r31
    20b8:	f0 2d       	mov	r31, r0
	
	for (uint8_t i = 0; i < NUMBER_OF_LOOPS; i++)
    20ba:	10 e0       	ldi	r17, 0x00	; 0
	{
		LoopLEDs[i] = MCP_Output(MCP23017_UI_LEDS_ADDR, PortA, (MCP23017_Pin)i);
    20bc:	21 2f       	mov	r18, r17
    20be:	40 e0       	ldi	r20, 0x00	; 0
    20c0:	60 e0       	ldi	r22, 0x00	; 0
    20c2:	ce 01       	movw	r24, r28
    20c4:	05 96       	adiw	r24, 0x05	; 5
    20c6:	0e 94 24 02 	call	0x448	; 0x448 <_ZN10MCP_OutputC1Eh13MCP23017_Port12MCP23017_Pin>
    20ca:	8d 81       	ldd	r24, Y+5	; 0x05
    20cc:	9e 81       	ldd	r25, Y+6	; 0x06
    20ce:	af 81       	ldd	r26, Y+7	; 0x07
    20d0:	b8 85       	ldd	r27, Y+8	; 0x08
    20d2:	f7 01       	movw	r30, r14
    20d4:	81 93       	st	Z+, r24
    20d6:	91 93       	st	Z+, r25
    20d8:	a1 93       	st	Z+, r26
    20da:	b1 93       	st	Z+, r27
    20dc:	7f 01       	movw	r14, r30
	/* Initialize outputs UI LEDs */
	ModeRunLED = MCP_Output(MCP23017_UI_LEDS_ADDR, PortB, (MCP23017_Pin)UI_MODE_RUN_LED_PIN);
	ModeEditPresetLED = MCP_Output(MCP23017_UI_LEDS_ADDR, PortB, (MCP23017_Pin)UI_MODE_PRESET_LED_PIN);
	ModeEditMidiLED = MCP_Output(MCP23017_UI_LEDS_ADDR, PortB, (MCP23017_Pin)UI_MODE_MIDI_LED_PIN);
	
	for (uint8_t i = 0; i < NUMBER_OF_LOOPS; i++)
    20de:	1f 5f       	subi	r17, 0xFF	; 255
    20e0:	18 30       	cpi	r17, 0x08	; 8
    20e2:	61 f7       	brne	.-40     	; 0x20bc <_Z7UI_Initv+0x9a>
    20e4:	0f 2e       	mov	r0, r31
    20e6:	fa e9       	ldi	r31, 0x9A	; 154
    20e8:	ef 2e       	mov	r14, r31
    20ea:	f3 e0       	ldi	r31, 0x03	; 3
    20ec:	ff 2e       	mov	r15, r31
    20ee:	f0 2d       	mov	r31, r0
    20f0:	10 e0       	ldi	r17, 0x00	; 0
		LoopLEDs[i] = MCP_Output(MCP23017_UI_LEDS_ADDR, PortA, (MCP23017_Pin)i);
	}
		
	for (uint8_t i = 0; i < NUMBER_OF_CTRL_SWITCHES; i++)
	{
		CtrlSwitchLEDs[i] = MCP_Output(MCP23017_UI_LEDS_ADDR, PortB, (MCP23017_Pin)(i));
    20f2:	21 2f       	mov	r18, r17
    20f4:	41 e0       	ldi	r20, 0x01	; 1
    20f6:	60 e0       	ldi	r22, 0x00	; 0
    20f8:	ce 01       	movw	r24, r28
    20fa:	01 96       	adiw	r24, 0x01	; 1
    20fc:	0e 94 24 02 	call	0x448	; 0x448 <_ZN10MCP_OutputC1Eh13MCP23017_Port12MCP23017_Pin>
    2100:	89 81       	ldd	r24, Y+1	; 0x01
    2102:	9a 81       	ldd	r25, Y+2	; 0x02
    2104:	ab 81       	ldd	r26, Y+3	; 0x03
    2106:	bc 81       	ldd	r27, Y+4	; 0x04
    2108:	f7 01       	movw	r30, r14
    210a:	81 93       	st	Z+, r24
    210c:	91 93       	st	Z+, r25
    210e:	a1 93       	st	Z+, r26
    2110:	b1 93       	st	Z+, r27
    2112:	7f 01       	movw	r14, r30
	for (uint8_t i = 0; i < NUMBER_OF_LOOPS; i++)
	{
		LoopLEDs[i] = MCP_Output(MCP23017_UI_LEDS_ADDR, PortA, (MCP23017_Pin)i);
	}
		
	for (uint8_t i = 0; i < NUMBER_OF_CTRL_SWITCHES; i++)
    2114:	1f 5f       	subi	r17, 0xFF	; 255
    2116:	14 30       	cpi	r17, 0x04	; 4
    2118:	61 f7       	brne	.-40     	; 0x20f2 <_Z7UI_Initv+0xd0>
	//{
		//CtrlSwitchRelays[i] = MCP_Output(MCP23017_RELAYS_ADDR, PortB, (MCP23017_Pin)i);
	//}
	
	/* Set auto toggle speed */
	MCP_Output::SetAutoToggleSpeed(360/*ms*/);
    211a:	88 e6       	ldi	r24, 0x68	; 104
    211c:	91 e0       	ldi	r25, 0x01	; 1
    211e:	0e 94 6a 02 	call	0x4d4	; 0x4d4 <_ZN10MCP_Output18SetAutoToggleSpeedEj>
}
    2122:	64 96       	adiw	r28, 0x14	; 20
    2124:	0f b6       	in	r0, 0x3f	; 63
    2126:	f8 94       	cli
    2128:	de bf       	out	0x3e, r29	; 62
    212a:	0f be       	out	0x3f, r0	; 63
    212c:	cd bf       	out	0x3d, r28	; 61
    212e:	df 91       	pop	r29
    2130:	cf 91       	pop	r28
    2132:	1f 91       	pop	r17
    2134:	ff 90       	pop	r15
    2136:	ef 90       	pop	r14
    2138:	08 95       	ret

0000213a <_GLOBAL__sub_I_ModeRunLED>:
    213a:	0f 93       	push	r16
    213c:	1f 93       	push	r17
    213e:	cf 93       	push	r28
    2140:	df 93       	push	r29
#include <avr/io.h>
#include <stdint-gcc.h>
#include "MCP23017.h"
#include "UI.h"

MCP_Output ModeRunLED;
    2142:	82 ed       	ldi	r24, 0xD2	; 210
    2144:	93 e0       	ldi	r25, 0x03	; 3
    2146:	0e 94 a6 01 	call	0x34c	; 0x34c <_ZN10MCP_OutputC1Ev>
MCP_Output ModeEditPresetLED;
    214a:	8e ec       	ldi	r24, 0xCE	; 206
    214c:	93 e0       	ldi	r25, 0x03	; 3
    214e:	0e 94 a6 01 	call	0x34c	; 0x34c <_ZN10MCP_OutputC1Ev>
MCP_Output ModeEditMidiLED;
    2152:	8a ec       	ldi	r24, 0xCA	; 202
    2154:	93 e0       	ldi	r25, 0x03	; 3
    2156:	0e 94 a6 01 	call	0x34c	; 0x34c <_ZN10MCP_OutputC1Ev>
    215a:	ca ea       	ldi	r28, 0xAA	; 170
    215c:	d3 e0       	ldi	r29, 0x03	; 3
    215e:	0a ec       	ldi	r16, 0xCA	; 202
    2160:	13 e0       	ldi	r17, 0x03	; 3
MCP_Output LoopLEDs[NUMBER_OF_LOOPS];
    2162:	ce 01       	movw	r24, r28
    2164:	0e 94 a6 01 	call	0x34c	; 0x34c <_ZN10MCP_OutputC1Ev>
    2168:	24 96       	adiw	r28, 0x04	; 4
    216a:	0c 17       	cp	r16, r28
    216c:	1d 07       	cpc	r17, r29
    216e:	c9 f7       	brne	.-14     	; 0x2162 <_GLOBAL__sub_I_ModeRunLED+0x28>
MCP_Output CtrlSwitchLEDs[NUMBER_OF_CTRL_SWITCHES];
    2170:	8a e9       	ldi	r24, 0x9A	; 154
    2172:	93 e0       	ldi	r25, 0x03	; 3
    2174:	0e 94 a6 01 	call	0x34c	; 0x34c <_ZN10MCP_OutputC1Ev>
    2178:	8e e9       	ldi	r24, 0x9E	; 158
    217a:	93 e0       	ldi	r25, 0x03	; 3
    217c:	0e 94 a6 01 	call	0x34c	; 0x34c <_ZN10MCP_OutputC1Ev>
    2180:	82 ea       	ldi	r24, 0xA2	; 162
    2182:	93 e0       	ldi	r25, 0x03	; 3
    2184:	0e 94 a6 01 	call	0x34c	; 0x34c <_ZN10MCP_OutputC1Ev>
    2188:	86 ea       	ldi	r24, 0xA6	; 166
    218a:	93 e0       	ldi	r25, 0x03	; 3
    218c:	0e 94 a6 01 	call	0x34c	; 0x34c <_ZN10MCP_OutputC1Ev>
    2190:	ca e7       	ldi	r28, 0x7A	; 122
    2192:	d3 e0       	ldi	r29, 0x03	; 3
    2194:	0a e9       	ldi	r16, 0x9A	; 154
    2196:	13 e0       	ldi	r17, 0x03	; 3

MCP_Output LoopRelays[NUMBER_OF_LOOPS];
    2198:	ce 01       	movw	r24, r28
    219a:	0e 94 a6 01 	call	0x34c	; 0x34c <_ZN10MCP_OutputC1Ev>
    219e:	24 96       	adiw	r28, 0x04	; 4
    21a0:	c0 17       	cp	r28, r16
    21a2:	d1 07       	cpc	r29, r17
    21a4:	c9 f7       	brne	.-14     	; 0x2198 <_GLOBAL__sub_I_ModeRunLED+0x5e>
MCP_Output CtrlSwitchRelays[NUMBER_OF_CTRL_SWITCHES];
    21a6:	8a e6       	ldi	r24, 0x6A	; 106
    21a8:	93 e0       	ldi	r25, 0x03	; 3
    21aa:	0e 94 a6 01 	call	0x34c	; 0x34c <_ZN10MCP_OutputC1Ev>
    21ae:	8e e6       	ldi	r24, 0x6E	; 110
    21b0:	93 e0       	ldi	r25, 0x03	; 3
    21b2:	0e 94 a6 01 	call	0x34c	; 0x34c <_ZN10MCP_OutputC1Ev>
    21b6:	82 e7       	ldi	r24, 0x72	; 114
    21b8:	93 e0       	ldi	r25, 0x03	; 3
    21ba:	0e 94 a6 01 	call	0x34c	; 0x34c <_ZN10MCP_OutputC1Ev>
    21be:	86 e7       	ldi	r24, 0x76	; 118
    21c0:	93 e0       	ldi	r25, 0x03	; 3
    21c2:	0e 94 a6 01 	call	0x34c	; 0x34c <_ZN10MCP_OutputC1Ev>
		//CtrlSwitchRelays[i] = MCP_Output(MCP23017_RELAYS_ADDR, PortB, (MCP23017_Pin)i);
	//}
	
	/* Set auto toggle speed */
	MCP_Output::SetAutoToggleSpeed(360/*ms*/);
}
    21c6:	df 91       	pop	r29
    21c8:	cf 91       	pop	r28
    21ca:	1f 91       	pop	r17
    21cc:	0f 91       	pop	r16
    21ce:	08 95       	ret

000021d0 <_Z12Util_Bit2Inth>:
    21d0:	88 23       	and	r24, r24
    21d2:	31 f0       	breq	.+12     	; 0x21e0 <_Z12Util_Bit2Inth+0x10>
    21d4:	90 e0       	ldi	r25, 0x00	; 0
    21d6:	86 95       	lsr	r24
    21d8:	9f 5f       	subi	r25, 0xFF	; 255
    21da:	81 11       	cpse	r24, r1
    21dc:	fc cf       	rjmp	.-8      	; 0x21d6 <_Z12Util_Bit2Inth+0x6>
    21de:	01 c0       	rjmp	.+2      	; 0x21e2 <_Z12Util_Bit2Inth+0x12>
    21e0:	90 e0       	ldi	r25, 0x00	; 0
    21e2:	89 2f       	mov	r24, r25
    21e4:	08 95       	ret

000021e6 <__divmodhi4>:
    21e6:	97 fb       	bst	r25, 7
    21e8:	07 2e       	mov	r0, r23
    21ea:	16 f4       	brtc	.+4      	; 0x21f0 <__divmodhi4+0xa>
    21ec:	00 94       	com	r0
    21ee:	07 d0       	rcall	.+14     	; 0x21fe <__divmodhi4_neg1>
    21f0:	77 fd       	sbrc	r23, 7
    21f2:	09 d0       	rcall	.+18     	; 0x2206 <__divmodhi4_neg2>
    21f4:	0e 94 3a 11 	call	0x2274	; 0x2274 <__udivmodhi4>
    21f8:	07 fc       	sbrc	r0, 7
    21fa:	05 d0       	rcall	.+10     	; 0x2206 <__divmodhi4_neg2>
    21fc:	3e f4       	brtc	.+14     	; 0x220c <__divmodhi4_exit>

000021fe <__divmodhi4_neg1>:
    21fe:	90 95       	com	r25
    2200:	81 95       	neg	r24
    2202:	9f 4f       	sbci	r25, 0xFF	; 255
    2204:	08 95       	ret

00002206 <__divmodhi4_neg2>:
    2206:	70 95       	com	r23
    2208:	61 95       	neg	r22
    220a:	7f 4f       	sbci	r23, 0xFF	; 255

0000220c <__divmodhi4_exit>:
    220c:	08 95       	ret

0000220e <__udivmodsi4>:
    220e:	a1 e2       	ldi	r26, 0x21	; 33
    2210:	1a 2e       	mov	r1, r26
    2212:	aa 1b       	sub	r26, r26
    2214:	bb 1b       	sub	r27, r27
    2216:	fd 01       	movw	r30, r26
    2218:	0d c0       	rjmp	.+26     	; 0x2234 <__udivmodsi4_ep>

0000221a <__udivmodsi4_loop>:
    221a:	aa 1f       	adc	r26, r26
    221c:	bb 1f       	adc	r27, r27
    221e:	ee 1f       	adc	r30, r30
    2220:	ff 1f       	adc	r31, r31
    2222:	a2 17       	cp	r26, r18
    2224:	b3 07       	cpc	r27, r19
    2226:	e4 07       	cpc	r30, r20
    2228:	f5 07       	cpc	r31, r21
    222a:	20 f0       	brcs	.+8      	; 0x2234 <__udivmodsi4_ep>
    222c:	a2 1b       	sub	r26, r18
    222e:	b3 0b       	sbc	r27, r19
    2230:	e4 0b       	sbc	r30, r20
    2232:	f5 0b       	sbc	r31, r21

00002234 <__udivmodsi4_ep>:
    2234:	66 1f       	adc	r22, r22
    2236:	77 1f       	adc	r23, r23
    2238:	88 1f       	adc	r24, r24
    223a:	99 1f       	adc	r25, r25
    223c:	1a 94       	dec	r1
    223e:	69 f7       	brne	.-38     	; 0x221a <__udivmodsi4_loop>
    2240:	60 95       	com	r22
    2242:	70 95       	com	r23
    2244:	80 95       	com	r24
    2246:	90 95       	com	r25
    2248:	9b 01       	movw	r18, r22
    224a:	ac 01       	movw	r20, r24
    224c:	bd 01       	movw	r22, r26
    224e:	cf 01       	movw	r24, r30
    2250:	08 95       	ret

00002252 <__tablejump2__>:
    2252:	ee 0f       	add	r30, r30
    2254:	ff 1f       	adc	r31, r31
    2256:	05 90       	lpm	r0, Z+
    2258:	f4 91       	lpm	r31, Z
    225a:	e0 2d       	mov	r30, r0
    225c:	09 94       	ijmp

0000225e <__muluhisi3>:
    225e:	0e 94 4e 11 	call	0x229c	; 0x229c <__umulhisi3>
    2262:	a5 9f       	mul	r26, r21
    2264:	90 0d       	add	r25, r0
    2266:	b4 9f       	mul	r27, r20
    2268:	90 0d       	add	r25, r0
    226a:	a4 9f       	mul	r26, r20
    226c:	80 0d       	add	r24, r0
    226e:	91 1d       	adc	r25, r1
    2270:	11 24       	eor	r1, r1
    2272:	08 95       	ret

00002274 <__udivmodhi4>:
    2274:	aa 1b       	sub	r26, r26
    2276:	bb 1b       	sub	r27, r27
    2278:	51 e1       	ldi	r21, 0x11	; 17
    227a:	07 c0       	rjmp	.+14     	; 0x228a <__udivmodhi4_ep>

0000227c <__udivmodhi4_loop>:
    227c:	aa 1f       	adc	r26, r26
    227e:	bb 1f       	adc	r27, r27
    2280:	a6 17       	cp	r26, r22
    2282:	b7 07       	cpc	r27, r23
    2284:	10 f0       	brcs	.+4      	; 0x228a <__udivmodhi4_ep>
    2286:	a6 1b       	sub	r26, r22
    2288:	b7 0b       	sbc	r27, r23

0000228a <__udivmodhi4_ep>:
    228a:	88 1f       	adc	r24, r24
    228c:	99 1f       	adc	r25, r25
    228e:	5a 95       	dec	r21
    2290:	a9 f7       	brne	.-22     	; 0x227c <__udivmodhi4_loop>
    2292:	80 95       	com	r24
    2294:	90 95       	com	r25
    2296:	bc 01       	movw	r22, r24
    2298:	cd 01       	movw	r24, r26
    229a:	08 95       	ret

0000229c <__umulhisi3>:
    229c:	a2 9f       	mul	r26, r18
    229e:	b0 01       	movw	r22, r0
    22a0:	b3 9f       	mul	r27, r19
    22a2:	c0 01       	movw	r24, r0
    22a4:	a3 9f       	mul	r26, r19
    22a6:	70 0d       	add	r23, r0
    22a8:	81 1d       	adc	r24, r1
    22aa:	11 24       	eor	r1, r1
    22ac:	91 1d       	adc	r25, r1
    22ae:	b2 9f       	mul	r27, r18
    22b0:	70 0d       	add	r23, r0
    22b2:	81 1d       	adc	r24, r1
    22b4:	11 24       	eor	r1, r1
    22b6:	91 1d       	adc	r25, r1
    22b8:	08 95       	ret

000022ba <eeprom_read_block>:
    22ba:	dc 01       	movw	r26, r24
    22bc:	cb 01       	movw	r24, r22

000022be <eeprom_read_blraw>:
    22be:	fc 01       	movw	r30, r24
    22c0:	f9 99       	sbic	0x1f, 1	; 31
    22c2:	fe cf       	rjmp	.-4      	; 0x22c0 <eeprom_read_blraw+0x2>
    22c4:	06 c0       	rjmp	.+12     	; 0x22d2 <eeprom_read_blraw+0x14>
    22c6:	f2 bd       	out	0x22, r31	; 34
    22c8:	e1 bd       	out	0x21, r30	; 33
    22ca:	f8 9a       	sbi	0x1f, 0	; 31
    22cc:	31 96       	adiw	r30, 0x01	; 1
    22ce:	00 b4       	in	r0, 0x20	; 32
    22d0:	0d 92       	st	X+, r0
    22d2:	41 50       	subi	r20, 0x01	; 1
    22d4:	50 40       	sbci	r21, 0x00	; 0
    22d6:	b8 f7       	brcc	.-18     	; 0x22c6 <eeprom_read_blraw+0x8>
    22d8:	08 95       	ret

000022da <eeprom_read_byte>:
    22da:	f9 99       	sbic	0x1f, 1	; 31
    22dc:	fe cf       	rjmp	.-4      	; 0x22da <eeprom_read_byte>
    22de:	92 bd       	out	0x22, r25	; 34
    22e0:	81 bd       	out	0x21, r24	; 33
    22e2:	f8 9a       	sbi	0x1f, 0	; 31
    22e4:	99 27       	eor	r25, r25
    22e6:	80 b5       	in	r24, 0x20	; 32
    22e8:	08 95       	ret

000022ea <eeprom_write_block>:
    22ea:	dc 01       	movw	r26, r24
    22ec:	cb 01       	movw	r24, r22
    22ee:	03 c0       	rjmp	.+6      	; 0x22f6 <eeprom_write_block+0xc>
    22f0:	2d 91       	ld	r18, X+
    22f2:	0e 94 80 11 	call	0x2300	; 0x2300 <eeprom_write_r18>
    22f6:	41 50       	subi	r20, 0x01	; 1
    22f8:	50 40       	sbci	r21, 0x00	; 0
    22fa:	d0 f7       	brcc	.-12     	; 0x22f0 <eeprom_write_block+0x6>
    22fc:	08 95       	ret

000022fe <eeprom_write_byte>:
    22fe:	26 2f       	mov	r18, r22

00002300 <eeprom_write_r18>:
    2300:	f9 99       	sbic	0x1f, 1	; 31
    2302:	fe cf       	rjmp	.-4      	; 0x2300 <eeprom_write_r18>
    2304:	1f ba       	out	0x1f, r1	; 31
    2306:	92 bd       	out	0x22, r25	; 34
    2308:	81 bd       	out	0x21, r24	; 33
    230a:	20 bd       	out	0x20, r18	; 32
    230c:	0f b6       	in	r0, 0x3f	; 63
    230e:	f8 94       	cli
    2310:	fa 9a       	sbi	0x1f, 2	; 31
    2312:	f9 9a       	sbi	0x1f, 1	; 31
    2314:	0f be       	out	0x3f, r0	; 63
    2316:	01 96       	adiw	r24, 0x01	; 1
    2318:	08 95       	ret

0000231a <_exit>:
    231a:	f8 94       	cli

0000231c <__stop_program>:
    231c:	ff cf       	rjmp	.-2      	; 0x231c <__stop_program>
