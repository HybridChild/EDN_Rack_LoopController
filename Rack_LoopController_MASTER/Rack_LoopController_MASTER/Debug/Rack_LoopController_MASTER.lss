
Rack_LoopController_MASTER.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000003e  00800100  000021c6  0000225a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000021c6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000001be  0080013e  0080013e  00002298  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00002298  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000022c8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000438  00000000  00000000  00002308  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00004afd  00000000  00000000  00002740  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001a1c  00000000  00000000  0000723d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000025e1  00000000  00000000  00008c59  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000914  00000000  00000000  0000b23c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00001baa  00000000  00000000  0000bb50  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001c8b  00000000  00000000  0000d6fa  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000328  00000000  00000000  0000f385  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__ctors_end>
       4:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
       8:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
       c:	0c 94 5c 05 	jmp	0xab8	; 0xab8 <__vector_3>
      10:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
      14:	0c 94 3b 05 	jmp	0xa76	; 0xa76 <__vector_5>
      18:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
      1c:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
      20:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
      24:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
      28:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
      2c:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
      30:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
      34:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
      38:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
      3c:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
      40:	0c 94 93 0c 	jmp	0x1926	; 0x1926 <__vector_16>
      44:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
      48:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
      4c:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
      50:	0c 94 0c 0e 	jmp	0x1c18	; 0x1c18 <__vector_20>
      54:	0c 94 37 0e 	jmp	0x1c6e	; 0x1c6e <__vector_21>
      58:	0c 94 f4 04 	jmp	0x9e8	; 0x9e8 <__vector_22>
      5c:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
      60:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
      64:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
      68:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
      6c:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
      70:	0c 94 10 0f 	jmp	0x1e20	; 0x1e20 <__vector_28>
      74:	0c 94 3b 0f 	jmp	0x1e76	; 0x1e76 <__vector_29>
      78:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
      7c:	98 07       	cpc	r25, r24
      7e:	99 09       	sbc	r25, r9
      80:	99 09       	sbc	r25, r9
      82:	d2 07       	cpc	r29, r18
      84:	99 09       	sbc	r25, r9
      86:	d2 07       	cpc	r29, r18
      88:	99 09       	sbc	r25, r9
      8a:	99 09       	sbc	r25, r9
      8c:	99 09       	sbc	r25, r9
      8e:	0e 08       	sbc	r0, r14
      90:	99 09       	sbc	r25, r9
      92:	4f 08       	sbc	r4, r15
      94:	99 09       	sbc	r25, r9
      96:	c7 08       	sbc	r12, r7
      98:	99 09       	sbc	r25, r9
      9a:	f6 08       	sbc	r15, r6
      9c:	f3 09       	sbc	r31, r3
      9e:	37 0a       	sbc	r3, r23
      a0:	5a 0a       	sbc	r5, r26
      a2:	7d 0a       	sbc	r7, r29
      a4:	95 0a       	sbc	r9, r21
      a6:	c7 0a       	sbc	r12, r23
      a8:	e9 0a       	sbc	r14, r25
      aa:	56 0c       	add	r5, r6
      ac:	56 0c       	add	r5, r6
      ae:	2d 0b       	sbc	r18, r29
      b0:	45 0b       	sbc	r20, r21
      b2:	82 0b       	sbc	r24, r18
      b4:	ab 0b       	sbc	r26, r27
      b6:	e7 0b       	sbc	r30, r23
      b8:	56 0c       	add	r5, r6
      ba:	0c 0c       	add	r0, r12

000000bc <__ctors_start>:
      bc:	f1 0f       	add	r31, r17

000000be <__ctors_end>:
      be:	11 24       	eor	r1, r1
      c0:	1f be       	out	0x3f, r1	; 63
      c2:	cf ef       	ldi	r28, 0xFF	; 255
      c4:	d8 e0       	ldi	r29, 0x08	; 8
      c6:	de bf       	out	0x3e, r29	; 62
      c8:	cd bf       	out	0x3d, r28	; 61

000000ca <__do_copy_data>:
      ca:	11 e0       	ldi	r17, 0x01	; 1
      cc:	a0 e0       	ldi	r26, 0x00	; 0
      ce:	b1 e0       	ldi	r27, 0x01	; 1
      d0:	e6 ec       	ldi	r30, 0xC6	; 198
      d2:	f1 e2       	ldi	r31, 0x21	; 33
      d4:	02 c0       	rjmp	.+4      	; 0xda <__do_copy_data+0x10>
      d6:	05 90       	lpm	r0, Z+
      d8:	0d 92       	st	X+, r0
      da:	ae 33       	cpi	r26, 0x3E	; 62
      dc:	b1 07       	cpc	r27, r17
      de:	d9 f7       	brne	.-10     	; 0xd6 <__do_copy_data+0xc>

000000e0 <__do_clear_bss>:
      e0:	22 e0       	ldi	r18, 0x02	; 2
      e2:	ae e3       	ldi	r26, 0x3E	; 62
      e4:	b1 e0       	ldi	r27, 0x01	; 1
      e6:	01 c0       	rjmp	.+2      	; 0xea <.do_clear_bss_start>

000000e8 <.do_clear_bss_loop>:
      e8:	1d 92       	st	X+, r1

000000ea <.do_clear_bss_start>:
      ea:	ac 3f       	cpi	r26, 0xFC	; 252
      ec:	b2 07       	cpc	r27, r18
      ee:	e1 f7       	brne	.-8      	; 0xe8 <.do_clear_bss_loop>

000000f0 <__do_global_ctors>:
      f0:	10 e0       	ldi	r17, 0x00	; 0
      f2:	cf e5       	ldi	r28, 0x5F	; 95
      f4:	d0 e0       	ldi	r29, 0x00	; 0
      f6:	04 c0       	rjmp	.+8      	; 0x100 <__do_global_ctors+0x10>
      f8:	21 97       	sbiw	r28, 0x01	; 1
      fa:	fe 01       	movw	r30, r28
      fc:	0e 94 7d 10 	call	0x20fa	; 0x20fa <__tablejump2__>
     100:	ce 35       	cpi	r28, 0x5E	; 94
     102:	d1 07       	cpc	r29, r17
     104:	c9 f7       	brne	.-14     	; 0xf8 <__do_global_ctors+0x8>
     106:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <main>
     10a:	0c 94 e1 10 	jmp	0x21c2	; 0x21c2 <_exit>

0000010e <__bad_interrupt>:
     10e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000112 <_Z8i2c_initv>:
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWEA);
	while(!(TWCR & (1<<TWINT)));    

    return TWDR;

}/* i2c_readAck */
     112:	10 92 b9 00 	sts	0x00B9, r1	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
     116:	8c e5       	ldi	r24, 0x5C	; 92
     118:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7e00b8>
     11c:	08 95       	ret

0000011e <_Z9i2c_starth>:
     11e:	94 ea       	ldi	r25, 0xA4	; 164
     120:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
     124:	ec eb       	ldi	r30, 0xBC	; 188
     126:	f0 e0       	ldi	r31, 0x00	; 0
     128:	90 81       	ld	r25, Z
     12a:	99 23       	and	r25, r25
     12c:	ec f7       	brge	.-6      	; 0x128 <_Z9i2c_starth+0xa>
     12e:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
     132:	98 7f       	andi	r25, 0xF8	; 248
     134:	98 30       	cpi	r25, 0x08	; 8
     136:	11 f0       	breq	.+4      	; 0x13c <_Z9i2c_starth+0x1e>
     138:	90 31       	cpi	r25, 0x10	; 16
     13a:	a1 f4       	brne	.+40     	; 0x164 <_Z9i2c_starth+0x46>
     13c:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
     140:	84 e8       	ldi	r24, 0x84	; 132
     142:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
     146:	ec eb       	ldi	r30, 0xBC	; 188
     148:	f0 e0       	ldi	r31, 0x00	; 0
     14a:	80 81       	ld	r24, Z
     14c:	88 23       	and	r24, r24
     14e:	ec f7       	brge	.-6      	; 0x14a <_Z9i2c_starth+0x2c>
     150:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
     154:	98 7f       	andi	r25, 0xF8	; 248
     156:	98 31       	cpi	r25, 0x18	; 24
     158:	39 f0       	breq	.+14     	; 0x168 <_Z9i2c_starth+0x4a>
     15a:	81 e0       	ldi	r24, 0x01	; 1
     15c:	90 34       	cpi	r25, 0x40	; 64
     15e:	29 f4       	brne	.+10     	; 0x16a <_Z9i2c_starth+0x4c>
     160:	80 e0       	ldi	r24, 0x00	; 0
     162:	08 95       	ret
     164:	81 e0       	ldi	r24, 0x01	; 1
     166:	08 95       	ret
     168:	80 e0       	ldi	r24, 0x00	; 0
     16a:	08 95       	ret

0000016c <_Z8i2c_stopv>:
     16c:	84 e9       	ldi	r24, 0x94	; 148
     16e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
     172:	ec eb       	ldi	r30, 0xBC	; 188
     174:	f0 e0       	ldi	r31, 0x00	; 0
     176:	80 81       	ld	r24, Z
     178:	84 fd       	sbrc	r24, 4
     17a:	fd cf       	rjmp	.-6      	; 0x176 <_Z8i2c_stopv+0xa>
     17c:	08 95       	ret

0000017e <_Z9i2c_writeh>:
     17e:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
     182:	84 e8       	ldi	r24, 0x84	; 132
     184:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
     188:	ec eb       	ldi	r30, 0xBC	; 188
     18a:	f0 e0       	ldi	r31, 0x00	; 0
     18c:	80 81       	ld	r24, Z
     18e:	88 23       	and	r24, r24
     190:	ec f7       	brge	.-6      	; 0x18c <_Z9i2c_writeh+0xe>
     192:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
     196:	98 7f       	andi	r25, 0xF8	; 248
     198:	81 e0       	ldi	r24, 0x01	; 1
     19a:	98 32       	cpi	r25, 0x28	; 40
     19c:	09 f4       	brne	.+2      	; 0x1a0 <_Z9i2c_writeh+0x22>
     19e:	80 e0       	ldi	r24, 0x00	; 0
     1a0:	08 95       	ret

000001a2 <_Z11i2c_readNakv>:
 
 Return:  byte read from I2C device
*************************************************************************/
unsigned char i2c_readNak(void)
{
	TWCR = (1<<TWINT) | (1<<TWEN);
     1a2:	84 e8       	ldi	r24, 0x84	; 132
     1a4:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	while(!(TWCR & (1<<TWINT)));
     1a8:	ec eb       	ldi	r30, 0xBC	; 188
     1aa:	f0 e0       	ldi	r31, 0x00	; 0
     1ac:	80 81       	ld	r24, Z
     1ae:	88 23       	and	r24, r24
     1b0:	ec f7       	brge	.-6      	; 0x1ac <_Z11i2c_readNakv+0xa>
	
    return TWDR;
     1b2:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>

}/* i2c_readNak */
     1b6:	08 95       	ret

000001b8 <main>:

/* Main application */
int main(void)
{
	/* Initialization */
	Timer0_Init();
     1b8:	0e 94 75 0c 	call	0x18ea	; 0x18ea <_Z11Timer0_Initv>
	i2c_init();
     1bc:	0e 94 89 00 	call	0x112	; 0x112 <_Z8i2c_initv>
	UART0_Init(PEDAL_UART_BAUDRATE, UART_2_STOP_BITS, UART_NO_PARITY);
     1c0:	40 e0       	ldi	r20, 0x00	; 0
     1c2:	62 e0       	ldi	r22, 0x02	; 2
     1c4:	80 e0       	ldi	r24, 0x00	; 0
     1c6:	9b e4       	ldi	r25, 0x4B	; 75
     1c8:	0e 94 63 0d 	call	0x1ac6	; 0x1ac6 <_Z10UART0_Initjhh>
	UART1_Init(MIDI_UART_BAUDRATE, UART_1_STOP_BIT, UART_NO_PARITY);
     1cc:	40 e0       	ldi	r20, 0x00	; 0
     1ce:	61 e0       	ldi	r22, 0x01	; 1
     1d0:	82 e1       	ldi	r24, 0x12	; 18
     1d2:	9a e7       	ldi	r25, 0x7A	; 122
     1d4:	0e 94 61 0e 	call	0x1cc2	; 0x1cc2 <_Z10UART1_Initjhh>
	PedalCom_Init();
     1d8:	0e 94 e2 04 	call	0x9c4	; 0x9c4 <_Z13PedalCom_Initv>
	
	RotaryEncoder_Init();
     1dc:	0e 94 19 05 	call	0xa32	; 0xa32 <_Z18RotaryEncoder_Initv>
	SP10281_Init();
     1e0:	0e 94 25 06 	call	0xc4a	; 0xc4a <_Z12SP10281_Initv>
	UI_Init();
     1e4:	0e 94 65 0f 	call	0x1eca	; 0x1eca <_Z7UI_Initv>
	
	/* Global Enable Interrupt */
	sei();
     1e8:	78 94       	sei
	
	/* Main loop */
    while (1) 
    {
		/* Handle incoming MIDI */
		if (UART1_Available())
     1ea:	0e 94 03 0f 	call	0x1e06	; 0x1e06 <_Z15UART1_Availablev>
     1ee:	89 2b       	or	r24, r25
     1f0:	11 f0       	breq	.+4      	; 0x1f6 <main+0x3e>
		{
			MIDI_ReceiveIncoming();
     1f2:	0e 94 7c 02 	call	0x4f8	; 0x4f8 <_Z20MIDI_ReceiveIncomingv>
		}
		
		if (MIDI_ProgramChangeFlag)
     1f6:	80 91 44 01 	lds	r24, 0x0144	; 0x800144 <MIDI_ProgramChangeFlag>
     1fa:	88 23       	and	r24, r24
     1fc:	21 f0       	breq	.+8      	; 0x206 <main+0x4e>
		{
			MIDI_ProgramChangeFlag = false;
     1fe:	10 92 44 01 	sts	0x0144, r1	; 0x800144 <MIDI_ProgramChangeFlag>
			System_HandleMIDIProgramChange();
     202:	0e 94 14 07 	call	0xe28	; 0xe28 <_Z30System_HandleMIDIProgramChangev>
		}
		
		/* Handle incoming data from Pedal */
		while (UART0_Available())
     206:	0e 94 e4 0d 	call	0x1bc8	; 0x1bc8 <_Z15UART0_Availablev>
     20a:	89 2b       	or	r24, r25
     20c:	19 f0       	breq	.+6      	; 0x214 <main+0x5c>
		{
			PedalCom_Receive();
     20e:	0e 94 f2 02 	call	0x5e4	; 0x5e4 <_Z16PedalCom_Receivev>
			MIDI_ProgramChangeFlag = false;
			System_HandleMIDIProgramChange();
		}
		
		/* Handle incoming data from Pedal */
		while (UART0_Available())
     212:	f9 cf       	rjmp	.-14     	; 0x206 <main+0x4e>
		{
			PedalCom_Receive();
		}
		
		/* Handle command received from Pedal. (Only once per program loop) */
		if (PedalCom_RxAvailable())
     214:	0e 94 ce 02 	call	0x59c	; 0x59c <_Z20PedalCom_RxAvailablev>
     218:	81 11       	cpse	r24, r1
		{
			PedalCom_HandleReceived();
     21a:	0e 94 b4 03 	call	0x768	; 0x768 <_Z23PedalCom_HandleReceivedv>
		}
		
		/* Handle TX Command queue */
		if (PedalCom_TxAvailable())
     21e:	0e 94 d7 02 	call	0x5ae	; 0x5ae <_Z20PedalCom_TxAvailablev>
     222:	81 11       	cpse	r24, r1
		{
			PedalCom_PutCommand();
     224:	0e 94 3e 04 	call	0x87c	; 0x87c <_Z19PedalCom_PutCommandv>
		}
		
		/* Transmit data to Pedal */
		if (PedalCom_DelayTxFlag)
     228:	80 91 c4 01 	lds	r24, 0x01C4	; 0x8001c4 <PedalCom_DelayTxFlag>
     22c:	88 23       	and	r24, r24
     22e:	21 f0       	breq	.+8      	; 0x238 <main+0x80>
		{
			PedalCom_DelayTxFlag = false;
     230:	10 92 c4 01 	sts	0x01C4, r1	; 0x8001c4 <PedalCom_DelayTxFlag>
			PedalCom_Transmit();
     234:	0e 94 ee 04 	call	0x9dc	; 0x9dc <_Z17PedalCom_Transmitv>
		}
		
		/* Send current System State to Pedal (Heartbeat) */
		if (PedalCom_ResponseTimeoutFlag)
     238:	80 91 c2 01 	lds	r24, 0x01C2	; 0x8001c2 <PedalCom_ResponseTimeoutFlag>
     23c:	88 23       	and	r24, r24
     23e:	91 f0       	breq	.+36     	; 0x264 <main+0xac>
		{
			PedalCom_ResponseTimeoutFlag = false;
     240:	10 92 c2 01 	sts	0x01C2, r1	; 0x8001c2 <PedalCom_ResponseTimeoutFlag>
			
			/* If last command did not get an ACK */
			if (PedalCom_TxAvailable())
     244:	0e 94 d7 02 	call	0x5ae	; 0x5ae <_Z20PedalCom_TxAvailablev>
     248:	88 23       	and	r24, r24
     24a:	29 f0       	breq	.+10     	; 0x256 <main+0x9e>
			{
				PedalCom_ConnectionOpen = false;
     24c:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <PedalCom_ConnectionOpen>
				PedalCom_FlushTxQueue();
     250:	0e 94 e0 02 	call	0x5c0	; 0x5c0 <_Z21PedalCom_FlushTxQueuev>
     254:	07 c0       	rjmp	.+14     	; 0x264 <main+0xac>
			}
			else
			{
				PedalCom_QueueCommand(UpdateSystemState, 1, (uint8_t *)SystemState);
     256:	40 91 ff 01 	lds	r20, 0x01FF	; 0x8001ff <SystemState>
     25a:	50 e0       	ldi	r21, 0x00	; 0
     25c:	61 e0       	ldi	r22, 0x01	; 1
     25e:	85 ed       	ldi	r24, 0xD5	; 213
     260:	0e 94 e5 03 	call	0x7ca	; 0x7ca <_Z21PedalCom_QueueCommand3CMDhPh>
			}
		}
		
		/* Service 7-segment display */
		if (SP10281_OvfFlag)
     264:	80 91 c9 01 	lds	r24, 0x01C9	; 0x8001c9 <SP10281_OvfFlag>
     268:	88 23       	and	r24, r24
     26a:	21 f0       	breq	.+8      	; 0x274 <main+0xbc>
		{
			SP10281_OvfFlag = 0;
     26c:	10 92 c9 01 	sts	0x01C9, r1	; 0x8001c9 <SP10281_OvfFlag>
			SP10281_Update();
     270:	0e 94 7a 05 	call	0xaf4	; 0xaf4 <_Z14SP10281_Updatev>
		}
		
		/* Blink UI LEDs */
		if (MCP_Output::AutoToggle_Flag)
     274:	80 91 40 01 	lds	r24, 0x0140	; 0x800140 <_ZN10MCP_Output15AutoToggle_FlagE>
     278:	88 23       	and	r24, r24
     27a:	29 f0       	breq	.+10     	; 0x286 <main+0xce>
		{
			MCP_Output::AutoToggle_Flag = 0;
     27c:	10 92 40 01 	sts	0x0140, r1	; 0x800140 <_ZN10MCP_Output15AutoToggle_FlagE>
			MCP_Output::PerformAutoToggle(MCP23017_UI_LEDS_ADDR);
     280:	80 e0       	ldi	r24, 0x00	; 0
     282:	0e 94 5d 02 	call	0x4ba	; 0x4ba <_ZN10MCP_Output17PerformAutoToggleEh>
		}
		
		/* Handle input from rotary encoder */
		if (RotEnc_State != IDLE && RotEnc_State != PRESSED)
     286:	80 91 c5 01 	lds	r24, 0x01C5	; 0x8001c5 <RotEnc_State>
     28a:	88 23       	and	r24, r24
     28c:	21 f0       	breq	.+8      	; 0x296 <main+0xde>
     28e:	80 91 c5 01 	lds	r24, 0x01C5	; 0x8001c5 <RotEnc_State>
     292:	84 30       	cpi	r24, 0x04	; 4
     294:	99 f4       	brne	.+38     	; 0x2bc <main+0x104>
			RotEnc_State = IDLE;
			RotaryEncoder_EnableInterrupt();
		}
		
		/* Handle temp select timeout condition */
		if (System_TempSelectFlag)
     296:	80 91 03 02 	lds	r24, 0x0203	; 0x800203 <System_TempSelectFlag>
     29a:	88 23       	and	r24, r24
     29c:	21 f0       	breq	.+8      	; 0x2a6 <main+0xee>
		{
			System_TempSelectFlag = false;
     29e:	10 92 03 02 	sts	0x0203, r1	; 0x800203 <System_TempSelectFlag>
			System_HandleTempSelectTimeout();
     2a2:	0e 94 2f 06 	call	0xc5e	; 0xc5e <_Z30System_HandleTempSelectTimeoutv>
		}
		
		/* Reset UI LEDs after selection mark */
		if (System_MarkSelectionFlag)
     2a6:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <System_MarkSelectionFlag>
     2aa:	88 23       	and	r24, r24
     2ac:	21 f0       	breq	.+8      	; 0x2b6 <main+0xfe>
		{
			System_MarkSelectionFlag = false;
     2ae:	10 92 00 02 	sts	0x0200, r1	; 0x800200 <System_MarkSelectionFlag>
			System_HandleMarkSelection();
     2b2:	0e 94 89 06 	call	0xd12	; 0xd12 <_Z26System_HandleMarkSelectionv>
		}
		
		/* The grand state machine */
		System_Run();
     2b6:	0e 94 e4 09 	call	0x13c8	; 0x13c8 <_Z10System_Runv>
	
	/* Global Enable Interrupt */
	sei();
	
	/* Main loop */
    while (1) 
     2ba:	97 cf       	rjmp	.-210    	; 0x1ea <main+0x32>
		}
		
		/* Handle input from rotary encoder */
		if (RotEnc_State != IDLE && RotEnc_State != PRESSED)
		{
			System_HandleRotaryEncoderInput();
     2bc:	0e 94 88 07 	call	0xf10	; 0xf10 <_Z31System_HandleRotaryEncoderInputv>
			
			RotEnc_State = IDLE;
     2c0:	10 92 c5 01 	sts	0x01C5, r1	; 0x8001c5 <RotEnc_State>
			RotaryEncoder_EnableInterrupt();
     2c4:	0e 94 32 05 	call	0xa64	; 0xa64 <_Z29RotaryEncoder_EnableInterruptv>
     2c8:	e6 cf       	rjmp	.-52     	; 0x296 <main+0xde>

000002ca <_Z17MCP23017_WriteReghhh>:
	{
		this->Set();
	} 
	else if (State == SET)
	{
		this->Clear();
     2ca:	cf 93       	push	r28
     2cc:	df 93       	push	r29
     2ce:	d6 2f       	mov	r29, r22
     2d0:	c4 2f       	mov	r28, r20
     2d2:	80 62       	ori	r24, 0x20	; 32
     2d4:	88 0f       	add	r24, r24
     2d6:	0e 94 8f 00 	call	0x11e	; 0x11e <_Z9i2c_starth>
     2da:	8d 2f       	mov	r24, r29
     2dc:	0e 94 bf 00 	call	0x17e	; 0x17e <_Z9i2c_writeh>
     2e0:	8c 2f       	mov	r24, r28
     2e2:	0e 94 bf 00 	call	0x17e	; 0x17e <_Z9i2c_writeh>
     2e6:	0e 94 b6 00 	call	0x16c	; 0x16c <_Z8i2c_stopv>
     2ea:	df 91       	pop	r29
     2ec:	cf 91       	pop	r28
     2ee:	08 95       	ret

000002f0 <_Z16MCP23017_ReadReghh>:
     2f0:	cf 93       	push	r28
     2f2:	df 93       	push	r29
     2f4:	d6 2f       	mov	r29, r22
     2f6:	80 62       	ori	r24, 0x20	; 32
     2f8:	c8 2f       	mov	r28, r24
     2fa:	cc 0f       	add	r28, r28
     2fc:	8c 2f       	mov	r24, r28
     2fe:	0e 94 8f 00 	call	0x11e	; 0x11e <_Z9i2c_starth>
     302:	8d 2f       	mov	r24, r29
     304:	0e 94 bf 00 	call	0x17e	; 0x17e <_Z9i2c_writeh>
     308:	0e 94 b6 00 	call	0x16c	; 0x16c <_Z8i2c_stopv>
     30c:	8c 2f       	mov	r24, r28
     30e:	81 60       	ori	r24, 0x01	; 1
     310:	0e 94 8f 00 	call	0x11e	; 0x11e <_Z9i2c_starth>
     314:	0e 94 d1 00 	call	0x1a2	; 0x1a2 <_Z11i2c_readNakv>
     318:	df 91       	pop	r29
     31a:	cf 91       	pop	r28
     31c:	08 95       	ret

0000031e <_ZN10MCP_OutputC1Ev>:
     31e:	08 95       	ret

00000320 <_ZN10MCP_Output8getStateEv>:
     320:	fc 01       	movw	r30, r24
     322:	83 81       	ldd	r24, Z+3	; 0x03
     324:	08 95       	ret

00000326 <_ZN10MCP_Output3SetEv>:
     326:	1f 93       	push	r17
     328:	cf 93       	push	r28
     32a:	df 93       	push	r29
     32c:	ec 01       	movw	r28, r24
     32e:	89 81       	ldd	r24, Y+1	; 0x01
     330:	81 11       	cpse	r24, r1
     332:	10 c0       	rjmp	.+32     	; 0x354 <_ZN10MCP_Output3SetEv+0x2e>
     334:	20 91 3f 01 	lds	r18, 0x013F	; 0x80013f <_ZN10MCP_Output16AutoToggle_PortAE>
     338:	81 e0       	ldi	r24, 0x01	; 1
     33a:	90 e0       	ldi	r25, 0x00	; 0
     33c:	0a 80       	ldd	r0, Y+2	; 0x02
     33e:	02 c0       	rjmp	.+4      	; 0x344 <_ZN10MCP_Output3SetEv+0x1e>
     340:	88 0f       	add	r24, r24
     342:	99 1f       	adc	r25, r25
     344:	0a 94       	dec	r0
     346:	e2 f7       	brpl	.-8      	; 0x340 <_ZN10MCP_Output3SetEv+0x1a>
     348:	80 95       	com	r24
     34a:	82 23       	and	r24, r18
     34c:	80 93 3f 01 	sts	0x013F, r24	; 0x80013f <_ZN10MCP_Output16AutoToggle_PortAE>
     350:	14 e1       	ldi	r17, 0x14	; 20
     352:	0f c0       	rjmp	.+30     	; 0x372 <_ZN10MCP_Output3SetEv+0x4c>
     354:	20 91 3e 01 	lds	r18, 0x013E	; 0x80013e <__data_end>
     358:	81 e0       	ldi	r24, 0x01	; 1
     35a:	90 e0       	ldi	r25, 0x00	; 0
     35c:	0a 80       	ldd	r0, Y+2	; 0x02
     35e:	02 c0       	rjmp	.+4      	; 0x364 <_ZN10MCP_Output3SetEv+0x3e>
     360:	88 0f       	add	r24, r24
     362:	99 1f       	adc	r25, r25
     364:	0a 94       	dec	r0
     366:	e2 f7       	brpl	.-8      	; 0x360 <_ZN10MCP_Output3SetEv+0x3a>
     368:	80 95       	com	r24
     36a:	82 23       	and	r24, r18
     36c:	80 93 3e 01 	sts	0x013E, r24	; 0x80013e <__data_end>
     370:	15 e1       	ldi	r17, 0x15	; 21
     372:	61 2f       	mov	r22, r17
     374:	88 81       	ld	r24, Y
     376:	0e 94 78 01 	call	0x2f0	; 0x2f0 <_Z16MCP23017_ReadReghh>
     37a:	41 e0       	ldi	r20, 0x01	; 1
     37c:	50 e0       	ldi	r21, 0x00	; 0
     37e:	0a 80       	ldd	r0, Y+2	; 0x02
     380:	02 c0       	rjmp	.+4      	; 0x386 <_ZN10MCP_Output3SetEv+0x60>
     382:	44 0f       	add	r20, r20
     384:	55 1f       	adc	r21, r21
     386:	0a 94       	dec	r0
     388:	e2 f7       	brpl	.-8      	; 0x382 <_ZN10MCP_Output3SetEv+0x5c>
     38a:	48 2b       	or	r20, r24
     38c:	61 2f       	mov	r22, r17
     38e:	88 81       	ld	r24, Y
     390:	0e 94 65 01 	call	0x2ca	; 0x2ca <_Z17MCP23017_WriteReghhh>
     394:	81 e0       	ldi	r24, 0x01	; 1
     396:	8b 83       	std	Y+3, r24	; 0x03
     398:	df 91       	pop	r29
     39a:	cf 91       	pop	r28
     39c:	1f 91       	pop	r17
     39e:	08 95       	ret

000003a0 <_ZN10MCP_Output5ClearEv>:
     3a0:	1f 93       	push	r17
     3a2:	cf 93       	push	r28
     3a4:	df 93       	push	r29
     3a6:	ec 01       	movw	r28, r24
     3a8:	89 81       	ldd	r24, Y+1	; 0x01
     3aa:	81 11       	cpse	r24, r1
     3ac:	10 c0       	rjmp	.+32     	; 0x3ce <_ZN10MCP_Output5ClearEv+0x2e>
     3ae:	20 91 3f 01 	lds	r18, 0x013F	; 0x80013f <_ZN10MCP_Output16AutoToggle_PortAE>
     3b2:	81 e0       	ldi	r24, 0x01	; 1
     3b4:	90 e0       	ldi	r25, 0x00	; 0
     3b6:	0a 80       	ldd	r0, Y+2	; 0x02
     3b8:	02 c0       	rjmp	.+4      	; 0x3be <_ZN10MCP_Output5ClearEv+0x1e>
     3ba:	88 0f       	add	r24, r24
     3bc:	99 1f       	adc	r25, r25
     3be:	0a 94       	dec	r0
     3c0:	e2 f7       	brpl	.-8      	; 0x3ba <_ZN10MCP_Output5ClearEv+0x1a>
     3c2:	80 95       	com	r24
     3c4:	82 23       	and	r24, r18
     3c6:	80 93 3f 01 	sts	0x013F, r24	; 0x80013f <_ZN10MCP_Output16AutoToggle_PortAE>
     3ca:	14 e1       	ldi	r17, 0x14	; 20
     3cc:	0f c0       	rjmp	.+30     	; 0x3ec <_ZN10MCP_Output5ClearEv+0x4c>
     3ce:	20 91 3e 01 	lds	r18, 0x013E	; 0x80013e <__data_end>
     3d2:	81 e0       	ldi	r24, 0x01	; 1
     3d4:	90 e0       	ldi	r25, 0x00	; 0
     3d6:	0a 80       	ldd	r0, Y+2	; 0x02
     3d8:	02 c0       	rjmp	.+4      	; 0x3de <_ZN10MCP_Output5ClearEv+0x3e>
     3da:	88 0f       	add	r24, r24
     3dc:	99 1f       	adc	r25, r25
     3de:	0a 94       	dec	r0
     3e0:	e2 f7       	brpl	.-8      	; 0x3da <_ZN10MCP_Output5ClearEv+0x3a>
     3e2:	80 95       	com	r24
     3e4:	82 23       	and	r24, r18
     3e6:	80 93 3e 01 	sts	0x013E, r24	; 0x80013e <__data_end>
     3ea:	15 e1       	ldi	r17, 0x15	; 21
     3ec:	61 2f       	mov	r22, r17
     3ee:	88 81       	ld	r24, Y
     3f0:	0e 94 78 01 	call	0x2f0	; 0x2f0 <_Z16MCP23017_ReadReghh>
     3f4:	41 e0       	ldi	r20, 0x01	; 1
     3f6:	50 e0       	ldi	r21, 0x00	; 0
     3f8:	0a 80       	ldd	r0, Y+2	; 0x02
     3fa:	02 c0       	rjmp	.+4      	; 0x400 <__LOCK_REGION_LENGTH__>
     3fc:	44 0f       	add	r20, r20
     3fe:	55 1f       	adc	r21, r21
     400:	0a 94       	dec	r0
     402:	e2 f7       	brpl	.-8      	; 0x3fc <_ZN10MCP_Output5ClearEv+0x5c>
     404:	40 95       	com	r20
     406:	48 23       	and	r20, r24
     408:	61 2f       	mov	r22, r17
     40a:	88 81       	ld	r24, Y
     40c:	0e 94 65 01 	call	0x2ca	; 0x2ca <_Z17MCP23017_WriteReghhh>
     410:	1b 82       	std	Y+3, r1	; 0x03
     412:	df 91       	pop	r29
     414:	cf 91       	pop	r28
     416:	1f 91       	pop	r17
     418:	08 95       	ret

0000041a <_ZN10MCP_OutputC1Eh13MCP23017_Port12MCP23017_Pin>:
     41a:	1f 93       	push	r17
     41c:	cf 93       	push	r28
     41e:	df 93       	push	r29
     420:	ec 01       	movw	r28, r24
     422:	86 2f       	mov	r24, r22
     424:	68 83       	st	Y, r22
     426:	49 83       	std	Y+1, r20	; 0x01
     428:	2a 83       	std	Y+2, r18	; 0x02
     42a:	11 e0       	ldi	r17, 0x01	; 1
     42c:	41 11       	cpse	r20, r1
     42e:	01 c0       	rjmp	.+2      	; 0x432 <_ZN10MCP_OutputC1Eh13MCP23017_Port12MCP23017_Pin+0x18>
     430:	10 e0       	ldi	r17, 0x00	; 0
     432:	61 2f       	mov	r22, r17
     434:	0e 94 78 01 	call	0x2f0	; 0x2f0 <_Z16MCP23017_ReadReghh>
     438:	41 e0       	ldi	r20, 0x01	; 1
     43a:	50 e0       	ldi	r21, 0x00	; 0
     43c:	0a 80       	ldd	r0, Y+2	; 0x02
     43e:	02 c0       	rjmp	.+4      	; 0x444 <_ZN10MCP_OutputC1Eh13MCP23017_Port12MCP23017_Pin+0x2a>
     440:	44 0f       	add	r20, r20
     442:	55 1f       	adc	r21, r21
     444:	0a 94       	dec	r0
     446:	e2 f7       	brpl	.-8      	; 0x440 <_ZN10MCP_OutputC1Eh13MCP23017_Port12MCP23017_Pin+0x26>
     448:	40 95       	com	r20
     44a:	48 23       	and	r20, r24
     44c:	61 2f       	mov	r22, r17
     44e:	88 81       	ld	r24, Y
     450:	0e 94 65 01 	call	0x2ca	; 0x2ca <_Z17MCP23017_WriteReghhh>
     454:	ce 01       	movw	r24, r28
     456:	0e 94 d0 01 	call	0x3a0	; 0x3a0 <_ZN10MCP_Output5ClearEv>
     45a:	df 91       	pop	r29
     45c:	cf 91       	pop	r28
     45e:	1f 91       	pop	r17
     460:	08 95       	ret

00000462 <_ZN10MCP_Output10AutoToggleEv>:
	}
}

void MCP_Output::AutoToggle()
{
     462:	fc 01       	movw	r30, r24
	State = AUTO_TOGGLE;
     464:	82 e0       	ldi	r24, 0x02	; 2
     466:	83 83       	std	Z+3, r24	; 0x03
	
	if (Port == PortA)
     468:	81 81       	ldd	r24, Z+1	; 0x01
     46a:	81 11       	cpse	r24, r1
     46c:	0e c0       	rjmp	.+28     	; 0x48a <_ZN10MCP_Output10AutoToggleEv+0x28>
	{
		MCP_Output::AutoToggle_PortA |= (1 << Pin);
     46e:	20 91 3f 01 	lds	r18, 0x013F	; 0x80013f <_ZN10MCP_Output16AutoToggle_PortAE>
     472:	81 e0       	ldi	r24, 0x01	; 1
     474:	90 e0       	ldi	r25, 0x00	; 0
     476:	02 80       	ldd	r0, Z+2	; 0x02
     478:	02 c0       	rjmp	.+4      	; 0x47e <_ZN10MCP_Output10AutoToggleEv+0x1c>
     47a:	88 0f       	add	r24, r24
     47c:	99 1f       	adc	r25, r25
     47e:	0a 94       	dec	r0
     480:	e2 f7       	brpl	.-8      	; 0x47a <_ZN10MCP_Output10AutoToggleEv+0x18>
     482:	82 2b       	or	r24, r18
     484:	80 93 3f 01 	sts	0x013F, r24	; 0x80013f <_ZN10MCP_Output16AutoToggle_PortAE>
     488:	08 95       	ret
	}
	else
	{
		MCP_Output::AutoToggle_PortB |= (1 << Pin);
     48a:	20 91 3e 01 	lds	r18, 0x013E	; 0x80013e <__data_end>
     48e:	81 e0       	ldi	r24, 0x01	; 1
     490:	90 e0       	ldi	r25, 0x00	; 0
     492:	02 80       	ldd	r0, Z+2	; 0x02
     494:	02 c0       	rjmp	.+4      	; 0x49a <_ZN10MCP_Output10AutoToggleEv+0x38>
     496:	88 0f       	add	r24, r24
     498:	99 1f       	adc	r25, r25
     49a:	0a 94       	dec	r0
     49c:	e2 f7       	brpl	.-8      	; 0x496 <_ZN10MCP_Output10AutoToggleEv+0x34>
     49e:	82 2b       	or	r24, r18
     4a0:	80 93 3e 01 	sts	0x013E, r24	; 0x80013e <__data_end>
     4a4:	08 95       	ret

000004a6 <_ZN10MCP_Output18SetAutoToggleSpeedEj>:
	}
}

void MCP_Output::SetAutoToggleSpeed(uint16_t ms)
{
	AutoToggle_Timeout = (uint16_t)Timer0_ms2cnt(ms);
     4a6:	bc 01       	movw	r22, r24
     4a8:	80 e0       	ldi	r24, 0x00	; 0
     4aa:	90 e0       	ldi	r25, 0x00	; 0
     4ac:	0e 94 84 0c 	call	0x1908	; 0x1908 <_Z13Timer0_ms2cntm>
     4b0:	70 93 01 01 	sts	0x0101, r23	; 0x800101 <_ZN10MCP_Output18AutoToggle_TimeoutE+0x1>
     4b4:	60 93 00 01 	sts	0x0100, r22	; 0x800100 <_ZN10MCP_Output18AutoToggle_TimeoutE>
     4b8:	08 95       	ret

000004ba <_ZN10MCP_Output17PerformAutoToggleEh>:
}

void MCP_Output::PerformAutoToggle(uint8_t addr)
{
     4ba:	1f 93       	push	r17
     4bc:	cf 93       	push	r28
     4be:	df 93       	push	r29
     4c0:	c8 2f       	mov	r28, r24
	uint8_t valA = MCP23017_ReadReg(addr, OLATA);
     4c2:	64 e1       	ldi	r22, 0x14	; 20
     4c4:	0e 94 78 01 	call	0x2f0	; 0x2f0 <_Z16MCP23017_ReadReghh>
     4c8:	18 2f       	mov	r17, r24
	uint8_t valB = MCP23017_ReadReg(addr, OLATB);
     4ca:	65 e1       	ldi	r22, 0x15	; 21
     4cc:	8c 2f       	mov	r24, r28
     4ce:	0e 94 78 01 	call	0x2f0	; 0x2f0 <_Z16MCP23017_ReadReghh>
	
	valA ^= MCP_Output::AutoToggle_PortA;
     4d2:	40 91 3f 01 	lds	r20, 0x013F	; 0x80013f <_ZN10MCP_Output16AutoToggle_PortAE>
	valB ^= MCP_Output::AutoToggle_PortB;
     4d6:	d0 91 3e 01 	lds	r29, 0x013E	; 0x80013e <__data_end>
     4da:	d8 27       	eor	r29, r24
	
	MCP23017_WriteReg(addr, OLATA, valA);
     4dc:	41 27       	eor	r20, r17
     4de:	64 e1       	ldi	r22, 0x14	; 20
     4e0:	8c 2f       	mov	r24, r28
     4e2:	0e 94 65 01 	call	0x2ca	; 0x2ca <_Z17MCP23017_WriteReghhh>
	MCP23017_WriteReg(addr, OLATB, valB);
     4e6:	4d 2f       	mov	r20, r29
     4e8:	65 e1       	ldi	r22, 0x15	; 21
     4ea:	8c 2f       	mov	r24, r28
     4ec:	0e 94 65 01 	call	0x2ca	; 0x2ca <_Z17MCP23017_WriteReghhh>
}
     4f0:	df 91       	pop	r29
     4f2:	cf 91       	pop	r28
     4f4:	1f 91       	pop	r17
     4f6:	08 95       	ret

000004f8 <_Z20MIDI_ReceiveIncomingv>:
volatile char MIDI_TxBuffer[MIDI_BUF_SIZE] = {0};
volatile uint8_t MIDI_ReceivedProgram = 0;
volatile bool MIDI_ProgramChangeFlag = false;

void MIDI_ReceiveIncoming()
{
     4f8:	cf 93       	push	r28
     4fa:	df 93       	push	r29
	static uint8_t RX_ByteCnt = 0;
	
	MIDI_RxBuffer[RX_ByteCnt] = UART1_GetChar();
     4fc:	c0 91 43 01 	lds	r28, 0x0143	; 0x800143 <_ZZ20MIDI_ReceiveIncomingvE10RX_ByteCnt>
     500:	d0 e0       	ldi	r29, 0x00	; 0
     502:	0e 94 c4 0e 	call	0x1d88	; 0x1d88 <_Z13UART1_GetCharv>
     506:	c7 5b       	subi	r28, 0xB7	; 183
     508:	de 4f       	sbci	r29, 0xFE	; 254
     50a:	88 83       	st	Y, r24
	
	if (RX_ByteCnt == 0)
     50c:	80 91 43 01 	lds	r24, 0x0143	; 0x800143 <_ZZ20MIDI_ReceiveIncomingvE10RX_ByteCnt>
     510:	81 11       	cpse	r24, r1
     512:	18 c0       	rjmp	.+48     	; 0x544 <_Z20MIDI_ReceiveIncomingv+0x4c>
	{
		/* Check if command is a Program Change */
		if ( (MIDI_RxBuffer[RX_ByteCnt] & 0xF0) == 0xC0 )
     514:	80 91 49 01 	lds	r24, 0x0149	; 0x800149 <MIDI_RxBuffer>
     518:	80 7f       	andi	r24, 0xF0	; 240
     51a:	80 3c       	cpi	r24, 0xC0	; 192
     51c:	29 f5       	brne	.+74     	; 0x568 <_Z20MIDI_ReceiveIncomingv+0x70>
		{
			/* Check if command is relevant to this device */
			if ( (System_MidiChannel == MIDI_CH_OMNI) || ( (MIDI_RxBuffer[RX_ByteCnt] & 0x0F) != (System_MidiChannel-1) ) )
     51e:	80 91 f6 01 	lds	r24, 0x01F6	; 0x8001f6 <System_MidiChannel>
     522:	88 23       	and	r24, r24
     524:	59 f0       	breq	.+22     	; 0x53c <_Z20MIDI_ReceiveIncomingv+0x44>
     526:	20 91 49 01 	lds	r18, 0x0149	; 0x800149 <MIDI_RxBuffer>
     52a:	80 91 f6 01 	lds	r24, 0x01F6	; 0x8001f6 <System_MidiChannel>
     52e:	2f 70       	andi	r18, 0x0F	; 15
     530:	30 e0       	ldi	r19, 0x00	; 0
     532:	90 e0       	ldi	r25, 0x00	; 0
     534:	01 97       	sbiw	r24, 0x01	; 1
     536:	28 17       	cp	r18, r24
     538:	39 07       	cpc	r19, r25
     53a:	b1 f0       	breq	.+44     	; 0x568 <_Z20MIDI_ReceiveIncomingv+0x70>
			{
				RX_ByteCnt++;
     53c:	81 e0       	ldi	r24, 0x01	; 1
     53e:	80 93 43 01 	sts	0x0143, r24	; 0x800143 <_ZZ20MIDI_ReceiveIncomingvE10RX_ByteCnt>
     542:	12 c0       	rjmp	.+36     	; 0x568 <_Z20MIDI_ReceiveIncomingv+0x70>
		}
	}
	else if (RX_ByteCnt > 0)
	{
		/* Check if data byte contains a valid MIDI program (is between 0 and 127) */
		if (MIDI_RxBuffer[RX_ByteCnt] <= MIDI_PC_MAX)
     544:	90 e0       	ldi	r25, 0x00	; 0
     546:	fc 01       	movw	r30, r24
     548:	e7 5b       	subi	r30, 0xB7	; 183
     54a:	fe 4f       	sbci	r31, 0xFE	; 254
     54c:	20 81       	ld	r18, Z
     54e:	22 23       	and	r18, r18
     550:	4c f0       	brlt	.+18     	; 0x564 <_Z20MIDI_ReceiveIncomingv+0x6c>
		{
			MIDI_ReceivedProgram = MIDI_RxBuffer[RX_ByteCnt];
     552:	fc 01       	movw	r30, r24
     554:	e7 5b       	subi	r30, 0xB7	; 183
     556:	fe 4f       	sbci	r31, 0xFE	; 254
     558:	80 81       	ld	r24, Z
     55a:	80 93 45 01 	sts	0x0145, r24	; 0x800145 <MIDI_ReceivedProgram>
			MIDI_ProgramChangeFlag = true;
     55e:	81 e0       	ldi	r24, 0x01	; 1
     560:	80 93 44 01 	sts	0x0144, r24	; 0x800144 <MIDI_ProgramChangeFlag>
		}
		
		RX_ByteCnt = 0;
     564:	10 92 43 01 	sts	0x0143, r1	; 0x800143 <_ZZ20MIDI_ReceiveIncomingvE10RX_ByteCnt>
	}
}
     568:	df 91       	pop	r29
     56a:	cf 91       	pop	r28
     56c:	08 95       	ret

0000056e <_Z26MIDI_TransmitProgramChangeh>:

void MIDI_TransmitProgramChange(uint8_t prg)
{
	MIDI_TxBuffer[0] = 0xC0;
     56e:	90 ec       	ldi	r25, 0xC0	; 192
     570:	90 93 46 01 	sts	0x0146, r25	; 0x800146 <MIDI_TxBuffer>
	
	if (System_MidiChannel != MIDI_CH_OMNI)
     574:	90 91 f6 01 	lds	r25, 0x01F6	; 0x8001f6 <System_MidiChannel>
     578:	99 23       	and	r25, r25
     57a:	41 f0       	breq	.+16     	; 0x58c <_Z26MIDI_TransmitProgramChangeh+0x1e>
	{
		MIDI_TxBuffer[0] |= (System_MidiChannel - 1);
     57c:	90 91 f6 01 	lds	r25, 0x01F6	; 0x8001f6 <System_MidiChannel>
     580:	e6 e4       	ldi	r30, 0x46	; 70
     582:	f1 e0       	ldi	r31, 0x01	; 1
     584:	20 81       	ld	r18, Z
     586:	91 50       	subi	r25, 0x01	; 1
     588:	92 2b       	or	r25, r18
     58a:	90 83       	st	Z, r25
	}
	
	MIDI_TxBuffer[1] = (char)prg;
     58c:	e6 e4       	ldi	r30, 0x46	; 70
     58e:	f1 e0       	ldi	r31, 0x01	; 1
     590:	81 83       	std	Z+1, r24	; 0x01
	MIDI_TxBuffer[2] = 0;
     592:	12 82       	std	Z+2, r1	; 0x02
	
	UART1_PutString((char*)MIDI_TxBuffer);
     594:	cf 01       	movw	r24, r30
     596:	0e 94 f4 0e 	call	0x1de8	; 0x1de8 <_Z15UART1_PutStringPKc>
     59a:	08 95       	ret

0000059c <_Z20PedalCom_RxAvailablev>:
	UCSR0B |= (1 << TXCIE0);
}

uint8_t PedalCom_RxAvailable()
{
	return (RxHead != RxTail);
     59c:	20 91 51 01 	lds	r18, 0x0151	; 0x800151 <RxHead>
     5a0:	90 91 50 01 	lds	r25, 0x0150	; 0x800150 <RxTail>
     5a4:	81 e0       	ldi	r24, 0x01	; 1
     5a6:	29 13       	cpse	r18, r25
     5a8:	01 c0       	rjmp	.+2      	; 0x5ac <_Z20PedalCom_RxAvailablev+0x10>
     5aa:	80 e0       	ldi	r24, 0x00	; 0
}
     5ac:	08 95       	ret

000005ae <_Z20PedalCom_TxAvailablev>:

uint8_t PedalCom_TxAvailable()
{
	return (TxHead != TxTail);
     5ae:	20 91 4f 01 	lds	r18, 0x014F	; 0x80014f <TxHead>
     5b2:	90 91 4e 01 	lds	r25, 0x014E	; 0x80014e <TxTail>
     5b6:	81 e0       	ldi	r24, 0x01	; 1
     5b8:	29 13       	cpse	r18, r25
     5ba:	01 c0       	rjmp	.+2      	; 0x5be <_Z20PedalCom_TxAvailablev+0x10>
     5bc:	80 e0       	ldi	r24, 0x00	; 0
}
     5be:	08 95       	ret

000005c0 <_Z21PedalCom_FlushTxQueuev>:

void PedalCom_FlushTxQueue()
{
	TxTail = TxHead;
     5c0:	80 91 4f 01 	lds	r24, 0x014F	; 0x80014f <TxHead>
     5c4:	80 93 4e 01 	sts	0x014E, r24	; 0x80014e <TxTail>
	TX_CommandQueue[TxHead].acked = true;
     5c8:	e0 91 4f 01 	lds	r30, 0x014F	; 0x80014f <TxHead>
     5cc:	f0 e0       	ldi	r31, 0x00	; 0
     5ce:	ee 0f       	add	r30, r30
     5d0:	ff 1f       	adc	r31, r31
     5d2:	ee 0f       	add	r30, r30
     5d4:	ff 1f       	adc	r31, r31
     5d6:	ee 0f       	add	r30, r30
     5d8:	ff 1f       	adc	r31, r31
     5da:	ee 5a       	subi	r30, 0xAE	; 174
     5dc:	fe 4f       	sbci	r31, 0xFE	; 254
     5de:	81 e0       	ldi	r24, 0x01	; 1
     5e0:	87 83       	std	Z+7, r24	; 0x07
     5e2:	08 95       	ret

000005e4 <_Z16PedalCom_Receivev>:
}


void PedalCom_Receive()
{
     5e4:	cf 93       	push	r28
     5e6:	df 93       	push	r29
	static uint8_t RX_ByteCnt = 0;
	
	/* Start/reset Delay TX timer. Both in case a NACK needs to be sent, and also to
	   prevent response to previous command being sent while still receiving new data. */
	PedalCom_DelayTXOvfCnt = 1;
     5e8:	81 e0       	ldi	r24, 0x01	; 1
     5ea:	80 93 c3 01 	sts	0x01C3, r24	; 0x8001c3 <PedalCom_DelayTXOvfCnt>
	
	/* Fetch new byte from UART buffer */
	RX_Buffer[RX_ByteCnt] = UART0_GetChar();
     5ee:	c0 91 4c 01 	lds	r28, 0x014C	; 0x80014c <_ZZ16PedalCom_ReceivevE10RX_ByteCnt>
     5f2:	d0 e0       	ldi	r29, 0x00	; 0
     5f4:	0e 94 c9 0d 	call	0x1b92	; 0x1b92 <_Z13UART0_GetCharv>
     5f8:	ce 54       	subi	r28, 0x4E	; 78
     5fa:	de 4f       	sbci	r29, 0xFE	; 254
     5fc:	88 83       	st	Y, r24
	RX_ByteCnt++;
     5fe:	80 91 4c 01 	lds	r24, 0x014C	; 0x80014c <_ZZ16PedalCom_ReceivevE10RX_ByteCnt>
     602:	8f 5f       	subi	r24, 0xFF	; 255
     604:	80 93 4c 01 	sts	0x014C, r24	; 0x80014c <_ZZ16PedalCom_ReceivevE10RX_ByteCnt>
	
	/* Handle new byte */
	if ((RX_ByteCnt - 1) == SOF_BYTE_IDX)
     608:	81 30       	cpi	r24, 0x01	; 1
     60a:	09 f0       	breq	.+2      	; 0x60e <_Z16PedalCom_Receivev+0x2a>
     60c:	47 c0       	rjmp	.+142    	; 0x69c <_Z16PedalCom_Receivev+0xb8>
	{
		if (RX_Buffer[SOF_BYTE_IDX] != SOF_BYTE)
     60e:	80 91 b2 01 	lds	r24, 0x01B2	; 0x8001b2 <RX_Buffer>
     612:	8f 35       	cpi	r24, 0x5F	; 95
     614:	09 f4       	brne	.+2      	; 0x618 <_Z16PedalCom_Receivev+0x34>
     616:	a5 c0       	rjmp	.+330    	; 0x762 <_Z16PedalCom_Receivev+0x17e>
		{
			RX_ByteCnt = 0;
     618:	10 92 4c 01 	sts	0x014C, r1	; 0x80014c <_ZZ16PedalCom_ReceivevE10RX_ByteCnt>
				
			if (RX_Buffer[SOF_BYTE_IDX] == ACK_BYTE)
     61c:	80 91 b2 01 	lds	r24, 0x01B2	; 0x8001b2 <RX_Buffer>
     620:	8c 3a       	cpi	r24, 0xAC	; 172
     622:	f9 f4       	brne	.+62     	; 0x662 <_Z16PedalCom_Receivev+0x7e>
			{
				PedalCom_ResponseTimeoutOvfCnt = 1;		// Reset timeout timer
     624:	81 e0       	ldi	r24, 0x01	; 1
     626:	90 e0       	ldi	r25, 0x00	; 0
     628:	90 93 04 01 	sts	0x0104, r25	; 0x800104 <PedalCom_ResponseTimeoutOvfCnt+0x1>
     62c:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <PedalCom_ResponseTimeoutOvfCnt>
				NackCnt = 0;
     630:	10 92 4d 01 	sts	0x014D, r1	; 0x80014d <NackCnt>
				
				TX_CommandQueue[TxTail].acked = true;
     634:	e0 91 4e 01 	lds	r30, 0x014E	; 0x80014e <TxTail>
     638:	f0 e0       	ldi	r31, 0x00	; 0
     63a:	ee 0f       	add	r30, r30
     63c:	ff 1f       	adc	r31, r31
     63e:	ee 0f       	add	r30, r30
     640:	ff 1f       	adc	r31, r31
     642:	ee 0f       	add	r30, r30
     644:	ff 1f       	adc	r31, r31
     646:	ee 5a       	subi	r30, 0xAE	; 174
     648:	fe 4f       	sbci	r31, 0xFE	; 254
     64a:	87 83       	std	Z+7, r24	; 0x07
				
				if (!PedalCom_ConnectionOpen)
     64c:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <PedalCom_ConnectionOpen>
     650:	81 11       	cpse	r24, r1
     652:	87 c0       	rjmp	.+270    	; 0x762 <_Z16PedalCom_Receivev+0x17e>
				{
					PedalCom_ConnectionOpen = true;
     654:	81 e0       	ldi	r24, 0x01	; 1
     656:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <PedalCom_ConnectionOpen>
					
					/* Set system state to initialize pedal */
					SystemState = INITIALIZE_SYSTEM;
     65a:	82 e0       	ldi	r24, 0x02	; 2
     65c:	80 93 ff 01 	sts	0x01FF, r24	; 0x8001ff <SystemState>
     660:	80 c0       	rjmp	.+256    	; 0x762 <_Z16PedalCom_Receivev+0x17e>
				}
			}
			else if (RX_Buffer[SOF_BYTE_IDX] == NACK_BYTE)
     662:	80 91 b2 01 	lds	r24, 0x01B2	; 0x8001b2 <RX_Buffer>
     666:	8a 32       	cpi	r24, 0x2A	; 42
     668:	09 f0       	breq	.+2      	; 0x66c <_Z16PedalCom_Receivev+0x88>
     66a:	7b c0       	rjmp	.+246    	; 0x762 <_Z16PedalCom_Receivev+0x17e>
			{
				/* Stop retransmitting command if Pedal keeps responding with NACK. */
				if (++NackCnt <= 3)
     66c:	80 91 4d 01 	lds	r24, 0x014D	; 0x80014d <NackCnt>
     670:	8f 5f       	subi	r24, 0xFF	; 255
     672:	80 93 4d 01 	sts	0x014D, r24	; 0x80014d <NackCnt>
     676:	84 30       	cpi	r24, 0x04	; 4
     678:	08 f0       	brcs	.+2      	; 0x67c <_Z16PedalCom_Receivev+0x98>
     67a:	73 c0       	rjmp	.+230    	; 0x762 <_Z16PedalCom_Receivev+0x17e>
				{
					/* Prepare retransmit latest command */
					TX_CommandQueue[TxTail].sent = false;
     67c:	e0 91 4e 01 	lds	r30, 0x014E	; 0x80014e <TxTail>
     680:	f0 e0       	ldi	r31, 0x00	; 0
     682:	ee 0f       	add	r30, r30
     684:	ff 1f       	adc	r31, r31
     686:	ee 0f       	add	r30, r30
     688:	ff 1f       	adc	r31, r31
     68a:	ee 0f       	add	r30, r30
     68c:	ff 1f       	adc	r31, r31
     68e:	ee 5a       	subi	r30, 0xAE	; 174
     690:	fe 4f       	sbci	r31, 0xFE	; 254
     692:	16 82       	std	Z+6, r1	; 0x06
					PedalCom_DelayTXOvfCnt = 1;	// Start/reset Delay TX timer
     694:	81 e0       	ldi	r24, 0x01	; 1
     696:	80 93 c3 01 	sts	0x01C3, r24	; 0x8001c3 <PedalCom_DelayTXOvfCnt>
     69a:	63 c0       	rjmp	.+198    	; 0x762 <_Z16PedalCom_Receivev+0x17e>
				}
			}
		}
	}
	else if ((RX_ByteCnt - 1) == LENGTH_BYTE_IDX)
     69c:	82 30       	cpi	r24, 0x02	; 2
     69e:	79 f4       	brne	.+30     	; 0x6be <_Z16PedalCom_Receivev+0xda>
	{
		RX_CommandQueue[RxHead].length = RX_Buffer[LENGTH_BYTE_IDX];
     6a0:	e0 91 51 01 	lds	r30, 0x0151	; 0x800151 <RxHead>
     6a4:	f0 e0       	ldi	r31, 0x00	; 0
     6a6:	80 91 b3 01 	lds	r24, 0x01B3	; 0x8001b3 <RX_Buffer+0x1>
     6aa:	ee 0f       	add	r30, r30
     6ac:	ff 1f       	adc	r31, r31
     6ae:	ee 0f       	add	r30, r30
     6b0:	ff 1f       	adc	r31, r31
     6b2:	ee 0f       	add	r30, r30
     6b4:	ff 1f       	adc	r31, r31
     6b6:	ee 56       	subi	r30, 0x6E	; 110
     6b8:	fe 4f       	sbci	r31, 0xFE	; 254
     6ba:	81 83       	std	Z+1, r24	; 0x01
     6bc:	52 c0       	rjmp	.+164    	; 0x762 <_Z16PedalCom_Receivev+0x17e>
	}
	else if (RX_ByteCnt == RX_CommandQueue[RxHead].length)
     6be:	e0 91 51 01 	lds	r30, 0x0151	; 0x800151 <RxHead>
     6c2:	f0 e0       	ldi	r31, 0x00	; 0
     6c4:	ee 0f       	add	r30, r30
     6c6:	ff 1f       	adc	r31, r31
     6c8:	ee 0f       	add	r30, r30
     6ca:	ff 1f       	adc	r31, r31
     6cc:	ee 0f       	add	r30, r30
     6ce:	ff 1f       	adc	r31, r31
     6d0:	ee 56       	subi	r30, 0x6E	; 110
     6d2:	fe 4f       	sbci	r31, 0xFE	; 254
     6d4:	91 81       	ldd	r25, Z+1	; 0x01
     6d6:	89 13       	cpse	r24, r25
     6d8:	44 c0       	rjmp	.+136    	; 0x762 <_Z16PedalCom_Receivev+0x17e>
	{
		/* If full frame received */
		if (RX_Buffer[RX_CommandQueue[RxHead].length - 1] == EOF_BYTE)
     6da:	e0 91 51 01 	lds	r30, 0x0151	; 0x800151 <RxHead>
     6de:	f0 e0       	ldi	r31, 0x00	; 0
     6e0:	ee 0f       	add	r30, r30
     6e2:	ff 1f       	adc	r31, r31
     6e4:	ee 0f       	add	r30, r30
     6e6:	ff 1f       	adc	r31, r31
     6e8:	ee 0f       	add	r30, r30
     6ea:	ff 1f       	adc	r31, r31
     6ec:	ee 56       	subi	r30, 0x6E	; 110
     6ee:	fe 4f       	sbci	r31, 0xFE	; 254
     6f0:	e1 81       	ldd	r30, Z+1	; 0x01
     6f2:	f0 e0       	ldi	r31, 0x00	; 0
     6f4:	ef 54       	subi	r30, 0x4F	; 79
     6f6:	fe 4f       	sbci	r31, 0xFE	; 254
     6f8:	80 81       	ld	r24, Z
     6fa:	8f 3e       	cpi	r24, 0xEF	; 239
     6fc:	51 f5       	brne	.+84     	; 0x752 <_Z16PedalCom_Receivev+0x16e>
		{
			RX_CommandQueue[RxHead].command = (CMD)RX_Buffer[CMD_BYTE_IDX];
     6fe:	e0 91 51 01 	lds	r30, 0x0151	; 0x800151 <RxHead>
     702:	f0 e0       	ldi	r31, 0x00	; 0
     704:	a2 eb       	ldi	r26, 0xB2	; 178
     706:	b1 e0       	ldi	r27, 0x01	; 1
     708:	12 96       	adiw	r26, 0x02	; 2
     70a:	8c 91       	ld	r24, X
     70c:	12 97       	sbiw	r26, 0x02	; 2
     70e:	ee 0f       	add	r30, r30
     710:	ff 1f       	adc	r31, r31
     712:	ee 0f       	add	r30, r30
     714:	ff 1f       	adc	r31, r31
     716:	ee 0f       	add	r30, r30
     718:	ff 1f       	adc	r31, r31
     71a:	ee 56       	subi	r30, 0x6E	; 110
     71c:	fe 4f       	sbci	r31, 0xFE	; 254
     71e:	80 83       	st	Z, r24
			RX_CommandQueue[RxHead].data[0] = RX_Buffer[DATA_BYTE_IDX];
     720:	e0 91 51 01 	lds	r30, 0x0151	; 0x800151 <RxHead>
     724:	f0 e0       	ldi	r31, 0x00	; 0
     726:	13 96       	adiw	r26, 0x03	; 3
     728:	8c 91       	ld	r24, X
     72a:	ee 0f       	add	r30, r30
     72c:	ff 1f       	adc	r31, r31
     72e:	ee 0f       	add	r30, r30
     730:	ff 1f       	adc	r31, r31
     732:	ee 0f       	add	r30, r30
     734:	ff 1f       	adc	r31, r31
     736:	ee 56       	subi	r30, 0x6E	; 110
     738:	fe 4f       	sbci	r31, 0xFE	; 254
     73a:	82 83       	std	Z+2, r24	; 0x02
			
			/* calculate new RX head index */
			uint8_t tmpHead = (RxHead + 1) & RX_QUEUE_MASK;
     73c:	80 91 51 01 	lds	r24, 0x0151	; 0x800151 <RxHead>
     740:	8f 5f       	subi	r24, 0xFF	; 255
     742:	83 70       	andi	r24, 0x03	; 3
				
			if ( tmpHead == RxTail )
     744:	90 91 50 01 	lds	r25, 0x0150	; 0x800150 <RxTail>
     748:	89 17       	cp	r24, r25
     74a:	49 f0       	breq	.+18     	; 0x75e <_Z16PedalCom_Receivev+0x17a>
				/* error: RX command queue overflow */
			}
			else
			{
				/* store new index */
				RxHead = tmpHead;
     74c:	80 93 51 01 	sts	0x0151, r24	; 0x800151 <RxHead>
     750:	06 c0       	rjmp	.+12     	; 0x75e <_Z16PedalCom_Receivev+0x17a>
			}
		}
		else
		{
			/* Prepare Transmit NACK */
			UART0_QueueChar(NACK_BYTE);
     752:	8a e2       	ldi	r24, 0x2A	; 42
     754:	0e 94 f1 0d 	call	0x1be2	; 0x1be2 <_Z15UART0_QueueCharh>
			PedalCom_DelayTXOvfCnt = 1;	// Start/reset Delay TX timer
     758:	81 e0       	ldi	r24, 0x01	; 1
     75a:	80 93 c3 01 	sts	0x01C3, r24	; 0x8001c3 <PedalCom_DelayTXOvfCnt>
		}
			
		RX_ByteCnt = 0;
     75e:	10 92 4c 01 	sts	0x014C, r1	; 0x80014c <_ZZ16PedalCom_ReceivevE10RX_ByteCnt>
	}	
}
     762:	df 91       	pop	r29
     764:	cf 91       	pop	r28
     766:	08 95       	ret

00000768 <_Z23PedalCom_HandleReceivedv>:


void PedalCom_HandleReceived()
{
	unsigned char response;
	response = System_HandlePedalCommand(RX_CommandQueue[RxTail].command, RX_CommandQueue[RxTail].length, (uint8_t *)RX_CommandQueue[RxTail].data);
     768:	40 91 50 01 	lds	r20, 0x0150	; 0x800150 <RxTail>
     76c:	e0 91 50 01 	lds	r30, 0x0150	; 0x800150 <RxTail>
     770:	f0 e0       	ldi	r31, 0x00	; 0
     772:	ee 0f       	add	r30, r30
     774:	ff 1f       	adc	r31, r31
     776:	ee 0f       	add	r30, r30
     778:	ff 1f       	adc	r31, r31
     77a:	ee 0f       	add	r30, r30
     77c:	ff 1f       	adc	r31, r31
     77e:	ee 56       	subi	r30, 0x6E	; 110
     780:	fe 4f       	sbci	r31, 0xFE	; 254
     782:	61 81       	ldd	r22, Z+1	; 0x01
     784:	e0 91 50 01 	lds	r30, 0x0150	; 0x800150 <RxTail>
     788:	f0 e0       	ldi	r31, 0x00	; 0
     78a:	ee 0f       	add	r30, r30
     78c:	ff 1f       	adc	r31, r31
     78e:	ee 0f       	add	r30, r30
     790:	ff 1f       	adc	r31, r31
     792:	ee 0f       	add	r30, r30
     794:	ff 1f       	adc	r31, r31
     796:	ee 56       	subi	r30, 0x6E	; 110
     798:	fe 4f       	sbci	r31, 0xFE	; 254
     79a:	80 81       	ld	r24, Z
     79c:	50 e0       	ldi	r21, 0x00	; 0
     79e:	44 0f       	add	r20, r20
     7a0:	55 1f       	adc	r21, r21
     7a2:	44 0f       	add	r20, r20
     7a4:	55 1f       	adc	r21, r21
     7a6:	44 0f       	add	r20, r20
     7a8:	55 1f       	adc	r21, r21
     7aa:	4c 56       	subi	r20, 0x6C	; 108
     7ac:	5e 4f       	sbci	r21, 0xFE	; 254
     7ae:	0e 94 a0 06 	call	0xd40	; 0xd40 <_Z25System_HandlePedalCommand3CMDhPh>
		
	/* Calculate and store new queue index */
	RxTail = (RxTail + 1) & RX_QUEUE_MASK;
     7b2:	90 91 50 01 	lds	r25, 0x0150	; 0x800150 <RxTail>
     7b6:	9f 5f       	subi	r25, 0xFF	; 255
     7b8:	93 70       	andi	r25, 0x03	; 3
     7ba:	90 93 50 01 	sts	0x0150, r25	; 0x800150 <RxTail>

	/* Prepare Transmit response */
	UART0_QueueChar(response);
     7be:	0e 94 f1 0d 	call	0x1be2	; 0x1be2 <_Z15UART0_QueueCharh>
	
	/* Start/reset Delay TX timer */
	PedalCom_DelayTXOvfCnt = 1;
     7c2:	81 e0       	ldi	r24, 0x01	; 1
     7c4:	80 93 c3 01 	sts	0x01C3, r24	; 0x8001c3 <PedalCom_DelayTXOvfCnt>
     7c8:	08 95       	ret

000007ca <_Z21PedalCom_QueueCommand3CMDhPh>:


bool PedalCom_QueueCommand(CMD cmd, uint8_t datLen, uint8_t *dat)
{
	/* Calculate new queue head index */
	uint8_t tmpHead = (TxHead + 1) & TX_QUEUE_MASK;
     7ca:	20 91 4f 01 	lds	r18, 0x014F	; 0x80014f <TxHead>
     7ce:	2f 5f       	subi	r18, 0xFF	; 255
     7d0:	27 70       	andi	r18, 0x07	; 7
	
	/* Check for free space in queue */
	if ( tmpHead == TxTail )
     7d2:	90 91 4e 01 	lds	r25, 0x014E	; 0x80014e <TxTail>
     7d6:	29 17       	cp	r18, r25
     7d8:	09 f4       	brne	.+2      	; 0x7dc <_Z21PedalCom_QueueCommand3CMDhPh+0x12>
     7da:	4e c0       	rjmp	.+156    	; 0x878 <_Z21PedalCom_QueueCommand3CMDhPh+0xae>
		return false;
	
	/* Copy command to queue */
	TX_CommandQueue[TxHead].command = cmd;
     7dc:	e0 91 4f 01 	lds	r30, 0x014F	; 0x80014f <TxHead>
     7e0:	f0 e0       	ldi	r31, 0x00	; 0
     7e2:	ee 0f       	add	r30, r30
     7e4:	ff 1f       	adc	r31, r31
     7e6:	ee 0f       	add	r30, r30
     7e8:	ff 1f       	adc	r31, r31
     7ea:	ee 0f       	add	r30, r30
     7ec:	ff 1f       	adc	r31, r31
     7ee:	ee 5a       	subi	r30, 0xAE	; 174
     7f0:	fe 4f       	sbci	r31, 0xFE	; 254
     7f2:	80 83       	st	Z, r24
	TX_CommandQueue[TxHead].length = datLen + 4;
     7f4:	e0 91 4f 01 	lds	r30, 0x014F	; 0x80014f <TxHead>
     7f8:	f0 e0       	ldi	r31, 0x00	; 0
     7fa:	ee 0f       	add	r30, r30
     7fc:	ff 1f       	adc	r31, r31
     7fe:	ee 0f       	add	r30, r30
     800:	ff 1f       	adc	r31, r31
     802:	ee 0f       	add	r30, r30
     804:	ff 1f       	adc	r31, r31
     806:	ee 5a       	subi	r30, 0xAE	; 174
     808:	fe 4f       	sbci	r31, 0xFE	; 254
     80a:	84 e0       	ldi	r24, 0x04	; 4
     80c:	86 0f       	add	r24, r22
     80e:	81 83       	std	Z+1, r24	; 0x01
	TX_CommandQueue[TxHead].sent = false;
     810:	e0 91 4f 01 	lds	r30, 0x014F	; 0x80014f <TxHead>
     814:	f0 e0       	ldi	r31, 0x00	; 0
     816:	ee 0f       	add	r30, r30
     818:	ff 1f       	adc	r31, r31
     81a:	ee 0f       	add	r30, r30
     81c:	ff 1f       	adc	r31, r31
     81e:	ee 0f       	add	r30, r30
     820:	ff 1f       	adc	r31, r31
     822:	ee 5a       	subi	r30, 0xAE	; 174
     824:	fe 4f       	sbci	r31, 0xFE	; 254
     826:	16 82       	std	Z+6, r1	; 0x06
	TX_CommandQueue[TxHead].acked = false;
     828:	e0 91 4f 01 	lds	r30, 0x014F	; 0x80014f <TxHead>
     82c:	f0 e0       	ldi	r31, 0x00	; 0
     82e:	ee 0f       	add	r30, r30
     830:	ff 1f       	adc	r31, r31
     832:	ee 0f       	add	r30, r30
     834:	ff 1f       	adc	r31, r31
     836:	ee 0f       	add	r30, r30
     838:	ff 1f       	adc	r31, r31
     83a:	ee 5a       	subi	r30, 0xAE	; 174
     83c:	fe 4f       	sbci	r31, 0xFE	; 254
     83e:	17 82       	std	Z+7, r1	; 0x07
	
	for (uint8_t i = 0; i < datLen; i++)
     840:	66 23       	and	r22, r22
     842:	b1 f0       	breq	.+44     	; 0x870 <_Z21PedalCom_QueueCommand3CMDhPh+0xa6>
     844:	a4 2f       	mov	r26, r20
     846:	b5 2f       	mov	r27, r21
     848:	80 e0       	ldi	r24, 0x00	; 0
     84a:	90 e0       	ldi	r25, 0x00	; 0
	{
		TX_CommandQueue[TxHead].data[i] = dat[i];
     84c:	e0 91 4f 01 	lds	r30, 0x014F	; 0x80014f <TxHead>
     850:	f0 e0       	ldi	r31, 0x00	; 0
     852:	3d 91       	ld	r19, X+
     854:	ee 0f       	add	r30, r30
     856:	ff 1f       	adc	r31, r31
     858:	ee 0f       	add	r30, r30
     85a:	ff 1f       	adc	r31, r31
     85c:	ee 0f       	add	r30, r30
     85e:	ff 1f       	adc	r31, r31
     860:	ee 5a       	subi	r30, 0xAE	; 174
     862:	fe 4f       	sbci	r31, 0xFE	; 254
     864:	e8 0f       	add	r30, r24
     866:	f9 1f       	adc	r31, r25
     868:	32 83       	std	Z+2, r19	; 0x02
     86a:	01 96       	adiw	r24, 0x01	; 1
	TX_CommandQueue[TxHead].command = cmd;
	TX_CommandQueue[TxHead].length = datLen + 4;
	TX_CommandQueue[TxHead].sent = false;
	TX_CommandQueue[TxHead].acked = false;
	
	for (uint8_t i = 0; i < datLen; i++)
     86c:	86 17       	cp	r24, r22
     86e:	70 f3       	brcs	.-36     	; 0x84c <_Z21PedalCom_QueueCommand3CMDhPh+0x82>
	{
		TX_CommandQueue[TxHead].data[i] = dat[i];
	}
	
	/* Update queue head */
	TxHead = tmpHead;
     870:	20 93 4f 01 	sts	0x014F, r18	; 0x80014f <TxHead>
	
	return true;
     874:	81 e0       	ldi	r24, 0x01	; 1
     876:	08 95       	ret
	/* Calculate new queue head index */
	uint8_t tmpHead = (TxHead + 1) & TX_QUEUE_MASK;
	
	/* Check for free space in queue */
	if ( tmpHead == TxTail )
		return false;
     878:	80 e0       	ldi	r24, 0x00	; 0
	
	/* Update queue head */
	TxHead = tmpHead;
	
	return true;
}
     87a:	08 95       	ret

0000087c <_Z19PedalCom_PutCommandv>:

void PedalCom_PutCommand()
{
     87c:	cf 93       	push	r28
	/* Only transmit new command if previous one got an ACK */
	if (TX_CommandQueue[TxTail].acked)
     87e:	e0 91 4e 01 	lds	r30, 0x014E	; 0x80014e <TxTail>
     882:	f0 e0       	ldi	r31, 0x00	; 0
     884:	ee 0f       	add	r30, r30
     886:	ff 1f       	adc	r31, r31
     888:	ee 0f       	add	r30, r30
     88a:	ff 1f       	adc	r31, r31
     88c:	ee 0f       	add	r30, r30
     88e:	ff 1f       	adc	r31, r31
     890:	ee 5a       	subi	r30, 0xAE	; 174
     892:	fe 4f       	sbci	r31, 0xFE	; 254
     894:	87 81       	ldd	r24, Z+7	; 0x07
     896:	88 23       	and	r24, r24
     898:	39 f0       	breq	.+14     	; 0x8a8 <_Z19PedalCom_PutCommandv+0x2c>
	{
		/* Calculate and store new queue tail index */
		TxTail = (TxTail + 1) & TX_QUEUE_MASK;
     89a:	80 91 4e 01 	lds	r24, 0x014E	; 0x80014e <TxTail>
     89e:	8f 5f       	subi	r24, 0xFF	; 255
     8a0:	87 70       	andi	r24, 0x07	; 7
     8a2:	80 93 4e 01 	sts	0x014E, r24	; 0x80014e <TxTail>
     8a6:	84 c0       	rjmp	.+264    	; 0x9b0 <__stack+0xb1>
	}
	else if (!(TX_CommandQueue[TxTail].sent))
     8a8:	e0 91 4e 01 	lds	r30, 0x014E	; 0x80014e <TxTail>
     8ac:	f0 e0       	ldi	r31, 0x00	; 0
     8ae:	ee 0f       	add	r30, r30
     8b0:	ff 1f       	adc	r31, r31
     8b2:	ee 0f       	add	r30, r30
     8b4:	ff 1f       	adc	r31, r31
     8b6:	ee 0f       	add	r30, r30
     8b8:	ff 1f       	adc	r31, r31
     8ba:	ee 5a       	subi	r30, 0xAE	; 174
     8bc:	fe 4f       	sbci	r31, 0xFE	; 254
     8be:	86 81       	ldd	r24, Z+6	; 0x06
     8c0:	81 11       	cpse	r24, r1
     8c2:	76 c0       	rjmp	.+236    	; 0x9b0 <__stack+0xb1>
	{
		/* Send command frame to UART TX buffer */
		UART0_QueueChar(SOF_BYTE);
     8c4:	8f e5       	ldi	r24, 0x5F	; 95
     8c6:	0e 94 f1 0d 	call	0x1be2	; 0x1be2 <_Z15UART0_QueueCharh>
		UART0_QueueChar((unsigned char)TX_CommandQueue[TxTail].length);
     8ca:	e0 91 4e 01 	lds	r30, 0x014E	; 0x80014e <TxTail>
     8ce:	f0 e0       	ldi	r31, 0x00	; 0
     8d0:	ee 0f       	add	r30, r30
     8d2:	ff 1f       	adc	r31, r31
     8d4:	ee 0f       	add	r30, r30
     8d6:	ff 1f       	adc	r31, r31
     8d8:	ee 0f       	add	r30, r30
     8da:	ff 1f       	adc	r31, r31
     8dc:	ee 5a       	subi	r30, 0xAE	; 174
     8de:	fe 4f       	sbci	r31, 0xFE	; 254
     8e0:	81 81       	ldd	r24, Z+1	; 0x01
     8e2:	0e 94 f1 0d 	call	0x1be2	; 0x1be2 <_Z15UART0_QueueCharh>
		UART0_QueueChar((unsigned char)TX_CommandQueue[TxTail].command);
     8e6:	e0 91 4e 01 	lds	r30, 0x014E	; 0x80014e <TxTail>
     8ea:	f0 e0       	ldi	r31, 0x00	; 0
     8ec:	ee 0f       	add	r30, r30
     8ee:	ff 1f       	adc	r31, r31
     8f0:	ee 0f       	add	r30, r30
     8f2:	ff 1f       	adc	r31, r31
     8f4:	ee 0f       	add	r30, r30
     8f6:	ff 1f       	adc	r31, r31
     8f8:	ee 5a       	subi	r30, 0xAE	; 174
     8fa:	fe 4f       	sbci	r31, 0xFE	; 254
     8fc:	80 81       	ld	r24, Z
     8fe:	0e 94 f1 0d 	call	0x1be2	; 0x1be2 <_Z15UART0_QueueCharh>
		
		for (uint8_t i = 0; i < (TX_CommandQueue[TxTail].length - 4); i++)
     902:	e0 91 4e 01 	lds	r30, 0x014E	; 0x80014e <TxTail>
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	ee 0f       	add	r30, r30
     90a:	ff 1f       	adc	r31, r31
     90c:	ee 0f       	add	r30, r30
     90e:	ff 1f       	adc	r31, r31
     910:	ee 0f       	add	r30, r30
     912:	ff 1f       	adc	r31, r31
     914:	ee 5a       	subi	r30, 0xAE	; 174
     916:	fe 4f       	sbci	r31, 0xFE	; 254
     918:	81 81       	ldd	r24, Z+1	; 0x01
     91a:	90 e0       	ldi	r25, 0x00	; 0
     91c:	04 97       	sbiw	r24, 0x04	; 4
     91e:	18 16       	cp	r1, r24
     920:	19 06       	cpc	r1, r25
     922:	4c f5       	brge	.+82     	; 0x976 <__stack+0x77>
     924:	20 e0       	ldi	r18, 0x00	; 0
     926:	30 e0       	ldi	r19, 0x00	; 0
     928:	c0 e0       	ldi	r28, 0x00	; 0
		{
			UART0_QueueChar((unsigned char)TX_CommandQueue[TxTail].data[i]);
     92a:	80 91 4e 01 	lds	r24, 0x014E	; 0x80014e <TxTail>
     92e:	e8 2f       	mov	r30, r24
     930:	f0 e0       	ldi	r31, 0x00	; 0
     932:	ee 0f       	add	r30, r30
     934:	ff 1f       	adc	r31, r31
     936:	ee 0f       	add	r30, r30
     938:	ff 1f       	adc	r31, r31
     93a:	ee 0f       	add	r30, r30
     93c:	ff 1f       	adc	r31, r31
     93e:	ee 5a       	subi	r30, 0xAE	; 174
     940:	fe 4f       	sbci	r31, 0xFE	; 254
     942:	e2 0f       	add	r30, r18
     944:	f3 1f       	adc	r31, r19
     946:	82 81       	ldd	r24, Z+2	; 0x02
     948:	0e 94 f1 0d 	call	0x1be2	; 0x1be2 <_Z15UART0_QueueCharh>
		/* Send command frame to UART TX buffer */
		UART0_QueueChar(SOF_BYTE);
		UART0_QueueChar((unsigned char)TX_CommandQueue[TxTail].length);
		UART0_QueueChar((unsigned char)TX_CommandQueue[TxTail].command);
		
		for (uint8_t i = 0; i < (TX_CommandQueue[TxTail].length - 4); i++)
     94c:	cf 5f       	subi	r28, 0xFF	; 255
     94e:	2c 2f       	mov	r18, r28
     950:	30 e0       	ldi	r19, 0x00	; 0
     952:	a0 91 4e 01 	lds	r26, 0x014E	; 0x80014e <TxTail>
     956:	b0 e0       	ldi	r27, 0x00	; 0
     958:	aa 0f       	add	r26, r26
     95a:	bb 1f       	adc	r27, r27
     95c:	aa 0f       	add	r26, r26
     95e:	bb 1f       	adc	r27, r27
     960:	aa 0f       	add	r26, r26
     962:	bb 1f       	adc	r27, r27
     964:	ae 5a       	subi	r26, 0xAE	; 174
     966:	be 4f       	sbci	r27, 0xFE	; 254
     968:	11 96       	adiw	r26, 0x01	; 1
     96a:	8c 91       	ld	r24, X
     96c:	90 e0       	ldi	r25, 0x00	; 0
     96e:	04 97       	sbiw	r24, 0x04	; 4
     970:	28 17       	cp	r18, r24
     972:	39 07       	cpc	r19, r25
     974:	d4 f2       	brlt	.-76     	; 0x92a <__stack+0x2b>
		{
			UART0_QueueChar((unsigned char)TX_CommandQueue[TxTail].data[i]);
		}
		
		UART0_QueueChar(EOF_BYTE);
     976:	8f ee       	ldi	r24, 0xEF	; 239
     978:	0e 94 f1 0d 	call	0x1be2	; 0x1be2 <_Z15UART0_QueueCharh>
		
		/* If no data is waiting to be transmitted */
		if (PedalCom_DelayTXOvfCnt == 0)
     97c:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <PedalCom_DelayTXOvfCnt>
     980:	81 11       	cpse	r24, r1
     982:	03 c0       	rjmp	.+6      	; 0x98a <__stack+0x8b>
		{
			/* Signal that data is waiting to be transmitted without delay */
			PedalCom_DelayTxFlag = true;
     984:	81 e0       	ldi	r24, 0x01	; 1
     986:	80 93 c4 01 	sts	0x01C4, r24	; 0x8001c4 <PedalCom_DelayTxFlag>
		}
		
		TX_CommandQueue[TxTail].sent = true;
     98a:	e0 91 4e 01 	lds	r30, 0x014E	; 0x80014e <TxTail>
     98e:	f0 e0       	ldi	r31, 0x00	; 0
     990:	ee 0f       	add	r30, r30
     992:	ff 1f       	adc	r31, r31
     994:	ee 0f       	add	r30, r30
     996:	ff 1f       	adc	r31, r31
     998:	ee 0f       	add	r30, r30
     99a:	ff 1f       	adc	r31, r31
     99c:	ee 5a       	subi	r30, 0xAE	; 174
     99e:	fe 4f       	sbci	r31, 0xFE	; 254
     9a0:	81 e0       	ldi	r24, 0x01	; 1
     9a2:	86 83       	std	Z+6, r24	; 0x06
		
		/* Start response timeout timer */
		PedalCom_ResponseTimeoutOvfCnt = 1;
     9a4:	81 e0       	ldi	r24, 0x01	; 1
     9a6:	90 e0       	ldi	r25, 0x00	; 0
     9a8:	90 93 04 01 	sts	0x0104, r25	; 0x800104 <PedalCom_ResponseTimeoutOvfCnt+0x1>
     9ac:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <PedalCom_ResponseTimeoutOvfCnt>
	}
}
     9b0:	cf 91       	pop	r28
     9b2:	08 95       	ret

000009b4 <_Z12Select_RX_TXh>:
}


void Select_RX_TX(uint8_t dir)
{
	if (dir == DIR_TRANSMIT)
     9b4:	81 11       	cpse	r24, r1
     9b6:	03 c0       	rjmp	.+6      	; 0x9be <_Z12Select_RX_TXh+0xa>
	{
		SELECT_RX_TX_PORT &= ~(SELECT_RX_MASK);
     9b8:	2b 98       	cbi	0x05, 3	; 5
		SELECT_RX_TX_PORT |= SELECT_TX_MASK;
     9ba:	2c 9a       	sbi	0x05, 4	; 5
     9bc:	08 95       	ret
	}
	else
	{
		SELECT_RX_TX_PORT |= SELECT_RX_MASK;
     9be:	2b 9a       	sbi	0x05, 3	; 5
		SELECT_RX_TX_PORT &= ~(SELECT_TX_MASK);
     9c0:	2c 98       	cbi	0x05, 4	; 5
     9c2:	08 95       	ret

000009c4 <_Z13PedalCom_Initv>:

/* Function implementations */
void PedalCom_Init()
{
	/* Set RX/TX Select GPIOs to output */
	SELECT_RX_TX_DDR |= (SELECT_RX_MASK | SELECT_TX_MASK);
     9c4:	84 b1       	in	r24, 0x04	; 4
     9c6:	88 61       	ori	r24, 0x18	; 24
     9c8:	84 b9       	out	0x04, r24	; 4
	
	/* Activate receive */
	Select_RX_TX(DIR_RECEIVE);
     9ca:	81 e0       	ldi	r24, 0x01	; 1
     9cc:	0e 94 da 04 	call	0x9b4	; 0x9b4 <_Z12Select_RX_TXh>
	
	/* Enable TX Complete Interrupt */
	UCSR0B |= (1 << TXCIE0);
     9d0:	e1 ec       	ldi	r30, 0xC1	; 193
     9d2:	f0 e0       	ldi	r31, 0x00	; 0
     9d4:	80 81       	ld	r24, Z
     9d6:	80 64       	ori	r24, 0x40	; 64
     9d8:	80 83       	st	Z, r24
     9da:	08 95       	ret

000009dc <_Z17PedalCom_Transmitv>:


void PedalCom_Transmit()
{
	/* Activate Transmit */
	Select_RX_TX(DIR_TRANSMIT);
     9dc:	80 e0       	ldi	r24, 0x00	; 0
     9de:	0e 94 da 04 	call	0x9b4	; 0x9b4 <_Z12Select_RX_TXh>
	
	/* Start transmit */
	UART0_PutQueue();
     9e2:	0e 94 06 0e 	call	0x1c0c	; 0x1c0c <_Z14UART0_PutQueuev>
     9e6:	08 95       	ret

000009e8 <__vector_22>:
	}
}

/* TX Complete Interrupt ISR */
ISR(USART0_TX_vect)
{
     9e8:	1f 92       	push	r1
     9ea:	0f 92       	push	r0
     9ec:	0f b6       	in	r0, 0x3f	; 63
     9ee:	0f 92       	push	r0
     9f0:	11 24       	eor	r1, r1
     9f2:	2f 93       	push	r18
     9f4:	3f 93       	push	r19
     9f6:	4f 93       	push	r20
     9f8:	5f 93       	push	r21
     9fa:	6f 93       	push	r22
     9fc:	7f 93       	push	r23
     9fe:	8f 93       	push	r24
     a00:	9f 93       	push	r25
     a02:	af 93       	push	r26
     a04:	bf 93       	push	r27
     a06:	ef 93       	push	r30
     a08:	ff 93       	push	r31
	/* Deactivate Transmit */
	Select_RX_TX(DIR_RECEIVE);
     a0a:	81 e0       	ldi	r24, 0x01	; 1
     a0c:	0e 94 da 04 	call	0x9b4	; 0x9b4 <_Z12Select_RX_TXh>
     a10:	ff 91       	pop	r31
     a12:	ef 91       	pop	r30
     a14:	bf 91       	pop	r27
     a16:	af 91       	pop	r26
     a18:	9f 91       	pop	r25
     a1a:	8f 91       	pop	r24
     a1c:	7f 91       	pop	r23
     a1e:	6f 91       	pop	r22
     a20:	5f 91       	pop	r21
     a22:	4f 91       	pop	r20
     a24:	3f 91       	pop	r19
     a26:	2f 91       	pop	r18
     a28:	0f 90       	pop	r0
     a2a:	0f be       	out	0x3f, r0	; 63
     a2c:	0f 90       	pop	r0
     a2e:	1f 90       	pop	r1
     a30:	18 95       	reti

00000a32 <_Z18RotaryEncoder_Initv>:
     a32:	84 b1       	in	r24, 0x04	; 4
     a34:	88 7f       	andi	r24, 0xF8	; 248
     a36:	84 b9       	out	0x04, r24	; 4
     a38:	ec e6       	ldi	r30, 0x6C	; 108
     a3a:	f0 e0       	ldi	r31, 0x00	; 0
     a3c:	80 81       	ld	r24, Z
     a3e:	81 60       	ori	r24, 0x01	; 1
     a40:	80 83       	st	Z, r24
     a42:	e8 e6       	ldi	r30, 0x68	; 104
     a44:	f0 e0       	ldi	r31, 0x00	; 0
     a46:	80 81       	ld	r24, Z
     a48:	82 60       	ori	r24, 0x02	; 2
     a4a:	80 83       	st	Z, r24
     a4c:	e9 e6       	ldi	r30, 0x69	; 105
     a4e:	f0 e0       	ldi	r31, 0x00	; 0
     a50:	80 81       	ld	r24, Z
     a52:	80 63       	ori	r24, 0x30	; 48
     a54:	80 83       	st	Z, r24
     a56:	ea 9a       	sbi	0x1d, 2	; 29
     a58:	08 95       	ret

00000a5a <_Z23RotaryEncoder_IsPressedv>:
     a5a:	83 b1       	in	r24, 0x03	; 3
     a5c:	82 fb       	bst	r24, 2
     a5e:	88 27       	eor	r24, r24
     a60:	80 f9       	bld	r24, 0
     a62:	08 95       	ret

00000a64 <_Z29RotaryEncoder_EnableInterruptv>:
     a64:	e2 9a       	sbi	0x1c, 2	; 28
     a66:	d9 9a       	sbi	0x1b, 1	; 27
     a68:	ea 9a       	sbi	0x1d, 2	; 29
     a6a:	e8 e6       	ldi	r30, 0x68	; 104
     a6c:	f0 e0       	ldi	r31, 0x00	; 0
     a6e:	80 81       	ld	r24, Z
     a70:	82 60       	ori	r24, 0x02	; 2
     a72:	80 83       	st	Z, r24
     a74:	08 95       	ret

00000a76 <__vector_5>:
     a76:	1f 92       	push	r1
     a78:	0f 92       	push	r0
     a7a:	0f b6       	in	r0, 0x3f	; 63
     a7c:	0f 92       	push	r0
     a7e:	11 24       	eor	r1, r1
     a80:	8f 93       	push	r24
     a82:	ef 93       	push	r30
     a84:	ff 93       	push	r31
     a86:	18 9b       	sbis	0x03, 0	; 3
     a88:	0f c0       	rjmp	.+30     	; 0xaa8 <__vector_5+0x32>
     a8a:	ea 98       	cbi	0x1d, 2	; 29
     a8c:	e8 e6       	ldi	r30, 0x68	; 104
     a8e:	f0 e0       	ldi	r31, 0x00	; 0
     a90:	80 81       	ld	r24, Z
     a92:	8d 7f       	andi	r24, 0xFD	; 253
     a94:	80 83       	st	Z, r24
     a96:	19 9b       	sbis	0x03, 1	; 3
     a98:	04 c0       	rjmp	.+8      	; 0xaa2 <__vector_5+0x2c>
     a9a:	81 e0       	ldi	r24, 0x01	; 1
     a9c:	80 93 c5 01 	sts	0x01C5, r24	; 0x8001c5 <RotEnc_State>
     aa0:	03 c0       	rjmp	.+6      	; 0xaa8 <__vector_5+0x32>
     aa2:	82 e0       	ldi	r24, 0x02	; 2
     aa4:	80 93 c5 01 	sts	0x01C5, r24	; 0x8001c5 <RotEnc_State>
     aa8:	ff 91       	pop	r31
     aaa:	ef 91       	pop	r30
     aac:	8f 91       	pop	r24
     aae:	0f 90       	pop	r0
     ab0:	0f be       	out	0x3f, r0	; 63
     ab2:	0f 90       	pop	r0
     ab4:	1f 90       	pop	r1
     ab6:	18 95       	reti

00000ab8 <__vector_3>:
     ab8:	1f 92       	push	r1
     aba:	0f 92       	push	r0
     abc:	0f b6       	in	r0, 0x3f	; 63
     abe:	0f 92       	push	r0
     ac0:	11 24       	eor	r1, r1
     ac2:	8f 93       	push	r24
     ac4:	9f 93       	push	r25
     ac6:	ef 93       	push	r30
     ac8:	ff 93       	push	r31
     aca:	81 e0       	ldi	r24, 0x01	; 1
     acc:	90 e0       	ldi	r25, 0x00	; 0
     ace:	90 93 c7 01 	sts	0x01C7, r25	; 0x8001c7 <RotaryEncoder_OvfCnt+0x1>
     ad2:	80 93 c6 01 	sts	0x01C6, r24	; 0x8001c6 <RotaryEncoder_OvfCnt>
     ad6:	ea 98       	cbi	0x1d, 2	; 29
     ad8:	e8 e6       	ldi	r30, 0x68	; 104
     ada:	f0 e0       	ldi	r31, 0x00	; 0
     adc:	80 81       	ld	r24, Z
     ade:	8d 7f       	andi	r24, 0xFD	; 253
     ae0:	80 83       	st	Z, r24
     ae2:	ff 91       	pop	r31
     ae4:	ef 91       	pop	r30
     ae6:	9f 91       	pop	r25
     ae8:	8f 91       	pop	r24
     aea:	0f 90       	pop	r0
     aec:	0f be       	out	0x3f, r0	; 63
     aee:	0f 90       	pop	r0
     af0:	1f 90       	pop	r1
     af2:	18 95       	reti

00000af4 <_Z14SP10281_Updatev>:
     af4:	80 91 cb 01 	lds	r24, 0x01CB	; 0x8001cb <SP10281_DigitCnt>
     af8:	8f 5f       	subi	r24, 0xFF	; 255
     afa:	80 93 cb 01 	sts	0x01CB, r24	; 0x8001cb <SP10281_DigitCnt>
     afe:	83 30       	cpi	r24, 0x03	; 3
     b00:	10 f0       	brcs	.+4      	; 0xb06 <_Z14SP10281_Updatev+0x12>
     b02:	10 92 cb 01 	sts	0x01CB, r1	; 0x8001cb <SP10281_DigitCnt>
     b06:	90 91 cb 01 	lds	r25, 0x01CB	; 0x8001cb <SP10281_DigitCnt>
     b0a:	9b 5f       	subi	r25, 0xFB	; 251
     b0c:	81 e0       	ldi	r24, 0x01	; 1
     b0e:	01 c0       	rjmp	.+2      	; 0xb12 <_Z14SP10281_Updatev+0x1e>
     b10:	88 0f       	add	r24, r24
     b12:	9a 95       	dec	r25
     b14:	ea f7       	brpl	.-6      	; 0xb10 <_Z14SP10281_Updatev+0x1c>
     b16:	80 93 c8 01 	sts	0x01C8, r24	; 0x8001c8 <_ZZ14SP10281_UpdatevE3tmp>
     b1a:	85 b1       	in	r24, 0x05	; 5
     b1c:	80 6e       	ori	r24, 0xE0	; 224
     b1e:	85 b9       	out	0x05, r24	; 5
     b20:	95 b1       	in	r25, 0x05	; 5
     b22:	80 91 c8 01 	lds	r24, 0x01C8	; 0x8001c8 <_ZZ14SP10281_UpdatevE3tmp>
     b26:	80 95       	com	r24
     b28:	89 23       	and	r24, r25
     b2a:	85 b9       	out	0x05, r24	; 5
     b2c:	e0 91 cb 01 	lds	r30, 0x01CB	; 0x8001cb <SP10281_DigitCnt>
     b30:	f0 e0       	ldi	r31, 0x00	; 0
     b32:	e4 53       	subi	r30, 0x34	; 52
     b34:	fe 4f       	sbci	r31, 0xFE	; 254
     b36:	80 81       	ld	r24, Z
     b38:	82 b9       	out	0x02, r24	; 2
     b3a:	08 95       	ret

00000b3c <_Z18SP10281_WriteDigithch>:
     b3c:	e0 ed       	ldi	r30, 0xD0	; 208
     b3e:	e6 0f       	add	r30, r22
     b40:	ea 30       	cpi	r30, 0x0A	; 10
     b42:	a8 f0       	brcs	.+42     	; 0xb6e <_Z18SP10281_WriteDigithch+0x32>
     b44:	9f eb       	ldi	r25, 0xBF	; 191
     b46:	96 0f       	add	r25, r22
     b48:	9a 31       	cpi	r25, 0x1A	; 26
     b4a:	18 f4       	brcc	.+6      	; 0xb52 <_Z18SP10281_WriteDigithch+0x16>
     b4c:	e9 ec       	ldi	r30, 0xC9	; 201
     b4e:	e6 0f       	add	r30, r22
     b50:	0e c0       	rjmp	.+28     	; 0xb6e <_Z18SP10281_WriteDigithch+0x32>
     b52:	9f e9       	ldi	r25, 0x9F	; 159
     b54:	96 0f       	add	r25, r22
     b56:	9a 31       	cpi	r25, 0x1A	; 26
     b58:	18 f4       	brcc	.+6      	; 0xb60 <_Z18SP10281_WriteDigithch+0x24>
     b5a:	e9 ea       	ldi	r30, 0xA9	; 169
     b5c:	e6 0f       	add	r30, r22
     b5e:	07 c0       	rjmp	.+14     	; 0xb6e <_Z18SP10281_WriteDigithch+0x32>
     b60:	6d 32       	cpi	r22, 0x2D	; 45
     b62:	21 f0       	breq	.+8      	; 0xb6c <_Z18SP10281_WriteDigithch+0x30>
     b64:	60 32       	cpi	r22, 0x20	; 32
     b66:	d9 f4       	brne	.+54     	; 0xb9e <_Z18SP10281_WriteDigithch+0x62>
     b68:	e5 e2       	ldi	r30, 0x25	; 37
     b6a:	01 c0       	rjmp	.+2      	; 0xb6e <_Z18SP10281_WriteDigithch+0x32>
     b6c:	e4 e2       	ldi	r30, 0x24	; 36
     b6e:	90 e0       	ldi	r25, 0x00	; 0
     b70:	f0 e0       	ldi	r31, 0x00	; 0
     b72:	eb 5f       	subi	r30, 0xFB	; 251
     b74:	fe 4f       	sbci	r31, 0xFE	; 254
     b76:	20 81       	ld	r18, Z
     b78:	fc 01       	movw	r30, r24
     b7a:	e4 53       	subi	r30, 0x34	; 52
     b7c:	fe 4f       	sbci	r31, 0xFE	; 254
     b7e:	20 83       	st	Z, r18
     b80:	44 23       	and	r20, r20
     b82:	39 f0       	breq	.+14     	; 0xb92 <_Z18SP10281_WriteDigithch+0x56>
     b84:	fc 01       	movw	r30, r24
     b86:	e4 53       	subi	r30, 0x34	; 52
     b88:	fe 4f       	sbci	r31, 0xFE	; 254
     b8a:	80 81       	ld	r24, Z
     b8c:	8f 77       	andi	r24, 0x7F	; 127
     b8e:	80 83       	st	Z, r24
     b90:	08 95       	ret
     b92:	fc 01       	movw	r30, r24
     b94:	e4 53       	subi	r30, 0x34	; 52
     b96:	fe 4f       	sbci	r31, 0xFE	; 254
     b98:	80 81       	ld	r24, Z
     b9a:	80 68       	ori	r24, 0x80	; 128
     b9c:	80 83       	st	Z, r24
     b9e:	08 95       	ret

00000ba0 <_Z17SP10281_WriteCharccchhh>:
     ba0:	ef 92       	push	r14
     ba2:	0f 93       	push	r16
     ba4:	1f 93       	push	r17
     ba6:	cf 93       	push	r28
     ba8:	df 93       	push	r29
     baa:	c8 2f       	mov	r28, r24
     bac:	16 2f       	mov	r17, r22
     bae:	64 2f       	mov	r22, r20
     bb0:	d2 2f       	mov	r29, r18
     bb2:	4e 2d       	mov	r20, r14
     bb4:	80 e0       	ldi	r24, 0x00	; 0
     bb6:	0e 94 9e 05 	call	0xb3c	; 0xb3c <_Z18SP10281_WriteDigithch>
     bba:	40 2f       	mov	r20, r16
     bbc:	61 2f       	mov	r22, r17
     bbe:	81 e0       	ldi	r24, 0x01	; 1
     bc0:	0e 94 9e 05 	call	0xb3c	; 0xb3c <_Z18SP10281_WriteDigithch>
     bc4:	4d 2f       	mov	r20, r29
     bc6:	6c 2f       	mov	r22, r28
     bc8:	82 e0       	ldi	r24, 0x02	; 2
     bca:	0e 94 9e 05 	call	0xb3c	; 0xb3c <_Z18SP10281_WriteDigithch>
     bce:	df 91       	pop	r29
     bd0:	cf 91       	pop	r28
     bd2:	1f 91       	pop	r17
     bd4:	0f 91       	pop	r16
     bd6:	ef 90       	pop	r14
     bd8:	08 95       	ret

00000bda <_Z19SP10281_WriteNumbers>:
     bda:	cf 93       	push	r28
     bdc:	df 93       	push	r29
     bde:	9c 01       	movw	r18, r24
     be0:	2d 59       	subi	r18, 0x9D	; 157
     be2:	3f 4f       	sbci	r19, 0xFF	; 255
     be4:	2b 34       	cpi	r18, 0x4B	; 75
     be6:	34 40       	sbci	r19, 0x04	; 4
     be8:	68 f5       	brcc	.+90     	; 0xc44 <_Z19SP10281_WriteNumbers+0x6a>
     bea:	ec 01       	movw	r28, r24
     bec:	99 23       	and	r25, r25
     bee:	54 f4       	brge	.+20     	; 0xc04 <_Z19SP10281_WriteNumbers+0x2a>
     bf0:	40 e0       	ldi	r20, 0x00	; 0
     bf2:	6d e2       	ldi	r22, 0x2D	; 45
     bf4:	82 e0       	ldi	r24, 0x02	; 2
     bf6:	0e 94 9e 05 	call	0xb3c	; 0xb3c <_Z18SP10281_WriteDigithch>
     bfa:	88 27       	eor	r24, r24
     bfc:	99 27       	eor	r25, r25
     bfe:	8c 1b       	sub	r24, r28
     c00:	9d 0b       	sbc	r25, r29
     c02:	0e c0       	rjmp	.+28     	; 0xc20 <_Z19SP10281_WriteNumbers+0x46>
     c04:	64 e6       	ldi	r22, 0x64	; 100
     c06:	70 e0       	ldi	r23, 0x00	; 0
     c08:	0e 94 47 10 	call	0x208e	; 0x208e <__divmodhi4>
     c0c:	d8 2f       	mov	r29, r24
     c0e:	c9 2f       	mov	r28, r25
     c10:	60 5d       	subi	r22, 0xD0	; 208
     c12:	7f 4f       	sbci	r23, 0xFF	; 255
     c14:	40 e0       	ldi	r20, 0x00	; 0
     c16:	82 e0       	ldi	r24, 0x02	; 2
     c18:	0e 94 9e 05 	call	0xb3c	; 0xb3c <_Z18SP10281_WriteDigithch>
     c1c:	8d 2f       	mov	r24, r29
     c1e:	9c 2f       	mov	r25, r28
     c20:	6a e0       	ldi	r22, 0x0A	; 10
     c22:	70 e0       	ldi	r23, 0x00	; 0
     c24:	0e 94 47 10 	call	0x208e	; 0x208e <__divmodhi4>
     c28:	ec 01       	movw	r28, r24
     c2a:	60 5d       	subi	r22, 0xD0	; 208
     c2c:	7f 4f       	sbci	r23, 0xFF	; 255
     c2e:	40 e0       	ldi	r20, 0x00	; 0
     c30:	81 e0       	ldi	r24, 0x01	; 1
     c32:	0e 94 9e 05 	call	0xb3c	; 0xb3c <_Z18SP10281_WriteDigithch>
     c36:	be 01       	movw	r22, r28
     c38:	60 5d       	subi	r22, 0xD0	; 208
     c3a:	7f 4f       	sbci	r23, 0xFF	; 255
     c3c:	40 e0       	ldi	r20, 0x00	; 0
     c3e:	80 e0       	ldi	r24, 0x00	; 0
     c40:	0e 94 9e 05 	call	0xb3c	; 0xb3c <_Z18SP10281_WriteDigithch>
     c44:	df 91       	pop	r29
     c46:	cf 91       	pop	r28
     c48:	08 95       	ret

00000c4a <_Z12SP10281_Initv>:
     c4a:	84 b1       	in	r24, 0x04	; 4
     c4c:	80 6e       	ori	r24, 0xE0	; 224
     c4e:	84 b9       	out	0x04, r24	; 4
     c50:	8f ef       	ldi	r24, 0xFF	; 255
     c52:	81 b9       	out	0x01, r24	; 1
     c54:	8b e7       	ldi	r24, 0x7B	; 123
     c56:	90 e0       	ldi	r25, 0x00	; 0
     c58:	0e 94 ed 05 	call	0xbda	; 0xbda <_Z19SP10281_WriteNumbers>
     c5c:	08 95       	ret

00000c5e <_Z30System_HandleTempSelectTimeoutv>:
			{
				CtrlSwitchRelays[i].Clear();
			}
		}
	}
}
     c5e:	ef 92       	push	r14
     c60:	0f 93       	push	r16
     c62:	80 91 ff 01 	lds	r24, 0x01FF	; 0x8001ff <SystemState>
     c66:	84 30       	cpi	r24, 0x04	; 4
     c68:	71 f0       	breq	.+28     	; 0xc86 <_Z30System_HandleTempSelectTimeoutv+0x28>
     c6a:	18 f4       	brcc	.+6      	; 0xc72 <_Z30System_HandleTempSelectTimeoutv+0x14>
     c6c:	81 30       	cpi	r24, 0x01	; 1
     c6e:	31 f0       	breq	.+12     	; 0xc7c <_Z30System_HandleTempSelectTimeoutv+0x1e>
     c70:	4d c0       	rjmp	.+154    	; 0xd0c <_Z30System_HandleTempSelectTimeoutv+0xae>
     c72:	86 30       	cpi	r24, 0x06	; 6
     c74:	e9 f0       	breq	.+58     	; 0xcb0 <_Z30System_HandleTempSelectTimeoutv+0x52>
     c76:	80 31       	cpi	r24, 0x10	; 16
     c78:	99 f1       	breq	.+102    	; 0xce0 <_Z30System_HandleTempSelectTimeoutv+0x82>
     c7a:	48 c0       	rjmp	.+144    	; 0xd0c <_Z30System_HandleTempSelectTimeoutv+0xae>
     c7c:	80 91 f6 01 	lds	r24, 0x01F6	; 0x8001f6 <System_MidiChannel>
     c80:	80 93 f8 01 	sts	0x01F8, r24	; 0x8001f8 <TempSelectMidiChannel>
     c84:	43 c0       	rjmp	.+134    	; 0xd0c <_Z30System_HandleTempSelectTimeoutv+0xae>
     c86:	0e 94 2d 05 	call	0xa5a	; 0xa5a <_Z23RotaryEncoder_IsPressedv>
     c8a:	88 23       	and	r24, r24
     c8c:	29 f0       	breq	.+10     	; 0xc98 <_Z30System_HandleTempSelectTimeoutv+0x3a>
     c8e:	80 91 fb 01 	lds	r24, 0x01FB	; 0x8001fb <TempSelectPreset>
     c92:	80 93 fd 01 	sts	0x01FD, r24	; 0x8001fd <ActivePreset>
     c96:	08 c0       	rjmp	.+16     	; 0xca8 <_Z30System_HandleTempSelectTimeoutv+0x4a>
     c98:	80 91 fd 01 	lds	r24, 0x01FD	; 0x8001fd <ActivePreset>
     c9c:	80 93 fb 01 	sts	0x01FB, r24	; 0x8001fb <TempSelectPreset>
     ca0:	80 91 fd 01 	lds	r24, 0x01FD	; 0x8001fd <ActivePreset>
     ca4:	80 93 fa 01 	sts	0x01FA, r24	; 0x8001fa <LastTempSelectPreset>
     ca8:	83 e0       	ldi	r24, 0x03	; 3
     caa:	80 93 ff 01 	sts	0x01FF, r24	; 0x8001ff <SystemState>
     cae:	2e c0       	rjmp	.+92     	; 0xd0c <_Z30System_HandleTempSelectTimeoutv+0xae>
     cb0:	0e 94 2d 05 	call	0xa5a	; 0xa5a <_Z23RotaryEncoder_IsPressedv>
     cb4:	88 23       	and	r24, r24
     cb6:	41 f0       	breq	.+16     	; 0xcc8 <_Z30System_HandleTempSelectTimeoutv+0x6a>
     cb8:	80 91 fb 01 	lds	r24, 0x01FB	; 0x8001fb <TempSelectPreset>
     cbc:	80 93 fd 01 	sts	0x01FD, r24	; 0x8001fd <ActivePreset>
     cc0:	83 e0       	ldi	r24, 0x03	; 3
     cc2:	80 93 ff 01 	sts	0x01FF, r24	; 0x8001ff <SystemState>
     cc6:	22 c0       	rjmp	.+68     	; 0xd0c <_Z30System_HandleTempSelectTimeoutv+0xae>
     cc8:	80 91 fd 01 	lds	r24, 0x01FD	; 0x8001fd <ActivePreset>
     ccc:	80 93 fb 01 	sts	0x01FB, r24	; 0x8001fb <TempSelectPreset>
     cd0:	80 91 fd 01 	lds	r24, 0x01FD	; 0x8001fd <ActivePreset>
     cd4:	80 93 fa 01 	sts	0x01FA, r24	; 0x8001fa <LastTempSelectPreset>
     cd8:	85 e0       	ldi	r24, 0x05	; 5
     cda:	80 93 ff 01 	sts	0x01FF, r24	; 0x8001ff <SystemState>
     cde:	16 c0       	rjmp	.+44     	; 0xd0c <_Z30System_HandleTempSelectTimeoutv+0xae>
     ce0:	80 91 f1 01 	lds	r24, 0x01F1	; 0x8001f1 <LastTempSelectMidiPC>
     ce4:	80 93 f2 01 	sts	0x01F2, r24	; 0x8001f2 <TempSelectMidiPC>
     ce8:	80 91 f2 01 	lds	r24, 0x01F2	; 0x8001f2 <TempSelectMidiPC>
     cec:	8f 3f       	cpi	r24, 0xFF	; 255
     cee:	49 f4       	brne	.+18     	; 0xd02 <_Z30System_HandleTempSelectTimeoutv+0xa4>
     cf0:	e1 2c       	mov	r14, r1
     cf2:	00 e0       	ldi	r16, 0x00	; 0
     cf4:	20 e0       	ldi	r18, 0x00	; 0
     cf6:	46 e6       	ldi	r20, 0x66	; 102
     cf8:	66 e6       	ldi	r22, 0x66	; 102
     cfa:	8f e6       	ldi	r24, 0x6F	; 111
     cfc:	0e 94 d0 05 	call	0xba0	; 0xba0 <_Z17SP10281_WriteCharccchhh>
     d00:	05 c0       	rjmp	.+10     	; 0xd0c <_Z30System_HandleTempSelectTimeoutv+0xae>
     d02:	80 91 f2 01 	lds	r24, 0x01F2	; 0x8001f2 <TempSelectMidiPC>
     d06:	90 e0       	ldi	r25, 0x00	; 0
     d08:	0e 94 ed 05 	call	0xbda	; 0xbda <_Z19SP10281_WriteNumbers>
     d0c:	0f 91       	pop	r16
     d0e:	ef 90       	pop	r14
     d10:	08 95       	ret

00000d12 <_Z26System_HandleMarkSelectionv>:
     d12:	cf 93       	push	r28
     d14:	df 93       	push	r29
     d16:	80 91 ff 01 	lds	r24, 0x01FF	; 0x8001ff <SystemState>
     d1a:	8c 30       	cpi	r24, 0x0C	; 12
     d1c:	71 f4       	brne	.+28     	; 0xd3a <_Z26System_HandleMarkSelectionv+0x28>
     d1e:	cf e2       	ldi	r28, 0x2F	; 47
     d20:	d1 e0       	ldi	r29, 0x01	; 1
     d22:	48 81       	ld	r20, Y
     d24:	64 e1       	ldi	r22, 0x14	; 20
     d26:	80 e0       	ldi	r24, 0x00	; 0
     d28:	0e 94 65 01 	call	0x2ca	; 0x2ca <_Z17MCP23017_WriteReghhh>
     d2c:	49 81       	ldd	r20, Y+1	; 0x01
     d2e:	4f 70       	andi	r20, 0x0F	; 15
     d30:	40 64       	ori	r20, 0x40	; 64
     d32:	65 e1       	ldi	r22, 0x15	; 21
     d34:	80 e0       	ldi	r24, 0x00	; 0
     d36:	0e 94 65 01 	call	0x2ca	; 0x2ca <_Z17MCP23017_WriteReghhh>
     d3a:	df 91       	pop	r29
     d3c:	cf 91       	pop	r28
     d3e:	08 95       	ret

00000d40 <_Z25System_HandlePedalCommand3CMDhPh>:
     d40:	81 3b       	cpi	r24, 0xB1	; 177
     d42:	21 f5       	brne	.+72     	; 0xd8c <_Z25System_HandlePedalCommand3CMDhPh+0x4c>
     d44:	80 91 ff 01 	lds	r24, 0x01FF	; 0x8001ff <SystemState>
     d48:	84 30       	cpi	r24, 0x04	; 4
     d4a:	49 f4       	brne	.+18     	; 0xd5e <_Z25System_HandlePedalCommand3CMDhPh+0x1e>
     d4c:	fa 01       	movw	r30, r20
     d4e:	80 81       	ld	r24, Z
     d50:	0e 94 3c 10 	call	0x2078	; 0x2078 <_Z12Util_Bit2Inth>
     d54:	81 50       	subi	r24, 0x01	; 1
     d56:	80 93 fd 01 	sts	0x01FD, r24	; 0x8001fd <ActivePreset>
     d5a:	8c ea       	ldi	r24, 0xAC	; 172
     d5c:	08 95       	ret
     d5e:	80 91 ff 01 	lds	r24, 0x01FF	; 0x8001ff <SystemState>
     d62:	86 30       	cpi	r24, 0x06	; 6
     d64:	49 f4       	brne	.+18     	; 0xd78 <_Z25System_HandlePedalCommand3CMDhPh+0x38>
     d66:	ef e2       	ldi	r30, 0x2F	; 47
     d68:	f1 e0       	ldi	r31, 0x01	; 1
     d6a:	90 81       	ld	r25, Z
     d6c:	da 01       	movw	r26, r20
     d6e:	8c 91       	ld	r24, X
     d70:	89 27       	eor	r24, r25
     d72:	80 83       	st	Z, r24
     d74:	8c ea       	ldi	r24, 0xAC	; 172
     d76:	08 95       	ret
     d78:	80 91 ff 01 	lds	r24, 0x01FF	; 0x8001ff <SystemState>
     d7c:	88 30       	cpi	r24, 0x08	; 8
     d7e:	09 f0       	breq	.+2      	; 0xd82 <_Z25System_HandlePedalCommand3CMDhPh+0x42>
     d80:	4b c0       	rjmp	.+150    	; 0xe18 <_Z25System_HandlePedalCommand3CMDhPh+0xd8>
     d82:	82 e0       	ldi	r24, 0x02	; 2
     d84:	80 93 ff 01 	sts	0x01FF, r24	; 0x8001ff <SystemState>
     d88:	8c ea       	ldi	r24, 0xAC	; 172
     d8a:	08 95       	ret
     d8c:	82 3b       	cpi	r24, 0xB2	; 178
     d8e:	61 f5       	brne	.+88     	; 0xde8 <_Z25System_HandlePedalCommand3CMDhPh+0xa8>
     d90:	80 91 ff 01 	lds	r24, 0x01FF	; 0x8001ff <SystemState>
     d94:	84 30       	cpi	r24, 0x04	; 4
     d96:	41 f4       	brne	.+16     	; 0xda8 <_Z25System_HandlePedalCommand3CMDhPh+0x68>
     d98:	81 e0       	ldi	r24, 0x01	; 1
     d9a:	80 93 f9 01 	sts	0x01F9, r24	; 0x8001f9 <SystemRunMode>
     d9e:	82 e0       	ldi	r24, 0x02	; 2
     da0:	80 93 ff 01 	sts	0x01FF, r24	; 0x8001ff <SystemState>
     da4:	8c ea       	ldi	r24, 0xAC	; 172
     da6:	08 95       	ret
     da8:	80 91 ff 01 	lds	r24, 0x01FF	; 0x8001ff <SystemState>
     dac:	86 30       	cpi	r24, 0x06	; 6
     dae:	99 f4       	brne	.+38     	; 0xdd6 <_Z25System_HandlePedalCommand3CMDhPh+0x96>
     db0:	fa 01       	movw	r30, r20
     db2:	80 81       	ld	r24, Z
     db4:	98 2f       	mov	r25, r24
     db6:	9f 70       	andi	r25, 0x0F	; 15
     db8:	39 f0       	breq	.+14     	; 0xdc8 <_Z25System_HandlePedalCommand3CMDhPh+0x88>
     dba:	ef e2       	ldi	r30, 0x2F	; 47
     dbc:	f1 e0       	ldi	r31, 0x01	; 1
     dbe:	91 81       	ldd	r25, Z+1	; 0x01
     dc0:	89 27       	eor	r24, r25
     dc2:	81 83       	std	Z+1, r24	; 0x01
     dc4:	8c ea       	ldi	r24, 0xAC	; 172
     dc6:	08 95       	ret
     dc8:	10 92 f9 01 	sts	0x01F9, r1	; 0x8001f9 <SystemRunMode>
     dcc:	82 e0       	ldi	r24, 0x02	; 2
     dce:	80 93 ff 01 	sts	0x01FF, r24	; 0x8001ff <SystemState>
     dd2:	8c ea       	ldi	r24, 0xAC	; 172
     dd4:	08 95       	ret
     dd6:	80 91 ff 01 	lds	r24, 0x01FF	; 0x8001ff <SystemState>
     dda:	88 30       	cpi	r24, 0x08	; 8
     ddc:	f9 f4       	brne	.+62     	; 0xe1c <_Z25System_HandlePedalCommand3CMDhPh+0xdc>
     dde:	82 e0       	ldi	r24, 0x02	; 2
     de0:	80 93 ff 01 	sts	0x01FF, r24	; 0x8001ff <SystemState>
     de4:	8c ea       	ldi	r24, 0xAC	; 172
     de6:	08 95       	ret
     de8:	84 3b       	cpi	r24, 0xB4	; 180
     dea:	d1 f4       	brne	.+52     	; 0xe20 <_Z25System_HandlePedalCommand3CMDhPh+0xe0>
     dec:	80 91 ff 01 	lds	r24, 0x01FF	; 0x8001ff <SystemState>
     df0:	84 30       	cpi	r24, 0x04	; 4
     df2:	21 f0       	breq	.+8      	; 0xdfc <_Z25System_HandlePedalCommand3CMDhPh+0xbc>
     df4:	80 91 ff 01 	lds	r24, 0x01FF	; 0x8001ff <SystemState>
     df8:	86 30       	cpi	r24, 0x06	; 6
     dfa:	29 f4       	brne	.+10     	; 0xe06 <_Z25System_HandlePedalCommand3CMDhPh+0xc6>
     dfc:	88 e0       	ldi	r24, 0x08	; 8
     dfe:	80 93 ff 01 	sts	0x01FF, r24	; 0x8001ff <SystemState>
     e02:	8c ea       	ldi	r24, 0xAC	; 172
     e04:	08 95       	ret
     e06:	80 91 ff 01 	lds	r24, 0x01FF	; 0x8001ff <SystemState>
     e0a:	88 30       	cpi	r24, 0x08	; 8
     e0c:	59 f4       	brne	.+22     	; 0xe24 <_Z25System_HandlePedalCommand3CMDhPh+0xe4>
     e0e:	82 e0       	ldi	r24, 0x02	; 2
     e10:	80 93 ff 01 	sts	0x01FF, r24	; 0x8001ff <SystemState>
     e14:	8c ea       	ldi	r24, 0xAC	; 172
     e16:	08 95       	ret
     e18:	8c ea       	ldi	r24, 0xAC	; 172
     e1a:	08 95       	ret
     e1c:	8c ea       	ldi	r24, 0xAC	; 172
     e1e:	08 95       	ret
     e20:	8a e2       	ldi	r24, 0x2A	; 42
     e22:	08 95       	ret
     e24:	8c ea       	ldi	r24, 0xAC	; 172
     e26:	08 95       	ret

00000e28 <_Z30System_HandleMIDIProgramChangev>:
     e28:	e1 ed       	ldi	r30, 0xD1	; 209
     e2a:	f1 e0       	ldi	r31, 0x01	; 1
     e2c:	80 e0       	ldi	r24, 0x00	; 0
     e2e:	90 91 45 01 	lds	r25, 0x0145	; 0x800145 <MIDI_ReceivedProgram>
     e32:	22 81       	ldd	r18, Z+2	; 0x02
     e34:	29 13       	cpse	r18, r25
     e36:	02 c0       	rjmp	.+4      	; 0xe3c <_Z30System_HandleMIDIProgramChangev+0x14>
     e38:	80 93 fd 01 	sts	0x01FD, r24	; 0x8001fd <ActivePreset>
     e3c:	8f 5f       	subi	r24, 0xFF	; 255
     e3e:	34 96       	adiw	r30, 0x04	; 4
     e40:	88 30       	cpi	r24, 0x08	; 8
     e42:	a9 f7       	brne	.-22     	; 0xe2e <_Z30System_HandleMIDIProgramChangev+0x6>
     e44:	08 95       	ret

00000e46 <_Z20System_UpdateUI_LEDsv>:
     e46:	ef 92       	push	r14
     e48:	ff 92       	push	r15
     e4a:	0f 93       	push	r16
     e4c:	1f 93       	push	r17
     e4e:	cf 93       	push	r28
     e50:	df 93       	push	r29
     e52:	00 ed       	ldi	r16, 0xD0	; 208
     e54:	12 e0       	ldi	r17, 0x02	; 2
     e56:	c0 e0       	ldi	r28, 0x00	; 0
     e58:	d0 e0       	ldi	r29, 0x00	; 0
     e5a:	0f 2e       	mov	r0, r31
     e5c:	ff e2       	ldi	r31, 0x2F	; 47
     e5e:	ef 2e       	mov	r14, r31
     e60:	f1 e0       	ldi	r31, 0x01	; 1
     e62:	ff 2e       	mov	r15, r31
     e64:	f0 2d       	mov	r31, r0
     e66:	f7 01       	movw	r30, r14
     e68:	80 81       	ld	r24, Z
     e6a:	90 e0       	ldi	r25, 0x00	; 0
     e6c:	0c 2e       	mov	r0, r28
     e6e:	02 c0       	rjmp	.+4      	; 0xe74 <_Z20System_UpdateUI_LEDsv+0x2e>
     e70:	95 95       	asr	r25
     e72:	87 95       	ror	r24
     e74:	0a 94       	dec	r0
     e76:	e2 f7       	brpl	.-8      	; 0xe70 <_Z20System_UpdateUI_LEDsv+0x2a>
     e78:	80 ff       	sbrs	r24, 0
     e7a:	09 c0       	rjmp	.+18     	; 0xe8e <_Z20System_UpdateUI_LEDsv+0x48>
     e7c:	c8 01       	movw	r24, r16
     e7e:	0e 94 90 01 	call	0x320	; 0x320 <_ZN10MCP_Output8getStateEv>
     e82:	81 30       	cpi	r24, 0x01	; 1
     e84:	61 f0       	breq	.+24     	; 0xe9e <_Z20System_UpdateUI_LEDsv+0x58>
     e86:	c8 01       	movw	r24, r16
     e88:	0e 94 93 01 	call	0x326	; 0x326 <_ZN10MCP_Output3SetEv>
     e8c:	08 c0       	rjmp	.+16     	; 0xe9e <_Z20System_UpdateUI_LEDsv+0x58>
     e8e:	c8 01       	movw	r24, r16
     e90:	0e 94 90 01 	call	0x320	; 0x320 <_ZN10MCP_Output8getStateEv>
     e94:	88 23       	and	r24, r24
     e96:	19 f0       	breq	.+6      	; 0xe9e <_Z20System_UpdateUI_LEDsv+0x58>
     e98:	c8 01       	movw	r24, r16
     e9a:	0e 94 d0 01 	call	0x3a0	; 0x3a0 <_ZN10MCP_Output5ClearEv>
     e9e:	21 96       	adiw	r28, 0x01	; 1
     ea0:	0c 5f       	subi	r16, 0xFC	; 252
     ea2:	1f 4f       	sbci	r17, 0xFF	; 255
     ea4:	c8 30       	cpi	r28, 0x08	; 8
     ea6:	d1 05       	cpc	r29, r1
     ea8:	f1 f6       	brne	.-68     	; 0xe66 <_Z20System_UpdateUI_LEDsv+0x20>
     eaa:	00 ec       	ldi	r16, 0xC0	; 192
     eac:	12 e0       	ldi	r17, 0x02	; 2
     eae:	c0 e0       	ldi	r28, 0x00	; 0
     eb0:	d0 e0       	ldi	r29, 0x00	; 0
     eb2:	0f 2e       	mov	r0, r31
     eb4:	ff e2       	ldi	r31, 0x2F	; 47
     eb6:	ef 2e       	mov	r14, r31
     eb8:	f1 e0       	ldi	r31, 0x01	; 1
     eba:	ff 2e       	mov	r15, r31
     ebc:	f0 2d       	mov	r31, r0
     ebe:	f7 01       	movw	r30, r14
     ec0:	81 81       	ldd	r24, Z+1	; 0x01
     ec2:	90 e0       	ldi	r25, 0x00	; 0
     ec4:	0c 2e       	mov	r0, r28
     ec6:	02 c0       	rjmp	.+4      	; 0xecc <_Z20System_UpdateUI_LEDsv+0x86>
     ec8:	95 95       	asr	r25
     eca:	87 95       	ror	r24
     ecc:	0a 94       	dec	r0
     ece:	e2 f7       	brpl	.-8      	; 0xec8 <_Z20System_UpdateUI_LEDsv+0x82>
     ed0:	80 ff       	sbrs	r24, 0
     ed2:	09 c0       	rjmp	.+18     	; 0xee6 <_Z20System_UpdateUI_LEDsv+0xa0>
     ed4:	c8 01       	movw	r24, r16
     ed6:	0e 94 90 01 	call	0x320	; 0x320 <_ZN10MCP_Output8getStateEv>
     eda:	81 30       	cpi	r24, 0x01	; 1
     edc:	61 f0       	breq	.+24     	; 0xef6 <_Z20System_UpdateUI_LEDsv+0xb0>
     ede:	c8 01       	movw	r24, r16
     ee0:	0e 94 93 01 	call	0x326	; 0x326 <_ZN10MCP_Output3SetEv>
     ee4:	08 c0       	rjmp	.+16     	; 0xef6 <_Z20System_UpdateUI_LEDsv+0xb0>
     ee6:	c8 01       	movw	r24, r16
     ee8:	0e 94 90 01 	call	0x320	; 0x320 <_ZN10MCP_Output8getStateEv>
     eec:	88 23       	and	r24, r24
     eee:	19 f0       	breq	.+6      	; 0xef6 <_Z20System_UpdateUI_LEDsv+0xb0>
     ef0:	c8 01       	movw	r24, r16
     ef2:	0e 94 d0 01 	call	0x3a0	; 0x3a0 <_ZN10MCP_Output5ClearEv>
     ef6:	21 96       	adiw	r28, 0x01	; 1
     ef8:	0c 5f       	subi	r16, 0xFC	; 252
     efa:	1f 4f       	sbci	r17, 0xFF	; 255
     efc:	c4 30       	cpi	r28, 0x04	; 4
     efe:	d1 05       	cpc	r29, r1
     f00:	f1 f6       	brne	.-68     	; 0xebe <_Z20System_UpdateUI_LEDsv+0x78>
     f02:	df 91       	pop	r29
     f04:	cf 91       	pop	r28
     f06:	1f 91       	pop	r17
     f08:	0f 91       	pop	r16
     f0a:	ff 90       	pop	r15
     f0c:	ef 90       	pop	r14
     f0e:	08 95       	ret

00000f10 <_Z31System_HandleRotaryEncoderInputv>:
     f10:	ef 92       	push	r14
     f12:	0f 93       	push	r16
     f14:	e0 91 ff 01 	lds	r30, 0x01FF	; 0x8001ff <SystemState>
     f18:	8e 2f       	mov	r24, r30
     f1a:	90 e0       	ldi	r25, 0x00	; 0
     f1c:	fc 01       	movw	r30, r24
     f1e:	31 97       	sbiw	r30, 0x01	; 1
     f20:	e0 31       	cpi	r30, 0x10	; 16
     f22:	f1 05       	cpc	r31, r1
     f24:	08 f0       	brcs	.+2      	; 0xf28 <_Z31System_HandleRotaryEncoderInputv+0x18>
     f26:	05 c2       	rjmp	.+1034   	; 0x1332 <_Z31System_HandleRotaryEncoderInputv+0x422>
     f28:	e2 5c       	subi	r30, 0xC2	; 194
     f2a:	ff 4f       	sbci	r31, 0xFF	; 255
     f2c:	0c 94 7d 10 	jmp	0x20fa	; 0x20fa <__tablejump2__>
     f30:	80 91 c5 01 	lds	r24, 0x01C5	; 0x8001c5 <RotEnc_State>
     f34:	83 30       	cpi	r24, 0x03	; 3
     f36:	29 f4       	brne	.+10     	; 0xf42 <_Z31System_HandleRotaryEncoderInputv+0x32>
     f38:	80 91 f8 01 	lds	r24, 0x01F8	; 0x8001f8 <TempSelectMidiChannel>
     f3c:	80 93 f6 01 	sts	0x01F6, r24	; 0x8001f6 <System_MidiChannel>
     f40:	f8 c1       	rjmp	.+1008   	; 0x1332 <_Z31System_HandleRotaryEncoderInputv+0x422>
     f42:	80 91 c5 01 	lds	r24, 0x01C5	; 0x8001c5 <RotEnc_State>
     f46:	85 30       	cpi	r24, 0x05	; 5
     f48:	71 f4       	brne	.+28     	; 0xf66 <_Z31System_HandleRotaryEncoderInputv+0x56>
     f4a:	80 91 f8 01 	lds	r24, 0x01F8	; 0x8001f8 <TempSelectMidiChannel>
     f4e:	80 93 f6 01 	sts	0x01F6, r24	; 0x8001f6 <System_MidiChannel>
     f52:	60 91 f6 01 	lds	r22, 0x01F6	; 0x8001f6 <System_MidiChannel>
     f56:	80 e0       	ldi	r24, 0x00	; 0
     f58:	90 e0       	ldi	r25, 0x00	; 0
     f5a:	0e 94 d3 10 	call	0x21a6	; 0x21a6 <eeprom_write_byte>
     f5e:	82 e0       	ldi	r24, 0x02	; 2
     f60:	80 93 ff 01 	sts	0x01FF, r24	; 0x8001ff <SystemState>
     f64:	e6 c1       	rjmp	.+972    	; 0x1332 <_Z31System_HandleRotaryEncoderInputv+0x422>
     f66:	80 91 c5 01 	lds	r24, 0x01C5	; 0x8001c5 <RotEnc_State>
     f6a:	81 30       	cpi	r24, 0x01	; 1
     f6c:	59 f4       	brne	.+22     	; 0xf84 <_Z31System_HandleRotaryEncoderInputv+0x74>
     f6e:	80 91 f8 01 	lds	r24, 0x01F8	; 0x8001f8 <TempSelectMidiChannel>
     f72:	80 31       	cpi	r24, 0x10	; 16
     f74:	08 f0       	brcs	.+2      	; 0xf78 <_Z31System_HandleRotaryEncoderInputv+0x68>
     f76:	dd c1       	rjmp	.+954    	; 0x1332 <_Z31System_HandleRotaryEncoderInputv+0x422>
     f78:	80 91 f8 01 	lds	r24, 0x01F8	; 0x8001f8 <TempSelectMidiChannel>
     f7c:	8f 5f       	subi	r24, 0xFF	; 255
     f7e:	80 93 f8 01 	sts	0x01F8, r24	; 0x8001f8 <TempSelectMidiChannel>
     f82:	d7 c1       	rjmp	.+942    	; 0x1332 <_Z31System_HandleRotaryEncoderInputv+0x422>
     f84:	80 91 c5 01 	lds	r24, 0x01C5	; 0x8001c5 <RotEnc_State>
     f88:	82 30       	cpi	r24, 0x02	; 2
     f8a:	09 f0       	breq	.+2      	; 0xf8e <_Z31System_HandleRotaryEncoderInputv+0x7e>
     f8c:	d2 c1       	rjmp	.+932    	; 0x1332 <_Z31System_HandleRotaryEncoderInputv+0x422>
     f8e:	80 91 f8 01 	lds	r24, 0x01F8	; 0x8001f8 <TempSelectMidiChannel>
     f92:	88 23       	and	r24, r24
     f94:	09 f4       	brne	.+2      	; 0xf98 <_Z31System_HandleRotaryEncoderInputv+0x88>
     f96:	cd c1       	rjmp	.+922    	; 0x1332 <_Z31System_HandleRotaryEncoderInputv+0x422>
     f98:	80 91 f8 01 	lds	r24, 0x01F8	; 0x8001f8 <TempSelectMidiChannel>
     f9c:	81 50       	subi	r24, 0x01	; 1
     f9e:	80 93 f8 01 	sts	0x01F8, r24	; 0x8001f8 <TempSelectMidiChannel>
     fa2:	c7 c1       	rjmp	.+910    	; 0x1332 <_Z31System_HandleRotaryEncoderInputv+0x422>
     fa4:	80 91 c5 01 	lds	r24, 0x01C5	; 0x8001c5 <RotEnc_State>
     fa8:	83 30       	cpi	r24, 0x03	; 3
     faa:	69 f4       	brne	.+26     	; 0xfc6 <_Z31System_HandleRotaryEncoderInputv+0xb6>
     fac:	80 91 fb 01 	lds	r24, 0x01FB	; 0x8001fb <TempSelectPreset>
     fb0:	80 93 fd 01 	sts	0x01FD, r24	; 0x8001fd <ActivePreset>
     fb4:	80 91 f9 01 	lds	r24, 0x01F9	; 0x8001f9 <SystemRunMode>
     fb8:	81 30       	cpi	r24, 0x01	; 1
     fba:	09 f0       	breq	.+2      	; 0xfbe <_Z31System_HandleRotaryEncoderInputv+0xae>
     fbc:	ba c1       	rjmp	.+884    	; 0x1332 <_Z31System_HandleRotaryEncoderInputv+0x422>
     fbe:	83 e0       	ldi	r24, 0x03	; 3
     fc0:	80 93 ff 01 	sts	0x01FF, r24	; 0x8001ff <SystemState>
     fc4:	b6 c1       	rjmp	.+876    	; 0x1332 <_Z31System_HandleRotaryEncoderInputv+0x422>
     fc6:	80 91 c5 01 	lds	r24, 0x01C5	; 0x8001c5 <RotEnc_State>
     fca:	85 30       	cpi	r24, 0x05	; 5
     fcc:	41 f4       	brne	.+16     	; 0xfde <_Z31System_HandleRotaryEncoderInputv+0xce>
     fce:	80 91 fb 01 	lds	r24, 0x01FB	; 0x8001fb <TempSelectPreset>
     fd2:	80 93 fd 01 	sts	0x01FD, r24	; 0x8001fd <ActivePreset>
     fd6:	89 e0       	ldi	r24, 0x09	; 9
     fd8:	80 93 ff 01 	sts	0x01FF, r24	; 0x8001ff <SystemState>
     fdc:	aa c1       	rjmp	.+852    	; 0x1332 <_Z31System_HandleRotaryEncoderInputv+0x422>
     fde:	80 91 c5 01 	lds	r24, 0x01C5	; 0x8001c5 <RotEnc_State>
     fe2:	81 30       	cpi	r24, 0x01	; 1
     fe4:	59 f4       	brne	.+22     	; 0xffc <_Z31System_HandleRotaryEncoderInputv+0xec>
     fe6:	80 91 fb 01 	lds	r24, 0x01FB	; 0x8001fb <TempSelectPreset>
     fea:	87 30       	cpi	r24, 0x07	; 7
     fec:	08 f0       	brcs	.+2      	; 0xff0 <_Z31System_HandleRotaryEncoderInputv+0xe0>
     fee:	a1 c1       	rjmp	.+834    	; 0x1332 <_Z31System_HandleRotaryEncoderInputv+0x422>
     ff0:	80 91 fb 01 	lds	r24, 0x01FB	; 0x8001fb <TempSelectPreset>
     ff4:	8f 5f       	subi	r24, 0xFF	; 255
     ff6:	80 93 fb 01 	sts	0x01FB, r24	; 0x8001fb <TempSelectPreset>
     ffa:	9b c1       	rjmp	.+822    	; 0x1332 <_Z31System_HandleRotaryEncoderInputv+0x422>
     ffc:	80 91 c5 01 	lds	r24, 0x01C5	; 0x8001c5 <RotEnc_State>
    1000:	82 30       	cpi	r24, 0x02	; 2
    1002:	09 f0       	breq	.+2      	; 0x1006 <_Z31System_HandleRotaryEncoderInputv+0xf6>
    1004:	96 c1       	rjmp	.+812    	; 0x1332 <_Z31System_HandleRotaryEncoderInputv+0x422>
    1006:	80 91 fb 01 	lds	r24, 0x01FB	; 0x8001fb <TempSelectPreset>
    100a:	88 23       	and	r24, r24
    100c:	09 f4       	brne	.+2      	; 0x1010 <_Z31System_HandleRotaryEncoderInputv+0x100>
    100e:	91 c1       	rjmp	.+802    	; 0x1332 <_Z31System_HandleRotaryEncoderInputv+0x422>
    1010:	80 91 fb 01 	lds	r24, 0x01FB	; 0x8001fb <TempSelectPreset>
    1014:	81 50       	subi	r24, 0x01	; 1
    1016:	80 93 fb 01 	sts	0x01FB, r24	; 0x8001fb <TempSelectPreset>
    101a:	8b c1       	rjmp	.+790    	; 0x1332 <_Z31System_HandleRotaryEncoderInputv+0x422>
    101c:	80 91 c5 01 	lds	r24, 0x01C5	; 0x8001c5 <RotEnc_State>
    1020:	83 30       	cpi	r24, 0x03	; 3
    1022:	c9 f4       	brne	.+50     	; 0x1056 <_Z31System_HandleRotaryEncoderInputv+0x146>
    1024:	80 91 f5 01 	lds	r24, 0x01F5	; 0x8001f5 <SystemUIMode>
    1028:	81 11       	cpse	r24, r1
    102a:	04 c0       	rjmp	.+8      	; 0x1034 <_Z31System_HandleRotaryEncoderInputv+0x124>
    102c:	82 e0       	ldi	r24, 0x02	; 2
    102e:	80 93 ff 01 	sts	0x01FF, r24	; 0x8001ff <SystemState>
    1032:	7f c1       	rjmp	.+766    	; 0x1332 <_Z31System_HandleRotaryEncoderInputv+0x422>
    1034:	80 91 f5 01 	lds	r24, 0x01F5	; 0x8001f5 <SystemUIMode>
    1038:	81 30       	cpi	r24, 0x01	; 1
    103a:	21 f4       	brne	.+8      	; 0x1044 <_Z31System_HandleRotaryEncoderInputv+0x134>
    103c:	8b e0       	ldi	r24, 0x0B	; 11
    103e:	80 93 ff 01 	sts	0x01FF, r24	; 0x8001ff <SystemState>
    1042:	77 c1       	rjmp	.+750    	; 0x1332 <_Z31System_HandleRotaryEncoderInputv+0x422>
    1044:	80 91 f5 01 	lds	r24, 0x01F5	; 0x8001f5 <SystemUIMode>
    1048:	82 30       	cpi	r24, 0x02	; 2
    104a:	09 f0       	breq	.+2      	; 0x104e <_Z31System_HandleRotaryEncoderInputv+0x13e>
    104c:	72 c1       	rjmp	.+740    	; 0x1332 <_Z31System_HandleRotaryEncoderInputv+0x422>
    104e:	8d e0       	ldi	r24, 0x0D	; 13
    1050:	80 93 ff 01 	sts	0x01FF, r24	; 0x8001ff <SystemState>
    1054:	6e c1       	rjmp	.+732    	; 0x1332 <_Z31System_HandleRotaryEncoderInputv+0x422>
    1056:	80 91 c5 01 	lds	r24, 0x01C5	; 0x8001c5 <RotEnc_State>
    105a:	85 30       	cpi	r24, 0x05	; 5
    105c:	09 f4       	brne	.+2      	; 0x1060 <_Z31System_HandleRotaryEncoderInputv+0x150>
    105e:	69 c1       	rjmp	.+722    	; 0x1332 <_Z31System_HandleRotaryEncoderInputv+0x422>
    1060:	80 91 c5 01 	lds	r24, 0x01C5	; 0x8001c5 <RotEnc_State>
    1064:	81 30       	cpi	r24, 0x01	; 1
    1066:	59 f4       	brne	.+22     	; 0x107e <_Z31System_HandleRotaryEncoderInputv+0x16e>
    1068:	80 91 f5 01 	lds	r24, 0x01F5	; 0x8001f5 <SystemUIMode>
    106c:	82 30       	cpi	r24, 0x02	; 2
    106e:	08 f0       	brcs	.+2      	; 0x1072 <_Z31System_HandleRotaryEncoderInputv+0x162>
    1070:	60 c1       	rjmp	.+704    	; 0x1332 <_Z31System_HandleRotaryEncoderInputv+0x422>
    1072:	80 91 f5 01 	lds	r24, 0x01F5	; 0x8001f5 <SystemUIMode>
    1076:	8f 5f       	subi	r24, 0xFF	; 255
    1078:	80 93 f5 01 	sts	0x01F5, r24	; 0x8001f5 <SystemUIMode>
    107c:	5a c1       	rjmp	.+692    	; 0x1332 <_Z31System_HandleRotaryEncoderInputv+0x422>
    107e:	80 91 c5 01 	lds	r24, 0x01C5	; 0x8001c5 <RotEnc_State>
    1082:	82 30       	cpi	r24, 0x02	; 2
    1084:	09 f0       	breq	.+2      	; 0x1088 <_Z31System_HandleRotaryEncoderInputv+0x178>
    1086:	55 c1       	rjmp	.+682    	; 0x1332 <_Z31System_HandleRotaryEncoderInputv+0x422>
    1088:	80 91 f5 01 	lds	r24, 0x01F5	; 0x8001f5 <SystemUIMode>
    108c:	88 23       	and	r24, r24
    108e:	09 f4       	brne	.+2      	; 0x1092 <_Z31System_HandleRotaryEncoderInputv+0x182>
    1090:	50 c1       	rjmp	.+672    	; 0x1332 <_Z31System_HandleRotaryEncoderInputv+0x422>
    1092:	80 91 f5 01 	lds	r24, 0x01F5	; 0x8001f5 <SystemUIMode>
    1096:	81 50       	subi	r24, 0x01	; 1
    1098:	80 93 f5 01 	sts	0x01F5, r24	; 0x8001f5 <SystemUIMode>
    109c:	4a c1       	rjmp	.+660    	; 0x1332 <_Z31System_HandleRotaryEncoderInputv+0x422>
    109e:	80 91 c5 01 	lds	r24, 0x01C5	; 0x8001c5 <RotEnc_State>
    10a2:	83 30       	cpi	r24, 0x03	; 3
    10a4:	29 f5       	brne	.+74     	; 0x10f0 <_Z31System_HandleRotaryEncoderInputv+0x1e0>
    10a6:	80 91 d0 01 	lds	r24, 0x01D0	; 0x8001d0 <UserEditSelection>
    10aa:	88 30       	cpi	r24, 0x08	; 8
    10ac:	78 f4       	brcc	.+30     	; 0x10cc <_Z31System_HandleRotaryEncoderInputv+0x1bc>
    10ae:	20 91 d0 01 	lds	r18, 0x01D0	; 0x8001d0 <UserEditSelection>
    10b2:	ef e2       	ldi	r30, 0x2F	; 47
    10b4:	f1 e0       	ldi	r31, 0x01	; 1
    10b6:	81 e0       	ldi	r24, 0x01	; 1
    10b8:	90 e0       	ldi	r25, 0x00	; 0
    10ba:	02 c0       	rjmp	.+4      	; 0x10c0 <_Z31System_HandleRotaryEncoderInputv+0x1b0>
    10bc:	88 0f       	add	r24, r24
    10be:	99 1f       	adc	r25, r25
    10c0:	2a 95       	dec	r18
    10c2:	e2 f7       	brpl	.-8      	; 0x10bc <_Z31System_HandleRotaryEncoderInputv+0x1ac>
    10c4:	90 81       	ld	r25, Z
    10c6:	89 27       	eor	r24, r25
    10c8:	80 83       	st	Z, r24
    10ca:	0f c0       	rjmp	.+30     	; 0x10ea <_Z31System_HandleRotaryEncoderInputv+0x1da>
    10cc:	20 91 d0 01 	lds	r18, 0x01D0	; 0x8001d0 <UserEditSelection>
    10d0:	ef e2       	ldi	r30, 0x2F	; 47
    10d2:	f1 e0       	ldi	r31, 0x01	; 1
    10d4:	28 50       	subi	r18, 0x08	; 8
    10d6:	81 e0       	ldi	r24, 0x01	; 1
    10d8:	90 e0       	ldi	r25, 0x00	; 0
    10da:	02 c0       	rjmp	.+4      	; 0x10e0 <_Z31System_HandleRotaryEncoderInputv+0x1d0>
    10dc:	88 0f       	add	r24, r24
    10de:	99 1f       	adc	r25, r25
    10e0:	2a 95       	dec	r18
    10e2:	e2 f7       	brpl	.-8      	; 0x10dc <_Z31System_HandleRotaryEncoderInputv+0x1cc>
    10e4:	91 81       	ldd	r25, Z+1	; 0x01
    10e6:	89 27       	eor	r24, r25
    10e8:	81 83       	std	Z+1, r24	; 0x01
    10ea:	0e 94 23 07 	call	0xe46	; 0xe46 <_Z20System_UpdateUI_LEDsv>
    10ee:	21 c1       	rjmp	.+578    	; 0x1332 <_Z31System_HandleRotaryEncoderInputv+0x422>
    10f0:	80 91 c5 01 	lds	r24, 0x01C5	; 0x8001c5 <RotEnc_State>
    10f4:	85 30       	cpi	r24, 0x05	; 5
    10f6:	61 f5       	brne	.+88     	; 0x1150 <_Z31System_HandleRotaryEncoderInputv+0x240>
    10f8:	60 91 fd 01 	lds	r22, 0x01FD	; 0x8001fd <ActivePreset>
    10fc:	70 e0       	ldi	r23, 0x00	; 0
    10fe:	66 0f       	add	r22, r22
    1100:	77 1f       	adc	r23, r23
    1102:	66 0f       	add	r22, r22
    1104:	77 1f       	adc	r23, r23
    1106:	6c 59       	subi	r22, 0x9C	; 156
    1108:	7f 4f       	sbci	r23, 0xFF	; 255
    110a:	42 e0       	ldi	r20, 0x02	; 2
    110c:	50 e0       	ldi	r21, 0x00	; 0
    110e:	8f e2       	ldi	r24, 0x2F	; 47
    1110:	91 e0       	ldi	r25, 0x01	; 1
    1112:	0e 94 c9 10 	call	0x2192	; 0x2192 <eeprom_write_block>
    1116:	e0 91 fd 01 	lds	r30, 0x01FD	; 0x8001fd <ActivePreset>
    111a:	f0 e0       	ldi	r31, 0x00	; 0
    111c:	ee 0f       	add	r30, r30
    111e:	ff 1f       	adc	r31, r31
    1120:	ee 0f       	add	r30, r30
    1122:	ff 1f       	adc	r31, r31
    1124:	ef 52       	subi	r30, 0x2F	; 47
    1126:	fe 4f       	sbci	r31, 0xFE	; 254
    1128:	af e2       	ldi	r26, 0x2F	; 47
    112a:	b1 e0       	ldi	r27, 0x01	; 1
    112c:	8c 91       	ld	r24, X
    112e:	80 83       	st	Z, r24
    1130:	e0 91 fd 01 	lds	r30, 0x01FD	; 0x8001fd <ActivePreset>
    1134:	f0 e0       	ldi	r31, 0x00	; 0
    1136:	ee 0f       	add	r30, r30
    1138:	ff 1f       	adc	r31, r31
    113a:	ee 0f       	add	r30, r30
    113c:	ff 1f       	adc	r31, r31
    113e:	ef 52       	subi	r30, 0x2F	; 47
    1140:	fe 4f       	sbci	r31, 0xFE	; 254
    1142:	11 96       	adiw	r26, 0x01	; 1
    1144:	8c 91       	ld	r24, X
    1146:	81 83       	std	Z+1, r24	; 0x01
    1148:	89 e0       	ldi	r24, 0x09	; 9
    114a:	80 93 ff 01 	sts	0x01FF, r24	; 0x8001ff <SystemState>
    114e:	f1 c0       	rjmp	.+482    	; 0x1332 <_Z31System_HandleRotaryEncoderInputv+0x422>
    1150:	80 91 c5 01 	lds	r24, 0x01C5	; 0x8001c5 <RotEnc_State>
    1154:	81 30       	cpi	r24, 0x01	; 1
    1156:	59 f4       	brne	.+22     	; 0x116e <_Z31System_HandleRotaryEncoderInputv+0x25e>
    1158:	80 91 d0 01 	lds	r24, 0x01D0	; 0x8001d0 <UserEditSelection>
    115c:	8b 30       	cpi	r24, 0x0B	; 11
    115e:	08 f0       	brcs	.+2      	; 0x1162 <_Z31System_HandleRotaryEncoderInputv+0x252>
    1160:	e8 c0       	rjmp	.+464    	; 0x1332 <_Z31System_HandleRotaryEncoderInputv+0x422>
    1162:	80 91 d0 01 	lds	r24, 0x01D0	; 0x8001d0 <UserEditSelection>
    1166:	8f 5f       	subi	r24, 0xFF	; 255
    1168:	80 93 d0 01 	sts	0x01D0, r24	; 0x8001d0 <UserEditSelection>
    116c:	e2 c0       	rjmp	.+452    	; 0x1332 <_Z31System_HandleRotaryEncoderInputv+0x422>
    116e:	80 91 c5 01 	lds	r24, 0x01C5	; 0x8001c5 <RotEnc_State>
    1172:	82 30       	cpi	r24, 0x02	; 2
    1174:	09 f0       	breq	.+2      	; 0x1178 <_Z31System_HandleRotaryEncoderInputv+0x268>
    1176:	dd c0       	rjmp	.+442    	; 0x1332 <_Z31System_HandleRotaryEncoderInputv+0x422>
    1178:	80 91 d0 01 	lds	r24, 0x01D0	; 0x8001d0 <UserEditSelection>
    117c:	88 23       	and	r24, r24
    117e:	09 f4       	brne	.+2      	; 0x1182 <_Z31System_HandleRotaryEncoderInputv+0x272>
    1180:	d8 c0       	rjmp	.+432    	; 0x1332 <_Z31System_HandleRotaryEncoderInputv+0x422>
    1182:	80 91 d0 01 	lds	r24, 0x01D0	; 0x8001d0 <UserEditSelection>
    1186:	81 50       	subi	r24, 0x01	; 1
    1188:	80 93 d0 01 	sts	0x01D0, r24	; 0x8001d0 <UserEditSelection>
    118c:	d2 c0       	rjmp	.+420    	; 0x1332 <_Z31System_HandleRotaryEncoderInputv+0x422>
    118e:	80 91 c5 01 	lds	r24, 0x01C5	; 0x8001c5 <RotEnc_State>
    1192:	83 30       	cpi	r24, 0x03	; 3
    1194:	21 f4       	brne	.+8      	; 0x119e <_Z31System_HandleRotaryEncoderInputv+0x28e>
    1196:	8f e0       	ldi	r24, 0x0F	; 15
    1198:	80 93 ff 01 	sts	0x01FF, r24	; 0x8001ff <SystemState>
    119c:	ca c0       	rjmp	.+404    	; 0x1332 <_Z31System_HandleRotaryEncoderInputv+0x422>
    119e:	80 91 c5 01 	lds	r24, 0x01C5	; 0x8001c5 <RotEnc_State>
    11a2:	85 30       	cpi	r24, 0x05	; 5
    11a4:	21 f4       	brne	.+8      	; 0x11ae <_Z31System_HandleRotaryEncoderInputv+0x29e>
    11a6:	89 e0       	ldi	r24, 0x09	; 9
    11a8:	80 93 ff 01 	sts	0x01FF, r24	; 0x8001ff <SystemState>
    11ac:	c2 c0       	rjmp	.+388    	; 0x1332 <_Z31System_HandleRotaryEncoderInputv+0x422>
    11ae:	80 91 c5 01 	lds	r24, 0x01C5	; 0x8001c5 <RotEnc_State>
    11b2:	81 30       	cpi	r24, 0x01	; 1
    11b4:	59 f4       	brne	.+22     	; 0x11cc <_Z31System_HandleRotaryEncoderInputv+0x2bc>
    11b6:	80 93 f3 01 	sts	0x01F3, r24	; 0x8001f3 <SetMidiEdit>
    11ba:	e1 2c       	mov	r14, r1
    11bc:	00 e0       	ldi	r16, 0x00	; 0
    11be:	20 e0       	ldi	r18, 0x00	; 0
    11c0:	44 e7       	ldi	r20, 0x74	; 116
    11c2:	65 e7       	ldi	r22, 0x75	; 117
    11c4:	8f e6       	ldi	r24, 0x6F	; 111
    11c6:	0e 94 d0 05 	call	0xba0	; 0xba0 <_Z17SP10281_WriteCharccchhh>
    11ca:	b3 c0       	rjmp	.+358    	; 0x1332 <_Z31System_HandleRotaryEncoderInputv+0x422>
    11cc:	80 91 c5 01 	lds	r24, 0x01C5	; 0x8001c5 <RotEnc_State>
    11d0:	82 30       	cpi	r24, 0x02	; 2
    11d2:	09 f0       	breq	.+2      	; 0x11d6 <_Z31System_HandleRotaryEncoderInputv+0x2c6>
    11d4:	ae c0       	rjmp	.+348    	; 0x1332 <_Z31System_HandleRotaryEncoderInputv+0x422>
    11d6:	10 92 f3 01 	sts	0x01F3, r1	; 0x8001f3 <SetMidiEdit>
    11da:	e1 2c       	mov	r14, r1
    11dc:	00 e0       	ldi	r16, 0x00	; 0
    11de:	20 e0       	ldi	r18, 0x00	; 0
    11e0:	40 e2       	ldi	r20, 0x20	; 32
    11e2:	6e e6       	ldi	r22, 0x6E	; 110
    11e4:	89 e6       	ldi	r24, 0x69	; 105
    11e6:	0e 94 d0 05 	call	0xba0	; 0xba0 <_Z17SP10281_WriteCharccchhh>
    11ea:	a3 c0       	rjmp	.+326    	; 0x1332 <_Z31System_HandleRotaryEncoderInputv+0x422>
    11ec:	80 91 c5 01 	lds	r24, 0x01C5	; 0x8001c5 <RotEnc_State>
    11f0:	83 30       	cpi	r24, 0x03	; 3
    11f2:	49 f4       	brne	.+18     	; 0x1206 <_Z31System_HandleRotaryEncoderInputv+0x2f6>
    11f4:	10 92 05 02 	sts	0x0205, r1	; 0x800205 <System_TempSelectOvfCnt+0x1>
    11f8:	10 92 04 02 	sts	0x0204, r1	; 0x800204 <System_TempSelectOvfCnt>
    11fc:	80 91 f2 01 	lds	r24, 0x01F2	; 0x8001f2 <TempSelectMidiPC>
    1200:	80 93 f1 01 	sts	0x01F1, r24	; 0x8001f1 <LastTempSelectMidiPC>
    1204:	96 c0       	rjmp	.+300    	; 0x1332 <_Z31System_HandleRotaryEncoderInputv+0x422>
    1206:	80 91 c5 01 	lds	r24, 0x01C5	; 0x8001c5 <RotEnc_State>
    120a:	85 30       	cpi	r24, 0x05	; 5
    120c:	d9 f5       	brne	.+118    	; 0x1284 <_Z31System_HandleRotaryEncoderInputv+0x374>
    120e:	80 91 f3 01 	lds	r24, 0x01F3	; 0x8001f3 <SetMidiEdit>
    1212:	81 11       	cpse	r24, r1
    1214:	1a c0       	rjmp	.+52     	; 0x124a <_Z31System_HandleRotaryEncoderInputv+0x33a>
    1216:	e0 91 fd 01 	lds	r30, 0x01FD	; 0x8001fd <ActivePreset>
    121a:	80 91 f2 01 	lds	r24, 0x01F2	; 0x8001f2 <TempSelectMidiPC>
    121e:	f0 e0       	ldi	r31, 0x00	; 0
    1220:	ee 0f       	add	r30, r30
    1222:	ff 1f       	adc	r31, r31
    1224:	ee 0f       	add	r30, r30
    1226:	ff 1f       	adc	r31, r31
    1228:	ef 52       	subi	r30, 0x2F	; 47
    122a:	fe 4f       	sbci	r31, 0xFE	; 254
    122c:	82 83       	std	Z+2, r24	; 0x02
    122e:	60 91 f2 01 	lds	r22, 0x01F2	; 0x8001f2 <TempSelectMidiPC>
    1232:	80 91 fd 01 	lds	r24, 0x01FD	; 0x8001fd <ActivePreset>
    1236:	90 e0       	ldi	r25, 0x00	; 0
    1238:	88 0f       	add	r24, r24
    123a:	99 1f       	adc	r25, r25
    123c:	88 0f       	add	r24, r24
    123e:	99 1f       	adc	r25, r25
    1240:	8a 59       	subi	r24, 0x9A	; 154
    1242:	9f 4f       	sbci	r25, 0xFF	; 255
    1244:	0e 94 d3 10 	call	0x21a6	; 0x21a6 <eeprom_write_byte>
    1248:	19 c0       	rjmp	.+50     	; 0x127c <_Z31System_HandleRotaryEncoderInputv+0x36c>
    124a:	e0 91 fd 01 	lds	r30, 0x01FD	; 0x8001fd <ActivePreset>
    124e:	80 91 f2 01 	lds	r24, 0x01F2	; 0x8001f2 <TempSelectMidiPC>
    1252:	f0 e0       	ldi	r31, 0x00	; 0
    1254:	ee 0f       	add	r30, r30
    1256:	ff 1f       	adc	r31, r31
    1258:	ee 0f       	add	r30, r30
    125a:	ff 1f       	adc	r31, r31
    125c:	ef 52       	subi	r30, 0x2F	; 47
    125e:	fe 4f       	sbci	r31, 0xFE	; 254
    1260:	83 83       	std	Z+3, r24	; 0x03
    1262:	60 91 f2 01 	lds	r22, 0x01F2	; 0x8001f2 <TempSelectMidiPC>
    1266:	80 91 fd 01 	lds	r24, 0x01FD	; 0x8001fd <ActivePreset>
    126a:	90 e0       	ldi	r25, 0x00	; 0
    126c:	88 0f       	add	r24, r24
    126e:	99 1f       	adc	r25, r25
    1270:	88 0f       	add	r24, r24
    1272:	99 1f       	adc	r25, r25
    1274:	89 59       	subi	r24, 0x99	; 153
    1276:	9f 4f       	sbci	r25, 0xFF	; 255
    1278:	0e 94 d3 10 	call	0x21a6	; 0x21a6 <eeprom_write_byte>
    127c:	8d e0       	ldi	r24, 0x0D	; 13
    127e:	80 93 ff 01 	sts	0x01FF, r24	; 0x8001ff <SystemState>
    1282:	57 c0       	rjmp	.+174    	; 0x1332 <_Z31System_HandleRotaryEncoderInputv+0x422>
    1284:	80 91 c5 01 	lds	r24, 0x01C5	; 0x8001c5 <RotEnc_State>
    1288:	81 30       	cpi	r24, 0x01	; 1
    128a:	11 f5       	brne	.+68     	; 0x12d0 <_Z31System_HandleRotaryEncoderInputv+0x3c0>
    128c:	80 91 f2 01 	lds	r24, 0x01F2	; 0x8001f2 <TempSelectMidiPC>
    1290:	8f 37       	cpi	r24, 0x7F	; 127
    1292:	29 f0       	breq	.+10     	; 0x129e <_Z31System_HandleRotaryEncoderInputv+0x38e>
    1294:	80 91 f2 01 	lds	r24, 0x01F2	; 0x8001f2 <TempSelectMidiPC>
    1298:	8f 5f       	subi	r24, 0xFF	; 255
    129a:	80 93 f2 01 	sts	0x01F2, r24	; 0x8001f2 <TempSelectMidiPC>
    129e:	80 91 f2 01 	lds	r24, 0x01F2	; 0x8001f2 <TempSelectMidiPC>
    12a2:	8f 3f       	cpi	r24, 0xFF	; 255
    12a4:	49 f4       	brne	.+18     	; 0x12b8 <_Z31System_HandleRotaryEncoderInputv+0x3a8>
    12a6:	e1 2c       	mov	r14, r1
    12a8:	00 e0       	ldi	r16, 0x00	; 0
    12aa:	20 e0       	ldi	r18, 0x00	; 0
    12ac:	46 e6       	ldi	r20, 0x66	; 102
    12ae:	66 e6       	ldi	r22, 0x66	; 102
    12b0:	8f e6       	ldi	r24, 0x6F	; 111
    12b2:	0e 94 d0 05 	call	0xba0	; 0xba0 <_Z17SP10281_WriteCharccchhh>
    12b6:	05 c0       	rjmp	.+10     	; 0x12c2 <_Z31System_HandleRotaryEncoderInputv+0x3b2>
    12b8:	80 91 f2 01 	lds	r24, 0x01F2	; 0x8001f2 <TempSelectMidiPC>
    12bc:	90 e0       	ldi	r25, 0x00	; 0
    12be:	0e 94 ed 05 	call	0xbda	; 0xbda <_Z19SP10281_WriteNumbers>
    12c2:	81 e0       	ldi	r24, 0x01	; 1
    12c4:	90 e0       	ldi	r25, 0x00	; 0
    12c6:	90 93 05 02 	sts	0x0205, r25	; 0x800205 <System_TempSelectOvfCnt+0x1>
    12ca:	80 93 04 02 	sts	0x0204, r24	; 0x800204 <System_TempSelectOvfCnt>
    12ce:	31 c0       	rjmp	.+98     	; 0x1332 <_Z31System_HandleRotaryEncoderInputv+0x422>
    12d0:	80 91 c5 01 	lds	r24, 0x01C5	; 0x8001c5 <RotEnc_State>
    12d4:	82 30       	cpi	r24, 0x02	; 2
    12d6:	69 f5       	brne	.+90     	; 0x1332 <_Z31System_HandleRotaryEncoderInputv+0x422>
    12d8:	80 91 f2 01 	lds	r24, 0x01F2	; 0x8001f2 <TempSelectMidiPC>
    12dc:	88 23       	and	r24, r24
    12de:	24 f0       	brlt	.+8      	; 0x12e8 <_Z31System_HandleRotaryEncoderInputv+0x3d8>
    12e0:	80 91 f2 01 	lds	r24, 0x01F2	; 0x8001f2 <TempSelectMidiPC>
    12e4:	81 11       	cpse	r24, r1
    12e6:	04 c0       	rjmp	.+8      	; 0x12f0 <_Z31System_HandleRotaryEncoderInputv+0x3e0>
    12e8:	8f ef       	ldi	r24, 0xFF	; 255
    12ea:	80 93 f2 01 	sts	0x01F2, r24	; 0x8001f2 <TempSelectMidiPC>
    12ee:	09 c0       	rjmp	.+18     	; 0x1302 <_Z31System_HandleRotaryEncoderInputv+0x3f2>
    12f0:	80 91 f2 01 	lds	r24, 0x01F2	; 0x8001f2 <TempSelectMidiPC>
    12f4:	88 23       	and	r24, r24
    12f6:	29 f0       	breq	.+10     	; 0x1302 <_Z31System_HandleRotaryEncoderInputv+0x3f2>
    12f8:	80 91 f2 01 	lds	r24, 0x01F2	; 0x8001f2 <TempSelectMidiPC>
    12fc:	81 50       	subi	r24, 0x01	; 1
    12fe:	80 93 f2 01 	sts	0x01F2, r24	; 0x8001f2 <TempSelectMidiPC>
    1302:	80 91 f2 01 	lds	r24, 0x01F2	; 0x8001f2 <TempSelectMidiPC>
    1306:	8f 3f       	cpi	r24, 0xFF	; 255
    1308:	49 f4       	brne	.+18     	; 0x131c <_Z31System_HandleRotaryEncoderInputv+0x40c>
    130a:	e1 2c       	mov	r14, r1
    130c:	00 e0       	ldi	r16, 0x00	; 0
    130e:	20 e0       	ldi	r18, 0x00	; 0
    1310:	46 e6       	ldi	r20, 0x66	; 102
    1312:	66 e6       	ldi	r22, 0x66	; 102
    1314:	8f e6       	ldi	r24, 0x6F	; 111
    1316:	0e 94 d0 05 	call	0xba0	; 0xba0 <_Z17SP10281_WriteCharccchhh>
    131a:	05 c0       	rjmp	.+10     	; 0x1326 <_Z31System_HandleRotaryEncoderInputv+0x416>
    131c:	80 91 f2 01 	lds	r24, 0x01F2	; 0x8001f2 <TempSelectMidiPC>
    1320:	90 e0       	ldi	r25, 0x00	; 0
    1322:	0e 94 ed 05 	call	0xbda	; 0xbda <_Z19SP10281_WriteNumbers>
    1326:	81 e0       	ldi	r24, 0x01	; 1
    1328:	90 e0       	ldi	r25, 0x00	; 0
    132a:	90 93 05 02 	sts	0x0205, r25	; 0x800205 <System_TempSelectOvfCnt+0x1>
    132e:	80 93 04 02 	sts	0x0204, r24	; 0x800204 <System_TempSelectOvfCnt>
    1332:	0f 91       	pop	r16
    1334:	ef 90       	pop	r14
    1336:	08 95       	ret

00001338 <_Z19System_ChangePresetv>:

void System_ChangePreset()
{
	LoopModePreset = PresetTable[ActivePreset];
    1338:	e0 91 fd 01 	lds	r30, 0x01FD	; 0x8001fd <ActivePreset>
    133c:	f0 e0       	ldi	r31, 0x00	; 0
    133e:	ee 0f       	add	r30, r30
    1340:	ff 1f       	adc	r31, r31
    1342:	ee 0f       	add	r30, r30
    1344:	ff 1f       	adc	r31, r31
    1346:	ef 52       	subi	r30, 0x2F	; 47
    1348:	fe 4f       	sbci	r31, 0xFE	; 254
    134a:	80 81       	ld	r24, Z
    134c:	91 81       	ldd	r25, Z+1	; 0x01
    134e:	a2 81       	ldd	r26, Z+2	; 0x02
    1350:	b3 81       	ldd	r27, Z+3	; 0x03
    1352:	80 93 2f 01 	sts	0x012F, r24	; 0x80012f <LoopModePreset>
    1356:	90 93 30 01 	sts	0x0130, r25	; 0x800130 <LoopModePreset+0x1>
    135a:	a0 93 31 01 	sts	0x0131, r26	; 0x800131 <LoopModePreset+0x2>
    135e:	b0 93 32 01 	sts	0x0132, r27	; 0x800132 <LoopModePreset+0x3>
	
	/* Update relays */
	//System_UpdateUI_Relays();
				
	/* Send MIDI PC message if MIDI Out is set for preset */
	if (PresetTable[ActivePreset].MIDI_PC_Out != MIDI_PC_OFF)
    1362:	e0 91 fd 01 	lds	r30, 0x01FD	; 0x8001fd <ActivePreset>
    1366:	f0 e0       	ldi	r31, 0x00	; 0
    1368:	ee 0f       	add	r30, r30
    136a:	ff 1f       	adc	r31, r31
    136c:	ee 0f       	add	r30, r30
    136e:	ff 1f       	adc	r31, r31
    1370:	ef 52       	subi	r30, 0x2F	; 47
    1372:	fe 4f       	sbci	r31, 0xFE	; 254
    1374:	83 81       	ldd	r24, Z+3	; 0x03
    1376:	8f 3f       	cpi	r24, 0xFF	; 255
    1378:	61 f0       	breq	.+24     	; 0x1392 <_Z19System_ChangePresetv+0x5a>
	{
		MIDI_TransmitProgramChange(PresetTable[ActivePreset].MIDI_PC_Out);
    137a:	e0 91 fd 01 	lds	r30, 0x01FD	; 0x8001fd <ActivePreset>
    137e:	f0 e0       	ldi	r31, 0x00	; 0
    1380:	ee 0f       	add	r30, r30
    1382:	ff 1f       	adc	r31, r31
    1384:	ee 0f       	add	r30, r30
    1386:	ff 1f       	adc	r31, r31
    1388:	ef 52       	subi	r30, 0x2F	; 47
    138a:	fe 4f       	sbci	r31, 0xFE	; 254
    138c:	83 81       	ldd	r24, Z+3	; 0x03
    138e:	0e 94 b7 02 	call	0x56e	; 0x56e <_Z26MIDI_TransmitProgramChangeh>
	}
				
	/* Update Pedal display */
	PedalCom_QueueCommand(UpdateTunerLEDs, 1, 0);
    1392:	40 e0       	ldi	r20, 0x00	; 0
    1394:	50 e0       	ldi	r21, 0x00	; 0
    1396:	61 e0       	ldi	r22, 0x01	; 1
    1398:	83 ed       	ldi	r24, 0xD3	; 211
    139a:	0e 94 e5 03 	call	0x7ca	; 0x7ca <_Z21PedalCom_QueueCommand3CMDhPh>
	PedalCom_QueueCommand(Update7segments, 4, (uint8_t*)"Pre ");
    139e:	43 e3       	ldi	r20, 0x33	; 51
    13a0:	51 e0       	ldi	r21, 0x01	; 1
    13a2:	64 e0       	ldi	r22, 0x04	; 4
    13a4:	87 ed       	ldi	r24, 0xD7	; 215
    13a6:	0e 94 e5 03 	call	0x7ca	; 0x7ca <_Z21PedalCom_QueueCommand3CMDhPh>
	PedalCom_QueueCommand(UpdatePresetLoopLEDs, 1, (uint8_t*)&ActivePreset);
    13aa:	4d ef       	ldi	r20, 0xFD	; 253
    13ac:	51 e0       	ldi	r21, 0x01	; 1
    13ae:	61 e0       	ldi	r22, 0x01	; 1
    13b0:	80 ed       	ldi	r24, 0xD0	; 208
    13b2:	0e 94 e5 03 	call	0x7ca	; 0x7ca <_Z21PedalCom_QueueCommand3CMDhPh>
				
	/* Update 7-segment display */
	SP10281_WriteNumber(ActivePreset + 1);
    13b6:	80 91 fd 01 	lds	r24, 0x01FD	; 0x8001fd <ActivePreset>
    13ba:	90 e0       	ldi	r25, 0x00	; 0
    13bc:	01 96       	adiw	r24, 0x01	; 1
    13be:	0e 94 ed 05 	call	0xbda	; 0xbda <_Z19SP10281_WriteNumbers>
				
	/* Update UI LEDs */
	System_UpdateUI_LEDs();
    13c2:	0e 94 23 07 	call	0xe46	; 0xe46 <_Z20System_UpdateUI_LEDsv>
    13c6:	08 95       	ret

000013c8 <_Z10System_Runv>:

volatile uint8_t UserEditSelection = 0;
volatile uint8_t LastUserEditSelection = 0;

void System_Run()
{
    13c8:	ef 92       	push	r14
    13ca:	0f 93       	push	r16
	switch (SystemState)
    13cc:	e0 91 ff 01 	lds	r30, 0x01FF	; 0x8001ff <SystemState>
    13d0:	8e 2f       	mov	r24, r30
    13d2:	90 e0       	ldi	r25, 0x00	; 0
    13d4:	80 31       	cpi	r24, 0x10	; 16
    13d6:	91 05       	cpc	r25, r1
    13d8:	08 f0       	brcs	.+2      	; 0x13dc <_Z10System_Runv+0x14>
    13da:	68 c2       	rjmp	.+1232   	; 0x18ac <_Z10System_Runv+0x4e4>
    13dc:	fc 01       	movw	r30, r24
    13de:	e2 5b       	subi	r30, 0xB2	; 178
    13e0:	ff 4f       	sbci	r31, 0xFF	; 255
    13e2:	0c 94 7d 10 	jmp	0x20fa	; 0x20fa <__tablejump2__>
	{
		case BOOT_UP:
			/* Fill preset table from EEPROM */
			eeprom_read_block((void*)PresetTable, (void*)EEPROM_PRESETS_BASE_ADDR, sizeof(Preset) * NUMBER_OF_PRESETS);
    13e6:	40 e2       	ldi	r20, 0x20	; 32
    13e8:	50 e0       	ldi	r21, 0x00	; 0
    13ea:	64 e6       	ldi	r22, 0x64	; 100
    13ec:	70 e0       	ldi	r23, 0x00	; 0
    13ee:	81 ed       	ldi	r24, 0xD1	; 209
    13f0:	91 e0       	ldi	r25, 0x01	; 1
    13f2:	0e 94 b1 10 	call	0x2162	; 0x2162 <eeprom_read_block>
			
			/* Get device MIDI channel from EEPROM */
			System_MidiChannel = (MIDI_Channel)eeprom_read_byte((uint8_t*)EEPROM_MIDI_CH_ADDR);
    13f6:	80 e0       	ldi	r24, 0x00	; 0
    13f8:	90 e0       	ldi	r25, 0x00	; 0
    13fa:	0e 94 c1 10 	call	0x2182	; 0x2182 <eeprom_read_byte>
    13fe:	80 93 f6 01 	sts	0x01F6, r24	; 0x8001f6 <System_MidiChannel>
			
			if (System_MidiChannel > MIDI_CH_MAX)
    1402:	80 91 f6 01 	lds	r24, 0x01F6	; 0x8001f6 <System_MidiChannel>
    1406:	81 31       	cpi	r24, 0x11	; 17
    1408:	40 f0       	brcs	.+16     	; 0x141a <_Z10System_Runv+0x52>
			{
				System_MidiChannel = MIDI_CH_OMNI;
    140a:	10 92 f6 01 	sts	0x01F6, r1	; 0x8001f6 <System_MidiChannel>
				eeprom_write_byte((uint8_t*)EEPROM_MIDI_CH_ADDR, System_MidiChannel);
    140e:	60 91 f6 01 	lds	r22, 0x01F6	; 0x8001f6 <System_MidiChannel>
    1412:	80 e0       	ldi	r24, 0x00	; 0
    1414:	90 e0       	ldi	r25, 0x00	; 0
    1416:	0e 94 d3 10 	call	0x21a6	; 0x21a6 <eeprom_write_byte>
			}
			
			/* Check if button pressed for MIDI channel edit */
			if (RotaryEncoder_IsPressed())
    141a:	0e 94 2d 05 	call	0xa5a	; 0xa5a <_Z23RotaryEncoder_IsPressedv>
    141e:	88 23       	and	r24, r24
    1420:	11 f1       	breq	.+68     	; 0x1466 <_Z10System_Runv+0x9e>
			{
				/* Update UI mode LEDs */
				ModeRunLED.Clear();
    1422:	88 ef       	ldi	r24, 0xF8	; 248
    1424:	92 e0       	ldi	r25, 0x02	; 2
    1426:	0e 94 d0 01 	call	0x3a0	; 0x3a0 <_ZN10MCP_Output5ClearEv>
				ModeEditPresetLED.Clear();
    142a:	84 ef       	ldi	r24, 0xF4	; 244
    142c:	92 e0       	ldi	r25, 0x02	; 2
    142e:	0e 94 d0 01 	call	0x3a0	; 0x3a0 <_ZN10MCP_Output5ClearEv>
				ModeEditMidiLED.Set();
    1432:	80 ef       	ldi	r24, 0xF0	; 240
    1434:	92 e0       	ldi	r25, 0x02	; 2
    1436:	0e 94 93 01 	call	0x326	; 0x326 <_ZN10MCP_Output3SetEv>
				
				if (System_MidiChannel == MIDI_CH_OMNI)
    143a:	80 91 f6 01 	lds	r24, 0x01F6	; 0x8001f6 <System_MidiChannel>
    143e:	81 11       	cpse	r24, r1
    1440:	09 c0       	rjmp	.+18     	; 0x1454 <_Z10System_Runv+0x8c>
				{
					SP10281_WriteChar('o', 'm', 'n', 0, 0, 0);
    1442:	e1 2c       	mov	r14, r1
    1444:	00 e0       	ldi	r16, 0x00	; 0
    1446:	20 e0       	ldi	r18, 0x00	; 0
    1448:	4e e6       	ldi	r20, 0x6E	; 110
    144a:	6d e6       	ldi	r22, 0x6D	; 109
    144c:	8f e6       	ldi	r24, 0x6F	; 111
    144e:	0e 94 d0 05 	call	0xba0	; 0xba0 <_Z17SP10281_WriteCharccchhh>
    1452:	05 c0       	rjmp	.+10     	; 0x145e <_Z10System_Runv+0x96>
				} 
				else
				{
					SP10281_WriteNumber(System_MidiChannel);
    1454:	80 91 f6 01 	lds	r24, 0x01F6	; 0x8001f6 <System_MidiChannel>
    1458:	90 e0       	ldi	r25, 0x00	; 0
    145a:	0e 94 ed 05 	call	0xbda	; 0xbda <_Z19SP10281_WriteNumbers>
				}
				
				SystemState = EDIT_MIDI_CHANNEL;
    145e:	81 e0       	ldi	r24, 0x01	; 1
    1460:	80 93 ff 01 	sts	0x01FF, r24	; 0x8001ff <SystemState>
    1464:	23 c2       	rjmp	.+1094   	; 0x18ac <_Z10System_Runv+0x4e4>
			} 
			else
			{
				SystemState = INITIALIZE_SYSTEM;
    1466:	82 e0       	ldi	r24, 0x02	; 2
    1468:	80 93 ff 01 	sts	0x01FF, r24	; 0x8001ff <SystemState>
    146c:	1f c2       	rjmp	.+1086   	; 0x18ac <_Z10System_Runv+0x4e4>
			
			break;
		
		case EDIT_MIDI_CHANNEL:
			/* If user is selecting new MIDI channel */
			if (TempSelectMidiChannel != LastTempSelectMidiChannel)
    146e:	90 91 f8 01 	lds	r25, 0x01F8	; 0x8001f8 <TempSelectMidiChannel>
    1472:	80 91 f7 01 	lds	r24, 0x01F7	; 0x8001f7 <LastTempSelectMidiChannel>
    1476:	98 17       	cp	r25, r24
    1478:	c1 f0       	breq	.+48     	; 0x14aa <_Z10System_Runv+0xe2>
			{
				/* Write selected MIDI channel to 7-segment display */
				if (TempSelectMidiChannel == MIDI_CH_OMNI)
    147a:	80 91 f8 01 	lds	r24, 0x01F8	; 0x8001f8 <TempSelectMidiChannel>
    147e:	81 11       	cpse	r24, r1
    1480:	09 c0       	rjmp	.+18     	; 0x1494 <_Z10System_Runv+0xcc>
				{
					SP10281_WriteChar('o', 'm', 'n', 0, 0, 0);
    1482:	e1 2c       	mov	r14, r1
    1484:	00 e0       	ldi	r16, 0x00	; 0
    1486:	20 e0       	ldi	r18, 0x00	; 0
    1488:	4e e6       	ldi	r20, 0x6E	; 110
    148a:	6d e6       	ldi	r22, 0x6D	; 109
    148c:	8f e6       	ldi	r24, 0x6F	; 111
    148e:	0e 94 d0 05 	call	0xba0	; 0xba0 <_Z17SP10281_WriteCharccchhh>
    1492:	05 c0       	rjmp	.+10     	; 0x149e <_Z10System_Runv+0xd6>
				}
				else
				{
					SP10281_WriteNumber(TempSelectMidiChannel);
    1494:	80 91 f8 01 	lds	r24, 0x01F8	; 0x8001f8 <TempSelectMidiChannel>
    1498:	90 e0       	ldi	r25, 0x00	; 0
    149a:	0e 94 ed 05 	call	0xbda	; 0xbda <_Z19SP10281_WriteNumbers>
				}
				
				/* Start timer */
				System_TempSelectOvfCnt = 1;
    149e:	81 e0       	ldi	r24, 0x01	; 1
    14a0:	90 e0       	ldi	r25, 0x00	; 0
    14a2:	90 93 05 02 	sts	0x0205, r25	; 0x800205 <System_TempSelectOvfCnt+0x1>
    14a6:	80 93 04 02 	sts	0x0204, r24	; 0x800204 <System_TempSelectOvfCnt>
			}
			
			LastTempSelectMidiChannel = TempSelectMidiChannel;
    14aa:	80 91 f8 01 	lds	r24, 0x01F8	; 0x8001f8 <TempSelectMidiChannel>
    14ae:	80 93 f7 01 	sts	0x01F7, r24	; 0x8001f7 <LastTempSelectMidiChannel>
			
			break;
    14b2:	fc c1       	rjmp	.+1016   	; 0x18ac <_Z10System_Runv+0x4e4>
		
		case INITIALIZE_SYSTEM:			
			/* Write active preset to 7-segment display */
			SP10281_WriteNumber(ActivePreset+1);
    14b4:	80 91 fd 01 	lds	r24, 0x01FD	; 0x8001fd <ActivePreset>
    14b8:	90 e0       	ldi	r25, 0x00	; 0
    14ba:	01 96       	adiw	r24, 0x01	; 1
    14bc:	0e 94 ed 05 	call	0xbda	; 0xbda <_Z19SP10281_WriteNumbers>
			
			/* Update mode LEDs */
			ModeRunLED.Set();
    14c0:	88 ef       	ldi	r24, 0xF8	; 248
    14c2:	92 e0       	ldi	r25, 0x02	; 2
    14c4:	0e 94 93 01 	call	0x326	; 0x326 <_ZN10MCP_Output3SetEv>
			ModeEditPresetLED.Clear();
    14c8:	84 ef       	ldi	r24, 0xF4	; 244
    14ca:	92 e0       	ldi	r25, 0x02	; 2
    14cc:	0e 94 d0 01 	call	0x3a0	; 0x3a0 <_ZN10MCP_Output5ClearEv>
			ModeEditMidiLED.Clear();
    14d0:	80 ef       	ldi	r24, 0xF0	; 240
    14d2:	92 e0       	ldi	r25, 0x02	; 2
    14d4:	0e 94 d0 01 	call	0x3a0	; 0x3a0 <_ZN10MCP_Output5ClearEv>
			
			/* Set appropriate System State */
			if (SystemRunMode == RUN_PRESET_MODE)
    14d8:	80 91 f9 01 	lds	r24, 0x01F9	; 0x8001f9 <SystemRunMode>
    14dc:	81 11       	cpse	r24, r1
    14de:	04 c0       	rjmp	.+8      	; 0x14e8 <_Z10System_Runv+0x120>
			{
				SystemState = ENTER_RUN_PRESET_CTRL;
    14e0:	83 e0       	ldi	r24, 0x03	; 3
    14e2:	80 93 ff 01 	sts	0x01FF, r24	; 0x8001ff <SystemState>
    14e6:	e2 c1       	rjmp	.+964    	; 0x18ac <_Z10System_Runv+0x4e4>
			}
			else if (SystemRunMode == RUN_LOOP_MODE)
    14e8:	80 91 f9 01 	lds	r24, 0x01F9	; 0x8001f9 <SystemRunMode>
    14ec:	81 30       	cpi	r24, 0x01	; 1
    14ee:	09 f0       	breq	.+2      	; 0x14f2 <_Z10System_Runv+0x12a>
    14f0:	dd c1       	rjmp	.+954    	; 0x18ac <_Z10System_Runv+0x4e4>
			{
				SystemState = ENTER_RUN_LOOP_CTRL;
    14f2:	85 e0       	ldi	r24, 0x05	; 5
    14f4:	80 93 ff 01 	sts	0x01FF, r24	; 0x8001ff <SystemState>
    14f8:	d9 c1       	rjmp	.+946    	; 0x18ac <_Z10System_Runv+0x4e4>
			
			break;
		
		case ENTER_RUN_PRESET_CTRL:
			/* Update state variables */
			SystemRunMode = RUN_PRESET_MODE;
    14fa:	10 92 f9 01 	sts	0x01F9, r1	; 0x8001f9 <SystemRunMode>
			SystemState = RUN_PRESET_CTRL;
    14fe:	84 e0       	ldi	r24, 0x04	; 4
    1500:	80 93 ff 01 	sts	0x01FF, r24	; 0x8001ff <SystemState>
		
			/* Change LastActivePreset to force update system */
			if (ActivePreset > PRESET_1)
    1504:	80 91 fd 01 	lds	r24, 0x01FD	; 0x8001fd <ActivePreset>
    1508:	88 23       	and	r24, r24
    150a:	31 f0       	breq	.+12     	; 0x1518 <_Z10System_Runv+0x150>
			{
				LastActivePreset = System_Preset(LastActivePreset - 1);
    150c:	80 91 fc 01 	lds	r24, 0x01FC	; 0x8001fc <LastActivePreset>
    1510:	81 50       	subi	r24, 0x01	; 1
    1512:	80 93 fc 01 	sts	0x01FC, r24	; 0x8001fc <LastActivePreset>
    1516:	09 c0       	rjmp	.+18     	; 0x152a <_Z10System_Runv+0x162>
			}
			else if (ActivePreset < PRESET_8)
    1518:	80 91 fd 01 	lds	r24, 0x01FD	; 0x8001fd <ActivePreset>
    151c:	87 30       	cpi	r24, 0x07	; 7
    151e:	28 f4       	brcc	.+10     	; 0x152a <_Z10System_Runv+0x162>
			{
				LastActivePreset = System_Preset(LastActivePreset + 1);
    1520:	80 91 fc 01 	lds	r24, 0x01FC	; 0x8001fc <LastActivePreset>
    1524:	8f 5f       	subi	r24, 0xFF	; 255
    1526:	80 93 fc 01 	sts	0x01FC, r24	; 0x8001fc <LastActivePreset>
			}
			
		case RUN_PRESET_CTRL:
			/* If active preset has changed since last cycle then update system */
			if (ActivePreset != LastActivePreset)
    152a:	90 91 fd 01 	lds	r25, 0x01FD	; 0x8001fd <ActivePreset>
    152e:	80 91 fc 01 	lds	r24, 0x01FC	; 0x8001fc <LastActivePreset>
    1532:	98 13       	cpse	r25, r24
			{
				System_ChangePreset();
    1534:	0e 94 9c 09 	call	0x1338	; 0x1338 <_Z19System_ChangePresetv>
			}
			
			/* If user is browsing presets */
			if (TempSelectPreset != LastTempSelectPreset)
    1538:	90 91 fb 01 	lds	r25, 0x01FB	; 0x8001fb <TempSelectPreset>
    153c:	80 91 fa 01 	lds	r24, 0x01FA	; 0x8001fa <LastTempSelectPreset>
    1540:	98 17       	cp	r25, r24
    1542:	09 f4       	brne	.+2      	; 0x1546 <_Z10System_Runv+0x17e>
    1544:	b3 c1       	rjmp	.+870    	; 0x18ac <_Z10System_Runv+0x4e4>
			{
				/* Update 7-segment display */
				SP10281_WriteNumber(TempSelectPreset + 1);
    1546:	80 91 fb 01 	lds	r24, 0x01FB	; 0x8001fb <TempSelectPreset>
    154a:	90 e0       	ldi	r25, 0x00	; 0
    154c:	01 96       	adiw	r24, 0x01	; 1
    154e:	0e 94 ed 05 	call	0xbda	; 0xbda <_Z19SP10281_WriteNumbers>
								
				/* Update UI LEDs */
				LoopModePreset = PresetTable[TempSelectPreset];
    1552:	e0 91 fb 01 	lds	r30, 0x01FB	; 0x8001fb <TempSelectPreset>
    1556:	f0 e0       	ldi	r31, 0x00	; 0
    1558:	ee 0f       	add	r30, r30
    155a:	ff 1f       	adc	r31, r31
    155c:	ee 0f       	add	r30, r30
    155e:	ff 1f       	adc	r31, r31
    1560:	ef 52       	subi	r30, 0x2F	; 47
    1562:	fe 4f       	sbci	r31, 0xFE	; 254
    1564:	80 81       	ld	r24, Z
    1566:	91 81       	ldd	r25, Z+1	; 0x01
    1568:	a2 81       	ldd	r26, Z+2	; 0x02
    156a:	b3 81       	ldd	r27, Z+3	; 0x03
    156c:	80 93 2f 01 	sts	0x012F, r24	; 0x80012f <LoopModePreset>
    1570:	90 93 30 01 	sts	0x0130, r25	; 0x800130 <LoopModePreset+0x1>
    1574:	a0 93 31 01 	sts	0x0131, r26	; 0x800131 <LoopModePreset+0x2>
    1578:	b0 93 32 01 	sts	0x0132, r27	; 0x800132 <LoopModePreset+0x3>
				System_UpdateUI_LEDs();
    157c:	0e 94 23 07 	call	0xe46	; 0xe46 <_Z20System_UpdateUI_LEDsv>
				
				/* Start timer */
				System_TempSelectOvfCnt = 1;
    1580:	81 e0       	ldi	r24, 0x01	; 1
    1582:	90 e0       	ldi	r25, 0x00	; 0
    1584:	90 93 05 02 	sts	0x0205, r25	; 0x800205 <System_TempSelectOvfCnt+0x1>
    1588:	80 93 04 02 	sts	0x0204, r24	; 0x800204 <System_TempSelectOvfCnt>
    158c:	8f c1       	rjmp	.+798    	; 0x18ac <_Z10System_Runv+0x4e4>
			
			break;
		
		case ENTER_RUN_LOOP_CTRL:
			/* Update Pedal display */
			PedalCom_QueueCommand(UpdateTunerLEDs, 1, 0);
    158e:	40 e0       	ldi	r20, 0x00	; 0
    1590:	50 e0       	ldi	r21, 0x00	; 0
    1592:	61 e0       	ldi	r22, 0x01	; 1
    1594:	83 ed       	ldi	r24, 0xD3	; 211
    1596:	0e 94 e5 03 	call	0x7ca	; 0x7ca <_Z21PedalCom_QueueCommand3CMDhPh>
			PedalCom_QueueCommand(Update7segments, 4, (uint8_t*)"Loop");
    159a:	48 e3       	ldi	r20, 0x38	; 56
    159c:	51 e0       	ldi	r21, 0x01	; 1
    159e:	64 e0       	ldi	r22, 0x04	; 4
    15a0:	87 ed       	ldi	r24, 0xD7	; 215
    15a2:	0e 94 e5 03 	call	0x7ca	; 0x7ca <_Z21PedalCom_QueueCommand3CMDhPh>
			PedalCom_QueueCommand(UpdatePresetLoopLEDs, 1, (uint8_t*)&LoopModePreset.Active_Loops);
    15a6:	4f e2       	ldi	r20, 0x2F	; 47
    15a8:	51 e0       	ldi	r21, 0x01	; 1
    15aa:	61 e0       	ldi	r22, 0x01	; 1
    15ac:	80 ed       	ldi	r24, 0xD0	; 208
    15ae:	0e 94 e5 03 	call	0x7ca	; 0x7ca <_Z21PedalCom_QueueCommand3CMDhPh>
			
			/* Update UI LEDs */
			System_UpdateUI_LEDs();
    15b2:	0e 94 23 07 	call	0xe46	; 0xe46 <_Z20System_UpdateUI_LEDsv>
			
			/* Update 7-segment display */
			SP10281_WriteChar('M', 'L', 'C', 0, 0, 0);
    15b6:	e1 2c       	mov	r14, r1
    15b8:	00 e0       	ldi	r16, 0x00	; 0
    15ba:	20 e0       	ldi	r18, 0x00	; 0
    15bc:	43 e4       	ldi	r20, 0x43	; 67
    15be:	6c e4       	ldi	r22, 0x4C	; 76
    15c0:	8d e4       	ldi	r24, 0x4D	; 77
    15c2:	0e 94 d0 05 	call	0xba0	; 0xba0 <_Z17SP10281_WriteCharccchhh>
			
			/* Update state variables */
			SystemRunMode = RUN_LOOP_MODE;
    15c6:	81 e0       	ldi	r24, 0x01	; 1
    15c8:	80 93 f9 01 	sts	0x01F9, r24	; 0x8001f9 <SystemRunMode>
			SystemState = RUN_LOOP_CTRL;
    15cc:	86 e0       	ldi	r24, 0x06	; 6
    15ce:	80 93 ff 01 	sts	0x01FF, r24	; 0x8001ff <SystemState>
inline bool operator!=(const Preset& lhs, const Preset& rhs)
{
	return	(	lhs.Active_Loops != rhs.Active_Loops
			||	lhs.Active_CtrlSwitches != rhs.Active_CtrlSwitches
			||	lhs.MIDI_PC_In != rhs.MIDI_PC_In
			||	lhs.MIDI_PC_Out != rhs.MIDI_PC_Out);
    15d2:	90 91 2f 01 	lds	r25, 0x012F	; 0x80012f <LoopModePreset>
    15d6:	80 91 2b 01 	lds	r24, 0x012B	; 0x80012b <LastLoopModePreset>
    15da:	98 13       	cpse	r25, r24
    15dc:	11 c0       	rjmp	.+34     	; 0x1600 <_Z10System_Runv+0x238>
}

inline bool operator!=(const Preset& lhs, const Preset& rhs)
{
	return	(	lhs.Active_Loops != rhs.Active_Loops
			||	lhs.Active_CtrlSwitches != rhs.Active_CtrlSwitches
    15de:	90 91 30 01 	lds	r25, 0x0130	; 0x800130 <LoopModePreset+0x1>
    15e2:	80 91 2c 01 	lds	r24, 0x012C	; 0x80012c <LastLoopModePreset+0x1>
    15e6:	98 13       	cpse	r25, r24
    15e8:	0b c0       	rjmp	.+22     	; 0x1600 <_Z10System_Runv+0x238>
			||	lhs.MIDI_PC_In != rhs.MIDI_PC_In
    15ea:	90 91 31 01 	lds	r25, 0x0131	; 0x800131 <LoopModePreset+0x2>
    15ee:	80 91 2d 01 	lds	r24, 0x012D	; 0x80012d <LastLoopModePreset+0x2>
    15f2:	98 13       	cpse	r25, r24
    15f4:	05 c0       	rjmp	.+10     	; 0x1600 <_Z10System_Runv+0x238>
			
		case RUN_LOOP_CTRL:
			/* If active loops or ctrl switches has changed since last cycle */
			if (LoopModePreset != LastLoopModePreset)
    15f6:	90 91 32 01 	lds	r25, 0x0132	; 0x800132 <LoopModePreset+0x3>
    15fa:	80 91 2e 01 	lds	r24, 0x012E	; 0x80012e <LastLoopModePreset+0x3>
    15fe:	98 13       	cpse	r25, r24
			{
				/* Update relays */
				//System_UpdateUI_Relays();
				
				/* Update UI LEDs */
				System_UpdateUI_LEDs();
    1600:	0e 94 23 07 	call	0xe46	; 0xe46 <_Z20System_UpdateUI_LEDsv>
			}
			
			/* If user is browsing presets */
			if (TempSelectPreset != LastTempSelectPreset)
    1604:	90 91 fb 01 	lds	r25, 0x01FB	; 0x8001fb <TempSelectPreset>
    1608:	80 91 fa 01 	lds	r24, 0x01FA	; 0x8001fa <LastTempSelectPreset>
    160c:	98 17       	cp	r25, r24
    160e:	09 f4       	brne	.+2      	; 0x1612 <_Z10System_Runv+0x24a>
    1610:	4d c1       	rjmp	.+666    	; 0x18ac <_Z10System_Runv+0x4e4>
			{
				/* Update 7-segment display */
				SP10281_WriteNumber(TempSelectPreset + 1);
    1612:	80 91 fb 01 	lds	r24, 0x01FB	; 0x8001fb <TempSelectPreset>
    1616:	90 e0       	ldi	r25, 0x00	; 0
    1618:	01 96       	adiw	r24, 0x01	; 1
    161a:	0e 94 ed 05 	call	0xbda	; 0xbda <_Z19SP10281_WriteNumbers>
							
				/* Update UI LEDs */
				LoopModePreset = PresetTable[TempSelectPreset];
    161e:	e0 91 fb 01 	lds	r30, 0x01FB	; 0x8001fb <TempSelectPreset>
    1622:	f0 e0       	ldi	r31, 0x00	; 0
    1624:	ee 0f       	add	r30, r30
    1626:	ff 1f       	adc	r31, r31
    1628:	ee 0f       	add	r30, r30
    162a:	ff 1f       	adc	r31, r31
    162c:	ef 52       	subi	r30, 0x2F	; 47
    162e:	fe 4f       	sbci	r31, 0xFE	; 254
    1630:	80 81       	ld	r24, Z
    1632:	91 81       	ldd	r25, Z+1	; 0x01
    1634:	a2 81       	ldd	r26, Z+2	; 0x02
    1636:	b3 81       	ldd	r27, Z+3	; 0x03
    1638:	80 93 2f 01 	sts	0x012F, r24	; 0x80012f <LoopModePreset>
    163c:	90 93 30 01 	sts	0x0130, r25	; 0x800130 <LoopModePreset+0x1>
    1640:	a0 93 31 01 	sts	0x0131, r26	; 0x800131 <LoopModePreset+0x2>
    1644:	b0 93 32 01 	sts	0x0132, r27	; 0x800132 <LoopModePreset+0x3>
				System_UpdateUI_LEDs();
    1648:	0e 94 23 07 	call	0xe46	; 0xe46 <_Z20System_UpdateUI_LEDsv>
				
				/* Start timer */
				System_TempSelectOvfCnt = 1;
    164c:	81 e0       	ldi	r24, 0x01	; 1
    164e:	90 e0       	ldi	r25, 0x00	; 0
    1650:	90 93 05 02 	sts	0x0205, r25	; 0x800205 <System_TempSelectOvfCnt+0x1>
    1654:	80 93 04 02 	sts	0x0204, r24	; 0x800204 <System_TempSelectOvfCnt>
    1658:	29 c1       	rjmp	.+594    	; 0x18ac <_Z10System_Runv+0x4e4>
		case TUNER:
			break;
		
		case ENTER_EDIT_UI_MODE:
			/* Change LastSystemUIMode to force update mode LEDs */
			if (SystemUIMode < MODE_EDIT_MIDI)
    165a:	80 91 f5 01 	lds	r24, 0x01F5	; 0x8001f5 <SystemUIMode>
    165e:	82 30       	cpi	r24, 0x02	; 2
    1660:	30 f4       	brcc	.+12     	; 0x166e <_Z10System_Runv+0x2a6>
			{
				LastSystemUIMode = System_UI_Mode(SystemUIMode + 1);
    1662:	80 91 f5 01 	lds	r24, 0x01F5	; 0x8001f5 <SystemUIMode>
    1666:	8f 5f       	subi	r24, 0xFF	; 255
    1668:	80 93 f4 01 	sts	0x01F4, r24	; 0x8001f4 <LastSystemUIMode>
    166c:	09 c0       	rjmp	.+18     	; 0x1680 <_Z10System_Runv+0x2b8>
			}
			else if (SystemUIMode > MODE_RUN)
    166e:	80 91 f5 01 	lds	r24, 0x01F5	; 0x8001f5 <SystemUIMode>
    1672:	88 23       	and	r24, r24
    1674:	29 f0       	breq	.+10     	; 0x1680 <_Z10System_Runv+0x2b8>
			{
				LastSystemUIMode = System_UI_Mode(SystemUIMode - 1);
    1676:	80 91 f5 01 	lds	r24, 0x01F5	; 0x8001f5 <SystemUIMode>
    167a:	81 50       	subi	r24, 0x01	; 1
    167c:	80 93 f4 01 	sts	0x01F4, r24	; 0x8001f4 <LastSystemUIMode>
			}
			
			System_ChangePreset();
    1680:	0e 94 9c 09 	call	0x1338	; 0x1338 <_Z19System_ChangePresetv>
			
			SystemState = EDIT_UI_MODE;
    1684:	8a e0       	ldi	r24, 0x0A	; 10
    1686:	80 93 ff 01 	sts	0x01FF, r24	; 0x8001ff <SystemState>
			
		case EDIT_UI_MODE:
			/* If user is changing the UI mode then update mode LEDs*/
			if (SystemUIMode != LastSystemUIMode)
    168a:	90 91 f5 01 	lds	r25, 0x01F5	; 0x8001f5 <SystemUIMode>
    168e:	80 91 f4 01 	lds	r24, 0x01F4	; 0x8001f4 <LastSystemUIMode>
    1692:	98 17       	cp	r25, r24
    1694:	91 f1       	breq	.+100    	; 0x16fa <_Z10System_Runv+0x332>
			{
				if (SystemUIMode == MODE_RUN)
    1696:	80 91 f5 01 	lds	r24, 0x01F5	; 0x8001f5 <SystemUIMode>
    169a:	81 11       	cpse	r24, r1
    169c:	0d c0       	rjmp	.+26     	; 0x16b8 <_Z10System_Runv+0x2f0>
				{
					ModeRunLED.AutoToggle();
    169e:	88 ef       	ldi	r24, 0xF8	; 248
    16a0:	92 e0       	ldi	r25, 0x02	; 2
    16a2:	0e 94 31 02 	call	0x462	; 0x462 <_ZN10MCP_Output10AutoToggleEv>
					ModeEditPresetLED.Clear();
    16a6:	84 ef       	ldi	r24, 0xF4	; 244
    16a8:	92 e0       	ldi	r25, 0x02	; 2
    16aa:	0e 94 d0 01 	call	0x3a0	; 0x3a0 <_ZN10MCP_Output5ClearEv>
					ModeEditMidiLED.Clear();
    16ae:	80 ef       	ldi	r24, 0xF0	; 240
    16b0:	92 e0       	ldi	r25, 0x02	; 2
    16b2:	0e 94 d0 01 	call	0x3a0	; 0x3a0 <_ZN10MCP_Output5ClearEv>
    16b6:	21 c0       	rjmp	.+66     	; 0x16fa <_Z10System_Runv+0x332>
				}
				else if (SystemUIMode == MODE_EDIT_PRESET)
    16b8:	80 91 f5 01 	lds	r24, 0x01F5	; 0x8001f5 <SystemUIMode>
    16bc:	81 30       	cpi	r24, 0x01	; 1
    16be:	69 f4       	brne	.+26     	; 0x16da <_Z10System_Runv+0x312>
				{
					ModeRunLED.Clear();
    16c0:	88 ef       	ldi	r24, 0xF8	; 248
    16c2:	92 e0       	ldi	r25, 0x02	; 2
    16c4:	0e 94 d0 01 	call	0x3a0	; 0x3a0 <_ZN10MCP_Output5ClearEv>
					ModeEditPresetLED.AutoToggle();
    16c8:	84 ef       	ldi	r24, 0xF4	; 244
    16ca:	92 e0       	ldi	r25, 0x02	; 2
    16cc:	0e 94 31 02 	call	0x462	; 0x462 <_ZN10MCP_Output10AutoToggleEv>
					ModeEditMidiLED.Clear();
    16d0:	80 ef       	ldi	r24, 0xF0	; 240
    16d2:	92 e0       	ldi	r25, 0x02	; 2
    16d4:	0e 94 d0 01 	call	0x3a0	; 0x3a0 <_ZN10MCP_Output5ClearEv>
    16d8:	10 c0       	rjmp	.+32     	; 0x16fa <_Z10System_Runv+0x332>
				}
				else if (SystemUIMode == MODE_EDIT_MIDI)
    16da:	80 91 f5 01 	lds	r24, 0x01F5	; 0x8001f5 <SystemUIMode>
    16de:	82 30       	cpi	r24, 0x02	; 2
    16e0:	61 f4       	brne	.+24     	; 0x16fa <_Z10System_Runv+0x332>
				{
					ModeRunLED.Clear();
    16e2:	88 ef       	ldi	r24, 0xF8	; 248
    16e4:	92 e0       	ldi	r25, 0x02	; 2
    16e6:	0e 94 d0 01 	call	0x3a0	; 0x3a0 <_ZN10MCP_Output5ClearEv>
					ModeEditPresetLED.Clear();
    16ea:	84 ef       	ldi	r24, 0xF4	; 244
    16ec:	92 e0       	ldi	r25, 0x02	; 2
    16ee:	0e 94 d0 01 	call	0x3a0	; 0x3a0 <_ZN10MCP_Output5ClearEv>
					ModeEditMidiLED.AutoToggle();
    16f2:	80 ef       	ldi	r24, 0xF0	; 240
    16f4:	92 e0       	ldi	r25, 0x02	; 2
    16f6:	0e 94 31 02 	call	0x462	; 0x462 <_ZN10MCP_Output10AutoToggleEv>
				}
			}
			
			LastSystemUIMode = SystemUIMode;
    16fa:	80 91 f5 01 	lds	r24, 0x01F5	; 0x8001f5 <SystemUIMode>
    16fe:	80 93 f4 01 	sts	0x01F4, r24	; 0x8001f4 <LastSystemUIMode>
			
			break;
    1702:	d4 c0       	rjmp	.+424    	; 0x18ac <_Z10System_Runv+0x4e4>
		
		case ENTER_EDIT_PRESET:
			/* Disable Auto toggle */
			ModeRunLED.Clear();
    1704:	88 ef       	ldi	r24, 0xF8	; 248
    1706:	92 e0       	ldi	r25, 0x02	; 2
    1708:	0e 94 d0 01 	call	0x3a0	; 0x3a0 <_ZN10MCP_Output5ClearEv>
			ModeEditPresetLED.Set();
    170c:	84 ef       	ldi	r24, 0xF4	; 244
    170e:	92 e0       	ldi	r25, 0x02	; 2
    1710:	0e 94 93 01 	call	0x326	; 0x326 <_ZN10MCP_Output3SetEv>
			ModeEditMidiLED.Clear();
    1714:	80 ef       	ldi	r24, 0xF0	; 240
    1716:	92 e0       	ldi	r25, 0x02	; 2
    1718:	0e 94 d0 01 	call	0x3a0	; 0x3a0 <_ZN10MCP_Output5ClearEv>
			
			LoopModePreset = PresetTable[ActivePreset];
    171c:	e0 91 fd 01 	lds	r30, 0x01FD	; 0x8001fd <ActivePreset>
    1720:	f0 e0       	ldi	r31, 0x00	; 0
    1722:	ee 0f       	add	r30, r30
    1724:	ff 1f       	adc	r31, r31
    1726:	ee 0f       	add	r30, r30
    1728:	ff 1f       	adc	r31, r31
    172a:	ef 52       	subi	r30, 0x2F	; 47
    172c:	fe 4f       	sbci	r31, 0xFE	; 254
    172e:	80 81       	ld	r24, Z
    1730:	91 81       	ldd	r25, Z+1	; 0x01
    1732:	a2 81       	ldd	r26, Z+2	; 0x02
    1734:	b3 81       	ldd	r27, Z+3	; 0x03
    1736:	80 93 2f 01 	sts	0x012F, r24	; 0x80012f <LoopModePreset>
    173a:	90 93 30 01 	sts	0x0130, r25	; 0x800130 <LoopModePreset+0x1>
    173e:	a0 93 31 01 	sts	0x0131, r26	; 0x800131 <LoopModePreset+0x2>
    1742:	b0 93 32 01 	sts	0x0132, r27	; 0x800132 <LoopModePreset+0x3>
			
			UserEditSelection = 0;
    1746:	10 92 d0 01 	sts	0x01D0, r1	; 0x8001d0 <UserEditSelection>
			LastUserEditSelection = 1;
    174a:	81 e0       	ldi	r24, 0x01	; 1
    174c:	80 93 cf 01 	sts	0x01CF, r24	; 0x8001cf <LastUserEditSelection>
			
			SystemState = EDIT_PRESET;
    1750:	8c e0       	ldi	r24, 0x0C	; 12
    1752:	80 93 ff 01 	sts	0x01FF, r24	; 0x8001ff <SystemState>
			
		case EDIT_PRESET:
			/* If user is selecting */
			if (UserEditSelection != LastUserEditSelection)
    1756:	90 91 d0 01 	lds	r25, 0x01D0	; 0x8001d0 <UserEditSelection>
    175a:	80 91 cf 01 	lds	r24, 0x01CF	; 0x8001cf <LastUserEditSelection>
    175e:	98 17       	cp	r25, r24
    1760:	89 f1       	breq	.+98     	; 0x17c4 <_Z10System_Runv+0x3fc>
			{
				/* Blank LEDs except from selection */
				if (UserEditSelection <= 7)
    1762:	80 91 d0 01 	lds	r24, 0x01D0	; 0x8001d0 <UserEditSelection>
    1766:	88 30       	cpi	r24, 0x08	; 8
    1768:	98 f4       	brcc	.+38     	; 0x1790 <_Z10System_Runv+0x3c8>
				{
					MCP23017_WriteReg(MCP23017_UI_LEDS_ADDR, OLATA, (1 << UserEditSelection));
    176a:	80 91 d0 01 	lds	r24, 0x01D0	; 0x8001d0 <UserEditSelection>
    176e:	41 e0       	ldi	r20, 0x01	; 1
    1770:	50 e0       	ldi	r21, 0x00	; 0
    1772:	02 c0       	rjmp	.+4      	; 0x1778 <_Z10System_Runv+0x3b0>
    1774:	44 0f       	add	r20, r20
    1776:	55 1f       	adc	r21, r21
    1778:	8a 95       	dec	r24
    177a:	e2 f7       	brpl	.-8      	; 0x1774 <_Z10System_Runv+0x3ac>
    177c:	64 e1       	ldi	r22, 0x14	; 20
    177e:	80 e0       	ldi	r24, 0x00	; 0
    1780:	0e 94 65 01 	call	0x2ca	; 0x2ca <_Z17MCP23017_WriteReghhh>
					MCP23017_WriteReg(MCP23017_UI_LEDS_ADDR, OLATB, (1 << UI_MODE_PRESET_LED_PIN));
    1784:	40 e4       	ldi	r20, 0x40	; 64
    1786:	65 e1       	ldi	r22, 0x15	; 21
    1788:	80 e0       	ldi	r24, 0x00	; 0
    178a:	0e 94 65 01 	call	0x2ca	; 0x2ca <_Z17MCP23017_WriteReghhh>
    178e:	14 c0       	rjmp	.+40     	; 0x17b8 <_Z10System_Runv+0x3f0>
				}
				else
				{
					MCP23017_WriteReg(MCP23017_UI_LEDS_ADDR, OLATA, 0x00);
    1790:	40 e0       	ldi	r20, 0x00	; 0
    1792:	64 e1       	ldi	r22, 0x14	; 20
    1794:	80 e0       	ldi	r24, 0x00	; 0
    1796:	0e 94 65 01 	call	0x2ca	; 0x2ca <_Z17MCP23017_WriteReghhh>
					MCP23017_WriteReg(MCP23017_UI_LEDS_ADDR, OLATB, ((1 << UI_MODE_PRESET_LED_PIN) | (1 << (UserEditSelection - 8))));
    179a:	80 91 d0 01 	lds	r24, 0x01D0	; 0x8001d0 <UserEditSelection>
    179e:	88 50       	subi	r24, 0x08	; 8
    17a0:	41 e0       	ldi	r20, 0x01	; 1
    17a2:	50 e0       	ldi	r21, 0x00	; 0
    17a4:	02 c0       	rjmp	.+4      	; 0x17aa <_Z10System_Runv+0x3e2>
    17a6:	44 0f       	add	r20, r20
    17a8:	55 1f       	adc	r21, r21
    17aa:	8a 95       	dec	r24
    17ac:	e2 f7       	brpl	.-8      	; 0x17a6 <_Z10System_Runv+0x3de>
    17ae:	40 64       	ori	r20, 0x40	; 64
    17b0:	65 e1       	ldi	r22, 0x15	; 21
    17b2:	80 e0       	ldi	r24, 0x00	; 0
    17b4:	0e 94 65 01 	call	0x2ca	; 0x2ca <_Z17MCP23017_WriteReghhh>
				}
				
				/* Start timer */
				System_MarkSelectionOvfCnt = 1;
    17b8:	81 e0       	ldi	r24, 0x01	; 1
    17ba:	90 e0       	ldi	r25, 0x00	; 0
    17bc:	90 93 02 02 	sts	0x0202, r25	; 0x800202 <System_MarkSelectionOvfCnt+0x1>
    17c0:	80 93 01 02 	sts	0x0201, r24	; 0x800201 <System_MarkSelectionOvfCnt>
			}
			
			LastUserEditSelection = UserEditSelection;
    17c4:	80 91 d0 01 	lds	r24, 0x01D0	; 0x8001d0 <UserEditSelection>
    17c8:	80 93 cf 01 	sts	0x01CF, r24	; 0x8001cf <LastUserEditSelection>
			break;
    17cc:	6f c0       	rjmp	.+222    	; 0x18ac <_Z10System_Runv+0x4e4>
			
		case ENTER_EDIT_MIDI_IN_OUT:
			/* Disable Auto toggle */
			ModeRunLED.Clear();
    17ce:	88 ef       	ldi	r24, 0xF8	; 248
    17d0:	92 e0       	ldi	r25, 0x02	; 2
    17d2:	0e 94 d0 01 	call	0x3a0	; 0x3a0 <_ZN10MCP_Output5ClearEv>
			ModeEditPresetLED.Clear();
    17d6:	84 ef       	ldi	r24, 0xF4	; 244
    17d8:	92 e0       	ldi	r25, 0x02	; 2
    17da:	0e 94 d0 01 	call	0x3a0	; 0x3a0 <_ZN10MCP_Output5ClearEv>
			ModeEditMidiLED.Set();
    17de:	80 ef       	ldi	r24, 0xF0	; 240
    17e0:	92 e0       	ldi	r25, 0x02	; 2
    17e2:	0e 94 93 01 	call	0x326	; 0x326 <_ZN10MCP_Output3SetEv>
			
			/* Update 7-segment display */
			if (SetMidiEdit == MIDI_IN)
    17e6:	80 91 f3 01 	lds	r24, 0x01F3	; 0x8001f3 <SetMidiEdit>
    17ea:	81 11       	cpse	r24, r1
    17ec:	09 c0       	rjmp	.+18     	; 0x1800 <_Z10System_Runv+0x438>
			{
				SP10281_WriteChar('i', 'n', ' ', 0, 0, 0);
    17ee:	e1 2c       	mov	r14, r1
    17f0:	00 e0       	ldi	r16, 0x00	; 0
    17f2:	20 e0       	ldi	r18, 0x00	; 0
    17f4:	40 e2       	ldi	r20, 0x20	; 32
    17f6:	6e e6       	ldi	r22, 0x6E	; 110
    17f8:	89 e6       	ldi	r24, 0x69	; 105
    17fa:	0e 94 d0 05 	call	0xba0	; 0xba0 <_Z17SP10281_WriteCharccchhh>
    17fe:	08 c0       	rjmp	.+16     	; 0x1810 <_Z10System_Runv+0x448>
			}
			else
			{
				SP10281_WriteChar('o', 'u', 't', 0, 0, 0);
    1800:	e1 2c       	mov	r14, r1
    1802:	00 e0       	ldi	r16, 0x00	; 0
    1804:	20 e0       	ldi	r18, 0x00	; 0
    1806:	44 e7       	ldi	r20, 0x74	; 116
    1808:	65 e7       	ldi	r22, 0x75	; 117
    180a:	8f e6       	ldi	r24, 0x6F	; 111
    180c:	0e 94 d0 05 	call	0xba0	; 0xba0 <_Z17SP10281_WriteCharccchhh>
			}
			
			SystemState = EDIT_MIDI_IN_OUT;
    1810:	8e e0       	ldi	r24, 0x0E	; 14
    1812:	80 93 ff 01 	sts	0x01FF, r24	; 0x8001ff <SystemState>
    1816:	4a c0       	rjmp	.+148    	; 0x18ac <_Z10System_Runv+0x4e4>
		case EDIT_MIDI_IN_OUT:
			break;
		
		case ENTER_EDIT_MIDI_PC:
			/* Get setup for active preset */
			if (SetMidiEdit == MIDI_IN)
    1818:	80 91 f3 01 	lds	r24, 0x01F3	; 0x8001f3 <SetMidiEdit>
    181c:	81 11       	cpse	r24, r1
    181e:	19 c0       	rjmp	.+50     	; 0x1852 <_Z10System_Runv+0x48a>
			{
				TempSelectMidiPC = PresetTable[ActivePreset].MIDI_PC_In;
    1820:	e0 91 fd 01 	lds	r30, 0x01FD	; 0x8001fd <ActivePreset>
    1824:	f0 e0       	ldi	r31, 0x00	; 0
    1826:	ee 0f       	add	r30, r30
    1828:	ff 1f       	adc	r31, r31
    182a:	ee 0f       	add	r30, r30
    182c:	ff 1f       	adc	r31, r31
    182e:	ef 52       	subi	r30, 0x2F	; 47
    1830:	fe 4f       	sbci	r31, 0xFE	; 254
    1832:	82 81       	ldd	r24, Z+2	; 0x02
    1834:	80 93 f2 01 	sts	0x01F2, r24	; 0x8001f2 <TempSelectMidiPC>
				LastTempSelectMidiPC = PresetTable[ActivePreset].MIDI_PC_In;
    1838:	e0 91 fd 01 	lds	r30, 0x01FD	; 0x8001fd <ActivePreset>
    183c:	f0 e0       	ldi	r31, 0x00	; 0
    183e:	ee 0f       	add	r30, r30
    1840:	ff 1f       	adc	r31, r31
    1842:	ee 0f       	add	r30, r30
    1844:	ff 1f       	adc	r31, r31
    1846:	ef 52       	subi	r30, 0x2F	; 47
    1848:	fe 4f       	sbci	r31, 0xFE	; 254
    184a:	82 81       	ldd	r24, Z+2	; 0x02
    184c:	80 93 f1 01 	sts	0x01F1, r24	; 0x8001f1 <LastTempSelectMidiPC>
    1850:	18 c0       	rjmp	.+48     	; 0x1882 <_Z10System_Runv+0x4ba>
			}
			else
			{
				TempSelectMidiPC = PresetTable[ActivePreset].MIDI_PC_Out;
    1852:	e0 91 fd 01 	lds	r30, 0x01FD	; 0x8001fd <ActivePreset>
    1856:	f0 e0       	ldi	r31, 0x00	; 0
    1858:	ee 0f       	add	r30, r30
    185a:	ff 1f       	adc	r31, r31
    185c:	ee 0f       	add	r30, r30
    185e:	ff 1f       	adc	r31, r31
    1860:	ef 52       	subi	r30, 0x2F	; 47
    1862:	fe 4f       	sbci	r31, 0xFE	; 254
    1864:	83 81       	ldd	r24, Z+3	; 0x03
    1866:	80 93 f2 01 	sts	0x01F2, r24	; 0x8001f2 <TempSelectMidiPC>
				LastTempSelectMidiPC = PresetTable[ActivePreset].MIDI_PC_Out;
    186a:	e0 91 fd 01 	lds	r30, 0x01FD	; 0x8001fd <ActivePreset>
    186e:	f0 e0       	ldi	r31, 0x00	; 0
    1870:	ee 0f       	add	r30, r30
    1872:	ff 1f       	adc	r31, r31
    1874:	ee 0f       	add	r30, r30
    1876:	ff 1f       	adc	r31, r31
    1878:	ef 52       	subi	r30, 0x2F	; 47
    187a:	fe 4f       	sbci	r31, 0xFE	; 254
    187c:	83 81       	ldd	r24, Z+3	; 0x03
    187e:	80 93 f1 01 	sts	0x01F1, r24	; 0x8001f1 <LastTempSelectMidiPC>
			}
			
			/* Update 7-segment display */
			if (TempSelectMidiPC == MIDI_PC_OFF)
    1882:	80 91 f2 01 	lds	r24, 0x01F2	; 0x8001f2 <TempSelectMidiPC>
    1886:	8f 3f       	cpi	r24, 0xFF	; 255
    1888:	49 f4       	brne	.+18     	; 0x189c <_Z10System_Runv+0x4d4>
			{
				SP10281_WriteChar('o', 'f', 'f', 0, 0, 0);
    188a:	e1 2c       	mov	r14, r1
    188c:	00 e0       	ldi	r16, 0x00	; 0
    188e:	20 e0       	ldi	r18, 0x00	; 0
    1890:	46 e6       	ldi	r20, 0x66	; 102
    1892:	66 e6       	ldi	r22, 0x66	; 102
    1894:	8f e6       	ldi	r24, 0x6F	; 111
    1896:	0e 94 d0 05 	call	0xba0	; 0xba0 <_Z17SP10281_WriteCharccchhh>
    189a:	05 c0       	rjmp	.+10     	; 0x18a6 <_Z10System_Runv+0x4de>
			}
			else
			{
				SP10281_WriteNumber(TempSelectMidiPC);
    189c:	80 91 f2 01 	lds	r24, 0x01F2	; 0x8001f2 <TempSelectMidiPC>
    18a0:	90 e0       	ldi	r25, 0x00	; 0
    18a2:	0e 94 ed 05 	call	0xbda	; 0xbda <_Z19SP10281_WriteNumbers>
			}
			
			SystemState = EDIT_MIDI_PC;
    18a6:	80 e1       	ldi	r24, 0x10	; 16
    18a8:	80 93 ff 01 	sts	0x01FF, r24	; 0x8001ff <SystemState>
		
		default:
			break;
	}
	
	LastActivePreset = ActivePreset;
    18ac:	80 91 fd 01 	lds	r24, 0x01FD	; 0x8001fd <ActivePreset>
    18b0:	80 93 fc 01 	sts	0x01FC, r24	; 0x8001fc <LastActivePreset>
	LastSystemState = SystemState;
    18b4:	80 91 ff 01 	lds	r24, 0x01FF	; 0x8001ff <SystemState>
    18b8:	80 93 fe 01 	sts	0x01FE, r24	; 0x8001fe <LastSystemState>
	LastLoopModePreset = LoopModePreset;
    18bc:	80 91 2f 01 	lds	r24, 0x012F	; 0x80012f <LoopModePreset>
    18c0:	90 91 30 01 	lds	r25, 0x0130	; 0x800130 <LoopModePreset+0x1>
    18c4:	a0 91 31 01 	lds	r26, 0x0131	; 0x800131 <LoopModePreset+0x2>
    18c8:	b0 91 32 01 	lds	r27, 0x0132	; 0x800132 <LoopModePreset+0x3>
    18cc:	80 93 2b 01 	sts	0x012B, r24	; 0x80012b <LastLoopModePreset>
    18d0:	90 93 2c 01 	sts	0x012C, r25	; 0x80012c <LastLoopModePreset+0x1>
    18d4:	a0 93 2d 01 	sts	0x012D, r26	; 0x80012d <LastLoopModePreset+0x2>
    18d8:	b0 93 2e 01 	sts	0x012E, r27	; 0x80012e <LastLoopModePreset+0x3>
	LastTempSelectPreset = TempSelectPreset;
    18dc:	80 91 fb 01 	lds	r24, 0x01FB	; 0x8001fb <TempSelectPreset>
    18e0:	80 93 fa 01 	sts	0x01FA, r24	; 0x8001fa <LastTempSelectPreset>
}
    18e4:	0f 91       	pop	r16
    18e6:	ef 90       	pop	r14
    18e8:	08 95       	ret

000018ea <_Z11Timer0_Initv>:
#include "System.h"

void Timer0_Init()
{
	/* Setup Timer */
	TCCR0A |= (1 << WGM01);		// Set Timer to CTC mode (Clear Timer on Compare match)
    18ea:	84 b5       	in	r24, 0x24	; 36
    18ec:	82 60       	ori	r24, 0x02	; 2
    18ee:	84 bd       	out	0x24, r24	; 36
	TCNT0 = 0;					// Clear counter register
    18f0:	16 bc       	out	0x26, r1	; 38
	OCR0A = 155;				// Set Output Compare value (78125Hz / 156 = 500,8Hz (1,997ms))
    18f2:	8b e9       	ldi	r24, 0x9B	; 155
    18f4:	87 bd       	out	0x27, r24	; 39
	TIMSK0 |= (1 << OCIE0A);	// Output Compare A Match Interrupt Enable
    18f6:	ee e6       	ldi	r30, 0x6E	; 110
    18f8:	f0 e0       	ldi	r31, 0x00	; 0
    18fa:	80 81       	ld	r24, Z
    18fc:	82 60       	ori	r24, 0x02	; 2
    18fe:	80 83       	st	Z, r24
	
	/* Start Timer */
	TCCR0B |= (1 << CS02);		// Set clock prescaler to 256 (20MHz / 256 = 78125Hz)
    1900:	85 b5       	in	r24, 0x25	; 37
    1902:	84 60       	ori	r24, 0x04	; 4
    1904:	85 bd       	out	0x25, r24	; 37
    1906:	08 95       	ret

00001908 <_Z13Timer0_ms2cntm>:
}

uint32_t Timer0_ms2cnt(uint32_t ms)
{
    1908:	9b 01       	movw	r18, r22
    190a:	ac 01       	movw	r20, r24
	ms *= 1000;
	return (uint32_t)(ms / TIMER0_PERIOD_US);
    190c:	a8 ee       	ldi	r26, 0xE8	; 232
    190e:	b3 e0       	ldi	r27, 0x03	; 3
    1910:	0e 94 83 10 	call	0x2106	; 0x2106 <__muluhisi3>
    1914:	2d ec       	ldi	r18, 0xCD	; 205
    1916:	37 e0       	ldi	r19, 0x07	; 7
    1918:	40 e0       	ldi	r20, 0x00	; 0
    191a:	50 e0       	ldi	r21, 0x00	; 0
    191c:	0e 94 5b 10 	call	0x20b6	; 0x20b6 <__udivmodsi4>
}
    1920:	ca 01       	movw	r24, r20
    1922:	b9 01       	movw	r22, r18
    1924:	08 95       	ret

00001926 <__vector_16>:

/* Timer0 Compare A Match Interrupt Service Routine */
ISR(TIMER0_COMPA_vect)
{
    1926:	1f 92       	push	r1
    1928:	0f 92       	push	r0
    192a:	0f b6       	in	r0, 0x3f	; 63
    192c:	0f 92       	push	r0
    192e:	11 24       	eor	r1, r1
    1930:	2f 93       	push	r18
    1932:	3f 93       	push	r19
    1934:	8f 93       	push	r24
    1936:	9f 93       	push	r25
	/* Overflow counter to reset parameter if user doesn't commit */
	if (System_TempSelectOvfCnt)
    1938:	80 91 04 02 	lds	r24, 0x0204	; 0x800204 <System_TempSelectOvfCnt>
    193c:	90 91 05 02 	lds	r25, 0x0205	; 0x800205 <System_TempSelectOvfCnt+0x1>
    1940:	89 2b       	or	r24, r25
    1942:	99 f0       	breq	.+38     	; 0x196a <__vector_16+0x44>
	{
		if (++System_TempSelectOvfCnt > SYSTEM_TEMP_SELECT_TIMEOUT)
    1944:	80 91 04 02 	lds	r24, 0x0204	; 0x800204 <System_TempSelectOvfCnt>
    1948:	90 91 05 02 	lds	r25, 0x0205	; 0x800205 <System_TempSelectOvfCnt+0x1>
    194c:	01 96       	adiw	r24, 0x01	; 1
    194e:	90 93 05 02 	sts	0x0205, r25	; 0x800205 <System_TempSelectOvfCnt+0x1>
    1952:	80 93 04 02 	sts	0x0204, r24	; 0x800204 <System_TempSelectOvfCnt>
    1956:	8d 3d       	cpi	r24, 0xDD	; 221
    1958:	95 40       	sbci	r25, 0x05	; 5
    195a:	38 f0       	brcs	.+14     	; 0x196a <__vector_16+0x44>
		{
			System_TempSelectOvfCnt = 0;
    195c:	10 92 05 02 	sts	0x0205, r1	; 0x800205 <System_TempSelectOvfCnt+0x1>
    1960:	10 92 04 02 	sts	0x0204, r1	; 0x800204 <System_TempSelectOvfCnt>
			System_TempSelectFlag = true;
    1964:	81 e0       	ldi	r24, 0x01	; 1
    1966:	80 93 03 02 	sts	0x0203, r24	; 0x800203 <System_TempSelectFlag>
		}
	}
	
	/* Overflow counter to shortly blank LEDs to mark selection */
	if (System_MarkSelectionOvfCnt)
    196a:	80 91 01 02 	lds	r24, 0x0201	; 0x800201 <System_MarkSelectionOvfCnt>
    196e:	90 91 02 02 	lds	r25, 0x0202	; 0x800202 <System_MarkSelectionOvfCnt+0x1>
    1972:	89 2b       	or	r24, r25
    1974:	99 f0       	breq	.+38     	; 0x199c <__vector_16+0x76>
	{
		if (++System_MarkSelectionOvfCnt > SYSTEM_MARK_SELECTION_TIMEOUT)
    1976:	80 91 01 02 	lds	r24, 0x0201	; 0x800201 <System_MarkSelectionOvfCnt>
    197a:	90 91 02 02 	lds	r25, 0x0202	; 0x800202 <System_MarkSelectionOvfCnt+0x1>
    197e:	01 96       	adiw	r24, 0x01	; 1
    1980:	90 93 02 02 	sts	0x0202, r25	; 0x800202 <System_MarkSelectionOvfCnt+0x1>
    1984:	80 93 01 02 	sts	0x0201, r24	; 0x800201 <System_MarkSelectionOvfCnt>
    1988:	87 39       	cpi	r24, 0x97	; 151
    198a:	91 05       	cpc	r25, r1
    198c:	38 f0       	brcs	.+14     	; 0x199c <__vector_16+0x76>
		{
			System_MarkSelectionOvfCnt = 0;
    198e:	10 92 02 02 	sts	0x0202, r1	; 0x800202 <System_MarkSelectionOvfCnt+0x1>
    1992:	10 92 01 02 	sts	0x0201, r1	; 0x800201 <System_MarkSelectionOvfCnt>
			System_MarkSelectionFlag = true;
    1996:	81 e0       	ldi	r24, 0x01	; 1
    1998:	80 93 00 02 	sts	0x0200, r24	; 0x800200 <System_MarkSelectionFlag>
		}
	}
	
	/* Overflow counter for delaying transmit to pedal */
	if (PedalCom_DelayTXOvfCnt)
    199c:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <PedalCom_DelayTXOvfCnt>
    19a0:	88 23       	and	r24, r24
    19a2:	61 f0       	breq	.+24     	; 0x19bc <__vector_16+0x96>
	{
		if (++PedalCom_DelayTXOvfCnt > PEDALCOM_DELAY_TX_TIMEOUT)
    19a4:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <PedalCom_DelayTXOvfCnt>
    19a8:	8f 5f       	subi	r24, 0xFF	; 255
    19aa:	80 93 c3 01 	sts	0x01C3, r24	; 0x8001c3 <PedalCom_DelayTXOvfCnt>
    19ae:	84 30       	cpi	r24, 0x04	; 4
    19b0:	28 f0       	brcs	.+10     	; 0x19bc <__vector_16+0x96>
		{
			PedalCom_DelayTXOvfCnt = 0;	// Stop overflow counter
    19b2:	10 92 c3 01 	sts	0x01C3, r1	; 0x8001c3 <PedalCom_DelayTXOvfCnt>
			PedalCom_DelayTxFlag = true;
    19b6:	81 e0       	ldi	r24, 0x01	; 1
    19b8:	80 93 c4 01 	sts	0x01C4, r24	; 0x8001c4 <PedalCom_DelayTxFlag>
		}
	}

	/* Overflow counter for Pedal response timeout and heartbeat */
	if (++PedalCom_ResponseTimeoutOvfCnt > PEDALCOM_RESPONSE_TIMEOUT)
    19bc:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <PedalCom_ResponseTimeoutOvfCnt>
    19c0:	90 91 04 01 	lds	r25, 0x0104	; 0x800104 <PedalCom_ResponseTimeoutOvfCnt+0x1>
    19c4:	01 96       	adiw	r24, 0x01	; 1
    19c6:	90 93 04 01 	sts	0x0104, r25	; 0x800104 <PedalCom_ResponseTimeoutOvfCnt+0x1>
    19ca:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <PedalCom_ResponseTimeoutOvfCnt>
    19ce:	89 3e       	cpi	r24, 0xE9	; 233
    19d0:	93 40       	sbci	r25, 0x03	; 3
    19d2:	40 f0       	brcs	.+16     	; 0x19e4 <__vector_16+0xbe>
	{
		PedalCom_ResponseTimeoutOvfCnt = 1;	// Reset overflow counter
    19d4:	81 e0       	ldi	r24, 0x01	; 1
    19d6:	90 e0       	ldi	r25, 0x00	; 0
    19d8:	90 93 04 01 	sts	0x0104, r25	; 0x800104 <PedalCom_ResponseTimeoutOvfCnt+0x1>
    19dc:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <PedalCom_ResponseTimeoutOvfCnt>
		PedalCom_ResponseTimeoutFlag = true;
    19e0:	80 93 c2 01 	sts	0x01C2, r24	; 0x8001c2 <PedalCom_ResponseTimeoutFlag>
	}
	
	/* Overflow counter for multiplexing 3x7-segment display */
	if (++SP10281_OvfCnt >= SP10281_OVF_RESET)
    19e4:	80 91 ca 01 	lds	r24, 0x01CA	; 0x8001ca <SP10281_OvfCnt>
    19e8:	8f 5f       	subi	r24, 0xFF	; 255
    19ea:	80 93 ca 01 	sts	0x01CA, r24	; 0x8001ca <SP10281_OvfCnt>
    19ee:	83 30       	cpi	r24, 0x03	; 3
    19f0:	28 f0       	brcs	.+10     	; 0x19fc <__vector_16+0xd6>
	{
		SP10281_OvfCnt = 0;		// Stop overflow counter
    19f2:	10 92 ca 01 	sts	0x01CA, r1	; 0x8001ca <SP10281_OvfCnt>
		SP10281_OvfFlag = 1;
    19f6:	81 e0       	ldi	r24, 0x01	; 1
    19f8:	80 93 c9 01 	sts	0x01C9, r24	; 0x8001c9 <SP10281_OvfFlag>
	}
	
	/* Overflow counter for blinking UI LEDs */
	if (++(MCP_Output::AutoToggle_OvfCnt) > MCP_Output::AutoToggle_Timeout)
    19fc:	80 91 41 01 	lds	r24, 0x0141	; 0x800141 <_ZN10MCP_Output17AutoToggle_OvfCntE>
    1a00:	90 91 42 01 	lds	r25, 0x0142	; 0x800142 <_ZN10MCP_Output17AutoToggle_OvfCntE+0x1>
    1a04:	01 96       	adiw	r24, 0x01	; 1
    1a06:	90 93 42 01 	sts	0x0142, r25	; 0x800142 <_ZN10MCP_Output17AutoToggle_OvfCntE+0x1>
    1a0a:	80 93 41 01 	sts	0x0141, r24	; 0x800141 <_ZN10MCP_Output17AutoToggle_OvfCntE>
    1a0e:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <_ZN10MCP_Output18AutoToggle_TimeoutE>
    1a12:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <_ZN10MCP_Output18AutoToggle_TimeoutE+0x1>
    1a16:	28 17       	cp	r18, r24
    1a18:	39 07       	cpc	r19, r25
    1a1a:	78 f4       	brcc	.+30     	; 0x1a3a <__vector_16+0x114>
	{
		MCP_Output::AutoToggle_OvfCnt = 0;		// Reset overflow counter
    1a1c:	10 92 42 01 	sts	0x0142, r1	; 0x800142 <_ZN10MCP_Output17AutoToggle_OvfCntE+0x1>
    1a20:	10 92 41 01 	sts	0x0141, r1	; 0x800141 <_ZN10MCP_Output17AutoToggle_OvfCntE>
		
		if (MCP_Output::AutoToggle_PortA || MCP_Output::AutoToggle_PortB)
    1a24:	80 91 3f 01 	lds	r24, 0x013F	; 0x80013f <_ZN10MCP_Output16AutoToggle_PortAE>
    1a28:	81 11       	cpse	r24, r1
    1a2a:	04 c0       	rjmp	.+8      	; 0x1a34 <__vector_16+0x10e>
    1a2c:	80 91 3e 01 	lds	r24, 0x013E	; 0x80013e <__data_end>
    1a30:	88 23       	and	r24, r24
    1a32:	19 f0       	breq	.+6      	; 0x1a3a <__vector_16+0x114>
		{
			MCP_Output::AutoToggle_Flag = 1;
    1a34:	81 e0       	ldi	r24, 0x01	; 1
    1a36:	80 93 40 01 	sts	0x0140, r24	; 0x800140 <_ZN10MCP_Output15AutoToggle_FlagE>
		}
	}
	
	/* Overflow counter for rotary encoder handling */
	if (RotaryEncoder_OvfCnt)
    1a3a:	80 91 c6 01 	lds	r24, 0x01C6	; 0x8001c6 <RotaryEncoder_OvfCnt>
    1a3e:	90 91 c7 01 	lds	r25, 0x01C7	; 0x8001c7 <RotaryEncoder_OvfCnt+0x1>
    1a42:	89 2b       	or	r24, r25
    1a44:	b9 f1       	breq	.+110    	; 0x1ab4 <__vector_16+0x18e>
	{
		RotaryEncoder_OvfCnt++;
    1a46:	80 91 c6 01 	lds	r24, 0x01C6	; 0x8001c6 <RotaryEncoder_OvfCnt>
    1a4a:	90 91 c7 01 	lds	r25, 0x01C7	; 0x8001c7 <RotaryEncoder_OvfCnt+0x1>
    1a4e:	01 96       	adiw	r24, 0x01	; 1
    1a50:	90 93 c7 01 	sts	0x01C7, r25	; 0x8001c7 <RotaryEncoder_OvfCnt+0x1>
    1a54:	80 93 c6 01 	sts	0x01C6, r24	; 0x8001c6 <RotaryEncoder_OvfCnt>
		
		if (RotaryEncoder_OvfCnt > ROT_ENC_LONG_PRESS_OVF)
    1a58:	80 91 c6 01 	lds	r24, 0x01C6	; 0x8001c6 <RotaryEncoder_OvfCnt>
    1a5c:	90 91 c7 01 	lds	r25, 0x01C7	; 0x8001c7 <RotaryEncoder_OvfCnt+0x1>
    1a60:	89 35       	cpi	r24, 0x59	; 89
    1a62:	92 40       	sbci	r25, 0x02	; 2
    1a64:	68 f0       	brcs	.+26     	; 0x1a80 <__vector_16+0x15a>
		{
			/* If button is still pressed */
			if ( GPIO_ROT_ENC_PIN & GPIO_ROT_ENC_PRESS_MASK )
    1a66:	1a 9b       	sbis	0x03, 2	; 3
    1a68:	04 c0       	rjmp	.+8      	; 0x1a72 <__vector_16+0x14c>
			{
				RotEnc_State = LONG_PRESS;
    1a6a:	85 e0       	ldi	r24, 0x05	; 5
    1a6c:	80 93 c5 01 	sts	0x01C5, r24	; 0x8001c5 <RotEnc_State>
    1a70:	02 c0       	rjmp	.+4      	; 0x1a76 <__vector_16+0x150>
			}
			else
			{
				RotEnc_State = IDLE;
    1a72:	10 92 c5 01 	sts	0x01C5, r1	; 0x8001c5 <RotEnc_State>
			}
			
			RotaryEncoder_OvfCnt = 0;		// Stop overflow counter
    1a76:	10 92 c7 01 	sts	0x01C7, r1	; 0x8001c7 <RotaryEncoder_OvfCnt+0x1>
    1a7a:	10 92 c6 01 	sts	0x01C6, r1	; 0x8001c6 <RotaryEncoder_OvfCnt>
    1a7e:	1a c0       	rjmp	.+52     	; 0x1ab4 <__vector_16+0x18e>
		}
		else if (RotaryEncoder_OvfCnt > ROT_ENC_PRESS_OVF && RotEnc_State == IDLE)
    1a80:	80 91 c6 01 	lds	r24, 0x01C6	; 0x8001c6 <RotaryEncoder_OvfCnt>
    1a84:	90 91 c7 01 	lds	r25, 0x01C7	; 0x8001c7 <RotaryEncoder_OvfCnt+0x1>
    1a88:	cd 97       	sbiw	r24, 0x3d	; 61
    1a8a:	a0 f0       	brcs	.+40     	; 0x1ab4 <__vector_16+0x18e>
    1a8c:	80 91 c5 01 	lds	r24, 0x01C5	; 0x8001c5 <RotEnc_State>
    1a90:	88 23       	and	r24, r24
    1a92:	69 f0       	breq	.+26     	; 0x1aae <__vector_16+0x188>
    1a94:	0f c0       	rjmp	.+30     	; 0x1ab4 <__vector_16+0x18e>
		{
			/* If button is no longer pressed */
			if ( !(GPIO_ROT_ENC_PIN & GPIO_ROT_ENC_PRESS_MASK) )
			{
				RotEnc_State = SHORT_PRESS;
    1a96:	83 e0       	ldi	r24, 0x03	; 3
    1a98:	80 93 c5 01 	sts	0x01C5, r24	; 0x8001c5 <RotEnc_State>
				RotaryEncoder_OvfCnt = 0;	// Stop overflow counter
    1a9c:	10 92 c7 01 	sts	0x01C7, r1	; 0x8001c7 <RotaryEncoder_OvfCnt+0x1>
    1aa0:	10 92 c6 01 	sts	0x01C6, r1	; 0x8001c6 <RotaryEncoder_OvfCnt>
    1aa4:	07 c0       	rjmp	.+14     	; 0x1ab4 <__vector_16+0x18e>
			}
			else
			RotEnc_State = PRESSED;
    1aa6:	84 e0       	ldi	r24, 0x04	; 4
    1aa8:	80 93 c5 01 	sts	0x01C5, r24	; 0x8001c5 <RotEnc_State>

		}
	}
    1aac:	03 c0       	rjmp	.+6      	; 0x1ab4 <__vector_16+0x18e>
			RotaryEncoder_OvfCnt = 0;		// Stop overflow counter
		}
		else if (RotaryEncoder_OvfCnt > ROT_ENC_PRESS_OVF && RotEnc_State == IDLE)
		{
			/* If button is no longer pressed */
			if ( !(GPIO_ROT_ENC_PIN & GPIO_ROT_ENC_PRESS_MASK) )
    1aae:	1a 99       	sbic	0x03, 2	; 3
    1ab0:	fa cf       	rjmp	.-12     	; 0x1aa6 <__vector_16+0x180>
    1ab2:	f1 cf       	rjmp	.-30     	; 0x1a96 <__vector_16+0x170>
			else
			RotEnc_State = PRESSED;

		}
	}
    1ab4:	9f 91       	pop	r25
    1ab6:	8f 91       	pop	r24
    1ab8:	3f 91       	pop	r19
    1aba:	2f 91       	pop	r18
    1abc:	0f 90       	pop	r0
    1abe:	0f be       	out	0x3f, r0	; 63
    1ac0:	0f 90       	pop	r0
    1ac2:	1f 90       	pop	r1
    1ac4:	18 95       	reti

00001ac6 <_Z10UART0_Initjhh>:
    1ac6:	cf 93       	push	r28
    1ac8:	df 93       	push	r29
    1aca:	d6 2f       	mov	r29, r22
    1acc:	c4 2f       	mov	r28, r20
    1ace:	51 9a       	sbi	0x0a, 1	; 10
    1ad0:	59 9a       	sbi	0x0b, 1	; 11
    1ad2:	10 92 4f 02 	sts	0x024F, r1	; 0x80024f <_ZL12UART0_TxHead>
    1ad6:	10 92 4e 02 	sts	0x024E, r1	; 0x80024e <_ZL12UART0_TxTail>
    1ada:	10 92 4d 02 	sts	0x024D, r1	; 0x80024d <_ZL12UART0_RxHead>
    1ade:	10 92 4c 02 	sts	0x024C, r1	; 0x80024c <_ZL12UART0_RxTail>
    1ae2:	a0 e0       	ldi	r26, 0x00	; 0
    1ae4:	b0 e0       	ldi	r27, 0x00	; 0
    1ae6:	88 0f       	add	r24, r24
    1ae8:	99 1f       	adc	r25, r25
    1aea:	aa 1f       	adc	r26, r26
    1aec:	bb 1f       	adc	r27, r27
    1aee:	88 0f       	add	r24, r24
    1af0:	99 1f       	adc	r25, r25
    1af2:	aa 1f       	adc	r26, r26
    1af4:	bb 1f       	adc	r27, r27
    1af6:	9c 01       	movw	r18, r24
    1af8:	ad 01       	movw	r20, r26
    1afa:	22 0f       	add	r18, r18
    1afc:	33 1f       	adc	r19, r19
    1afe:	44 1f       	adc	r20, r20
    1b00:	55 1f       	adc	r21, r21
    1b02:	22 0f       	add	r18, r18
    1b04:	33 1f       	adc	r19, r19
    1b06:	44 1f       	adc	r20, r20
    1b08:	55 1f       	adc	r21, r21
    1b0a:	60 e0       	ldi	r22, 0x00	; 0
    1b0c:	7d e2       	ldi	r23, 0x2D	; 45
    1b0e:	81 e3       	ldi	r24, 0x31	; 49
    1b10:	91 e0       	ldi	r25, 0x01	; 1
    1b12:	0e 94 5b 10 	call	0x20b6	; 0x20b6 <__udivmodsi4>
    1b16:	21 50       	subi	r18, 0x01	; 1
    1b18:	31 09       	sbc	r19, r1
    1b1a:	30 93 c5 00 	sts	0x00C5, r19	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
    1b1e:	20 93 c4 00 	sts	0x00C4, r18	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
    1b22:	e2 ec       	ldi	r30, 0xC2	; 194
    1b24:	f0 e0       	ldi	r31, 0x00	; 0
    1b26:	80 81       	ld	r24, Z
    1b28:	8f 73       	andi	r24, 0x3F	; 63
    1b2a:	80 83       	st	Z, r24
    1b2c:	d2 30       	cpi	r29, 0x02	; 2
    1b2e:	21 f4       	brne	.+8      	; 0x1b38 <_Z10UART0_Initjhh+0x72>
    1b30:	80 81       	ld	r24, Z
    1b32:	88 60       	ori	r24, 0x08	; 8
    1b34:	80 83       	st	Z, r24
    1b36:	05 c0       	rjmp	.+10     	; 0x1b42 <_Z10UART0_Initjhh+0x7c>
    1b38:	e2 ec       	ldi	r30, 0xC2	; 194
    1b3a:	f0 e0       	ldi	r31, 0x00	; 0
    1b3c:	80 81       	ld	r24, Z
    1b3e:	87 7f       	andi	r24, 0xF7	; 247
    1b40:	80 83       	st	Z, r24
    1b42:	c2 30       	cpi	r28, 0x02	; 2
    1b44:	49 f4       	brne	.+18     	; 0x1b58 <_Z10UART0_Initjhh+0x92>
    1b46:	e2 ec       	ldi	r30, 0xC2	; 194
    1b48:	f0 e0       	ldi	r31, 0x00	; 0
    1b4a:	80 81       	ld	r24, Z
    1b4c:	8f 7e       	andi	r24, 0xEF	; 239
    1b4e:	80 83       	st	Z, r24
    1b50:	80 81       	ld	r24, Z
    1b52:	80 62       	ori	r24, 0x20	; 32
    1b54:	80 83       	st	Z, r24
    1b56:	0d c0       	rjmp	.+26     	; 0x1b72 <_Z10UART0_Initjhh+0xac>
    1b58:	c3 30       	cpi	r28, 0x03	; 3
    1b5a:	31 f4       	brne	.+12     	; 0x1b68 <_Z10UART0_Initjhh+0xa2>
    1b5c:	e2 ec       	ldi	r30, 0xC2	; 194
    1b5e:	f0 e0       	ldi	r31, 0x00	; 0
    1b60:	80 81       	ld	r24, Z
    1b62:	80 63       	ori	r24, 0x30	; 48
    1b64:	80 83       	st	Z, r24
    1b66:	05 c0       	rjmp	.+10     	; 0x1b72 <_Z10UART0_Initjhh+0xac>
    1b68:	e2 ec       	ldi	r30, 0xC2	; 194
    1b6a:	f0 e0       	ldi	r31, 0x00	; 0
    1b6c:	80 81       	ld	r24, Z
    1b6e:	8f 7c       	andi	r24, 0xCF	; 207
    1b70:	80 83       	st	Z, r24
    1b72:	e2 ec       	ldi	r30, 0xC2	; 194
    1b74:	f0 e0       	ldi	r31, 0x00	; 0
    1b76:	80 81       	ld	r24, Z
    1b78:	86 60       	ori	r24, 0x06	; 6
    1b7a:	80 83       	st	Z, r24
    1b7c:	e1 ec       	ldi	r30, 0xC1	; 193
    1b7e:	f0 e0       	ldi	r31, 0x00	; 0
    1b80:	80 81       	ld	r24, Z
    1b82:	80 6a       	ori	r24, 0xA0	; 160
    1b84:	80 83       	st	Z, r24
    1b86:	80 81       	ld	r24, Z
    1b88:	88 61       	ori	r24, 0x18	; 24
    1b8a:	80 83       	st	Z, r24
    1b8c:	df 91       	pop	r29
    1b8e:	cf 91       	pop	r28
    1b90:	08 95       	ret

00001b92 <_Z13UART0_GetCharv>:
    1b92:	90 91 4d 02 	lds	r25, 0x024D	; 0x80024d <_ZL12UART0_RxHead>
    1b96:	80 91 4c 02 	lds	r24, 0x024C	; 0x80024c <_ZL12UART0_RxTail>
    1b9a:	98 17       	cp	r25, r24
    1b9c:	91 f0       	breq	.+36     	; 0x1bc2 <_Z13UART0_GetCharv+0x30>
    1b9e:	e0 91 4c 02 	lds	r30, 0x024C	; 0x80024c <_ZL12UART0_RxTail>
    1ba2:	ef 5f       	subi	r30, 0xFF	; 255
    1ba4:	ef 71       	andi	r30, 0x1F	; 31
    1ba6:	e0 93 4c 02 	sts	0x024C, r30	; 0x80024c <_ZL12UART0_RxTail>
    1baa:	f0 e0       	ldi	r31, 0x00	; 0
    1bac:	e0 5b       	subi	r30, 0xB0	; 176
    1bae:	fd 4f       	sbci	r31, 0xFD	; 253
    1bb0:	20 81       	ld	r18, Z
    1bb2:	80 91 4b 02 	lds	r24, 0x024B	; 0x80024b <_ZL17UART0_LastRxError>
    1bb6:	90 e0       	ldi	r25, 0x00	; 0
    1bb8:	98 2f       	mov	r25, r24
    1bba:	88 27       	eor	r24, r24
    1bbc:	82 0f       	add	r24, r18
    1bbe:	91 1d       	adc	r25, r1
    1bc0:	08 95       	ret
    1bc2:	80 e0       	ldi	r24, 0x00	; 0
    1bc4:	91 e0       	ldi	r25, 0x01	; 1
    1bc6:	08 95       	ret

00001bc8 <_Z15UART0_Availablev>:
    1bc8:	80 91 4d 02 	lds	r24, 0x024D	; 0x80024d <_ZL12UART0_RxHead>
    1bcc:	20 91 4c 02 	lds	r18, 0x024C	; 0x80024c <_ZL12UART0_RxTail>
    1bd0:	90 e0       	ldi	r25, 0x00	; 0
    1bd2:	4f 96       	adiw	r24, 0x1f	; 31
    1bd4:	82 1b       	sub	r24, r18
    1bd6:	91 09       	sbc	r25, r1
    1bd8:	6f e1       	ldi	r22, 0x1F	; 31
    1bda:	70 e0       	ldi	r23, 0x00	; 0
    1bdc:	0e 94 47 10 	call	0x208e	; 0x208e <__divmodhi4>
    1be0:	08 95       	ret

00001be2 <_Z15UART0_QueueCharh>:
    1be2:	90 91 4f 02 	lds	r25, 0x024F	; 0x80024f <_ZL12UART0_TxHead>
    1be6:	9f 5f       	subi	r25, 0xFF	; 255
    1be8:	9f 71       	andi	r25, 0x1F	; 31
    1bea:	20 91 4e 02 	lds	r18, 0x024E	; 0x80024e <_ZL12UART0_TxTail>
    1bee:	92 17       	cp	r25, r18
    1bf0:	51 f0       	breq	.+20     	; 0x1c06 <_Z15UART0_QueueCharh+0x24>
    1bf2:	e9 2f       	mov	r30, r25
    1bf4:	f0 e0       	ldi	r31, 0x00	; 0
    1bf6:	e0 59       	subi	r30, 0x90	; 144
    1bf8:	fd 4f       	sbci	r31, 0xFD	; 253
    1bfa:	80 83       	st	Z, r24
    1bfc:	90 93 4f 02 	sts	0x024F, r25	; 0x80024f <_ZL12UART0_TxHead>
    1c00:	81 e0       	ldi	r24, 0x01	; 1
    1c02:	90 e0       	ldi	r25, 0x00	; 0
    1c04:	08 95       	ret
    1c06:	80 e0       	ldi	r24, 0x00	; 0
    1c08:	90 e0       	ldi	r25, 0x00	; 0
    1c0a:	08 95       	ret

00001c0c <_Z14UART0_PutQueuev>:
    1c0c:	e1 ec       	ldi	r30, 0xC1	; 193
    1c0e:	f0 e0       	ldi	r31, 0x00	; 0
    1c10:	80 81       	ld	r24, Z
    1c12:	80 62       	ori	r24, 0x20	; 32
    1c14:	80 83       	st	Z, r24
    1c16:	08 95       	ret

00001c18 <__vector_20>:
    1c18:	1f 92       	push	r1
    1c1a:	0f 92       	push	r0
    1c1c:	0f b6       	in	r0, 0x3f	; 63
    1c1e:	0f 92       	push	r0
    1c20:	11 24       	eor	r1, r1
    1c22:	2f 93       	push	r18
    1c24:	8f 93       	push	r24
    1c26:	9f 93       	push	r25
    1c28:	ef 93       	push	r30
    1c2a:	ff 93       	push	r31
    1c2c:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
    1c30:	20 91 c6 00 	lds	r18, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
    1c34:	87 70       	andi	r24, 0x07	; 7
    1c36:	e0 91 4d 02 	lds	r30, 0x024D	; 0x80024d <_ZL12UART0_RxHead>
    1c3a:	ef 5f       	subi	r30, 0xFF	; 255
    1c3c:	ef 71       	andi	r30, 0x1F	; 31
    1c3e:	90 91 4c 02 	lds	r25, 0x024C	; 0x80024c <_ZL12UART0_RxTail>
    1c42:	e9 17       	cp	r30, r25
    1c44:	39 f0       	breq	.+14     	; 0x1c54 <__vector_20+0x3c>
    1c46:	e0 93 4d 02 	sts	0x024D, r30	; 0x80024d <_ZL12UART0_RxHead>
    1c4a:	f0 e0       	ldi	r31, 0x00	; 0
    1c4c:	e0 5b       	subi	r30, 0xB0	; 176
    1c4e:	fd 4f       	sbci	r31, 0xFD	; 253
    1c50:	20 83       	st	Z, r18
    1c52:	01 c0       	rjmp	.+2      	; 0x1c56 <__vector_20+0x3e>
    1c54:	82 e0       	ldi	r24, 0x02	; 2
    1c56:	80 93 4b 02 	sts	0x024B, r24	; 0x80024b <_ZL17UART0_LastRxError>
    1c5a:	ff 91       	pop	r31
    1c5c:	ef 91       	pop	r30
    1c5e:	9f 91       	pop	r25
    1c60:	8f 91       	pop	r24
    1c62:	2f 91       	pop	r18
    1c64:	0f 90       	pop	r0
    1c66:	0f be       	out	0x3f, r0	; 63
    1c68:	0f 90       	pop	r0
    1c6a:	1f 90       	pop	r1
    1c6c:	18 95       	reti

00001c6e <__vector_21>:
    1c6e:	1f 92       	push	r1
    1c70:	0f 92       	push	r0
    1c72:	0f b6       	in	r0, 0x3f	; 63
    1c74:	0f 92       	push	r0
    1c76:	11 24       	eor	r1, r1
    1c78:	8f 93       	push	r24
    1c7a:	9f 93       	push	r25
    1c7c:	ef 93       	push	r30
    1c7e:	ff 93       	push	r31
    1c80:	90 91 4f 02 	lds	r25, 0x024F	; 0x80024f <_ZL12UART0_TxHead>
    1c84:	80 91 4e 02 	lds	r24, 0x024E	; 0x80024e <_ZL12UART0_TxTail>
    1c88:	98 17       	cp	r25, r24
    1c8a:	69 f0       	breq	.+26     	; 0x1ca6 <__vector_21+0x38>
    1c8c:	e0 91 4e 02 	lds	r30, 0x024E	; 0x80024e <_ZL12UART0_TxTail>
    1c90:	ef 5f       	subi	r30, 0xFF	; 255
    1c92:	ef 71       	andi	r30, 0x1F	; 31
    1c94:	e0 93 4e 02 	sts	0x024E, r30	; 0x80024e <_ZL12UART0_TxTail>
    1c98:	f0 e0       	ldi	r31, 0x00	; 0
    1c9a:	e0 59       	subi	r30, 0x90	; 144
    1c9c:	fd 4f       	sbci	r31, 0xFD	; 253
    1c9e:	80 81       	ld	r24, Z
    1ca0:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
    1ca4:	05 c0       	rjmp	.+10     	; 0x1cb0 <__vector_21+0x42>
    1ca6:	e1 ec       	ldi	r30, 0xC1	; 193
    1ca8:	f0 e0       	ldi	r31, 0x00	; 0
    1caa:	80 81       	ld	r24, Z
    1cac:	8f 7d       	andi	r24, 0xDF	; 223
    1cae:	80 83       	st	Z, r24
    1cb0:	ff 91       	pop	r31
    1cb2:	ef 91       	pop	r30
    1cb4:	9f 91       	pop	r25
    1cb6:	8f 91       	pop	r24
    1cb8:	0f 90       	pop	r0
    1cba:	0f be       	out	0x3f, r0	; 63
    1cbc:	0f 90       	pop	r0
    1cbe:	1f 90       	pop	r1
    1cc0:	18 95       	reti

00001cc2 <_Z10UART1_Initjhh>:
    1cc2:	cf 93       	push	r28
    1cc4:	df 93       	push	r29
    1cc6:	d6 2f       	mov	r29, r22
    1cc8:	c4 2f       	mov	r28, r20
    1cca:	53 9a       	sbi	0x0a, 3	; 10
    1ccc:	5b 9a       	sbi	0x0b, 3	; 11
    1cce:	10 92 0a 02 	sts	0x020A, r1	; 0x80020a <_ZL12UART1_TxHead>
    1cd2:	10 92 09 02 	sts	0x0209, r1	; 0x800209 <_ZL12UART1_TxTail>
    1cd6:	10 92 08 02 	sts	0x0208, r1	; 0x800208 <_ZL12UART1_RxHead>
    1cda:	10 92 07 02 	sts	0x0207, r1	; 0x800207 <_ZL12UART1_RxTail>
    1cde:	a0 e0       	ldi	r26, 0x00	; 0
    1ce0:	b0 e0       	ldi	r27, 0x00	; 0
    1ce2:	88 0f       	add	r24, r24
    1ce4:	99 1f       	adc	r25, r25
    1ce6:	aa 1f       	adc	r26, r26
    1ce8:	bb 1f       	adc	r27, r27
    1cea:	88 0f       	add	r24, r24
    1cec:	99 1f       	adc	r25, r25
    1cee:	aa 1f       	adc	r26, r26
    1cf0:	bb 1f       	adc	r27, r27
    1cf2:	9c 01       	movw	r18, r24
    1cf4:	ad 01       	movw	r20, r26
    1cf6:	22 0f       	add	r18, r18
    1cf8:	33 1f       	adc	r19, r19
    1cfa:	44 1f       	adc	r20, r20
    1cfc:	55 1f       	adc	r21, r21
    1cfe:	22 0f       	add	r18, r18
    1d00:	33 1f       	adc	r19, r19
    1d02:	44 1f       	adc	r20, r20
    1d04:	55 1f       	adc	r21, r21
    1d06:	60 e0       	ldi	r22, 0x00	; 0
    1d08:	7d e2       	ldi	r23, 0x2D	; 45
    1d0a:	81 e3       	ldi	r24, 0x31	; 49
    1d0c:	91 e0       	ldi	r25, 0x01	; 1
    1d0e:	0e 94 5b 10 	call	0x20b6	; 0x20b6 <__udivmodsi4>
    1d12:	21 50       	subi	r18, 0x01	; 1
    1d14:	31 09       	sbc	r19, r1
    1d16:	30 93 cd 00 	sts	0x00CD, r19	; 0x8000cd <__TEXT_REGION_LENGTH__+0x7e00cd>
    1d1a:	20 93 cc 00 	sts	0x00CC, r18	; 0x8000cc <__TEXT_REGION_LENGTH__+0x7e00cc>
    1d1e:	ea ec       	ldi	r30, 0xCA	; 202
    1d20:	f0 e0       	ldi	r31, 0x00	; 0
    1d22:	80 81       	ld	r24, Z
    1d24:	8f 73       	andi	r24, 0x3F	; 63
    1d26:	80 83       	st	Z, r24
    1d28:	d2 30       	cpi	r29, 0x02	; 2
    1d2a:	21 f4       	brne	.+8      	; 0x1d34 <_Z10UART1_Initjhh+0x72>
    1d2c:	80 81       	ld	r24, Z
    1d2e:	88 60       	ori	r24, 0x08	; 8
    1d30:	80 83       	st	Z, r24
    1d32:	05 c0       	rjmp	.+10     	; 0x1d3e <_Z10UART1_Initjhh+0x7c>
    1d34:	ea ec       	ldi	r30, 0xCA	; 202
    1d36:	f0 e0       	ldi	r31, 0x00	; 0
    1d38:	80 81       	ld	r24, Z
    1d3a:	87 7f       	andi	r24, 0xF7	; 247
    1d3c:	80 83       	st	Z, r24
    1d3e:	c2 30       	cpi	r28, 0x02	; 2
    1d40:	31 f4       	brne	.+12     	; 0x1d4e <_Z10UART1_Initjhh+0x8c>
    1d42:	ea ec       	ldi	r30, 0xCA	; 202
    1d44:	f0 e0       	ldi	r31, 0x00	; 0
    1d46:	80 81       	ld	r24, Z
    1d48:	80 62       	ori	r24, 0x20	; 32
    1d4a:	80 83       	st	Z, r24
    1d4c:	0d c0       	rjmp	.+26     	; 0x1d68 <_Z10UART1_Initjhh+0xa6>
    1d4e:	c3 30       	cpi	r28, 0x03	; 3
    1d50:	31 f4       	brne	.+12     	; 0x1d5e <_Z10UART1_Initjhh+0x9c>
    1d52:	ea ec       	ldi	r30, 0xCA	; 202
    1d54:	f0 e0       	ldi	r31, 0x00	; 0
    1d56:	80 81       	ld	r24, Z
    1d58:	80 63       	ori	r24, 0x30	; 48
    1d5a:	80 83       	st	Z, r24
    1d5c:	05 c0       	rjmp	.+10     	; 0x1d68 <_Z10UART1_Initjhh+0xa6>
    1d5e:	ea ec       	ldi	r30, 0xCA	; 202
    1d60:	f0 e0       	ldi	r31, 0x00	; 0
    1d62:	80 81       	ld	r24, Z
    1d64:	8f 7c       	andi	r24, 0xCF	; 207
    1d66:	80 83       	st	Z, r24
    1d68:	ea ec       	ldi	r30, 0xCA	; 202
    1d6a:	f0 e0       	ldi	r31, 0x00	; 0
    1d6c:	80 81       	ld	r24, Z
    1d6e:	86 60       	ori	r24, 0x06	; 6
    1d70:	80 83       	st	Z, r24
    1d72:	e9 ec       	ldi	r30, 0xC9	; 201
    1d74:	f0 e0       	ldi	r31, 0x00	; 0
    1d76:	80 81       	ld	r24, Z
    1d78:	80 6a       	ori	r24, 0xA0	; 160
    1d7a:	80 83       	st	Z, r24
    1d7c:	80 81       	ld	r24, Z
    1d7e:	88 61       	ori	r24, 0x18	; 24
    1d80:	80 83       	st	Z, r24
    1d82:	df 91       	pop	r29
    1d84:	cf 91       	pop	r28
    1d86:	08 95       	ret

00001d88 <_Z13UART1_GetCharv>:
    1d88:	90 91 08 02 	lds	r25, 0x0208	; 0x800208 <_ZL12UART1_RxHead>
    1d8c:	80 91 07 02 	lds	r24, 0x0207	; 0x800207 <_ZL12UART1_RxTail>
    1d90:	98 17       	cp	r25, r24
    1d92:	91 f0       	breq	.+36     	; 0x1db8 <_Z13UART1_GetCharv+0x30>
    1d94:	e0 91 07 02 	lds	r30, 0x0207	; 0x800207 <_ZL12UART1_RxTail>
    1d98:	ef 5f       	subi	r30, 0xFF	; 255
    1d9a:	ef 71       	andi	r30, 0x1F	; 31
    1d9c:	e0 93 07 02 	sts	0x0207, r30	; 0x800207 <_ZL12UART1_RxTail>
    1da0:	f0 e0       	ldi	r31, 0x00	; 0
    1da2:	e5 5f       	subi	r30, 0xF5	; 245
    1da4:	fd 4f       	sbci	r31, 0xFD	; 253
    1da6:	20 81       	ld	r18, Z
    1da8:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <_ZL17UART1_LastRxError>
    1dac:	90 e0       	ldi	r25, 0x00	; 0
    1dae:	98 2f       	mov	r25, r24
    1db0:	88 27       	eor	r24, r24
    1db2:	82 0f       	add	r24, r18
    1db4:	91 1d       	adc	r25, r1
    1db6:	08 95       	ret
    1db8:	80 e0       	ldi	r24, 0x00	; 0
    1dba:	91 e0       	ldi	r25, 0x01	; 1
    1dbc:	08 95       	ret

00001dbe <_Z13UART1_PutCharh>:
    1dbe:	20 91 0a 02 	lds	r18, 0x020A	; 0x80020a <_ZL12UART1_TxHead>
    1dc2:	2f 5f       	subi	r18, 0xFF	; 255
    1dc4:	2f 71       	andi	r18, 0x1F	; 31
    1dc6:	90 91 09 02 	lds	r25, 0x0209	; 0x800209 <_ZL12UART1_TxTail>
    1dca:	29 17       	cp	r18, r25
    1dcc:	e1 f3       	breq	.-8      	; 0x1dc6 <_Z13UART1_PutCharh+0x8>
    1dce:	e2 2f       	mov	r30, r18
    1dd0:	f0 e0       	ldi	r31, 0x00	; 0
    1dd2:	e5 5d       	subi	r30, 0xD5	; 213
    1dd4:	fd 4f       	sbci	r31, 0xFD	; 253
    1dd6:	80 83       	st	Z, r24
    1dd8:	20 93 0a 02 	sts	0x020A, r18	; 0x80020a <_ZL12UART1_TxHead>
    1ddc:	e9 ec       	ldi	r30, 0xC9	; 201
    1dde:	f0 e0       	ldi	r31, 0x00	; 0
    1de0:	80 81       	ld	r24, Z
    1de2:	80 62       	ori	r24, 0x20	; 32
    1de4:	80 83       	st	Z, r24
    1de6:	08 95       	ret

00001de8 <_Z15UART1_PutStringPKc>:
    1de8:	cf 93       	push	r28
    1dea:	df 93       	push	r29
    1dec:	ec 01       	movw	r28, r24
    1dee:	88 81       	ld	r24, Y
    1df0:	88 23       	and	r24, r24
    1df2:	31 f0       	breq	.+12     	; 0x1e00 <_Z15UART1_PutStringPKc+0x18>
    1df4:	21 96       	adiw	r28, 0x01	; 1
    1df6:	0e 94 df 0e 	call	0x1dbe	; 0x1dbe <_Z13UART1_PutCharh>
    1dfa:	89 91       	ld	r24, Y+
    1dfc:	81 11       	cpse	r24, r1
    1dfe:	fb cf       	rjmp	.-10     	; 0x1df6 <_Z15UART1_PutStringPKc+0xe>
    1e00:	df 91       	pop	r29
    1e02:	cf 91       	pop	r28
    1e04:	08 95       	ret

00001e06 <_Z15UART1_Availablev>:
    1e06:	80 91 08 02 	lds	r24, 0x0208	; 0x800208 <_ZL12UART1_RxHead>
    1e0a:	20 91 07 02 	lds	r18, 0x0207	; 0x800207 <_ZL12UART1_RxTail>
    1e0e:	90 e0       	ldi	r25, 0x00	; 0
    1e10:	4f 96       	adiw	r24, 0x1f	; 31
    1e12:	82 1b       	sub	r24, r18
    1e14:	91 09       	sbc	r25, r1
    1e16:	6f e1       	ldi	r22, 0x1F	; 31
    1e18:	70 e0       	ldi	r23, 0x00	; 0
    1e1a:	0e 94 47 10 	call	0x208e	; 0x208e <__divmodhi4>
    1e1e:	08 95       	ret

00001e20 <__vector_28>:
    1e20:	1f 92       	push	r1
    1e22:	0f 92       	push	r0
    1e24:	0f b6       	in	r0, 0x3f	; 63
    1e26:	0f 92       	push	r0
    1e28:	11 24       	eor	r1, r1
    1e2a:	2f 93       	push	r18
    1e2c:	8f 93       	push	r24
    1e2e:	9f 93       	push	r25
    1e30:	ef 93       	push	r30
    1e32:	ff 93       	push	r31
    1e34:	80 91 c8 00 	lds	r24, 0x00C8	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7e00c8>
    1e38:	20 91 ce 00 	lds	r18, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7e00ce>
    1e3c:	87 70       	andi	r24, 0x07	; 7
    1e3e:	e0 91 08 02 	lds	r30, 0x0208	; 0x800208 <_ZL12UART1_RxHead>
    1e42:	ef 5f       	subi	r30, 0xFF	; 255
    1e44:	ef 71       	andi	r30, 0x1F	; 31
    1e46:	90 91 07 02 	lds	r25, 0x0207	; 0x800207 <_ZL12UART1_RxTail>
    1e4a:	e9 17       	cp	r30, r25
    1e4c:	39 f0       	breq	.+14     	; 0x1e5c <__vector_28+0x3c>
    1e4e:	e0 93 08 02 	sts	0x0208, r30	; 0x800208 <_ZL12UART1_RxHead>
    1e52:	f0 e0       	ldi	r31, 0x00	; 0
    1e54:	e5 5f       	subi	r30, 0xF5	; 245
    1e56:	fd 4f       	sbci	r31, 0xFD	; 253
    1e58:	20 83       	st	Z, r18
    1e5a:	01 c0       	rjmp	.+2      	; 0x1e5e <__vector_28+0x3e>
    1e5c:	82 e0       	ldi	r24, 0x02	; 2
    1e5e:	80 93 06 02 	sts	0x0206, r24	; 0x800206 <_ZL17UART1_LastRxError>
    1e62:	ff 91       	pop	r31
    1e64:	ef 91       	pop	r30
    1e66:	9f 91       	pop	r25
    1e68:	8f 91       	pop	r24
    1e6a:	2f 91       	pop	r18
    1e6c:	0f 90       	pop	r0
    1e6e:	0f be       	out	0x3f, r0	; 63
    1e70:	0f 90       	pop	r0
    1e72:	1f 90       	pop	r1
    1e74:	18 95       	reti

00001e76 <__vector_29>:
    1e76:	1f 92       	push	r1
    1e78:	0f 92       	push	r0
    1e7a:	0f b6       	in	r0, 0x3f	; 63
    1e7c:	0f 92       	push	r0
    1e7e:	11 24       	eor	r1, r1
    1e80:	8f 93       	push	r24
    1e82:	9f 93       	push	r25
    1e84:	ef 93       	push	r30
    1e86:	ff 93       	push	r31
    1e88:	90 91 0a 02 	lds	r25, 0x020A	; 0x80020a <_ZL12UART1_TxHead>
    1e8c:	80 91 09 02 	lds	r24, 0x0209	; 0x800209 <_ZL12UART1_TxTail>
    1e90:	98 17       	cp	r25, r24
    1e92:	69 f0       	breq	.+26     	; 0x1eae <__vector_29+0x38>
    1e94:	e0 91 09 02 	lds	r30, 0x0209	; 0x800209 <_ZL12UART1_TxTail>
    1e98:	ef 5f       	subi	r30, 0xFF	; 255
    1e9a:	ef 71       	andi	r30, 0x1F	; 31
    1e9c:	e0 93 09 02 	sts	0x0209, r30	; 0x800209 <_ZL12UART1_TxTail>
    1ea0:	f0 e0       	ldi	r31, 0x00	; 0
    1ea2:	e5 5d       	subi	r30, 0xD5	; 213
    1ea4:	fd 4f       	sbci	r31, 0xFD	; 253
    1ea6:	80 81       	ld	r24, Z
    1ea8:	80 93 ce 00 	sts	0x00CE, r24	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7e00ce>
    1eac:	05 c0       	rjmp	.+10     	; 0x1eb8 <__vector_29+0x42>
    1eae:	e9 ec       	ldi	r30, 0xC9	; 201
    1eb0:	f0 e0       	ldi	r31, 0x00	; 0
    1eb2:	80 81       	ld	r24, Z
    1eb4:	8f 7d       	andi	r24, 0xDF	; 223
    1eb6:	80 83       	st	Z, r24
    1eb8:	ff 91       	pop	r31
    1eba:	ef 91       	pop	r30
    1ebc:	9f 91       	pop	r25
    1ebe:	8f 91       	pop	r24
    1ec0:	0f 90       	pop	r0
    1ec2:	0f be       	out	0x3f, r0	; 63
    1ec4:	0f 90       	pop	r0
    1ec6:	1f 90       	pop	r1
    1ec8:	18 95       	reti

00001eca <_Z7UI_Initv>:

MCP_Output LoopRelays[NUMBER_OF_LOOPS];
MCP_Output CtrlSwitchRelays[NUMBER_OF_CTRL_SWITCHES];

void UI_Init()
{
    1eca:	ef 92       	push	r14
    1ecc:	ff 92       	push	r15
    1ece:	1f 93       	push	r17
    1ed0:	cf 93       	push	r28
    1ed2:	df 93       	push	r29
    1ed4:	cd b7       	in	r28, 0x3d	; 61
    1ed6:	de b7       	in	r29, 0x3e	; 62
    1ed8:	64 97       	sbiw	r28, 0x14	; 20
    1eda:	0f b6       	in	r0, 0x3f	; 63
    1edc:	f8 94       	cli
    1ede:	de bf       	out	0x3e, r29	; 62
    1ee0:	0f be       	out	0x3f, r0	; 63
    1ee2:	cd bf       	out	0x3d, r28	; 61
	/* Initialize outputs UI LEDs */
	ModeRunLED = MCP_Output(MCP23017_UI_LEDS_ADDR, PortB, (MCP23017_Pin)UI_MODE_RUN_LED_PIN);
    1ee4:	25 e0       	ldi	r18, 0x05	; 5
    1ee6:	41 e0       	ldi	r20, 0x01	; 1
    1ee8:	60 e0       	ldi	r22, 0x00	; 0
    1eea:	ce 01       	movw	r24, r28
    1eec:	41 96       	adiw	r24, 0x11	; 17
    1eee:	0e 94 0d 02 	call	0x41a	; 0x41a <_ZN10MCP_OutputC1Eh13MCP23017_Port12MCP23017_Pin>
    1ef2:	89 89       	ldd	r24, Y+17	; 0x11
    1ef4:	9a 89       	ldd	r25, Y+18	; 0x12
    1ef6:	ab 89       	ldd	r26, Y+19	; 0x13
    1ef8:	bc 89       	ldd	r27, Y+20	; 0x14
    1efa:	80 93 f8 02 	sts	0x02F8, r24	; 0x8002f8 <ModeRunLED>
    1efe:	90 93 f9 02 	sts	0x02F9, r25	; 0x8002f9 <ModeRunLED+0x1>
    1f02:	a0 93 fa 02 	sts	0x02FA, r26	; 0x8002fa <ModeRunLED+0x2>
    1f06:	b0 93 fb 02 	sts	0x02FB, r27	; 0x8002fb <ModeRunLED+0x3>
	ModeEditPresetLED = MCP_Output(MCP23017_UI_LEDS_ADDR, PortB, (MCP23017_Pin)UI_MODE_PRESET_LED_PIN);
    1f0a:	26 e0       	ldi	r18, 0x06	; 6
    1f0c:	41 e0       	ldi	r20, 0x01	; 1
    1f0e:	60 e0       	ldi	r22, 0x00	; 0
    1f10:	ce 01       	movw	r24, r28
    1f12:	0d 96       	adiw	r24, 0x0d	; 13
    1f14:	0e 94 0d 02 	call	0x41a	; 0x41a <_ZN10MCP_OutputC1Eh13MCP23017_Port12MCP23017_Pin>
    1f18:	8d 85       	ldd	r24, Y+13	; 0x0d
    1f1a:	9e 85       	ldd	r25, Y+14	; 0x0e
    1f1c:	af 85       	ldd	r26, Y+15	; 0x0f
    1f1e:	b8 89       	ldd	r27, Y+16	; 0x10
    1f20:	80 93 f4 02 	sts	0x02F4, r24	; 0x8002f4 <ModeEditPresetLED>
    1f24:	90 93 f5 02 	sts	0x02F5, r25	; 0x8002f5 <ModeEditPresetLED+0x1>
    1f28:	a0 93 f6 02 	sts	0x02F6, r26	; 0x8002f6 <ModeEditPresetLED+0x2>
    1f2c:	b0 93 f7 02 	sts	0x02F7, r27	; 0x8002f7 <ModeEditPresetLED+0x3>
	ModeEditMidiLED = MCP_Output(MCP23017_UI_LEDS_ADDR, PortB, (MCP23017_Pin)UI_MODE_MIDI_LED_PIN);
    1f30:	27 e0       	ldi	r18, 0x07	; 7
    1f32:	41 e0       	ldi	r20, 0x01	; 1
    1f34:	60 e0       	ldi	r22, 0x00	; 0
    1f36:	ce 01       	movw	r24, r28
    1f38:	09 96       	adiw	r24, 0x09	; 9
    1f3a:	0e 94 0d 02 	call	0x41a	; 0x41a <_ZN10MCP_OutputC1Eh13MCP23017_Port12MCP23017_Pin>
    1f3e:	89 85       	ldd	r24, Y+9	; 0x09
    1f40:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f42:	ab 85       	ldd	r26, Y+11	; 0x0b
    1f44:	bc 85       	ldd	r27, Y+12	; 0x0c
    1f46:	80 93 f0 02 	sts	0x02F0, r24	; 0x8002f0 <ModeEditMidiLED>
    1f4a:	90 93 f1 02 	sts	0x02F1, r25	; 0x8002f1 <ModeEditMidiLED+0x1>
    1f4e:	a0 93 f2 02 	sts	0x02F2, r26	; 0x8002f2 <ModeEditMidiLED+0x2>
    1f52:	b0 93 f3 02 	sts	0x02F3, r27	; 0x8002f3 <ModeEditMidiLED+0x3>
    1f56:	0f 2e       	mov	r0, r31
    1f58:	f0 ed       	ldi	r31, 0xD0	; 208
    1f5a:	ef 2e       	mov	r14, r31
    1f5c:	f2 e0       	ldi	r31, 0x02	; 2
    1f5e:	ff 2e       	mov	r15, r31
    1f60:	f0 2d       	mov	r31, r0
	
	for (uint8_t i = 0; i < NUMBER_OF_LOOPS; i++)
    1f62:	10 e0       	ldi	r17, 0x00	; 0
	{
		LoopLEDs[i] = MCP_Output(MCP23017_UI_LEDS_ADDR, PortA, (MCP23017_Pin)i);
    1f64:	21 2f       	mov	r18, r17
    1f66:	40 e0       	ldi	r20, 0x00	; 0
    1f68:	60 e0       	ldi	r22, 0x00	; 0
    1f6a:	ce 01       	movw	r24, r28
    1f6c:	05 96       	adiw	r24, 0x05	; 5
    1f6e:	0e 94 0d 02 	call	0x41a	; 0x41a <_ZN10MCP_OutputC1Eh13MCP23017_Port12MCP23017_Pin>
    1f72:	8d 81       	ldd	r24, Y+5	; 0x05
    1f74:	9e 81       	ldd	r25, Y+6	; 0x06
    1f76:	af 81       	ldd	r26, Y+7	; 0x07
    1f78:	b8 85       	ldd	r27, Y+8	; 0x08
    1f7a:	f7 01       	movw	r30, r14
    1f7c:	81 93       	st	Z+, r24
    1f7e:	91 93       	st	Z+, r25
    1f80:	a1 93       	st	Z+, r26
    1f82:	b1 93       	st	Z+, r27
    1f84:	7f 01       	movw	r14, r30
	/* Initialize outputs UI LEDs */
	ModeRunLED = MCP_Output(MCP23017_UI_LEDS_ADDR, PortB, (MCP23017_Pin)UI_MODE_RUN_LED_PIN);
	ModeEditPresetLED = MCP_Output(MCP23017_UI_LEDS_ADDR, PortB, (MCP23017_Pin)UI_MODE_PRESET_LED_PIN);
	ModeEditMidiLED = MCP_Output(MCP23017_UI_LEDS_ADDR, PortB, (MCP23017_Pin)UI_MODE_MIDI_LED_PIN);
	
	for (uint8_t i = 0; i < NUMBER_OF_LOOPS; i++)
    1f86:	1f 5f       	subi	r17, 0xFF	; 255
    1f88:	18 30       	cpi	r17, 0x08	; 8
    1f8a:	61 f7       	brne	.-40     	; 0x1f64 <_Z7UI_Initv+0x9a>
    1f8c:	0f 2e       	mov	r0, r31
    1f8e:	f0 ec       	ldi	r31, 0xC0	; 192
    1f90:	ef 2e       	mov	r14, r31
    1f92:	f2 e0       	ldi	r31, 0x02	; 2
    1f94:	ff 2e       	mov	r15, r31
    1f96:	f0 2d       	mov	r31, r0
    1f98:	10 e0       	ldi	r17, 0x00	; 0
		LoopLEDs[i] = MCP_Output(MCP23017_UI_LEDS_ADDR, PortA, (MCP23017_Pin)i);
	}
		
	for (uint8_t i = 0; i < NUMBER_OF_CTRL_SWITCHES; i++)
	{
		CtrlSwitchLEDs[i] = MCP_Output(MCP23017_UI_LEDS_ADDR, PortB, (MCP23017_Pin)(i));
    1f9a:	21 2f       	mov	r18, r17
    1f9c:	41 e0       	ldi	r20, 0x01	; 1
    1f9e:	60 e0       	ldi	r22, 0x00	; 0
    1fa0:	ce 01       	movw	r24, r28
    1fa2:	01 96       	adiw	r24, 0x01	; 1
    1fa4:	0e 94 0d 02 	call	0x41a	; 0x41a <_ZN10MCP_OutputC1Eh13MCP23017_Port12MCP23017_Pin>
    1fa8:	89 81       	ldd	r24, Y+1	; 0x01
    1faa:	9a 81       	ldd	r25, Y+2	; 0x02
    1fac:	ab 81       	ldd	r26, Y+3	; 0x03
    1fae:	bc 81       	ldd	r27, Y+4	; 0x04
    1fb0:	f7 01       	movw	r30, r14
    1fb2:	81 93       	st	Z+, r24
    1fb4:	91 93       	st	Z+, r25
    1fb6:	a1 93       	st	Z+, r26
    1fb8:	b1 93       	st	Z+, r27
    1fba:	7f 01       	movw	r14, r30
	for (uint8_t i = 0; i < NUMBER_OF_LOOPS; i++)
	{
		LoopLEDs[i] = MCP_Output(MCP23017_UI_LEDS_ADDR, PortA, (MCP23017_Pin)i);
	}
		
	for (uint8_t i = 0; i < NUMBER_OF_CTRL_SWITCHES; i++)
    1fbc:	1f 5f       	subi	r17, 0xFF	; 255
    1fbe:	14 30       	cpi	r17, 0x04	; 4
    1fc0:	61 f7       	brne	.-40     	; 0x1f9a <_Z7UI_Initv+0xd0>
	//{
		//CtrlSwitchRelays[i] = MCP_Output(MCP23017_RELAYS_ADDR, PortB, (MCP23017_Pin)i);
	//}
	
	/* Set auto toggle speed */
	MCP_Output::SetAutoToggleSpeed(360/*ms*/);
    1fc2:	88 e6       	ldi	r24, 0x68	; 104
    1fc4:	91 e0       	ldi	r25, 0x01	; 1
    1fc6:	0e 94 53 02 	call	0x4a6	; 0x4a6 <_ZN10MCP_Output18SetAutoToggleSpeedEj>
}
    1fca:	64 96       	adiw	r28, 0x14	; 20
    1fcc:	0f b6       	in	r0, 0x3f	; 63
    1fce:	f8 94       	cli
    1fd0:	de bf       	out	0x3e, r29	; 62
    1fd2:	0f be       	out	0x3f, r0	; 63
    1fd4:	cd bf       	out	0x3d, r28	; 61
    1fd6:	df 91       	pop	r29
    1fd8:	cf 91       	pop	r28
    1fda:	1f 91       	pop	r17
    1fdc:	ff 90       	pop	r15
    1fde:	ef 90       	pop	r14
    1fe0:	08 95       	ret

00001fe2 <_GLOBAL__sub_I_ModeRunLED>:
    1fe2:	0f 93       	push	r16
    1fe4:	1f 93       	push	r17
    1fe6:	cf 93       	push	r28
    1fe8:	df 93       	push	r29
#include <avr/io.h>
#include <stdint-gcc.h>
#include "MCP23017.h"
#include "UI.h"

MCP_Output ModeRunLED;
    1fea:	88 ef       	ldi	r24, 0xF8	; 248
    1fec:	92 e0       	ldi	r25, 0x02	; 2
    1fee:	0e 94 8f 01 	call	0x31e	; 0x31e <_ZN10MCP_OutputC1Ev>
MCP_Output ModeEditPresetLED;
    1ff2:	84 ef       	ldi	r24, 0xF4	; 244
    1ff4:	92 e0       	ldi	r25, 0x02	; 2
    1ff6:	0e 94 8f 01 	call	0x31e	; 0x31e <_ZN10MCP_OutputC1Ev>
MCP_Output ModeEditMidiLED;
    1ffa:	80 ef       	ldi	r24, 0xF0	; 240
    1ffc:	92 e0       	ldi	r25, 0x02	; 2
    1ffe:	0e 94 8f 01 	call	0x31e	; 0x31e <_ZN10MCP_OutputC1Ev>
    2002:	c0 ed       	ldi	r28, 0xD0	; 208
    2004:	d2 e0       	ldi	r29, 0x02	; 2
    2006:	00 ef       	ldi	r16, 0xF0	; 240
    2008:	12 e0       	ldi	r17, 0x02	; 2
MCP_Output LoopLEDs[NUMBER_OF_LOOPS];
    200a:	ce 01       	movw	r24, r28
    200c:	0e 94 8f 01 	call	0x31e	; 0x31e <_ZN10MCP_OutputC1Ev>
    2010:	24 96       	adiw	r28, 0x04	; 4
    2012:	0c 17       	cp	r16, r28
    2014:	1d 07       	cpc	r17, r29
    2016:	c9 f7       	brne	.-14     	; 0x200a <_GLOBAL__sub_I_ModeRunLED+0x28>
MCP_Output CtrlSwitchLEDs[NUMBER_OF_CTRL_SWITCHES];
    2018:	80 ec       	ldi	r24, 0xC0	; 192
    201a:	92 e0       	ldi	r25, 0x02	; 2
    201c:	0e 94 8f 01 	call	0x31e	; 0x31e <_ZN10MCP_OutputC1Ev>
    2020:	84 ec       	ldi	r24, 0xC4	; 196
    2022:	92 e0       	ldi	r25, 0x02	; 2
    2024:	0e 94 8f 01 	call	0x31e	; 0x31e <_ZN10MCP_OutputC1Ev>
    2028:	88 ec       	ldi	r24, 0xC8	; 200
    202a:	92 e0       	ldi	r25, 0x02	; 2
    202c:	0e 94 8f 01 	call	0x31e	; 0x31e <_ZN10MCP_OutputC1Ev>
    2030:	8c ec       	ldi	r24, 0xCC	; 204
    2032:	92 e0       	ldi	r25, 0x02	; 2
    2034:	0e 94 8f 01 	call	0x31e	; 0x31e <_ZN10MCP_OutputC1Ev>
    2038:	c0 ea       	ldi	r28, 0xA0	; 160
    203a:	d2 e0       	ldi	r29, 0x02	; 2
    203c:	00 ec       	ldi	r16, 0xC0	; 192
    203e:	12 e0       	ldi	r17, 0x02	; 2

MCP_Output LoopRelays[NUMBER_OF_LOOPS];
    2040:	ce 01       	movw	r24, r28
    2042:	0e 94 8f 01 	call	0x31e	; 0x31e <_ZN10MCP_OutputC1Ev>
    2046:	24 96       	adiw	r28, 0x04	; 4
    2048:	c0 17       	cp	r28, r16
    204a:	d1 07       	cpc	r29, r17
    204c:	c9 f7       	brne	.-14     	; 0x2040 <_GLOBAL__sub_I_ModeRunLED+0x5e>
MCP_Output CtrlSwitchRelays[NUMBER_OF_CTRL_SWITCHES];
    204e:	80 e9       	ldi	r24, 0x90	; 144
    2050:	92 e0       	ldi	r25, 0x02	; 2
    2052:	0e 94 8f 01 	call	0x31e	; 0x31e <_ZN10MCP_OutputC1Ev>
    2056:	84 e9       	ldi	r24, 0x94	; 148
    2058:	92 e0       	ldi	r25, 0x02	; 2
    205a:	0e 94 8f 01 	call	0x31e	; 0x31e <_ZN10MCP_OutputC1Ev>
    205e:	88 e9       	ldi	r24, 0x98	; 152
    2060:	92 e0       	ldi	r25, 0x02	; 2
    2062:	0e 94 8f 01 	call	0x31e	; 0x31e <_ZN10MCP_OutputC1Ev>
    2066:	8c e9       	ldi	r24, 0x9C	; 156
    2068:	92 e0       	ldi	r25, 0x02	; 2
    206a:	0e 94 8f 01 	call	0x31e	; 0x31e <_ZN10MCP_OutputC1Ev>
		//CtrlSwitchRelays[i] = MCP_Output(MCP23017_RELAYS_ADDR, PortB, (MCP23017_Pin)i);
	//}
	
	/* Set auto toggle speed */
	MCP_Output::SetAutoToggleSpeed(360/*ms*/);
}
    206e:	df 91       	pop	r29
    2070:	cf 91       	pop	r28
    2072:	1f 91       	pop	r17
    2074:	0f 91       	pop	r16
    2076:	08 95       	ret

00002078 <_Z12Util_Bit2Inth>:
    2078:	88 23       	and	r24, r24
    207a:	31 f0       	breq	.+12     	; 0x2088 <_Z12Util_Bit2Inth+0x10>
    207c:	90 e0       	ldi	r25, 0x00	; 0
    207e:	86 95       	lsr	r24
    2080:	9f 5f       	subi	r25, 0xFF	; 255
    2082:	81 11       	cpse	r24, r1
    2084:	fc cf       	rjmp	.-8      	; 0x207e <_Z12Util_Bit2Inth+0x6>
    2086:	01 c0       	rjmp	.+2      	; 0x208a <_Z12Util_Bit2Inth+0x12>
    2088:	90 e0       	ldi	r25, 0x00	; 0
    208a:	89 2f       	mov	r24, r25
    208c:	08 95       	ret

0000208e <__divmodhi4>:
    208e:	97 fb       	bst	r25, 7
    2090:	07 2e       	mov	r0, r23
    2092:	16 f4       	brtc	.+4      	; 0x2098 <__divmodhi4+0xa>
    2094:	00 94       	com	r0
    2096:	07 d0       	rcall	.+14     	; 0x20a6 <__divmodhi4_neg1>
    2098:	77 fd       	sbrc	r23, 7
    209a:	09 d0       	rcall	.+18     	; 0x20ae <__divmodhi4_neg2>
    209c:	0e 94 8e 10 	call	0x211c	; 0x211c <__udivmodhi4>
    20a0:	07 fc       	sbrc	r0, 7
    20a2:	05 d0       	rcall	.+10     	; 0x20ae <__divmodhi4_neg2>
    20a4:	3e f4       	brtc	.+14     	; 0x20b4 <__divmodhi4_exit>

000020a6 <__divmodhi4_neg1>:
    20a6:	90 95       	com	r25
    20a8:	81 95       	neg	r24
    20aa:	9f 4f       	sbci	r25, 0xFF	; 255
    20ac:	08 95       	ret

000020ae <__divmodhi4_neg2>:
    20ae:	70 95       	com	r23
    20b0:	61 95       	neg	r22
    20b2:	7f 4f       	sbci	r23, 0xFF	; 255

000020b4 <__divmodhi4_exit>:
    20b4:	08 95       	ret

000020b6 <__udivmodsi4>:
    20b6:	a1 e2       	ldi	r26, 0x21	; 33
    20b8:	1a 2e       	mov	r1, r26
    20ba:	aa 1b       	sub	r26, r26
    20bc:	bb 1b       	sub	r27, r27
    20be:	fd 01       	movw	r30, r26
    20c0:	0d c0       	rjmp	.+26     	; 0x20dc <__udivmodsi4_ep>

000020c2 <__udivmodsi4_loop>:
    20c2:	aa 1f       	adc	r26, r26
    20c4:	bb 1f       	adc	r27, r27
    20c6:	ee 1f       	adc	r30, r30
    20c8:	ff 1f       	adc	r31, r31
    20ca:	a2 17       	cp	r26, r18
    20cc:	b3 07       	cpc	r27, r19
    20ce:	e4 07       	cpc	r30, r20
    20d0:	f5 07       	cpc	r31, r21
    20d2:	20 f0       	brcs	.+8      	; 0x20dc <__udivmodsi4_ep>
    20d4:	a2 1b       	sub	r26, r18
    20d6:	b3 0b       	sbc	r27, r19
    20d8:	e4 0b       	sbc	r30, r20
    20da:	f5 0b       	sbc	r31, r21

000020dc <__udivmodsi4_ep>:
    20dc:	66 1f       	adc	r22, r22
    20de:	77 1f       	adc	r23, r23
    20e0:	88 1f       	adc	r24, r24
    20e2:	99 1f       	adc	r25, r25
    20e4:	1a 94       	dec	r1
    20e6:	69 f7       	brne	.-38     	; 0x20c2 <__udivmodsi4_loop>
    20e8:	60 95       	com	r22
    20ea:	70 95       	com	r23
    20ec:	80 95       	com	r24
    20ee:	90 95       	com	r25
    20f0:	9b 01       	movw	r18, r22
    20f2:	ac 01       	movw	r20, r24
    20f4:	bd 01       	movw	r22, r26
    20f6:	cf 01       	movw	r24, r30
    20f8:	08 95       	ret

000020fa <__tablejump2__>:
    20fa:	ee 0f       	add	r30, r30
    20fc:	ff 1f       	adc	r31, r31
    20fe:	05 90       	lpm	r0, Z+
    2100:	f4 91       	lpm	r31, Z
    2102:	e0 2d       	mov	r30, r0
    2104:	09 94       	ijmp

00002106 <__muluhisi3>:
    2106:	0e 94 a2 10 	call	0x2144	; 0x2144 <__umulhisi3>
    210a:	a5 9f       	mul	r26, r21
    210c:	90 0d       	add	r25, r0
    210e:	b4 9f       	mul	r27, r20
    2110:	90 0d       	add	r25, r0
    2112:	a4 9f       	mul	r26, r20
    2114:	80 0d       	add	r24, r0
    2116:	91 1d       	adc	r25, r1
    2118:	11 24       	eor	r1, r1
    211a:	08 95       	ret

0000211c <__udivmodhi4>:
    211c:	aa 1b       	sub	r26, r26
    211e:	bb 1b       	sub	r27, r27
    2120:	51 e1       	ldi	r21, 0x11	; 17
    2122:	07 c0       	rjmp	.+14     	; 0x2132 <__udivmodhi4_ep>

00002124 <__udivmodhi4_loop>:
    2124:	aa 1f       	adc	r26, r26
    2126:	bb 1f       	adc	r27, r27
    2128:	a6 17       	cp	r26, r22
    212a:	b7 07       	cpc	r27, r23
    212c:	10 f0       	brcs	.+4      	; 0x2132 <__udivmodhi4_ep>
    212e:	a6 1b       	sub	r26, r22
    2130:	b7 0b       	sbc	r27, r23

00002132 <__udivmodhi4_ep>:
    2132:	88 1f       	adc	r24, r24
    2134:	99 1f       	adc	r25, r25
    2136:	5a 95       	dec	r21
    2138:	a9 f7       	brne	.-22     	; 0x2124 <__udivmodhi4_loop>
    213a:	80 95       	com	r24
    213c:	90 95       	com	r25
    213e:	bc 01       	movw	r22, r24
    2140:	cd 01       	movw	r24, r26
    2142:	08 95       	ret

00002144 <__umulhisi3>:
    2144:	a2 9f       	mul	r26, r18
    2146:	b0 01       	movw	r22, r0
    2148:	b3 9f       	mul	r27, r19
    214a:	c0 01       	movw	r24, r0
    214c:	a3 9f       	mul	r26, r19
    214e:	70 0d       	add	r23, r0
    2150:	81 1d       	adc	r24, r1
    2152:	11 24       	eor	r1, r1
    2154:	91 1d       	adc	r25, r1
    2156:	b2 9f       	mul	r27, r18
    2158:	70 0d       	add	r23, r0
    215a:	81 1d       	adc	r24, r1
    215c:	11 24       	eor	r1, r1
    215e:	91 1d       	adc	r25, r1
    2160:	08 95       	ret

00002162 <eeprom_read_block>:
    2162:	dc 01       	movw	r26, r24
    2164:	cb 01       	movw	r24, r22

00002166 <eeprom_read_blraw>:
    2166:	fc 01       	movw	r30, r24
    2168:	f9 99       	sbic	0x1f, 1	; 31
    216a:	fe cf       	rjmp	.-4      	; 0x2168 <eeprom_read_blraw+0x2>
    216c:	06 c0       	rjmp	.+12     	; 0x217a <eeprom_read_blraw+0x14>
    216e:	f2 bd       	out	0x22, r31	; 34
    2170:	e1 bd       	out	0x21, r30	; 33
    2172:	f8 9a       	sbi	0x1f, 0	; 31
    2174:	31 96       	adiw	r30, 0x01	; 1
    2176:	00 b4       	in	r0, 0x20	; 32
    2178:	0d 92       	st	X+, r0
    217a:	41 50       	subi	r20, 0x01	; 1
    217c:	50 40       	sbci	r21, 0x00	; 0
    217e:	b8 f7       	brcc	.-18     	; 0x216e <eeprom_read_blraw+0x8>
    2180:	08 95       	ret

00002182 <eeprom_read_byte>:
    2182:	f9 99       	sbic	0x1f, 1	; 31
    2184:	fe cf       	rjmp	.-4      	; 0x2182 <eeprom_read_byte>
    2186:	92 bd       	out	0x22, r25	; 34
    2188:	81 bd       	out	0x21, r24	; 33
    218a:	f8 9a       	sbi	0x1f, 0	; 31
    218c:	99 27       	eor	r25, r25
    218e:	80 b5       	in	r24, 0x20	; 32
    2190:	08 95       	ret

00002192 <eeprom_write_block>:
    2192:	dc 01       	movw	r26, r24
    2194:	cb 01       	movw	r24, r22
    2196:	03 c0       	rjmp	.+6      	; 0x219e <eeprom_write_block+0xc>
    2198:	2d 91       	ld	r18, X+
    219a:	0e 94 d4 10 	call	0x21a8	; 0x21a8 <eeprom_write_r18>
    219e:	41 50       	subi	r20, 0x01	; 1
    21a0:	50 40       	sbci	r21, 0x00	; 0
    21a2:	d0 f7       	brcc	.-12     	; 0x2198 <eeprom_write_block+0x6>
    21a4:	08 95       	ret

000021a6 <eeprom_write_byte>:
    21a6:	26 2f       	mov	r18, r22

000021a8 <eeprom_write_r18>:
    21a8:	f9 99       	sbic	0x1f, 1	; 31
    21aa:	fe cf       	rjmp	.-4      	; 0x21a8 <eeprom_write_r18>
    21ac:	1f ba       	out	0x1f, r1	; 31
    21ae:	92 bd       	out	0x22, r25	; 34
    21b0:	81 bd       	out	0x21, r24	; 33
    21b2:	20 bd       	out	0x20, r18	; 32
    21b4:	0f b6       	in	r0, 0x3f	; 63
    21b6:	f8 94       	cli
    21b8:	fa 9a       	sbi	0x1f, 2	; 31
    21ba:	f9 9a       	sbi	0x1f, 1	; 31
    21bc:	0f be       	out	0x3f, r0	; 63
    21be:	01 96       	adiw	r24, 0x01	; 1
    21c0:	08 95       	ret

000021c2 <_exit>:
    21c2:	f8 94       	cli

000021c4 <__stop_program>:
    21c4:	ff cf       	rjmp	.-2      	; 0x21c4 <__stop_program>
