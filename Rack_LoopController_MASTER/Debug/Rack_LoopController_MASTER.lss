
Rack_LoopController_MASTER.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000028  00800100  0000135a  000013ee  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000135a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000157  00800128  00800128  00001416  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001416  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001448  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000003a0  00000000  00000000  00001488  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000038ac  00000000  00000000  00001828  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001890  00000000  00000000  000050d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001ba0  00000000  00000000  00006964  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000844  00000000  00000000  00008504  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00001580  00000000  00000000  00008d48  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001a6b  00000000  00000000  0000a2c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000002e0  00000000  00000000  0000bd33  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__ctors_end>
       4:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
       8:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
       c:	0c 94 ee 04 	jmp	0x9dc	; 0x9dc <__vector_3>
      10:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
      14:	0c 94 cd 04 	jmp	0x99a	; 0x99a <__vector_5>
      18:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
      1c:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
      20:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
      24:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
      28:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
      2c:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
      30:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
      34:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
      38:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
      3c:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
      40:	0c 94 df 05 	jmp	0xbbe	; 0xbbe <__vector_16>
      44:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
      48:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
      4c:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
      50:	0c 94 3a 07 	jmp	0xe74	; 0xe74 <__vector_20>
      54:	0c 94 65 07 	jmp	0xeca	; 0xeca <__vector_21>
      58:	0c 94 8b 04 	jmp	0x916	; 0x916 <__vector_22>
      5c:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
      60:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
      64:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
      68:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
      6c:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
      70:	0c 94 1a 08 	jmp	0x1034	; 0x1034 <__vector_28>
      74:	0c 94 45 08 	jmp	0x108a	; 0x108a <__vector_29>
      78:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>

0000007c <__ctors_start>:
      7c:	fb 08       	sbc	r15, r11

0000007e <__ctors_end>:
      7e:	11 24       	eor	r1, r1
      80:	1f be       	out	0x3f, r1	; 63
      82:	cf ef       	ldi	r28, 0xFF	; 255
      84:	d8 e0       	ldi	r29, 0x08	; 8
      86:	de bf       	out	0x3e, r29	; 62
      88:	cd bf       	out	0x3d, r28	; 61

0000008a <__do_copy_data>:
      8a:	11 e0       	ldi	r17, 0x01	; 1
      8c:	a0 e0       	ldi	r26, 0x00	; 0
      8e:	b1 e0       	ldi	r27, 0x01	; 1
      90:	ea e5       	ldi	r30, 0x5A	; 90
      92:	f3 e1       	ldi	r31, 0x13	; 19
      94:	02 c0       	rjmp	.+4      	; 0x9a <__do_copy_data+0x10>
      96:	05 90       	lpm	r0, Z+
      98:	0d 92       	st	X+, r0
      9a:	a8 32       	cpi	r26, 0x28	; 40
      9c:	b1 07       	cpc	r27, r17
      9e:	d9 f7       	brne	.-10     	; 0x96 <__do_copy_data+0xc>

000000a0 <__do_clear_bss>:
      a0:	22 e0       	ldi	r18, 0x02	; 2
      a2:	a8 e2       	ldi	r26, 0x28	; 40
      a4:	b1 e0       	ldi	r27, 0x01	; 1
      a6:	01 c0       	rjmp	.+2      	; 0xaa <.do_clear_bss_start>

000000a8 <.do_clear_bss_loop>:
      a8:	1d 92       	st	X+, r1

000000aa <.do_clear_bss_start>:
      aa:	af 37       	cpi	r26, 0x7F	; 127
      ac:	b2 07       	cpc	r27, r18
      ae:	e1 f7       	brne	.-8      	; 0xa8 <.do_clear_bss_loop>

000000b0 <__do_global_ctors>:
      b0:	10 e0       	ldi	r17, 0x00	; 0
      b2:	cf e3       	ldi	r28, 0x3F	; 63
      b4:	d0 e0       	ldi	r29, 0x00	; 0
      b6:	04 c0       	rjmp	.+8      	; 0xc0 <__do_global_ctors+0x10>
      b8:	21 97       	sbiw	r28, 0x01	; 1
      ba:	fe 01       	movw	r30, r28
      bc:	0e 94 80 09 	call	0x1300	; 0x1300 <__tablejump2__>
      c0:	ce 33       	cpi	r28, 0x3E	; 62
      c2:	d1 07       	cpc	r29, r17
      c4:	c9 f7       	brne	.-14     	; 0xb8 <__do_global_ctors+0x8>
      c6:	0e 94 41 01 	call	0x282	; 0x282 <main>
      ca:	0c 94 ab 09 	jmp	0x1356	; 0x1356 <_exit>

000000ce <__bad_interrupt>:
      ce:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000d2 <_Z24Handle_MIDIProgramChangev>:
#include "RotaryEncoder.h"
#include "UI.h"
#include "SP10281_3x7segment.h"

void Handle_MIDIProgramChange()
{
      d2:	08 95       	ret

000000d4 <_Z19Handle_PedalCommand3CMDhPh>:
unsigned char Handle_PedalCommand(CMD cmd, uint8_t length, uint8_t *dat)
{
	unsigned char response = ACK_BYTE;
	
	/* Handle command */
	switch (cmd)
      d4:	82 3b       	cpi	r24, 0xB2	; 178
      d6:	51 f0       	breq	.+20     	; 0xec <_Z19Handle_PedalCommand3CMDhPh+0x18>
      d8:	84 3b       	cpi	r24, 0xB4	; 180
      da:	71 f0       	breq	.+28     	; 0xf8 <_Z19Handle_PedalCommand3CMDhPh+0x24>
      dc:	81 3b       	cpi	r24, 0xB1	; 177
      de:	91 f4       	brne	.+36     	; 0x104 <_Z19Handle_PedalCommand3CMDhPh+0x30>
	{
		case FootswitchShortPress:
			SP10281_WriteNumber(1);
      e0:	81 e0       	ldi	r24, 0x01	; 1
      e2:	90 e0       	ldi	r25, 0x00	; 0
      e4:	0e 94 7f 05 	call	0xafe	; 0xafe <_Z19SP10281_WriteNumbers>
	// Do something with MIDI_ReceivedProgram
}

unsigned char Handle_PedalCommand(CMD cmd, uint8_t length, uint8_t *dat)
{
	unsigned char response = ACK_BYTE;
      e8:	8c ea       	ldi	r24, 0xAC	; 172
	/* Handle command */
	switch (cmd)
	{
		case FootswitchShortPress:
			SP10281_WriteNumber(1);
			break;
      ea:	08 95       	ret
		case FootswitchLongPress:
			SP10281_WriteNumber(2);
      ec:	82 e0       	ldi	r24, 0x02	; 2
      ee:	90 e0       	ldi	r25, 0x00	; 0
      f0:	0e 94 7f 05 	call	0xafe	; 0xafe <_Z19SP10281_WriteNumbers>
	// Do something with MIDI_ReceivedProgram
}

unsigned char Handle_PedalCommand(CMD cmd, uint8_t length, uint8_t *dat)
{
	unsigned char response = ACK_BYTE;
      f4:	8c ea       	ldi	r24, 0xAC	; 172
		case FootswitchShortPress:
			SP10281_WriteNumber(1);
			break;
		case FootswitchLongPress:
			SP10281_WriteNumber(2);
			break;
      f6:	08 95       	ret
		case FootswitchLongLongPress:
			SP10281_WriteNumber(3);
      f8:	83 e0       	ldi	r24, 0x03	; 3
      fa:	90 e0       	ldi	r25, 0x00	; 0
      fc:	0e 94 7f 05 	call	0xafe	; 0xafe <_Z19SP10281_WriteNumbers>
	// Do something with MIDI_ReceivedProgram
}

unsigned char Handle_PedalCommand(CMD cmd, uint8_t length, uint8_t *dat)
{
	unsigned char response = ACK_BYTE;
     100:	8c ea       	ldi	r24, 0xAC	; 172
		case FootswitchLongPress:
			SP10281_WriteNumber(2);
			break;
		case FootswitchLongLongPress:
			SP10281_WriteNumber(3);
			break;
     102:	08 95       	ret
		default:
			response = NACK_BYTE;
     104:	8a e2       	ldi	r24, 0x2A	; 42
			break;
	}
	
	return response;
}
     106:	08 95       	ret

00000108 <_Z26Handle_RotaryEncoderActionv>:


void Handle_RotaryEncoderAction()
{
     108:	ef 92       	push	r14
     10a:	0f 93       	push	r16
	volatile static uint8_t rotCnt = 0;
	
	switch (RotEnc_State)
     10c:	80 91 af 01 	lds	r24, 0x01AF	; 0x8001af <RotEnc_State>
     110:	82 30       	cpi	r24, 0x02	; 2
     112:	59 f0       	breq	.+22     	; 0x12a <_Z26Handle_RotaryEncoderActionv+0x22>
     114:	18 f4       	brcc	.+6      	; 0x11c <_Z26Handle_RotaryEncoderActionv+0x14>
     116:	81 30       	cpi	r24, 0x01	; 1
     118:	49 f1       	breq	.+82     	; 0x16c <_Z26Handle_RotaryEncoderActionv+0x64>
     11a:	59 c0       	rjmp	.+178    	; 0x1ce <_Z26Handle_RotaryEncoderActionv+0xc6>
     11c:	83 30       	cpi	r24, 0x03	; 3
     11e:	09 f4       	brne	.+2      	; 0x122 <_Z26Handle_RotaryEncoderActionv+0x1a>
     120:	45 c0       	rjmp	.+138    	; 0x1ac <_Z26Handle_RotaryEncoderActionv+0xa4>
     122:	86 30       	cpi	r24, 0x06	; 6
     124:	09 f4       	brne	.+2      	; 0x128 <_Z26Handle_RotaryEncoderActionv+0x20>
     126:	4b c0       	rjmp	.+150    	; 0x1be <_Z26Handle_RotaryEncoderActionv+0xb6>
     128:	52 c0       	rjmp	.+164    	; 0x1ce <_Z26Handle_RotaryEncoderActionv+0xc6>
	{
		case ROT_LEFT:
			if (rotCnt < 7)
     12a:	80 91 28 01 	lds	r24, 0x0128	; 0x800128 <__data_end>
     12e:	87 30       	cpi	r24, 0x07	; 7
     130:	08 f0       	brcs	.+2      	; 0x134 <_Z26Handle_RotaryEncoderActionv+0x2c>
     132:	4d c0       	rjmp	.+154    	; 0x1ce <_Z26Handle_RotaryEncoderActionv+0xc6>
			{
				LoopPreset_LEDs[rotCnt].Clear();
     134:	80 91 28 01 	lds	r24, 0x0128	; 0x800128 <__data_end>
     138:	90 e0       	ldi	r25, 0x00	; 0
     13a:	88 0f       	add	r24, r24
     13c:	99 1f       	adc	r25, r25
     13e:	88 0f       	add	r24, r24
     140:	99 1f       	adc	r25, r25
     142:	8d 5a       	subi	r24, 0xAD	; 173
     144:	9d 4f       	sbci	r25, 0xFD	; 253
     146:	0e 94 0b 02 	call	0x416	; 0x416 <_ZN10MCP_Output5ClearEv>
				rotCnt++;
     14a:	80 91 28 01 	lds	r24, 0x0128	; 0x800128 <__data_end>
     14e:	8f 5f       	subi	r24, 0xFF	; 255
     150:	80 93 28 01 	sts	0x0128, r24	; 0x800128 <__data_end>
				LoopPreset_LEDs[rotCnt].Set();
     154:	80 91 28 01 	lds	r24, 0x0128	; 0x800128 <__data_end>
     158:	90 e0       	ldi	r25, 0x00	; 0
     15a:	88 0f       	add	r24, r24
     15c:	99 1f       	adc	r25, r25
     15e:	88 0f       	add	r24, r24
     160:	99 1f       	adc	r25, r25
     162:	8d 5a       	subi	r24, 0xAD	; 173
     164:	9d 4f       	sbci	r25, 0xFD	; 253
     166:	0e 94 ce 01 	call	0x39c	; 0x39c <_ZN10MCP_Output3SetEv>
     16a:	31 c0       	rjmp	.+98     	; 0x1ce <_Z26Handle_RotaryEncoderActionv+0xc6>
			}
			break;
		case ROT_RIGHT:
			if (rotCnt > 0)
     16c:	80 91 28 01 	lds	r24, 0x0128	; 0x800128 <__data_end>
     170:	88 23       	and	r24, r24
     172:	69 f1       	breq	.+90     	; 0x1ce <_Z26Handle_RotaryEncoderActionv+0xc6>
			{
				LoopPreset_LEDs[rotCnt].Clear();
     174:	80 91 28 01 	lds	r24, 0x0128	; 0x800128 <__data_end>
     178:	90 e0       	ldi	r25, 0x00	; 0
     17a:	88 0f       	add	r24, r24
     17c:	99 1f       	adc	r25, r25
     17e:	88 0f       	add	r24, r24
     180:	99 1f       	adc	r25, r25
     182:	8d 5a       	subi	r24, 0xAD	; 173
     184:	9d 4f       	sbci	r25, 0xFD	; 253
     186:	0e 94 0b 02 	call	0x416	; 0x416 <_ZN10MCP_Output5ClearEv>
				rotCnt--;
     18a:	80 91 28 01 	lds	r24, 0x0128	; 0x800128 <__data_end>
     18e:	81 50       	subi	r24, 0x01	; 1
     190:	80 93 28 01 	sts	0x0128, r24	; 0x800128 <__data_end>
				LoopPreset_LEDs[rotCnt].Set();
     194:	80 91 28 01 	lds	r24, 0x0128	; 0x800128 <__data_end>
     198:	90 e0       	ldi	r25, 0x00	; 0
     19a:	88 0f       	add	r24, r24
     19c:	99 1f       	adc	r25, r25
     19e:	88 0f       	add	r24, r24
     1a0:	99 1f       	adc	r25, r25
     1a2:	8d 5a       	subi	r24, 0xAD	; 173
     1a4:	9d 4f       	sbci	r25, 0xFD	; 253
     1a6:	0e 94 ce 01 	call	0x39c	; 0x39c <_ZN10MCP_Output3SetEv>
     1aa:	11 c0       	rjmp	.+34     	; 0x1ce <_Z26Handle_RotaryEncoderActionv+0xc6>
			}
			break;
		case SHORT_PRESS:
			SP10281_WriteChar('s', 'h', 'r', 0, 0, 0);
     1ac:	e1 2c       	mov	r14, r1
     1ae:	00 e0       	ldi	r16, 0x00	; 0
     1b0:	20 e0       	ldi	r18, 0x00	; 0
     1b2:	42 e7       	ldi	r20, 0x72	; 114
     1b4:	68 e6       	ldi	r22, 0x68	; 104
     1b6:	83 e7       	ldi	r24, 0x73	; 115
     1b8:	0e 94 62 05 	call	0xac4	; 0xac4 <_Z17SP10281_WriteCharccchhh>
			break;
     1bc:	08 c0       	rjmp	.+16     	; 0x1ce <_Z26Handle_RotaryEncoderActionv+0xc6>
		case LONG_PRESS:
			SP10281_WriteChar('l', 'o', 'n', 0, 0, 0);
     1be:	e1 2c       	mov	r14, r1
     1c0:	00 e0       	ldi	r16, 0x00	; 0
     1c2:	20 e0       	ldi	r18, 0x00	; 0
     1c4:	4e e6       	ldi	r20, 0x6E	; 110
     1c6:	6f e6       	ldi	r22, 0x6F	; 111
     1c8:	8c e6       	ldi	r24, 0x6C	; 108
     1ca:	0e 94 62 05 	call	0xac4	; 0xac4 <_Z17SP10281_WriteCharccchhh>
			break;
		default:
			break;
	}
	
	RotEnc_State = IDLE;
     1ce:	10 92 af 01 	sts	0x01AF, r1	; 0x8001af <RotEnc_State>
     1d2:	0e 94 c4 04 	call	0x988	; 0x988 <_Z29RotaryEncoder_EnableInterruptv>
     1d6:	0f 91       	pop	r16
     1d8:	ef 90       	pop	r14
     1da:	08 95       	ret

000001dc <_Z8i2c_initv>:
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWEA);
	while(!(TWCR & (1<<TWINT)));    

    return TWDR;

}/* i2c_readAck */
     1dc:	10 92 b9 00 	sts	0x00B9, r1	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
     1e0:	8c e5       	ldi	r24, 0x5C	; 92
     1e2:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7e00b8>
     1e6:	08 95       	ret

000001e8 <_Z9i2c_starth>:
     1e8:	94 ea       	ldi	r25, 0xA4	; 164
     1ea:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
     1ee:	ec eb       	ldi	r30, 0xBC	; 188
     1f0:	f0 e0       	ldi	r31, 0x00	; 0
     1f2:	90 81       	ld	r25, Z
     1f4:	99 23       	and	r25, r25
     1f6:	ec f7       	brge	.-6      	; 0x1f2 <_Z9i2c_starth+0xa>
     1f8:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
     1fc:	98 7f       	andi	r25, 0xF8	; 248
     1fe:	98 30       	cpi	r25, 0x08	; 8
     200:	11 f0       	breq	.+4      	; 0x206 <_Z9i2c_starth+0x1e>
     202:	90 31       	cpi	r25, 0x10	; 16
     204:	a1 f4       	brne	.+40     	; 0x22e <_Z9i2c_starth+0x46>
     206:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
     20a:	84 e8       	ldi	r24, 0x84	; 132
     20c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
     210:	ec eb       	ldi	r30, 0xBC	; 188
     212:	f0 e0       	ldi	r31, 0x00	; 0
     214:	80 81       	ld	r24, Z
     216:	88 23       	and	r24, r24
     218:	ec f7       	brge	.-6      	; 0x214 <_Z9i2c_starth+0x2c>
     21a:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
     21e:	98 7f       	andi	r25, 0xF8	; 248
     220:	98 31       	cpi	r25, 0x18	; 24
     222:	39 f0       	breq	.+14     	; 0x232 <_Z9i2c_starth+0x4a>
     224:	81 e0       	ldi	r24, 0x01	; 1
     226:	90 34       	cpi	r25, 0x40	; 64
     228:	29 f4       	brne	.+10     	; 0x234 <_Z9i2c_starth+0x4c>
     22a:	80 e0       	ldi	r24, 0x00	; 0
     22c:	08 95       	ret
     22e:	81 e0       	ldi	r24, 0x01	; 1
     230:	08 95       	ret
     232:	80 e0       	ldi	r24, 0x00	; 0
     234:	08 95       	ret

00000236 <_Z8i2c_stopv>:
     236:	84 e9       	ldi	r24, 0x94	; 148
     238:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
     23c:	ec eb       	ldi	r30, 0xBC	; 188
     23e:	f0 e0       	ldi	r31, 0x00	; 0
     240:	80 81       	ld	r24, Z
     242:	84 fd       	sbrc	r24, 4
     244:	fd cf       	rjmp	.-6      	; 0x240 <_Z8i2c_stopv+0xa>
     246:	08 95       	ret

00000248 <_Z9i2c_writeh>:
     248:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
     24c:	84 e8       	ldi	r24, 0x84	; 132
     24e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
     252:	ec eb       	ldi	r30, 0xBC	; 188
     254:	f0 e0       	ldi	r31, 0x00	; 0
     256:	80 81       	ld	r24, Z
     258:	88 23       	and	r24, r24
     25a:	ec f7       	brge	.-6      	; 0x256 <_Z9i2c_writeh+0xe>
     25c:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
     260:	98 7f       	andi	r25, 0xF8	; 248
     262:	81 e0       	ldi	r24, 0x01	; 1
     264:	98 32       	cpi	r25, 0x28	; 40
     266:	09 f4       	brne	.+2      	; 0x26a <_Z9i2c_writeh+0x22>
     268:	80 e0       	ldi	r24, 0x00	; 0
     26a:	08 95       	ret

0000026c <_Z11i2c_readNakv>:
 
 Return:  byte read from I2C device
*************************************************************************/
unsigned char i2c_readNak(void)
{
	TWCR = (1<<TWINT) | (1<<TWEN);
     26c:	84 e8       	ldi	r24, 0x84	; 132
     26e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	while(!(TWCR & (1<<TWINT)));
     272:	ec eb       	ldi	r30, 0xBC	; 188
     274:	f0 e0       	ldi	r31, 0x00	; 0
     276:	80 81       	ld	r24, Z
     278:	88 23       	and	r24, r24
     27a:	ec f7       	brge	.-6      	; 0x276 <_Z11i2c_readNakv+0xa>
	
    return TWDR;
     27c:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>

}/* i2c_readNak */
     280:	08 95       	ret

00000282 <main>:
#define MIDI_UART_BAUDRATE		31250

int main(void)
{
	/* Initialization */
	Timer0_Init();
     282:	0e 94 c1 05 	call	0xb82	; 0xb82 <_Z11Timer0_Initv>
	i2c_init();
     286:	0e 94 ee 00 	call	0x1dc	; 0x1dc <_Z8i2c_initv>
	UART0_Init(PEDAL_UART_BAUDRATE, UART_2_STOP_BITS, UART_NO_PARITY);
     28a:	40 e0       	ldi	r20, 0x00	; 0
     28c:	62 e0       	ldi	r22, 0x02	; 2
     28e:	80 e0       	ldi	r24, 0x00	; 0
     290:	9b e4       	ldi	r25, 0x4B	; 75
     292:	0e 94 91 06 	call	0xd22	; 0xd22 <_Z10UART0_Initjhh>
	UART1_Init(MIDI_UART_BAUDRATE, UART_1_STOP_BIT, UART_NO_PARITY);
     296:	40 e0       	ldi	r20, 0x00	; 0
     298:	61 e0       	ldi	r22, 0x01	; 1
     29a:	82 e1       	ldi	r24, 0x12	; 18
     29c:	9a e7       	ldi	r25, 0x7A	; 122
     29e:	0e 94 8f 07 	call	0xf1e	; 0xf1e <_Z10UART1_Initjhh>
	
	RotaryEncoder_Init();
     2a2:	0e 94 b0 04 	call	0x960	; 0x960 <_Z18RotaryEncoder_Initv>
	SP10281_Init();
     2a6:	0e 94 b7 05 	call	0xb6e	; 0xb6e <_Z12SP10281_Initv>
	UI_Init();
     2aa:	0e 94 6f 08 	call	0x10de	; 0x10de <_Z7UI_Initv>
	MIDI_Init();
     2ae:	0e 94 95 02 	call	0x52a	; 0x52a <_Z9MIDI_Initv>
	
	sei();	// Global Enable Interrupt
     2b2:	78 94       	sei
	
	/* Main loop */
    while (1) 
    {
		/* Handle incoming MIDI */
		if (UART1_Available())
     2b4:	0e 94 0d 08 	call	0x101a	; 0x101a <_Z15UART1_Availablev>
     2b8:	89 2b       	or	r24, r25
     2ba:	11 f0       	breq	.+4      	; 0x2c0 <main+0x3e>
		{
			MIDI_ReceiveIncoming();
     2bc:	0e 94 a8 02 	call	0x550	; 0x550 <_Z20MIDI_ReceiveIncomingv>
		}
		
		if (MIDI_ProgramChangeFlag)
     2c0:	80 91 2f 01 	lds	r24, 0x012F	; 0x80012f <MIDI_ProgramChangeFlag>
     2c4:	88 23       	and	r24, r24
     2c6:	21 f0       	breq	.+8      	; 0x2d0 <main+0x4e>
		{
			MIDI_ProgramChangeFlag = false;
     2c8:	10 92 2f 01 	sts	0x012F, r1	; 0x80012f <MIDI_ProgramChangeFlag>
			Handle_MIDIProgramChange();
     2cc:	0e 94 69 00 	call	0xd2	; 0xd2 <_Z24Handle_MIDIProgramChangev>
		}
		
		/* Handle incoming data from Pedal */
		while (UART0_Available())
     2d0:	0e 94 12 07 	call	0xe24	; 0xe24 <_Z15UART0_Availablev>
     2d4:	89 2b       	or	r24, r25
     2d6:	19 f0       	breq	.+6      	; 0x2de <main+0x5c>
		{
			PedalComm_Receive();
     2d8:	0e 94 fa 02 	call	0x5f4	; 0x5f4 <_Z17PedalComm_Receivev>
			MIDI_ProgramChangeFlag = false;
			Handle_MIDIProgramChange();
		}
		
		/* Handle incoming data from Pedal */
		while (UART0_Available())
     2dc:	f9 cf       	rjmp	.-14     	; 0x2d0 <main+0x4e>
		{
			PedalComm_Receive();
		}
		
		/* Handle command received from pedal. (Only once per program loop) */
		if (PedalComm_RxAvailable())
     2de:	0e 94 e3 02 	call	0x5c6	; 0x5c6 <_Z21PedalComm_RxAvailablev>
     2e2:	81 11       	cpse	r24, r1
		{
			PedalComm_HandleReceived();
     2e4:	0e 94 b0 03 	call	0x760	; 0x760 <_Z24PedalComm_HandleReceivedv>
		}
		
		/* Transmit command to Pedal if any are queued up */
		if (PedalComm_TxAvailable())
     2e8:	0e 94 ec 02 	call	0x5d8	; 0x5d8 <_Z21PedalComm_TxAvailablev>
     2ec:	81 11       	cpse	r24, r1
		{
			PedalComm_PutCommand();
     2ee:	0e 94 e1 03 	call	0x7c2	; 0x7c2 <_Z20PedalComm_PutCommandv>
		}
		
		/* Transmit data to Pedal */
		if (PedalComm_DelayTxFlag)
     2f2:	80 91 3a 01 	lds	r24, 0x013A	; 0x80013a <PedalComm_DelayTxFlag>
     2f6:	88 23       	and	r24, r24
     2f8:	21 f0       	breq	.+8      	; 0x302 <main+0x80>
		{
			PedalComm_DelayTxFlag = false;
     2fa:	10 92 3a 01 	sts	0x013A, r1	; 0x80013a <PedalComm_DelayTxFlag>
			PedalComm_Transmit();
     2fe:	0e 94 85 04 	call	0x90a	; 0x90a <_Z18PedalComm_Transmitv>
		}
		
		/* Handle Rotary Encoder input */
		if (RotEnc_State != IDLE && RotEnc_State != PRESSED && RotEnc_State != ABORTED)
     302:	80 91 af 01 	lds	r24, 0x01AF	; 0x8001af <RotEnc_State>
     306:	88 23       	and	r24, r24
     308:	41 f0       	breq	.+16     	; 0x31a <main+0x98>
     30a:	80 91 af 01 	lds	r24, 0x01AF	; 0x8001af <RotEnc_State>
     30e:	84 30       	cpi	r24, 0x04	; 4
     310:	21 f0       	breq	.+8      	; 0x31a <main+0x98>
     312:	80 91 af 01 	lds	r24, 0x01AF	; 0x8001af <RotEnc_State>
     316:	85 30       	cpi	r24, 0x05	; 5
     318:	99 f4       	brne	.+38     	; 0x340 <main+0xbe>
		{
			Handle_RotaryEncoderAction();
		}
		
		/* Service 7-segment display */
		if (SP10281_OvfFlag)
     31a:	80 91 b3 01 	lds	r24, 0x01B3	; 0x8001b3 <SP10281_OvfFlag>
     31e:	88 23       	and	r24, r24
     320:	21 f0       	breq	.+8      	; 0x32a <main+0xa8>
		{
			SP10281_OvfFlag = 0;
     322:	10 92 b3 01 	sts	0x01B3, r1	; 0x8001b3 <SP10281_OvfFlag>
			SP10281_Update();
     326:	0e 94 0c 05 	call	0xa18	; 0xa18 <_Z14SP10281_Updatev>
		}
		
		/* Blink UI LEDs */
		if (MCP_Output::AutoToggle_Flag)
     32a:	80 91 2b 01 	lds	r24, 0x012B	; 0x80012b <_ZN10MCP_Output15AutoToggle_FlagE>
     32e:	88 23       	and	r24, r24
     330:	09 f4       	brne	.+2      	; 0x334 <main+0xb2>
     332:	c0 cf       	rjmp	.-128    	; 0x2b4 <main+0x32>
		{
			MCP_Output::AutoToggle_Flag = 0;
     334:	10 92 2b 01 	sts	0x012B, r1	; 0x80012b <_ZN10MCP_Output15AutoToggle_FlagE>
			MCP_Output::PerformAutoToggle(MCP23017_UI_LEDS_ADDR);
     338:	80 e0       	ldi	r24, 0x00	; 0
     33a:	0e 94 76 02 	call	0x4ec	; 0x4ec <_ZN10MCP_Output17PerformAutoToggleEh>
     33e:	ba cf       	rjmp	.-140    	; 0x2b4 <main+0x32>
		}
		
		/* Handle Rotary Encoder input */
		if (RotEnc_State != IDLE && RotEnc_State != PRESSED && RotEnc_State != ABORTED)
		{
			Handle_RotaryEncoderAction();
     340:	0e 94 84 00 	call	0x108	; 0x108 <_Z26Handle_RotaryEncoderActionv>
     344:	ea cf       	rjmp	.-44     	; 0x31a <main+0x98>

00000346 <_Z17MCP23017_WriteReghhh>:
	{
		MCP_Output::AutoToggle_PortA |= (1 << Pin);
	}
	else
	{
		MCP_Output::AutoToggle_PortB |= (1 << Pin);
     346:	cf 93       	push	r28
     348:	df 93       	push	r29
     34a:	d6 2f       	mov	r29, r22
     34c:	c4 2f       	mov	r28, r20
     34e:	80 62       	ori	r24, 0x20	; 32
     350:	88 0f       	add	r24, r24
     352:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <_Z9i2c_starth>
     356:	8d 2f       	mov	r24, r29
     358:	0e 94 24 01 	call	0x248	; 0x248 <_Z9i2c_writeh>
     35c:	8c 2f       	mov	r24, r28
     35e:	0e 94 24 01 	call	0x248	; 0x248 <_Z9i2c_writeh>
     362:	0e 94 1b 01 	call	0x236	; 0x236 <_Z8i2c_stopv>
     366:	df 91       	pop	r29
     368:	cf 91       	pop	r28
     36a:	08 95       	ret

0000036c <_Z16MCP23017_ReadReghh>:
     36c:	cf 93       	push	r28
     36e:	df 93       	push	r29
     370:	d6 2f       	mov	r29, r22
     372:	80 62       	ori	r24, 0x20	; 32
     374:	c8 2f       	mov	r28, r24
     376:	cc 0f       	add	r28, r28
     378:	8c 2f       	mov	r24, r28
     37a:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <_Z9i2c_starth>
     37e:	8d 2f       	mov	r24, r29
     380:	0e 94 24 01 	call	0x248	; 0x248 <_Z9i2c_writeh>
     384:	0e 94 1b 01 	call	0x236	; 0x236 <_Z8i2c_stopv>
     388:	8c 2f       	mov	r24, r28
     38a:	81 60       	ori	r24, 0x01	; 1
     38c:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <_Z9i2c_starth>
     390:	0e 94 36 01 	call	0x26c	; 0x26c <_Z11i2c_readNakv>
     394:	df 91       	pop	r29
     396:	cf 91       	pop	r28
     398:	08 95       	ret

0000039a <_ZN10MCP_OutputC1Ev>:
     39a:	08 95       	ret

0000039c <_ZN10MCP_Output3SetEv>:
     39c:	1f 93       	push	r17
     39e:	cf 93       	push	r28
     3a0:	df 93       	push	r29
     3a2:	ec 01       	movw	r28, r24
     3a4:	89 81       	ldd	r24, Y+1	; 0x01
     3a6:	81 11       	cpse	r24, r1
     3a8:	10 c0       	rjmp	.+32     	; 0x3ca <_ZN10MCP_Output3SetEv+0x2e>
     3aa:	20 91 2a 01 	lds	r18, 0x012A	; 0x80012a <_ZN10MCP_Output16AutoToggle_PortAE>
     3ae:	81 e0       	ldi	r24, 0x01	; 1
     3b0:	90 e0       	ldi	r25, 0x00	; 0
     3b2:	0a 80       	ldd	r0, Y+2	; 0x02
     3b4:	02 c0       	rjmp	.+4      	; 0x3ba <_ZN10MCP_Output3SetEv+0x1e>
     3b6:	88 0f       	add	r24, r24
     3b8:	99 1f       	adc	r25, r25
     3ba:	0a 94       	dec	r0
     3bc:	e2 f7       	brpl	.-8      	; 0x3b6 <_ZN10MCP_Output3SetEv+0x1a>
     3be:	80 95       	com	r24
     3c0:	82 23       	and	r24, r18
     3c2:	80 93 2a 01 	sts	0x012A, r24	; 0x80012a <_ZN10MCP_Output16AutoToggle_PortAE>
     3c6:	14 e1       	ldi	r17, 0x14	; 20
     3c8:	0f c0       	rjmp	.+30     	; 0x3e8 <_ZN10MCP_Output3SetEv+0x4c>
     3ca:	20 91 29 01 	lds	r18, 0x0129	; 0x800129 <_ZN10MCP_Output16AutoToggle_PortBE>
     3ce:	81 e0       	ldi	r24, 0x01	; 1
     3d0:	90 e0       	ldi	r25, 0x00	; 0
     3d2:	0a 80       	ldd	r0, Y+2	; 0x02
     3d4:	02 c0       	rjmp	.+4      	; 0x3da <_ZN10MCP_Output3SetEv+0x3e>
     3d6:	88 0f       	add	r24, r24
     3d8:	99 1f       	adc	r25, r25
     3da:	0a 94       	dec	r0
     3dc:	e2 f7       	brpl	.-8      	; 0x3d6 <_ZN10MCP_Output3SetEv+0x3a>
     3de:	80 95       	com	r24
     3e0:	82 23       	and	r24, r18
     3e2:	80 93 29 01 	sts	0x0129, r24	; 0x800129 <_ZN10MCP_Output16AutoToggle_PortBE>
     3e6:	15 e1       	ldi	r17, 0x15	; 21
     3e8:	61 2f       	mov	r22, r17
     3ea:	88 81       	ld	r24, Y
     3ec:	0e 94 b6 01 	call	0x36c	; 0x36c <_Z16MCP23017_ReadReghh>
     3f0:	41 e0       	ldi	r20, 0x01	; 1
     3f2:	50 e0       	ldi	r21, 0x00	; 0
     3f4:	0a 80       	ldd	r0, Y+2	; 0x02
     3f6:	02 c0       	rjmp	.+4      	; 0x3fc <_ZN10MCP_Output3SetEv+0x60>
     3f8:	44 0f       	add	r20, r20
     3fa:	55 1f       	adc	r21, r21
     3fc:	0a 94       	dec	r0
     3fe:	e2 f7       	brpl	.-8      	; 0x3f8 <_ZN10MCP_Output3SetEv+0x5c>
     400:	48 2b       	or	r20, r24
     402:	61 2f       	mov	r22, r17
     404:	88 81       	ld	r24, Y
     406:	0e 94 a3 01 	call	0x346	; 0x346 <_Z17MCP23017_WriteReghhh>
     40a:	81 e0       	ldi	r24, 0x01	; 1
     40c:	8b 83       	std	Y+3, r24	; 0x03
     40e:	df 91       	pop	r29
     410:	cf 91       	pop	r28
     412:	1f 91       	pop	r17
     414:	08 95       	ret

00000416 <_ZN10MCP_Output5ClearEv>:
     416:	1f 93       	push	r17
     418:	cf 93       	push	r28
     41a:	df 93       	push	r29
     41c:	ec 01       	movw	r28, r24
     41e:	89 81       	ldd	r24, Y+1	; 0x01
     420:	81 11       	cpse	r24, r1
     422:	10 c0       	rjmp	.+32     	; 0x444 <_ZN10MCP_Output5ClearEv+0x2e>
     424:	20 91 2a 01 	lds	r18, 0x012A	; 0x80012a <_ZN10MCP_Output16AutoToggle_PortAE>
     428:	81 e0       	ldi	r24, 0x01	; 1
     42a:	90 e0       	ldi	r25, 0x00	; 0
     42c:	0a 80       	ldd	r0, Y+2	; 0x02
     42e:	02 c0       	rjmp	.+4      	; 0x434 <_ZN10MCP_Output5ClearEv+0x1e>
     430:	88 0f       	add	r24, r24
     432:	99 1f       	adc	r25, r25
     434:	0a 94       	dec	r0
     436:	e2 f7       	brpl	.-8      	; 0x430 <_ZN10MCP_Output5ClearEv+0x1a>
     438:	80 95       	com	r24
     43a:	82 23       	and	r24, r18
     43c:	80 93 2a 01 	sts	0x012A, r24	; 0x80012a <_ZN10MCP_Output16AutoToggle_PortAE>
     440:	14 e1       	ldi	r17, 0x14	; 20
     442:	0f c0       	rjmp	.+30     	; 0x462 <_ZN10MCP_Output5ClearEv+0x4c>
     444:	20 91 29 01 	lds	r18, 0x0129	; 0x800129 <_ZN10MCP_Output16AutoToggle_PortBE>
     448:	81 e0       	ldi	r24, 0x01	; 1
     44a:	90 e0       	ldi	r25, 0x00	; 0
     44c:	0a 80       	ldd	r0, Y+2	; 0x02
     44e:	02 c0       	rjmp	.+4      	; 0x454 <_ZN10MCP_Output5ClearEv+0x3e>
     450:	88 0f       	add	r24, r24
     452:	99 1f       	adc	r25, r25
     454:	0a 94       	dec	r0
     456:	e2 f7       	brpl	.-8      	; 0x450 <_ZN10MCP_Output5ClearEv+0x3a>
     458:	80 95       	com	r24
     45a:	82 23       	and	r24, r18
     45c:	80 93 29 01 	sts	0x0129, r24	; 0x800129 <_ZN10MCP_Output16AutoToggle_PortBE>
     460:	15 e1       	ldi	r17, 0x15	; 21
     462:	61 2f       	mov	r22, r17
     464:	88 81       	ld	r24, Y
     466:	0e 94 b6 01 	call	0x36c	; 0x36c <_Z16MCP23017_ReadReghh>
     46a:	41 e0       	ldi	r20, 0x01	; 1
     46c:	50 e0       	ldi	r21, 0x00	; 0
     46e:	0a 80       	ldd	r0, Y+2	; 0x02
     470:	02 c0       	rjmp	.+4      	; 0x476 <_ZN10MCP_Output5ClearEv+0x60>
     472:	44 0f       	add	r20, r20
     474:	55 1f       	adc	r21, r21
     476:	0a 94       	dec	r0
     478:	e2 f7       	brpl	.-8      	; 0x472 <_ZN10MCP_Output5ClearEv+0x5c>
     47a:	40 95       	com	r20
     47c:	48 23       	and	r20, r24
     47e:	61 2f       	mov	r22, r17
     480:	88 81       	ld	r24, Y
     482:	0e 94 a3 01 	call	0x346	; 0x346 <_Z17MCP23017_WriteReghhh>
     486:	1b 82       	std	Y+3, r1	; 0x03
     488:	df 91       	pop	r29
     48a:	cf 91       	pop	r28
     48c:	1f 91       	pop	r17
     48e:	08 95       	ret

00000490 <_ZN10MCP_OutputC1Eh13MCP23017_Port12MCP23017_Pin>:
     490:	1f 93       	push	r17
     492:	cf 93       	push	r28
     494:	df 93       	push	r29
     496:	ec 01       	movw	r28, r24
     498:	86 2f       	mov	r24, r22
     49a:	68 83       	st	Y, r22
     49c:	49 83       	std	Y+1, r20	; 0x01
     49e:	2a 83       	std	Y+2, r18	; 0x02
     4a0:	11 e0       	ldi	r17, 0x01	; 1
     4a2:	41 11       	cpse	r20, r1
     4a4:	01 c0       	rjmp	.+2      	; 0x4a8 <_ZN10MCP_OutputC1Eh13MCP23017_Port12MCP23017_Pin+0x18>
     4a6:	10 e0       	ldi	r17, 0x00	; 0
     4a8:	61 2f       	mov	r22, r17
     4aa:	0e 94 b6 01 	call	0x36c	; 0x36c <_Z16MCP23017_ReadReghh>
     4ae:	41 e0       	ldi	r20, 0x01	; 1
     4b0:	50 e0       	ldi	r21, 0x00	; 0
     4b2:	0a 80       	ldd	r0, Y+2	; 0x02
     4b4:	02 c0       	rjmp	.+4      	; 0x4ba <_ZN10MCP_OutputC1Eh13MCP23017_Port12MCP23017_Pin+0x2a>
     4b6:	44 0f       	add	r20, r20
     4b8:	55 1f       	adc	r21, r21
     4ba:	0a 94       	dec	r0
     4bc:	e2 f7       	brpl	.-8      	; 0x4b6 <_ZN10MCP_OutputC1Eh13MCP23017_Port12MCP23017_Pin+0x26>
     4be:	40 95       	com	r20
     4c0:	48 23       	and	r20, r24
     4c2:	61 2f       	mov	r22, r17
     4c4:	88 81       	ld	r24, Y
     4c6:	0e 94 a3 01 	call	0x346	; 0x346 <_Z17MCP23017_WriteReghhh>
     4ca:	ce 01       	movw	r24, r28
     4cc:	0e 94 0b 02 	call	0x416	; 0x416 <_ZN10MCP_Output5ClearEv>
     4d0:	df 91       	pop	r29
     4d2:	cf 91       	pop	r28
     4d4:	1f 91       	pop	r17
     4d6:	08 95       	ret

000004d8 <_ZN10MCP_Output18SetAutoToggleSpeedEj>:
	}
}

void MCP_Output::SetAutoToggleSpeed(uint16_t ms)
{
	AutoToggle_Timeout = (uint16_t)Timer0_ms2cnt(ms);
     4d8:	bc 01       	movw	r22, r24
     4da:	80 e0       	ldi	r24, 0x00	; 0
     4dc:	90 e0       	ldi	r25, 0x00	; 0
     4de:	0e 94 d0 05 	call	0xba0	; 0xba0 <_Z13Timer0_ms2cntm>
     4e2:	70 93 01 01 	sts	0x0101, r23	; 0x800101 <_ZN10MCP_Output18AutoToggle_TimeoutE+0x1>
     4e6:	60 93 00 01 	sts	0x0100, r22	; 0x800100 <_ZN10MCP_Output18AutoToggle_TimeoutE>
     4ea:	08 95       	ret

000004ec <_ZN10MCP_Output17PerformAutoToggleEh>:
}

void MCP_Output::PerformAutoToggle(uint8_t addr)
{
     4ec:	1f 93       	push	r17
     4ee:	cf 93       	push	r28
     4f0:	df 93       	push	r29
     4f2:	c8 2f       	mov	r28, r24
	uint8_t valA = MCP23017_ReadReg(addr, OLATA);
     4f4:	64 e1       	ldi	r22, 0x14	; 20
     4f6:	0e 94 b6 01 	call	0x36c	; 0x36c <_Z16MCP23017_ReadReghh>
     4fa:	18 2f       	mov	r17, r24
	uint8_t valB = MCP23017_ReadReg(addr, OLATB);
     4fc:	65 e1       	ldi	r22, 0x15	; 21
     4fe:	8c 2f       	mov	r24, r28
     500:	0e 94 b6 01 	call	0x36c	; 0x36c <_Z16MCP23017_ReadReghh>
	
	valA ^= MCP_Output::AutoToggle_PortA;
     504:	40 91 2a 01 	lds	r20, 0x012A	; 0x80012a <_ZN10MCP_Output16AutoToggle_PortAE>
	valB ^= MCP_Output::AutoToggle_PortB;
     508:	d0 91 29 01 	lds	r29, 0x0129	; 0x800129 <_ZN10MCP_Output16AutoToggle_PortBE>
     50c:	d8 27       	eor	r29, r24
	
	MCP23017_WriteReg(addr, OLATA, valA);
     50e:	41 27       	eor	r20, r17
     510:	64 e1       	ldi	r22, 0x14	; 20
     512:	8c 2f       	mov	r24, r28
     514:	0e 94 a3 01 	call	0x346	; 0x346 <_Z17MCP23017_WriteReghhh>
	MCP23017_WriteReg(addr, OLATB, valB);
     518:	4d 2f       	mov	r20, r29
     51a:	65 e1       	ldi	r22, 0x15	; 21
     51c:	8c 2f       	mov	r24, r28
     51e:	0e 94 a3 01 	call	0x346	; 0x346 <_Z17MCP23017_WriteReghhh>
}
     522:	df 91       	pop	r29
     524:	cf 91       	pop	r28
     526:	1f 91       	pop	r17
     528:	08 95       	ret

0000052a <_Z9MIDI_Initv>:
volatile uint8_t MIDI_ReceivedProgram = 0;
volatile bool MIDI_ProgramChangeFlag = false;

void MIDI_Init()
{
	System_MIDI_Channel = eeprom_read_byte((uint8_t*)EEPROM_MIDI_CH_ADDR);
     52a:	80 e0       	ldi	r24, 0x00	; 0
     52c:	90 e0       	ldi	r25, 0x00	; 0
     52e:	0e 94 95 09 	call	0x132a	; 0x132a <eeprom_read_byte>
     532:	80 93 34 01 	sts	0x0134, r24	; 0x800134 <System_MIDI_Channel>
	
	if (System_MIDI_Channel > MIDI_CH_MAX)
     536:	80 91 34 01 	lds	r24, 0x0134	; 0x800134 <System_MIDI_Channel>
     53a:	81 31       	cpi	r24, 0x11	; 17
     53c:	40 f0       	brcs	.+16     	; 0x54e <_Z9MIDI_Initv+0x24>
	{
		System_MIDI_Channel = MIDI_CH_OMNI;
     53e:	10 92 34 01 	sts	0x0134, r1	; 0x800134 <System_MIDI_Channel>
		eeprom_write_byte((uint8_t*)EEPROM_MIDI_CH_ADDR, System_MIDI_Channel);
     542:	60 91 34 01 	lds	r22, 0x0134	; 0x800134 <System_MIDI_Channel>
     546:	80 e0       	ldi	r24, 0x00	; 0
     548:	90 e0       	ldi	r25, 0x00	; 0
     54a:	0e 94 9d 09 	call	0x133a	; 0x133a <eeprom_write_byte>
     54e:	08 95       	ret

00000550 <_Z20MIDI_ReceiveIncomingv>:
	}
}


void MIDI_ReceiveIncoming()
{
     550:	cf 93       	push	r28
     552:	df 93       	push	r29
	static uint8_t RX_ByteCnt = 0;
	
	MIDI_RxBuffer[RX_ByteCnt] = UART1_GetChar();
     554:	c0 91 2e 01 	lds	r28, 0x012E	; 0x80012e <_ZZ20MIDI_ReceiveIncomingvE10RX_ByteCnt>
     558:	d0 e0       	ldi	r29, 0x00	; 0
     55a:	0e 94 f2 07 	call	0xfe4	; 0xfe4 <_Z13UART1_GetCharv>
     55e:	cf 5c       	subi	r28, 0xCF	; 207
     560:	de 4f       	sbci	r29, 0xFE	; 254
     562:	88 83       	st	Y, r24
	
	if (RX_ByteCnt == 0)
     564:	80 91 2e 01 	lds	r24, 0x012E	; 0x80012e <_ZZ20MIDI_ReceiveIncomingvE10RX_ByteCnt>
     568:	81 11       	cpse	r24, r1
     56a:	18 c0       	rjmp	.+48     	; 0x59c <_Z20MIDI_ReceiveIncomingv+0x4c>
	{
		/* Check if command is a Program Change */
		if ( (MIDI_RxBuffer[RX_ByteCnt] & 0xF0) == 0xC0 )
     56c:	80 91 31 01 	lds	r24, 0x0131	; 0x800131 <MIDI_RxBuffer>
     570:	80 7f       	andi	r24, 0xF0	; 240
     572:	80 3c       	cpi	r24, 0xC0	; 192
     574:	29 f5       	brne	.+74     	; 0x5c0 <_Z20MIDI_ReceiveIncomingv+0x70>
		{
			/* Check if command is relevant to this device */
			if ( (System_MIDI_Channel == MIDI_CH_OMNI) || ( (MIDI_RxBuffer[RX_ByteCnt] & 0x0F) != (System_MIDI_Channel-1) ) )
     576:	80 91 34 01 	lds	r24, 0x0134	; 0x800134 <System_MIDI_Channel>
     57a:	88 23       	and	r24, r24
     57c:	59 f0       	breq	.+22     	; 0x594 <_Z20MIDI_ReceiveIncomingv+0x44>
     57e:	20 91 31 01 	lds	r18, 0x0131	; 0x800131 <MIDI_RxBuffer>
     582:	80 91 34 01 	lds	r24, 0x0134	; 0x800134 <System_MIDI_Channel>
     586:	2f 70       	andi	r18, 0x0F	; 15
     588:	30 e0       	ldi	r19, 0x00	; 0
     58a:	90 e0       	ldi	r25, 0x00	; 0
     58c:	01 97       	sbiw	r24, 0x01	; 1
     58e:	28 17       	cp	r18, r24
     590:	39 07       	cpc	r19, r25
     592:	b1 f0       	breq	.+44     	; 0x5c0 <_Z20MIDI_ReceiveIncomingv+0x70>
			{
				RX_ByteCnt++;
     594:	81 e0       	ldi	r24, 0x01	; 1
     596:	80 93 2e 01 	sts	0x012E, r24	; 0x80012e <_ZZ20MIDI_ReceiveIncomingvE10RX_ByteCnt>
     59a:	12 c0       	rjmp	.+36     	; 0x5c0 <_Z20MIDI_ReceiveIncomingv+0x70>
		}
	}
	else if (RX_ByteCnt > 0)
	{
		/* Check if data byte contains a valid MIDI program (is between 0 and 127) */
		if (MIDI_RxBuffer[RX_ByteCnt] <= MIDI_PC_MAX)
     59c:	90 e0       	ldi	r25, 0x00	; 0
     59e:	fc 01       	movw	r30, r24
     5a0:	ef 5c       	subi	r30, 0xCF	; 207
     5a2:	fe 4f       	sbci	r31, 0xFE	; 254
     5a4:	20 81       	ld	r18, Z
     5a6:	22 23       	and	r18, r18
     5a8:	4c f0       	brlt	.+18     	; 0x5bc <_Z20MIDI_ReceiveIncomingv+0x6c>
		{
			MIDI_ReceivedProgram = MIDI_RxBuffer[RX_ByteCnt];
     5aa:	fc 01       	movw	r30, r24
     5ac:	ef 5c       	subi	r30, 0xCF	; 207
     5ae:	fe 4f       	sbci	r31, 0xFE	; 254
     5b0:	80 81       	ld	r24, Z
     5b2:	80 93 30 01 	sts	0x0130, r24	; 0x800130 <MIDI_ReceivedProgram>
			MIDI_ProgramChangeFlag = true;
     5b6:	81 e0       	ldi	r24, 0x01	; 1
     5b8:	80 93 2f 01 	sts	0x012F, r24	; 0x80012f <MIDI_ProgramChangeFlag>
		}
		
		RX_ByteCnt = 0;
     5bc:	10 92 2e 01 	sts	0x012E, r1	; 0x80012e <_ZZ20MIDI_ReceiveIncomingvE10RX_ByteCnt>
	}
}
     5c0:	df 91       	pop	r29
     5c2:	cf 91       	pop	r28
     5c4:	08 95       	ret

000005c6 <_Z21PedalComm_RxAvailablev>:
	
	/* Activate receive */
	Select_RX_TX(receive);
	
	/* Enable TX Complete Interrupt */
	UCSR0B |= (1 << TXCIE0);
     5c6:	20 91 3e 01 	lds	r18, 0x013E	; 0x80013e <RxHead>
     5ca:	90 91 3d 01 	lds	r25, 0x013D	; 0x80013d <RxTail>
     5ce:	81 e0       	ldi	r24, 0x01	; 1
     5d0:	29 13       	cpse	r18, r25
     5d2:	01 c0       	rjmp	.+2      	; 0x5d6 <_Z21PedalComm_RxAvailablev+0x10>
     5d4:	80 e0       	ldi	r24, 0x00	; 0
     5d6:	08 95       	ret

000005d8 <_Z21PedalComm_TxAvailablev>:
     5d8:	20 91 3c 01 	lds	r18, 0x013C	; 0x80013c <TxHead>
     5dc:	90 91 3b 01 	lds	r25, 0x013B	; 0x80013b <TxTail>
     5e0:	81 e0       	ldi	r24, 0x01	; 1
     5e2:	29 13       	cpse	r18, r25
     5e4:	01 c0       	rjmp	.+2      	; 0x5e8 <_Z21PedalComm_TxAvailablev+0x10>
     5e6:	80 e0       	ldi	r24, 0x00	; 0
     5e8:	08 95       	ret

000005ea <_Z22PedalComm_FlushTxQueuev>:
     5ea:	80 91 3c 01 	lds	r24, 0x013C	; 0x80013c <TxHead>
     5ee:	80 93 3b 01 	sts	0x013B, r24	; 0x80013b <TxTail>
     5f2:	08 95       	ret

000005f4 <_Z17PedalComm_Receivev>:
     5f4:	cf 93       	push	r28
     5f6:	df 93       	push	r29
     5f8:	81 e0       	ldi	r24, 0x01	; 1
     5fa:	80 93 39 01 	sts	0x0139, r24	; 0x800139 <PedalComm_DelayTXOvfCnt>
     5fe:	c0 91 35 01 	lds	r28, 0x0135	; 0x800135 <_ZZ17PedalComm_ReceivevE10RX_ByteCnt>
     602:	d0 e0       	ldi	r29, 0x00	; 0
     604:	0e 94 f7 06 	call	0xdee	; 0xdee <_Z13UART0_GetCharv>
     608:	c1 56       	subi	r28, 0x61	; 97
     60a:	de 4f       	sbci	r29, 0xFE	; 254
     60c:	88 83       	st	Y, r24
     60e:	80 91 35 01 	lds	r24, 0x0135	; 0x800135 <_ZZ17PedalComm_ReceivevE10RX_ByteCnt>
     612:	8f 5f       	subi	r24, 0xFF	; 255
     614:	80 93 35 01 	sts	0x0135, r24	; 0x800135 <_ZZ17PedalComm_ReceivevE10RX_ByteCnt>
     618:	81 30       	cpi	r24, 0x01	; 1
     61a:	e1 f5       	brne	.+120    	; 0x694 <_Z17PedalComm_Receivev+0xa0>
     61c:	80 91 9f 01 	lds	r24, 0x019F	; 0x80019f <RX_Buffer>
     620:	8f 35       	cpi	r24, 0x5F	; 95
     622:	09 f4       	brne	.+2      	; 0x626 <_Z17PedalComm_Receivev+0x32>
     624:	9a c0       	rjmp	.+308    	; 0x75a <_Z17PedalComm_Receivev+0x166>
     626:	10 92 35 01 	sts	0x0135, r1	; 0x800135 <_ZZ17PedalComm_ReceivevE10RX_ByteCnt>
     62a:	80 91 9f 01 	lds	r24, 0x019F	; 0x80019f <RX_Buffer>
     62e:	8c 3a       	cpi	r24, 0xAC	; 172
     630:	a1 f4       	brne	.+40     	; 0x65a <_Z17PedalComm_Receivev+0x66>
     632:	10 92 38 01 	sts	0x0138, r1	; 0x800138 <PedalComm_ResponseTimeout_OvfCnt+0x1>
     636:	10 92 37 01 	sts	0x0137, r1	; 0x800137 <PedalComm_ResponseTimeout_OvfCnt>
     63a:	10 92 36 01 	sts	0x0136, r1	; 0x800136 <NackCnt>
     63e:	e0 91 3b 01 	lds	r30, 0x013B	; 0x80013b <TxTail>
     642:	f0 e0       	ldi	r31, 0x00	; 0
     644:	ee 0f       	add	r30, r30
     646:	ff 1f       	adc	r31, r31
     648:	ee 0f       	add	r30, r30
     64a:	ff 1f       	adc	r31, r31
     64c:	ee 0f       	add	r30, r30
     64e:	ff 1f       	adc	r31, r31
     650:	e1 5c       	subi	r30, 0xC1	; 193
     652:	fe 4f       	sbci	r31, 0xFE	; 254
     654:	81 e0       	ldi	r24, 0x01	; 1
     656:	87 83       	std	Z+7, r24	; 0x07
     658:	80 c0       	rjmp	.+256    	; 0x75a <_Z17PedalComm_Receivev+0x166>
     65a:	80 91 9f 01 	lds	r24, 0x019F	; 0x80019f <RX_Buffer>
     65e:	8a 32       	cpi	r24, 0x2A	; 42
     660:	09 f0       	breq	.+2      	; 0x664 <_Z17PedalComm_Receivev+0x70>
     662:	7b c0       	rjmp	.+246    	; 0x75a <_Z17PedalComm_Receivev+0x166>
     664:	80 91 36 01 	lds	r24, 0x0136	; 0x800136 <NackCnt>
     668:	8f 5f       	subi	r24, 0xFF	; 255
     66a:	80 93 36 01 	sts	0x0136, r24	; 0x800136 <NackCnt>
     66e:	84 30       	cpi	r24, 0x04	; 4
     670:	08 f0       	brcs	.+2      	; 0x674 <_Z17PedalComm_Receivev+0x80>
     672:	73 c0       	rjmp	.+230    	; 0x75a <_Z17PedalComm_Receivev+0x166>
     674:	e0 91 3b 01 	lds	r30, 0x013B	; 0x80013b <TxTail>
     678:	f0 e0       	ldi	r31, 0x00	; 0
     67a:	ee 0f       	add	r30, r30
     67c:	ff 1f       	adc	r31, r31
     67e:	ee 0f       	add	r30, r30
     680:	ff 1f       	adc	r31, r31
     682:	ee 0f       	add	r30, r30
     684:	ff 1f       	adc	r31, r31
     686:	e1 5c       	subi	r30, 0xC1	; 193
     688:	fe 4f       	sbci	r31, 0xFE	; 254
     68a:	16 82       	std	Z+6, r1	; 0x06
     68c:	81 e0       	ldi	r24, 0x01	; 1
     68e:	80 93 39 01 	sts	0x0139, r24	; 0x800139 <PedalComm_DelayTXOvfCnt>
     692:	63 c0       	rjmp	.+198    	; 0x75a <_Z17PedalComm_Receivev+0x166>
     694:	82 30       	cpi	r24, 0x02	; 2
     696:	79 f4       	brne	.+30     	; 0x6b6 <_Z17PedalComm_Receivev+0xc2>
     698:	e0 91 3e 01 	lds	r30, 0x013E	; 0x80013e <RxHead>
     69c:	f0 e0       	ldi	r31, 0x00	; 0
     69e:	80 91 a0 01 	lds	r24, 0x01A0	; 0x8001a0 <RX_Buffer+0x1>
     6a2:	ee 0f       	add	r30, r30
     6a4:	ff 1f       	adc	r31, r31
     6a6:	ee 0f       	add	r30, r30
     6a8:	ff 1f       	adc	r31, r31
     6aa:	ee 0f       	add	r30, r30
     6ac:	ff 1f       	adc	r31, r31
     6ae:	e1 58       	subi	r30, 0x81	; 129
     6b0:	fe 4f       	sbci	r31, 0xFE	; 254
     6b2:	81 83       	std	Z+1, r24	; 0x01
     6b4:	52 c0       	rjmp	.+164    	; 0x75a <_Z17PedalComm_Receivev+0x166>
     6b6:	e0 91 3e 01 	lds	r30, 0x013E	; 0x80013e <RxHead>
     6ba:	f0 e0       	ldi	r31, 0x00	; 0
     6bc:	ee 0f       	add	r30, r30
     6be:	ff 1f       	adc	r31, r31
     6c0:	ee 0f       	add	r30, r30
     6c2:	ff 1f       	adc	r31, r31
     6c4:	ee 0f       	add	r30, r30
     6c6:	ff 1f       	adc	r31, r31
     6c8:	e1 58       	subi	r30, 0x81	; 129
     6ca:	fe 4f       	sbci	r31, 0xFE	; 254
     6cc:	91 81       	ldd	r25, Z+1	; 0x01
     6ce:	89 13       	cpse	r24, r25
     6d0:	44 c0       	rjmp	.+136    	; 0x75a <_Z17PedalComm_Receivev+0x166>
     6d2:	e0 91 3e 01 	lds	r30, 0x013E	; 0x80013e <RxHead>
     6d6:	f0 e0       	ldi	r31, 0x00	; 0
     6d8:	ee 0f       	add	r30, r30
     6da:	ff 1f       	adc	r31, r31
     6dc:	ee 0f       	add	r30, r30
     6de:	ff 1f       	adc	r31, r31
     6e0:	ee 0f       	add	r30, r30
     6e2:	ff 1f       	adc	r31, r31
     6e4:	e1 58       	subi	r30, 0x81	; 129
     6e6:	fe 4f       	sbci	r31, 0xFE	; 254
     6e8:	e1 81       	ldd	r30, Z+1	; 0x01
     6ea:	f0 e0       	ldi	r31, 0x00	; 0
     6ec:	e2 56       	subi	r30, 0x62	; 98
     6ee:	fe 4f       	sbci	r31, 0xFE	; 254
     6f0:	80 81       	ld	r24, Z
     6f2:	8f 3e       	cpi	r24, 0xEF	; 239
     6f4:	51 f5       	brne	.+84     	; 0x74a <_Z17PedalComm_Receivev+0x156>
     6f6:	e0 91 3e 01 	lds	r30, 0x013E	; 0x80013e <RxHead>
     6fa:	f0 e0       	ldi	r31, 0x00	; 0
     6fc:	af e9       	ldi	r26, 0x9F	; 159
     6fe:	b1 e0       	ldi	r27, 0x01	; 1
     700:	12 96       	adiw	r26, 0x02	; 2
     702:	8c 91       	ld	r24, X
     704:	12 97       	sbiw	r26, 0x02	; 2
     706:	ee 0f       	add	r30, r30
     708:	ff 1f       	adc	r31, r31
     70a:	ee 0f       	add	r30, r30
     70c:	ff 1f       	adc	r31, r31
     70e:	ee 0f       	add	r30, r30
     710:	ff 1f       	adc	r31, r31
     712:	e1 58       	subi	r30, 0x81	; 129
     714:	fe 4f       	sbci	r31, 0xFE	; 254
     716:	80 83       	st	Z, r24
     718:	e0 91 3e 01 	lds	r30, 0x013E	; 0x80013e <RxHead>
     71c:	f0 e0       	ldi	r31, 0x00	; 0
     71e:	13 96       	adiw	r26, 0x03	; 3
     720:	8c 91       	ld	r24, X
     722:	ee 0f       	add	r30, r30
     724:	ff 1f       	adc	r31, r31
     726:	ee 0f       	add	r30, r30
     728:	ff 1f       	adc	r31, r31
     72a:	ee 0f       	add	r30, r30
     72c:	ff 1f       	adc	r31, r31
     72e:	e1 58       	subi	r30, 0x81	; 129
     730:	fe 4f       	sbci	r31, 0xFE	; 254
     732:	82 83       	std	Z+2, r24	; 0x02
     734:	80 91 3e 01 	lds	r24, 0x013E	; 0x80013e <RxHead>
     738:	8f 5f       	subi	r24, 0xFF	; 255
     73a:	83 70       	andi	r24, 0x03	; 3
     73c:	90 91 3d 01 	lds	r25, 0x013D	; 0x80013d <RxTail>
     740:	89 17       	cp	r24, r25
     742:	49 f0       	breq	.+18     	; 0x756 <_Z17PedalComm_Receivev+0x162>
     744:	80 93 3e 01 	sts	0x013E, r24	; 0x80013e <RxHead>
     748:	06 c0       	rjmp	.+12     	; 0x756 <_Z17PedalComm_Receivev+0x162>
     74a:	8a e2       	ldi	r24, 0x2A	; 42
     74c:	0e 94 1f 07 	call	0xe3e	; 0xe3e <_Z15UART0_QueueCharh>
     750:	81 e0       	ldi	r24, 0x01	; 1
     752:	80 93 39 01 	sts	0x0139, r24	; 0x800139 <PedalComm_DelayTXOvfCnt>
     756:	10 92 35 01 	sts	0x0135, r1	; 0x800135 <_ZZ17PedalComm_ReceivevE10RX_ByteCnt>
     75a:	df 91       	pop	r29
     75c:	cf 91       	pop	r28
     75e:	08 95       	ret

00000760 <_Z24PedalComm_HandleReceivedv>:
     760:	40 91 3d 01 	lds	r20, 0x013D	; 0x80013d <RxTail>
     764:	e0 91 3d 01 	lds	r30, 0x013D	; 0x80013d <RxTail>
     768:	f0 e0       	ldi	r31, 0x00	; 0
     76a:	ee 0f       	add	r30, r30
     76c:	ff 1f       	adc	r31, r31
     76e:	ee 0f       	add	r30, r30
     770:	ff 1f       	adc	r31, r31
     772:	ee 0f       	add	r30, r30
     774:	ff 1f       	adc	r31, r31
     776:	e1 58       	subi	r30, 0x81	; 129
     778:	fe 4f       	sbci	r31, 0xFE	; 254
     77a:	61 81       	ldd	r22, Z+1	; 0x01
     77c:	e0 91 3d 01 	lds	r30, 0x013D	; 0x80013d <RxTail>
     780:	f0 e0       	ldi	r31, 0x00	; 0
     782:	ee 0f       	add	r30, r30
     784:	ff 1f       	adc	r31, r31
     786:	ee 0f       	add	r30, r30
     788:	ff 1f       	adc	r31, r31
     78a:	ee 0f       	add	r30, r30
     78c:	ff 1f       	adc	r31, r31
     78e:	e1 58       	subi	r30, 0x81	; 129
     790:	fe 4f       	sbci	r31, 0xFE	; 254
     792:	80 81       	ld	r24, Z
     794:	50 e0       	ldi	r21, 0x00	; 0
     796:	44 0f       	add	r20, r20
     798:	55 1f       	adc	r21, r21
     79a:	44 0f       	add	r20, r20
     79c:	55 1f       	adc	r21, r21
     79e:	44 0f       	add	r20, r20
     7a0:	55 1f       	adc	r21, r21
     7a2:	4f 57       	subi	r20, 0x7F	; 127
     7a4:	5e 4f       	sbci	r21, 0xFE	; 254
     7a6:	0e 94 6a 00 	call	0xd4	; 0xd4 <_Z19Handle_PedalCommand3CMDhPh>
     7aa:	90 91 3d 01 	lds	r25, 0x013D	; 0x80013d <RxTail>
     7ae:	9f 5f       	subi	r25, 0xFF	; 255
     7b0:	93 70       	andi	r25, 0x03	; 3
     7b2:	90 93 3d 01 	sts	0x013D, r25	; 0x80013d <RxTail>
     7b6:	0e 94 1f 07 	call	0xe3e	; 0xe3e <_Z15UART0_QueueCharh>
     7ba:	81 e0       	ldi	r24, 0x01	; 1
     7bc:	80 93 39 01 	sts	0x0139, r24	; 0x800139 <PedalComm_DelayTXOvfCnt>
     7c0:	08 95       	ret

000007c2 <_Z20PedalComm_PutCommandv>:
     7c2:	cf 93       	push	r28
     7c4:	e0 91 3b 01 	lds	r30, 0x013B	; 0x80013b <TxTail>
     7c8:	f0 e0       	ldi	r31, 0x00	; 0
     7ca:	ee 0f       	add	r30, r30
     7cc:	ff 1f       	adc	r31, r31
     7ce:	ee 0f       	add	r30, r30
     7d0:	ff 1f       	adc	r31, r31
     7d2:	ee 0f       	add	r30, r30
     7d4:	ff 1f       	adc	r31, r31
     7d6:	e1 5c       	subi	r30, 0xC1	; 193
     7d8:	fe 4f       	sbci	r31, 0xFE	; 254
     7da:	87 81       	ldd	r24, Z+7	; 0x07
     7dc:	88 23       	and	r24, r24
     7de:	39 f0       	breq	.+14     	; 0x7ee <_Z20PedalComm_PutCommandv+0x2c>
     7e0:	80 91 3b 01 	lds	r24, 0x013B	; 0x80013b <TxTail>
     7e4:	8f 5f       	subi	r24, 0xFF	; 255
     7e6:	87 70       	andi	r24, 0x07	; 7
     7e8:	80 93 3b 01 	sts	0x013B, r24	; 0x80013b <TxTail>
     7ec:	84 c0       	rjmp	.+264    	; 0x8f6 <_Z20PedalComm_PutCommandv+0x134>
     7ee:	e0 91 3b 01 	lds	r30, 0x013B	; 0x80013b <TxTail>
     7f2:	f0 e0       	ldi	r31, 0x00	; 0
     7f4:	ee 0f       	add	r30, r30
     7f6:	ff 1f       	adc	r31, r31
     7f8:	ee 0f       	add	r30, r30
     7fa:	ff 1f       	adc	r31, r31
     7fc:	ee 0f       	add	r30, r30
     7fe:	ff 1f       	adc	r31, r31
     800:	e1 5c       	subi	r30, 0xC1	; 193
     802:	fe 4f       	sbci	r31, 0xFE	; 254
     804:	86 81       	ldd	r24, Z+6	; 0x06
     806:	81 11       	cpse	r24, r1
     808:	76 c0       	rjmp	.+236    	; 0x8f6 <_Z20PedalComm_PutCommandv+0x134>
     80a:	8f e5       	ldi	r24, 0x5F	; 95
     80c:	0e 94 1f 07 	call	0xe3e	; 0xe3e <_Z15UART0_QueueCharh>
     810:	e0 91 3b 01 	lds	r30, 0x013B	; 0x80013b <TxTail>
     814:	f0 e0       	ldi	r31, 0x00	; 0
     816:	ee 0f       	add	r30, r30
     818:	ff 1f       	adc	r31, r31
     81a:	ee 0f       	add	r30, r30
     81c:	ff 1f       	adc	r31, r31
     81e:	ee 0f       	add	r30, r30
     820:	ff 1f       	adc	r31, r31
     822:	e1 5c       	subi	r30, 0xC1	; 193
     824:	fe 4f       	sbci	r31, 0xFE	; 254
     826:	81 81       	ldd	r24, Z+1	; 0x01
     828:	0e 94 1f 07 	call	0xe3e	; 0xe3e <_Z15UART0_QueueCharh>
     82c:	e0 91 3b 01 	lds	r30, 0x013B	; 0x80013b <TxTail>
     830:	f0 e0       	ldi	r31, 0x00	; 0
     832:	ee 0f       	add	r30, r30
     834:	ff 1f       	adc	r31, r31
     836:	ee 0f       	add	r30, r30
     838:	ff 1f       	adc	r31, r31
     83a:	ee 0f       	add	r30, r30
     83c:	ff 1f       	adc	r31, r31
     83e:	e1 5c       	subi	r30, 0xC1	; 193
     840:	fe 4f       	sbci	r31, 0xFE	; 254
     842:	80 81       	ld	r24, Z
     844:	0e 94 1f 07 	call	0xe3e	; 0xe3e <_Z15UART0_QueueCharh>
     848:	e0 91 3b 01 	lds	r30, 0x013B	; 0x80013b <TxTail>
     84c:	f0 e0       	ldi	r31, 0x00	; 0
     84e:	ee 0f       	add	r30, r30
     850:	ff 1f       	adc	r31, r31
     852:	ee 0f       	add	r30, r30
     854:	ff 1f       	adc	r31, r31
     856:	ee 0f       	add	r30, r30
     858:	ff 1f       	adc	r31, r31
     85a:	e1 5c       	subi	r30, 0xC1	; 193
     85c:	fe 4f       	sbci	r31, 0xFE	; 254
     85e:	81 81       	ldd	r24, Z+1	; 0x01
     860:	90 e0       	ldi	r25, 0x00	; 0
     862:	04 97       	sbiw	r24, 0x04	; 4
     864:	18 16       	cp	r1, r24
     866:	19 06       	cpc	r1, r25
     868:	4c f5       	brge	.+82     	; 0x8bc <_Z20PedalComm_PutCommandv+0xfa>
     86a:	20 e0       	ldi	r18, 0x00	; 0
     86c:	30 e0       	ldi	r19, 0x00	; 0
     86e:	c0 e0       	ldi	r28, 0x00	; 0
     870:	80 91 3b 01 	lds	r24, 0x013B	; 0x80013b <TxTail>
     874:	e8 2f       	mov	r30, r24
     876:	f0 e0       	ldi	r31, 0x00	; 0
     878:	ee 0f       	add	r30, r30
     87a:	ff 1f       	adc	r31, r31
     87c:	ee 0f       	add	r30, r30
     87e:	ff 1f       	adc	r31, r31
     880:	ee 0f       	add	r30, r30
     882:	ff 1f       	adc	r31, r31
     884:	e1 5c       	subi	r30, 0xC1	; 193
     886:	fe 4f       	sbci	r31, 0xFE	; 254
     888:	e2 0f       	add	r30, r18
     88a:	f3 1f       	adc	r31, r19
     88c:	82 81       	ldd	r24, Z+2	; 0x02
     88e:	0e 94 1f 07 	call	0xe3e	; 0xe3e <_Z15UART0_QueueCharh>
     892:	cf 5f       	subi	r28, 0xFF	; 255
     894:	2c 2f       	mov	r18, r28
     896:	30 e0       	ldi	r19, 0x00	; 0
     898:	a0 91 3b 01 	lds	r26, 0x013B	; 0x80013b <TxTail>
     89c:	b0 e0       	ldi	r27, 0x00	; 0
     89e:	aa 0f       	add	r26, r26
     8a0:	bb 1f       	adc	r27, r27
     8a2:	aa 0f       	add	r26, r26
     8a4:	bb 1f       	adc	r27, r27
     8a6:	aa 0f       	add	r26, r26
     8a8:	bb 1f       	adc	r27, r27
     8aa:	a1 5c       	subi	r26, 0xC1	; 193
     8ac:	be 4f       	sbci	r27, 0xFE	; 254
     8ae:	11 96       	adiw	r26, 0x01	; 1
     8b0:	8c 91       	ld	r24, X
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	04 97       	sbiw	r24, 0x04	; 4
     8b6:	28 17       	cp	r18, r24
     8b8:	39 07       	cpc	r19, r25
     8ba:	d4 f2       	brlt	.-76     	; 0x870 <_Z20PedalComm_PutCommandv+0xae>
     8bc:	8f ee       	ldi	r24, 0xEF	; 239
     8be:	0e 94 1f 07 	call	0xe3e	; 0xe3e <_Z15UART0_QueueCharh>
     8c2:	80 91 39 01 	lds	r24, 0x0139	; 0x800139 <PedalComm_DelayTXOvfCnt>
     8c6:	81 11       	cpse	r24, r1
     8c8:	03 c0       	rjmp	.+6      	; 0x8d0 <_Z20PedalComm_PutCommandv+0x10e>
     8ca:	81 e0       	ldi	r24, 0x01	; 1
     8cc:	80 93 3a 01 	sts	0x013A, r24	; 0x80013a <PedalComm_DelayTxFlag>
     8d0:	e0 91 3b 01 	lds	r30, 0x013B	; 0x80013b <TxTail>
     8d4:	f0 e0       	ldi	r31, 0x00	; 0
     8d6:	ee 0f       	add	r30, r30
     8d8:	ff 1f       	adc	r31, r31
     8da:	ee 0f       	add	r30, r30
     8dc:	ff 1f       	adc	r31, r31
     8de:	ee 0f       	add	r30, r30
     8e0:	ff 1f       	adc	r31, r31
     8e2:	e1 5c       	subi	r30, 0xC1	; 193
     8e4:	fe 4f       	sbci	r31, 0xFE	; 254
     8e6:	81 e0       	ldi	r24, 0x01	; 1
     8e8:	86 83       	std	Z+6, r24	; 0x06
     8ea:	81 e0       	ldi	r24, 0x01	; 1
     8ec:	90 e0       	ldi	r25, 0x00	; 0
     8ee:	90 93 38 01 	sts	0x0138, r25	; 0x800138 <PedalComm_ResponseTimeout_OvfCnt+0x1>
     8f2:	80 93 37 01 	sts	0x0137, r24	; 0x800137 <PedalComm_ResponseTimeout_OvfCnt>
     8f6:	cf 91       	pop	r28
     8f8:	08 95       	ret

000008fa <_Z12Select_RX_TX13CommDirection>:
     8fa:	81 30       	cpi	r24, 0x01	; 1
     8fc:	19 f4       	brne	.+6      	; 0x904 <__stack+0x5>
     8fe:	2b 98       	cbi	0x05, 3	; 5
     900:	2c 9a       	sbi	0x05, 4	; 5
     902:	08 95       	ret
     904:	2c 98       	cbi	0x05, 4	; 5
     906:	2b 9a       	sbi	0x05, 3	; 5
     908:	08 95       	ret

0000090a <_Z18PedalComm_Transmitv>:


void PedalComm_Transmit()
{
	/* Activate Transmit */
	Select_RX_TX(transmit);
     90a:	81 e0       	ldi	r24, 0x01	; 1
     90c:	0e 94 7d 04 	call	0x8fa	; 0x8fa <_Z12Select_RX_TX13CommDirection>
	
	/* Start transmit */
	UART0_PutQueue();
     910:	0e 94 34 07 	call	0xe68	; 0xe68 <_Z14UART0_PutQueuev>
     914:	08 95       	ret

00000916 <__vector_22>:
	}
}

/* TX Complete Interrupt ISR */
ISR(USART0_TX_vect)
{
     916:	1f 92       	push	r1
     918:	0f 92       	push	r0
     91a:	0f b6       	in	r0, 0x3f	; 63
     91c:	0f 92       	push	r0
     91e:	11 24       	eor	r1, r1
     920:	2f 93       	push	r18
     922:	3f 93       	push	r19
     924:	4f 93       	push	r20
     926:	5f 93       	push	r21
     928:	6f 93       	push	r22
     92a:	7f 93       	push	r23
     92c:	8f 93       	push	r24
     92e:	9f 93       	push	r25
     930:	af 93       	push	r26
     932:	bf 93       	push	r27
     934:	ef 93       	push	r30
     936:	ff 93       	push	r31
	/* Deactivate Transmit */
	Select_RX_TX(receive);
     938:	80 e0       	ldi	r24, 0x00	; 0
     93a:	0e 94 7d 04 	call	0x8fa	; 0x8fa <_Z12Select_RX_TX13CommDirection>
     93e:	ff 91       	pop	r31
     940:	ef 91       	pop	r30
     942:	bf 91       	pop	r27
     944:	af 91       	pop	r26
     946:	9f 91       	pop	r25
     948:	8f 91       	pop	r24
     94a:	7f 91       	pop	r23
     94c:	6f 91       	pop	r22
     94e:	5f 91       	pop	r21
     950:	4f 91       	pop	r20
     952:	3f 91       	pop	r19
     954:	2f 91       	pop	r18
     956:	0f 90       	pop	r0
     958:	0f be       	out	0x3f, r0	; 63
     95a:	0f 90       	pop	r0
     95c:	1f 90       	pop	r1
     95e:	18 95       	reti

00000960 <_Z18RotaryEncoder_Initv>:
volatile enum RotaryEncoder_State RotEnc_State = IDLE;

void RotaryEncoder_Init()
{
	/* Setup input GPIO pins */
	GPIO_ROT_ENC_DDR &= ~(GPIO_ROT_ENC_PRESS_MASK | GPIO_ROT_ENC_INDICATOR_MASK | GPIO_ROT_ENC_TRIGGER_MASK);
     960:	84 b1       	in	r24, 0x04	; 4
     962:	88 7f       	andi	r24, 0xF8	; 248
     964:	84 b9       	out	0x04, r24	; 4
	
	/* Setup Pin Change interrupt */
	PCMSK1 |= (1 << PCINT8_BIT);	// Enable Pin Change interrupt for Pin 1 (PCINT8)
     966:	ec e6       	ldi	r30, 0x6C	; 108
     968:	f0 e0       	ldi	r31, 0x00	; 0
     96a:	80 81       	ld	r24, Z
     96c:	81 60       	ori	r24, 0x01	; 1
     96e:	80 83       	st	Z, r24
	PCICR |= (1 << PCIE1);			// Enable Pin Change interrupt PCINT[15:8]
     970:	e8 e6       	ldi	r30, 0x68	; 104
     972:	f0 e0       	ldi	r31, 0x00	; 0
     974:	80 81       	ld	r24, Z
     976:	82 60       	ori	r24, 0x02	; 2
     978:	80 83       	st	Z, r24
	
	/* Setup Interrupt Sense (INT2) */
	EICRA |= ((1 << ISC21) | (1 << ISC20));		// Rising edge trigger for INT2
     97a:	e9 e6       	ldi	r30, 0x69	; 105
     97c:	f0 e0       	ldi	r31, 0x00	; 0
     97e:	80 81       	ld	r24, Z
     980:	80 63       	ori	r24, 0x30	; 48
     982:	80 83       	st	Z, r24
	EIMSK |= (1 << INT2);						// Enable External Interrupt Request (INT2)
     984:	ea 9a       	sbi	0x1d, 2	; 29
     986:	08 95       	ret

00000988 <_Z29RotaryEncoder_EnableInterruptv>:
}

void RotaryEncoder_EnableInterrupt()
{
	/* Clear and reenable interrupt */
	EIFR |= (1 << INTF2);		// Clear External interrupt (INT2) Flag
     988:	e2 9a       	sbi	0x1c, 2	; 28
	PCIFR |= (1 << PCIF1);		// Clear Pin Change interrupt Flag
     98a:	d9 9a       	sbi	0x1b, 1	; 27
	EIMSK |= (1 << INT2);		// Enable External Interrupt Request (INT2)
     98c:	ea 9a       	sbi	0x1d, 2	; 29
	PCICR |= (1 << PCIE1);		// Enable Pin Change interrupt (PCI1) PCINT[15:8]
     98e:	e8 e6       	ldi	r30, 0x68	; 104
     990:	f0 e0       	ldi	r31, 0x00	; 0
     992:	80 81       	ld	r24, Z
     994:	82 60       	ori	r24, 0x02	; 2
     996:	80 83       	st	Z, r24
     998:	08 95       	ret

0000099a <__vector_5>:


/* Pin Change Interrupt Request 1 Service Routine */
/* To handle Rotary Encoder Rotation */
ISR(PCINT1_vect)
{
     99a:	1f 92       	push	r1
     99c:	0f 92       	push	r0
     99e:	0f b6       	in	r0, 0x3f	; 63
     9a0:	0f 92       	push	r0
     9a2:	11 24       	eor	r1, r1
     9a4:	8f 93       	push	r24
     9a6:	ef 93       	push	r30
     9a8:	ff 93       	push	r31
	if (GPIO_ROT_ENC_PIN & GPIO_ROT_ENC_TRIGGER_MASK)	// Only react on rising edge
     9aa:	18 9b       	sbis	0x03, 0	; 3
     9ac:	0f c0       	rjmp	.+30     	; 0x9cc <__vector_5+0x32>
	{
		/* Disable External interrupts */
		EIMSK &= ~(1 << INT2);		// Disable External Interrupt Request (INT2)
     9ae:	ea 98       	cbi	0x1d, 2	; 29
		PCICR &= ~(1 << PCIE1);		// Disable Pin Change interrupt (PCI1) PCINT[15:8]
     9b0:	e8 e6       	ldi	r30, 0x68	; 104
     9b2:	f0 e0       	ldi	r31, 0x00	; 0
     9b4:	80 81       	ld	r24, Z
     9b6:	8d 7f       	andi	r24, 0xFD	; 253
     9b8:	80 83       	st	Z, r24
		
		/* Determine Left/Right turn */
		if (GPIO_ROT_ENC_PIN & GPIO_ROT_ENC_INDICATOR_MASK)
     9ba:	19 9b       	sbis	0x03, 1	; 3
     9bc:	04 c0       	rjmp	.+8      	; 0x9c6 <__vector_5+0x2c>
			RotEnc_State = ROT_RIGHT;
     9be:	81 e0       	ldi	r24, 0x01	; 1
     9c0:	80 93 af 01 	sts	0x01AF, r24	; 0x8001af <RotEnc_State>
     9c4:	03 c0       	rjmp	.+6      	; 0x9cc <__vector_5+0x32>
		else
			RotEnc_State = ROT_LEFT;
     9c6:	82 e0       	ldi	r24, 0x02	; 2
     9c8:	80 93 af 01 	sts	0x01AF, r24	; 0x8001af <RotEnc_State>
	}
}
     9cc:	ff 91       	pop	r31
     9ce:	ef 91       	pop	r30
     9d0:	8f 91       	pop	r24
     9d2:	0f 90       	pop	r0
     9d4:	0f be       	out	0x3f, r0	; 63
     9d6:	0f 90       	pop	r0
     9d8:	1f 90       	pop	r1
     9da:	18 95       	reti

000009dc <__vector_3>:

/* External Interrupt Request 2 Service routine */
/* To handle Rotary Encoder Press */
ISR(INT2_vect)
{
     9dc:	1f 92       	push	r1
     9de:	0f 92       	push	r0
     9e0:	0f b6       	in	r0, 0x3f	; 63
     9e2:	0f 92       	push	r0
     9e4:	11 24       	eor	r1, r1
     9e6:	8f 93       	push	r24
     9e8:	9f 93       	push	r25
     9ea:	ef 93       	push	r30
     9ec:	ff 93       	push	r31
	RotaryEncoder_OvfCnt = 1;		// Start overflow counter
     9ee:	81 e0       	ldi	r24, 0x01	; 1
     9f0:	90 e0       	ldi	r25, 0x00	; 0
     9f2:	90 93 b1 01 	sts	0x01B1, r25	; 0x8001b1 <RotaryEncoder_OvfCnt+0x1>
     9f6:	80 93 b0 01 	sts	0x01B0, r24	; 0x8001b0 <RotaryEncoder_OvfCnt>
	
	/* Disable External interrupts */
	EIMSK &= ~(1 << INT2);		// Disable External Interrupt Request (INT2)
     9fa:	ea 98       	cbi	0x1d, 2	; 29
	PCICR &= ~(1 << PCIE1);		// Disable Pin Change interrupt (PCI1) PCINT[15:8]
     9fc:	e8 e6       	ldi	r30, 0x68	; 104
     9fe:	f0 e0       	ldi	r31, 0x00	; 0
     a00:	80 81       	ld	r24, Z
     a02:	8d 7f       	andi	r24, 0xFD	; 253
     a04:	80 83       	st	Z, r24
     a06:	ff 91       	pop	r31
     a08:	ef 91       	pop	r30
     a0a:	9f 91       	pop	r25
     a0c:	8f 91       	pop	r24
     a0e:	0f 90       	pop	r0
     a10:	0f be       	out	0x3f, r0	; 63
     a12:	0f 90       	pop	r0
     a14:	1f 90       	pop	r1
     a16:	18 95       	reti

00000a18 <_Z14SP10281_Updatev>:
void SP10281_Update()
{
	static unsigned char tmp = 0;

	/* Increment digit counter */
	if (++SP10281_DigitCnt >= SP10281_NUMBER_OF_DIGITS)
     a18:	80 91 b5 01 	lds	r24, 0x01B5	; 0x8001b5 <SP10281_DigitCnt>
     a1c:	8f 5f       	subi	r24, 0xFF	; 255
     a1e:	80 93 b5 01 	sts	0x01B5, r24	; 0x8001b5 <SP10281_DigitCnt>
     a22:	83 30       	cpi	r24, 0x03	; 3
     a24:	10 f0       	brcs	.+4      	; 0xa2a <_Z14SP10281_Updatev+0x12>
		SP10281_DigitCnt = 0;
     a26:	10 92 b5 01 	sts	0x01B5, r1	; 0x8001b5 <SP10281_DigitCnt>

	/* Activate next digit */
	tmp = (1 << (SP10281_DigitCnt + GPIO_SP10281_DIGIT0_PIN));
     a2a:	90 91 b5 01 	lds	r25, 0x01B5	; 0x8001b5 <SP10281_DigitCnt>
     a2e:	9b 5f       	subi	r25, 0xFB	; 251
     a30:	81 e0       	ldi	r24, 0x01	; 1
     a32:	01 c0       	rjmp	.+2      	; 0xa36 <_Z14SP10281_Updatev+0x1e>
     a34:	88 0f       	add	r24, r24
     a36:	9a 95       	dec	r25
     a38:	ea f7       	brpl	.-6      	; 0xa34 <_Z14SP10281_Updatev+0x1c>
     a3a:	80 93 b2 01 	sts	0x01B2, r24	; 0x8001b2 <_ZZ14SP10281_UpdatevE3tmp>
	GPIO_SP10281_DIGIT_PORT |= GPIO_SP10281_DIGIT_MASK;
     a3e:	85 b1       	in	r24, 0x05	; 5
     a40:	80 6e       	ori	r24, 0xE0	; 224
     a42:	85 b9       	out	0x05, r24	; 5
	GPIO_SP10281_DIGIT_PORT &= ~tmp;
     a44:	95 b1       	in	r25, 0x05	; 5
     a46:	80 91 b2 01 	lds	r24, 0x01B2	; 0x8001b2 <_ZZ14SP10281_UpdatevE3tmp>
     a4a:	80 95       	com	r24
     a4c:	89 23       	and	r24, r25
     a4e:	85 b9       	out	0x05, r24	; 5

	/* Update segments */
	GPIO_SP10281_SEGMENT_PORT = SP10281_DigitData[SP10281_DigitCnt];
     a50:	e0 91 b5 01 	lds	r30, 0x01B5	; 0x8001b5 <SP10281_DigitCnt>
     a54:	f0 e0       	ldi	r31, 0x00	; 0
     a56:	ea 54       	subi	r30, 0x4A	; 74
     a58:	fe 4f       	sbci	r31, 0xFE	; 254
     a5a:	80 81       	ld	r24, Z
     a5c:	82 b9       	out	0x02, r24	; 2
     a5e:	08 95       	ret

00000a60 <_Z18SP10281_WriteDigithch>:
}

void SP10281_WriteDigit(unsigned char dig, char data, unsigned char dot)
{
	if (data >= '0' && data <= '9')
     a60:	e0 ed       	ldi	r30, 0xD0	; 208
     a62:	e6 0f       	add	r30, r22
     a64:	ea 30       	cpi	r30, 0x0A	; 10
     a66:	a8 f0       	brcs	.+42     	; 0xa92 <_Z18SP10281_WriteDigithch+0x32>
	{
		data -= '0';
	}
	else if (data >= 'A' && data <= 'Z')
     a68:	9f eb       	ldi	r25, 0xBF	; 191
     a6a:	96 0f       	add	r25, r22
     a6c:	9a 31       	cpi	r25, 0x1A	; 26
     a6e:	18 f4       	brcc	.+6      	; 0xa76 <_Z18SP10281_WriteDigithch+0x16>
	{
		data -= 'A';
		data += 10;
     a70:	e9 ec       	ldi	r30, 0xC9	; 201
     a72:	e6 0f       	add	r30, r22
     a74:	0e c0       	rjmp	.+28     	; 0xa92 <_Z18SP10281_WriteDigithch+0x32>
	}
	else if (data >= 'a' && data <= 'z')
     a76:	9f e9       	ldi	r25, 0x9F	; 159
     a78:	96 0f       	add	r25, r22
     a7a:	9a 31       	cpi	r25, 0x1A	; 26
     a7c:	18 f4       	brcc	.+6      	; 0xa84 <_Z18SP10281_WriteDigithch+0x24>
	{
		data -= 'a';
		data += 10;
     a7e:	e9 ea       	ldi	r30, 0xA9	; 169
     a80:	e6 0f       	add	r30, r22
     a82:	07 c0       	rjmp	.+14     	; 0xa92 <_Z18SP10281_WriteDigithch+0x32>
	}
	else if (data == '-')
     a84:	6d 32       	cpi	r22, 0x2D	; 45
     a86:	21 f0       	breq	.+8      	; 0xa90 <_Z18SP10281_WriteDigithch+0x30>
	{
		data = 36;
	}
	else if (data == ' ')
     a88:	60 32       	cpi	r22, 0x20	; 32
     a8a:	d9 f4       	brne	.+54     	; 0xac2 <_Z18SP10281_WriteDigithch+0x62>
	{
		data = 37;
     a8c:	e5 e2       	ldi	r30, 0x25	; 37
     a8e:	01 c0       	rjmp	.+2      	; 0xa92 <_Z18SP10281_WriteDigithch+0x32>
		data -= 'a';
		data += 10;
	}
	else if (data == '-')
	{
		data = 36;
     a90:	e4 e2       	ldi	r30, 0x24	; 36
	else
	{
		return;
	}
	
	SP10281_DigitData[dig] = SP10281_DigitTable[(unsigned char)data];
     a92:	90 e0       	ldi	r25, 0x00	; 0
     a94:	f0 e0       	ldi	r31, 0x00	; 0
     a96:	ee 5f       	subi	r30, 0xFE	; 254
     a98:	fe 4f       	sbci	r31, 0xFE	; 254
     a9a:	20 81       	ld	r18, Z
     a9c:	fc 01       	movw	r30, r24
     a9e:	ea 54       	subi	r30, 0x4A	; 74
     aa0:	fe 4f       	sbci	r31, 0xFE	; 254
     aa2:	20 83       	st	Z, r18
	
	/* Set or clear dot */
	if (dot)
     aa4:	44 23       	and	r20, r20
     aa6:	39 f0       	breq	.+14     	; 0xab6 <_Z18SP10281_WriteDigithch+0x56>
	SP10281_DigitData[dig] &= 0b01111111;
     aa8:	fc 01       	movw	r30, r24
     aaa:	ea 54       	subi	r30, 0x4A	; 74
     aac:	fe 4f       	sbci	r31, 0xFE	; 254
     aae:	80 81       	ld	r24, Z
     ab0:	8f 77       	andi	r24, 0x7F	; 127
     ab2:	80 83       	st	Z, r24
     ab4:	08 95       	ret
	else
	SP10281_DigitData[dig] |= 0b10000000;
     ab6:	fc 01       	movw	r30, r24
     ab8:	ea 54       	subi	r30, 0x4A	; 74
     aba:	fe 4f       	sbci	r31, 0xFE	; 254
     abc:	80 81       	ld	r24, Z
     abe:	80 68       	ori	r24, 0x80	; 128
     ac0:	80 83       	st	Z, r24
     ac2:	08 95       	ret

00000ac4 <_Z17SP10281_WriteCharccchhh>:
}

void SP10281_WriteChar(char d2, char d1, char d0, unsigned char dot2, unsigned char dot1, unsigned char dot0)
{
     ac4:	ef 92       	push	r14
     ac6:	0f 93       	push	r16
     ac8:	1f 93       	push	r17
     aca:	cf 93       	push	r28
     acc:	df 93       	push	r29
     ace:	c8 2f       	mov	r28, r24
     ad0:	16 2f       	mov	r17, r22
     ad2:	64 2f       	mov	r22, r20
     ad4:	d2 2f       	mov	r29, r18
     ad6:	4e 2d       	mov	r20, r14
	SP10281_WriteDigit(SP10281_DIGIT_0, d0, dot0);
     ad8:	80 e0       	ldi	r24, 0x00	; 0
     ada:	0e 94 30 05 	call	0xa60	; 0xa60 <_Z18SP10281_WriteDigithch>
	SP10281_WriteDigit(SP10281_DIGIT_1, d1, dot1);
     ade:	40 2f       	mov	r20, r16
     ae0:	61 2f       	mov	r22, r17
     ae2:	81 e0       	ldi	r24, 0x01	; 1
     ae4:	0e 94 30 05 	call	0xa60	; 0xa60 <_Z18SP10281_WriteDigithch>
	SP10281_WriteDigit(SP10281_DIGIT_2, d2, dot2);
     ae8:	4d 2f       	mov	r20, r29
     aea:	6c 2f       	mov	r22, r28
     aec:	82 e0       	ldi	r24, 0x02	; 2
     aee:	0e 94 30 05 	call	0xa60	; 0xa60 <_Z18SP10281_WriteDigithch>
}
     af2:	df 91       	pop	r29
     af4:	cf 91       	pop	r28
     af6:	1f 91       	pop	r17
     af8:	0f 91       	pop	r16
     afa:	ef 90       	pop	r14
     afc:	08 95       	ret

00000afe <_Z19SP10281_WriteNumbers>:

/* Writes a number between -99 and 999 to the display */
void SP10281_WriteNumber(short num)
{
     afe:	cf 93       	push	r28
     b00:	df 93       	push	r29
	short tmp = 0;
	
	if (num >= -99 && num <= 999)
     b02:	9c 01       	movw	r18, r24
     b04:	2d 59       	subi	r18, 0x9D	; 157
     b06:	3f 4f       	sbci	r19, 0xFF	; 255
     b08:	2b 34       	cpi	r18, 0x4B	; 75
     b0a:	34 40       	sbci	r19, 0x04	; 4
     b0c:	68 f5       	brcc	.+90     	; 0xb68 <_Z19SP10281_WriteNumbers+0x6a>
     b0e:	ec 01       	movw	r28, r24
	{
		if (num < 0)
     b10:	99 23       	and	r25, r25
     b12:	54 f4       	brge	.+20     	; 0xb28 <_Z19SP10281_WriteNumbers+0x2a>
		{
			SP10281_WriteDigit(SP10281_DIGIT_2, '-', 0);
     b14:	40 e0       	ldi	r20, 0x00	; 0
     b16:	6d e2       	ldi	r22, 0x2D	; 45
     b18:	82 e0       	ldi	r24, 0x02	; 2
     b1a:	0e 94 30 05 	call	0xa60	; 0xa60 <_Z18SP10281_WriteDigithch>
			num = -num;
     b1e:	88 27       	eor	r24, r24
     b20:	99 27       	eor	r25, r25
     b22:	8c 1b       	sub	r24, r28
     b24:	9d 0b       	sbc	r25, r29
     b26:	0e c0       	rjmp	.+28     	; 0xb44 <_Z19SP10281_WriteNumbers+0x46>
		}
		else
		{
			tmp = num / 100;
     b28:	64 e6       	ldi	r22, 0x64	; 100
     b2a:	70 e0       	ldi	r23, 0x00	; 0
     b2c:	0e 94 2b 09 	call	0x1256	; 0x1256 <__divmodhi4>
     b30:	d8 2f       	mov	r29, r24
     b32:	c9 2f       	mov	r28, r25
			tmp += '0';
			SP10281_WriteDigit(SP10281_DIGIT_2, tmp, 0);
     b34:	60 5d       	subi	r22, 0xD0	; 208
     b36:	7f 4f       	sbci	r23, 0xFF	; 255
     b38:	40 e0       	ldi	r20, 0x00	; 0
     b3a:	82 e0       	ldi	r24, 0x02	; 2
     b3c:	0e 94 30 05 	call	0xa60	; 0xa60 <_Z18SP10281_WriteDigithch>
			num %= 100;
     b40:	8d 2f       	mov	r24, r29
     b42:	9c 2f       	mov	r25, r28
		}
		
		tmp = num / 10;
     b44:	6a e0       	ldi	r22, 0x0A	; 10
     b46:	70 e0       	ldi	r23, 0x00	; 0
     b48:	0e 94 2b 09 	call	0x1256	; 0x1256 <__divmodhi4>
     b4c:	ec 01       	movw	r28, r24
		tmp += '0';
		SP10281_WriteDigit(SP10281_DIGIT_1, tmp, 0);
     b4e:	60 5d       	subi	r22, 0xD0	; 208
     b50:	7f 4f       	sbci	r23, 0xFF	; 255
     b52:	40 e0       	ldi	r20, 0x00	; 0
     b54:	81 e0       	ldi	r24, 0x01	; 1
     b56:	0e 94 30 05 	call	0xa60	; 0xa60 <_Z18SP10281_WriteDigithch>
		num %= 10;
		
		tmp = num + '0';
		SP10281_WriteDigit(SP10281_DIGIT_0, tmp, 0);
     b5a:	be 01       	movw	r22, r28
     b5c:	60 5d       	subi	r22, 0xD0	; 208
     b5e:	7f 4f       	sbci	r23, 0xFF	; 255
     b60:	40 e0       	ldi	r20, 0x00	; 0
     b62:	80 e0       	ldi	r24, 0x00	; 0
     b64:	0e 94 30 05 	call	0xa60	; 0xa60 <_Z18SP10281_WriteDigithch>
	}
}
     b68:	df 91       	pop	r29
     b6a:	cf 91       	pop	r28
     b6c:	08 95       	ret

00000b6e <_Z12SP10281_Initv>:
};

void SP10281_Init()
{
	/* Setup GPIOs */
	GPIO_SP10281_DIGIT_DDR |= GPIO_SP10281_DIGIT_MASK;	// Set GPIO output pins for digit control
     b6e:	84 b1       	in	r24, 0x04	; 4
     b70:	80 6e       	ori	r24, 0xE0	; 224
     b72:	84 b9       	out	0x04, r24	; 4
	GPIO_SP10281_SEGMENT_DDR = 0xFF;					// Set GPIO output pins for individual segments
     b74:	8f ef       	ldi	r24, 0xFF	; 255
     b76:	81 b9       	out	0x01, r24	; 1
	
	SP10281_WriteNumber(123);
     b78:	8b e7       	ldi	r24, 0x7B	; 123
     b7a:	90 e0       	ldi	r25, 0x00	; 0
     b7c:	0e 94 7f 05 	call	0xafe	; 0xafe <_Z19SP10281_WriteNumbers>
     b80:	08 95       	ret

00000b82 <_Z11Timer0_Initv>:
#include "PedalComm.h"

void Timer0_Init()
{
	/* Setup Timer */
	TCCR0A |= (1 << WGM01);		// Set Timer to CTC mode (Clear Timer on Compare match)
     b82:	84 b5       	in	r24, 0x24	; 36
     b84:	82 60       	ori	r24, 0x02	; 2
     b86:	84 bd       	out	0x24, r24	; 36
	TCNT0 = 0;					// Clear counter register
     b88:	16 bc       	out	0x26, r1	; 38
	OCR0A = 155;				// Set Output Compare value (78125Hz / 156 = 500,8Hz (1,997ms))
     b8a:	8b e9       	ldi	r24, 0x9B	; 155
     b8c:	87 bd       	out	0x27, r24	; 39
	TIMSK0 |= (1 << OCIE0A);	// Output Compare A Match Interrupt Enable
     b8e:	ee e6       	ldi	r30, 0x6E	; 110
     b90:	f0 e0       	ldi	r31, 0x00	; 0
     b92:	80 81       	ld	r24, Z
     b94:	82 60       	ori	r24, 0x02	; 2
     b96:	80 83       	st	Z, r24
	
	/* Start Timer */
	TCCR0B |= (1 << CS02);		// Set clock prescaler to 256 (20MHz / 256 = 78125Hz)
     b98:	85 b5       	in	r24, 0x25	; 37
     b9a:	84 60       	ori	r24, 0x04	; 4
     b9c:	85 bd       	out	0x25, r24	; 37
     b9e:	08 95       	ret

00000ba0 <_Z13Timer0_ms2cntm>:
}

uint32_t Timer0_ms2cnt(uint32_t ms)
{
     ba0:	9b 01       	movw	r18, r22
     ba2:	ac 01       	movw	r20, r24
	ms *= 1000;
	return (uint32_t)(ms / TIMER0_PERIOD_US);
     ba4:	a8 ee       	ldi	r26, 0xE8	; 232
     ba6:	b3 e0       	ldi	r27, 0x03	; 3
     ba8:	0e 94 61 09 	call	0x12c2	; 0x12c2 <__muluhisi3>
     bac:	2d ec       	ldi	r18, 0xCD	; 205
     bae:	37 e0       	ldi	r19, 0x07	; 7
     bb0:	40 e0       	ldi	r20, 0x00	; 0
     bb2:	50 e0       	ldi	r21, 0x00	; 0
     bb4:	0e 94 3f 09 	call	0x127e	; 0x127e <__udivmodsi4>
}
     bb8:	ca 01       	movw	r24, r20
     bba:	b9 01       	movw	r22, r18
     bbc:	08 95       	ret

00000bbe <__vector_16>:

/* Timer0 Compare A Match Interrupt Service Routine */
ISR(TIMER0_COMPA_vect)
{
     bbe:	1f 92       	push	r1
     bc0:	0f 92       	push	r0
     bc2:	0f b6       	in	r0, 0x3f	; 63
     bc4:	0f 92       	push	r0
     bc6:	11 24       	eor	r1, r1
     bc8:	2f 93       	push	r18
     bca:	3f 93       	push	r19
     bcc:	4f 93       	push	r20
     bce:	5f 93       	push	r21
     bd0:	6f 93       	push	r22
     bd2:	7f 93       	push	r23
     bd4:	8f 93       	push	r24
     bd6:	9f 93       	push	r25
     bd8:	af 93       	push	r26
     bda:	bf 93       	push	r27
     bdc:	ef 93       	push	r30
     bde:	ff 93       	push	r31
	/* Overflow counter for delaying transmit to pedal */
	if (PedalComm_DelayTXOvfCnt)
     be0:	80 91 39 01 	lds	r24, 0x0139	; 0x800139 <PedalComm_DelayTXOvfCnt>
     be4:	88 23       	and	r24, r24
     be6:	61 f0       	breq	.+24     	; 0xc00 <__vector_16+0x42>
	{
		if (++PedalComm_DelayTXOvfCnt > PEDALCOMM_DELAY_TX_TIMEOUT)
     be8:	80 91 39 01 	lds	r24, 0x0139	; 0x800139 <PedalComm_DelayTXOvfCnt>
     bec:	8f 5f       	subi	r24, 0xFF	; 255
     bee:	80 93 39 01 	sts	0x0139, r24	; 0x800139 <PedalComm_DelayTXOvfCnt>
     bf2:	84 30       	cpi	r24, 0x04	; 4
     bf4:	28 f0       	brcs	.+10     	; 0xc00 <__vector_16+0x42>
		{
			PedalComm_DelayTXOvfCnt = 0;	// Stop overflow counter
     bf6:	10 92 39 01 	sts	0x0139, r1	; 0x800139 <PedalComm_DelayTXOvfCnt>
			PedalComm_DelayTxFlag = true;
     bfa:	81 e0       	ldi	r24, 0x01	; 1
     bfc:	80 93 3a 01 	sts	0x013A, r24	; 0x80013a <PedalComm_DelayTxFlag>
		}
	}

	/* Overflow counter for Pedal response timeout */
	if (PedalComm_ResponseTimeout_OvfCnt)
     c00:	80 91 37 01 	lds	r24, 0x0137	; 0x800137 <PedalComm_ResponseTimeout_OvfCnt>
     c04:	90 91 38 01 	lds	r25, 0x0138	; 0x800138 <PedalComm_ResponseTimeout_OvfCnt+0x1>
     c08:	89 2b       	or	r24, r25
     c0a:	89 f0       	breq	.+34     	; 0xc2e <__vector_16+0x70>
	{
		if (++PedalComm_ResponseTimeout_OvfCnt > PEDALCOMM_RESPONSE_TIMEOUT)
     c0c:	80 91 37 01 	lds	r24, 0x0137	; 0x800137 <PedalComm_ResponseTimeout_OvfCnt>
     c10:	90 91 38 01 	lds	r25, 0x0138	; 0x800138 <PedalComm_ResponseTimeout_OvfCnt+0x1>
     c14:	01 96       	adiw	r24, 0x01	; 1
     c16:	90 93 38 01 	sts	0x0138, r25	; 0x800138 <PedalComm_ResponseTimeout_OvfCnt+0x1>
     c1a:	80 93 37 01 	sts	0x0137, r24	; 0x800137 <PedalComm_ResponseTimeout_OvfCnt>
     c1e:	4a 97       	sbiw	r24, 0x1a	; 26
     c20:	30 f0       	brcs	.+12     	; 0xc2e <__vector_16+0x70>
		{
			PedalComm_ResponseTimeout_OvfCnt = 0;	// Stop overflow counter
     c22:	10 92 38 01 	sts	0x0138, r1	; 0x800138 <PedalComm_ResponseTimeout_OvfCnt+0x1>
     c26:	10 92 37 01 	sts	0x0137, r1	; 0x800137 <PedalComm_ResponseTimeout_OvfCnt>
			PedalComm_FlushTxQueue();
     c2a:	0e 94 f5 02 	call	0x5ea	; 0x5ea <_Z22PedalComm_FlushTxQueuev>
		}
	}
	
	/* Overflow counter for multiplexing 3x7-segment display */
	if (++SP10281_OvfCnt >= SP10281_OVF_RESET)
     c2e:	80 91 b4 01 	lds	r24, 0x01B4	; 0x8001b4 <SP10281_OvfCnt>
     c32:	8f 5f       	subi	r24, 0xFF	; 255
     c34:	80 93 b4 01 	sts	0x01B4, r24	; 0x8001b4 <SP10281_OvfCnt>
     c38:	83 30       	cpi	r24, 0x03	; 3
     c3a:	28 f0       	brcs	.+10     	; 0xc46 <__vector_16+0x88>
	{
		SP10281_OvfCnt = 0;		// Stop overflow counter
     c3c:	10 92 b4 01 	sts	0x01B4, r1	; 0x8001b4 <SP10281_OvfCnt>
		SP10281_OvfFlag = 1;
     c40:	81 e0       	ldi	r24, 0x01	; 1
     c42:	80 93 b3 01 	sts	0x01B3, r24	; 0x8001b3 <SP10281_OvfFlag>
	}
	
	/* Overflow counter for blinking UI LEDs */
	if (++(MCP_Output::AutoToggle_OvfCnt) > MCP_Output::AutoToggle_Timeout)
     c46:	80 91 2c 01 	lds	r24, 0x012C	; 0x80012c <_ZN10MCP_Output17AutoToggle_OvfCntE>
     c4a:	90 91 2d 01 	lds	r25, 0x012D	; 0x80012d <_ZN10MCP_Output17AutoToggle_OvfCntE+0x1>
     c4e:	01 96       	adiw	r24, 0x01	; 1
     c50:	90 93 2d 01 	sts	0x012D, r25	; 0x80012d <_ZN10MCP_Output17AutoToggle_OvfCntE+0x1>
     c54:	80 93 2c 01 	sts	0x012C, r24	; 0x80012c <_ZN10MCP_Output17AutoToggle_OvfCntE>
     c58:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <_ZN10MCP_Output18AutoToggle_TimeoutE>
     c5c:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <_ZN10MCP_Output18AutoToggle_TimeoutE+0x1>
     c60:	28 17       	cp	r18, r24
     c62:	39 07       	cpc	r19, r25
     c64:	78 f4       	brcc	.+30     	; 0xc84 <__vector_16+0xc6>
	{
		MCP_Output::AutoToggle_OvfCnt = 0;		// Reset overflow counter
     c66:	10 92 2d 01 	sts	0x012D, r1	; 0x80012d <_ZN10MCP_Output17AutoToggle_OvfCntE+0x1>
     c6a:	10 92 2c 01 	sts	0x012C, r1	; 0x80012c <_ZN10MCP_Output17AutoToggle_OvfCntE>
		
		if (MCP_Output::AutoToggle_PortA || MCP_Output::AutoToggle_PortB)
     c6e:	80 91 2a 01 	lds	r24, 0x012A	; 0x80012a <_ZN10MCP_Output16AutoToggle_PortAE>
     c72:	81 11       	cpse	r24, r1
     c74:	04 c0       	rjmp	.+8      	; 0xc7e <__vector_16+0xc0>
     c76:	80 91 29 01 	lds	r24, 0x0129	; 0x800129 <_ZN10MCP_Output16AutoToggle_PortBE>
     c7a:	88 23       	and	r24, r24
     c7c:	19 f0       	breq	.+6      	; 0xc84 <__vector_16+0xc6>
		{
			MCP_Output::AutoToggle_Flag = 1;
     c7e:	81 e0       	ldi	r24, 0x01	; 1
     c80:	80 93 2b 01 	sts	0x012B, r24	; 0x80012b <_ZN10MCP_Output15AutoToggle_FlagE>
		}
	}
	
	/* Overflow counter for rotary encoder handling */
	if (RotaryEncoder_OvfCnt)
     c84:	80 91 b0 01 	lds	r24, 0x01B0	; 0x8001b0 <RotaryEncoder_OvfCnt>
     c88:	90 91 b1 01 	lds	r25, 0x01B1	; 0x8001b1 <RotaryEncoder_OvfCnt+0x1>
     c8c:	89 2b       	or	r24, r25
     c8e:	c1 f1       	breq	.+112    	; 0xd00 <__vector_16+0x142>
	{
		RotaryEncoder_OvfCnt++;
     c90:	80 91 b0 01 	lds	r24, 0x01B0	; 0x8001b0 <RotaryEncoder_OvfCnt>
     c94:	90 91 b1 01 	lds	r25, 0x01B1	; 0x8001b1 <RotaryEncoder_OvfCnt+0x1>
     c98:	01 96       	adiw	r24, 0x01	; 1
     c9a:	90 93 b1 01 	sts	0x01B1, r25	; 0x8001b1 <RotaryEncoder_OvfCnt+0x1>
     c9e:	80 93 b0 01 	sts	0x01B0, r24	; 0x8001b0 <RotaryEncoder_OvfCnt>
		
		if (RotaryEncoder_OvfCnt > ROT_ENC_LONG_PRESS_OVF)
     ca2:	80 91 b0 01 	lds	r24, 0x01B0	; 0x8001b0 <RotaryEncoder_OvfCnt>
     ca6:	90 91 b1 01 	lds	r25, 0x01B1	; 0x8001b1 <RotaryEncoder_OvfCnt+0x1>
     caa:	89 35       	cpi	r24, 0x59	; 89
     cac:	92 40       	sbci	r25, 0x02	; 2
     cae:	70 f0       	brcs	.+28     	; 0xccc <__vector_16+0x10e>
		{
			/* If button is still pressed */
			if ( GPIO_ROT_ENC_PIN & GPIO_ROT_ENC_PRESS_MASK )
     cb0:	1a 9b       	sbis	0x03, 2	; 3
     cb2:	04 c0       	rjmp	.+8      	; 0xcbc <__vector_16+0xfe>
			{
				RotEnc_State = LONG_PRESS;
     cb4:	86 e0       	ldi	r24, 0x06	; 6
     cb6:	80 93 af 01 	sts	0x01AF, r24	; 0x8001af <RotEnc_State>
     cba:	03 c0       	rjmp	.+6      	; 0xcc2 <__vector_16+0x104>
			}
			else
			{
				RotEnc_State = ABORTED;
     cbc:	85 e0       	ldi	r24, 0x05	; 5
     cbe:	80 93 af 01 	sts	0x01AF, r24	; 0x8001af <RotEnc_State>
			}
			
			RotaryEncoder_OvfCnt = 0;		// Stop overflow counter
     cc2:	10 92 b1 01 	sts	0x01B1, r1	; 0x8001b1 <RotaryEncoder_OvfCnt+0x1>
     cc6:	10 92 b0 01 	sts	0x01B0, r1	; 0x8001b0 <RotaryEncoder_OvfCnt>
     cca:	1a c0       	rjmp	.+52     	; 0xd00 <__vector_16+0x142>
		}
		else if (RotaryEncoder_OvfCnt > ROT_ENC_PRESS_OVF && RotEnc_State == IDLE)
     ccc:	80 91 b0 01 	lds	r24, 0x01B0	; 0x8001b0 <RotaryEncoder_OvfCnt>
     cd0:	90 91 b1 01 	lds	r25, 0x01B1	; 0x8001b1 <RotaryEncoder_OvfCnt+0x1>
     cd4:	cd 97       	sbiw	r24, 0x3d	; 61
     cd6:	a0 f0       	brcs	.+40     	; 0xd00 <__vector_16+0x142>
     cd8:	80 91 af 01 	lds	r24, 0x01AF	; 0x8001af <RotEnc_State>
     cdc:	88 23       	and	r24, r24
     cde:	69 f0       	breq	.+26     	; 0xcfa <__vector_16+0x13c>
     ce0:	0f c0       	rjmp	.+30     	; 0xd00 <__vector_16+0x142>
		{
			/* If button is no longer pressed */
			if ( !(GPIO_ROT_ENC_PIN & GPIO_ROT_ENC_PRESS_MASK) )
			{
				RotEnc_State = SHORT_PRESS;
     ce2:	83 e0       	ldi	r24, 0x03	; 3
     ce4:	80 93 af 01 	sts	0x01AF, r24	; 0x8001af <RotEnc_State>
				RotaryEncoder_OvfCnt = 0;	// Stop overflow counter
     ce8:	10 92 b1 01 	sts	0x01B1, r1	; 0x8001b1 <RotaryEncoder_OvfCnt+0x1>
     cec:	10 92 b0 01 	sts	0x01B0, r1	; 0x8001b0 <RotaryEncoder_OvfCnt>
     cf0:	07 c0       	rjmp	.+14     	; 0xd00 <__vector_16+0x142>
			}
			else
			RotEnc_State = PRESSED;
     cf2:	84 e0       	ldi	r24, 0x04	; 4
     cf4:	80 93 af 01 	sts	0x01AF, r24	; 0x8001af <RotEnc_State>

		}
	}
     cf8:	03 c0       	rjmp	.+6      	; 0xd00 <__vector_16+0x142>
			RotaryEncoder_OvfCnt = 0;		// Stop overflow counter
		}
		else if (RotaryEncoder_OvfCnt > ROT_ENC_PRESS_OVF && RotEnc_State == IDLE)
		{
			/* If button is no longer pressed */
			if ( !(GPIO_ROT_ENC_PIN & GPIO_ROT_ENC_PRESS_MASK) )
     cfa:	1a 99       	sbic	0x03, 2	; 3
     cfc:	fa cf       	rjmp	.-12     	; 0xcf2 <__vector_16+0x134>
     cfe:	f1 cf       	rjmp	.-30     	; 0xce2 <__vector_16+0x124>
			else
			RotEnc_State = PRESSED;

		}
	}
     d00:	ff 91       	pop	r31
     d02:	ef 91       	pop	r30
     d04:	bf 91       	pop	r27
     d06:	af 91       	pop	r26
     d08:	9f 91       	pop	r25
     d0a:	8f 91       	pop	r24
     d0c:	7f 91       	pop	r23
     d0e:	6f 91       	pop	r22
     d10:	5f 91       	pop	r21
     d12:	4f 91       	pop	r20
     d14:	3f 91       	pop	r19
     d16:	2f 91       	pop	r18
     d18:	0f 90       	pop	r0
     d1a:	0f be       	out	0x3f, r0	; 63
     d1c:	0f 90       	pop	r0
     d1e:	1f 90       	pop	r1
     d20:	18 95       	reti

00000d22 <_Z10UART0_Initjhh>:
Input:    None
Returns:  None
**************************************************************************/
void UART1_Flush(void)
{
	UART1_RxHead = UART1_RxTail;
     d22:	cf 93       	push	r28
     d24:	df 93       	push	r29
     d26:	d6 2f       	mov	r29, r22
     d28:	c4 2f       	mov	r28, r20
     d2a:	51 9a       	sbi	0x0a, 1	; 10
     d2c:	59 9a       	sbi	0x0b, 1	; 11
     d2e:	10 92 02 02 	sts	0x0202, r1	; 0x800202 <_ZL12UART0_TxHead>
     d32:	10 92 01 02 	sts	0x0201, r1	; 0x800201 <_ZL12UART0_TxTail>
     d36:	10 92 00 02 	sts	0x0200, r1	; 0x800200 <_ZL12UART0_RxHead>
     d3a:	10 92 ff 01 	sts	0x01FF, r1	; 0x8001ff <_ZL12UART0_RxTail>
     d3e:	a0 e0       	ldi	r26, 0x00	; 0
     d40:	b0 e0       	ldi	r27, 0x00	; 0
     d42:	88 0f       	add	r24, r24
     d44:	99 1f       	adc	r25, r25
     d46:	aa 1f       	adc	r26, r26
     d48:	bb 1f       	adc	r27, r27
     d4a:	88 0f       	add	r24, r24
     d4c:	99 1f       	adc	r25, r25
     d4e:	aa 1f       	adc	r26, r26
     d50:	bb 1f       	adc	r27, r27
     d52:	9c 01       	movw	r18, r24
     d54:	ad 01       	movw	r20, r26
     d56:	22 0f       	add	r18, r18
     d58:	33 1f       	adc	r19, r19
     d5a:	44 1f       	adc	r20, r20
     d5c:	55 1f       	adc	r21, r21
     d5e:	22 0f       	add	r18, r18
     d60:	33 1f       	adc	r19, r19
     d62:	44 1f       	adc	r20, r20
     d64:	55 1f       	adc	r21, r21
     d66:	60 e0       	ldi	r22, 0x00	; 0
     d68:	7d e2       	ldi	r23, 0x2D	; 45
     d6a:	81 e3       	ldi	r24, 0x31	; 49
     d6c:	91 e0       	ldi	r25, 0x01	; 1
     d6e:	0e 94 3f 09 	call	0x127e	; 0x127e <__udivmodsi4>
     d72:	21 50       	subi	r18, 0x01	; 1
     d74:	31 09       	sbc	r19, r1
     d76:	30 93 c5 00 	sts	0x00C5, r19	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
     d7a:	20 93 c4 00 	sts	0x00C4, r18	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
     d7e:	e2 ec       	ldi	r30, 0xC2	; 194
     d80:	f0 e0       	ldi	r31, 0x00	; 0
     d82:	80 81       	ld	r24, Z
     d84:	8f 73       	andi	r24, 0x3F	; 63
     d86:	80 83       	st	Z, r24
     d88:	d2 30       	cpi	r29, 0x02	; 2
     d8a:	21 f4       	brne	.+8      	; 0xd94 <_Z10UART0_Initjhh+0x72>
     d8c:	80 81       	ld	r24, Z
     d8e:	88 60       	ori	r24, 0x08	; 8
     d90:	80 83       	st	Z, r24
     d92:	05 c0       	rjmp	.+10     	; 0xd9e <_Z10UART0_Initjhh+0x7c>
     d94:	e2 ec       	ldi	r30, 0xC2	; 194
     d96:	f0 e0       	ldi	r31, 0x00	; 0
     d98:	80 81       	ld	r24, Z
     d9a:	87 7f       	andi	r24, 0xF7	; 247
     d9c:	80 83       	st	Z, r24
     d9e:	c2 30       	cpi	r28, 0x02	; 2
     da0:	49 f4       	brne	.+18     	; 0xdb4 <_Z10UART0_Initjhh+0x92>
     da2:	e2 ec       	ldi	r30, 0xC2	; 194
     da4:	f0 e0       	ldi	r31, 0x00	; 0
     da6:	80 81       	ld	r24, Z
     da8:	8f 7e       	andi	r24, 0xEF	; 239
     daa:	80 83       	st	Z, r24
     dac:	80 81       	ld	r24, Z
     dae:	80 62       	ori	r24, 0x20	; 32
     db0:	80 83       	st	Z, r24
     db2:	0d c0       	rjmp	.+26     	; 0xdce <_Z10UART0_Initjhh+0xac>
     db4:	c3 30       	cpi	r28, 0x03	; 3
     db6:	31 f4       	brne	.+12     	; 0xdc4 <_Z10UART0_Initjhh+0xa2>
     db8:	e2 ec       	ldi	r30, 0xC2	; 194
     dba:	f0 e0       	ldi	r31, 0x00	; 0
     dbc:	80 81       	ld	r24, Z
     dbe:	80 63       	ori	r24, 0x30	; 48
     dc0:	80 83       	st	Z, r24
     dc2:	05 c0       	rjmp	.+10     	; 0xdce <_Z10UART0_Initjhh+0xac>
     dc4:	e2 ec       	ldi	r30, 0xC2	; 194
     dc6:	f0 e0       	ldi	r31, 0x00	; 0
     dc8:	80 81       	ld	r24, Z
     dca:	8f 7c       	andi	r24, 0xCF	; 207
     dcc:	80 83       	st	Z, r24
     dce:	e2 ec       	ldi	r30, 0xC2	; 194
     dd0:	f0 e0       	ldi	r31, 0x00	; 0
     dd2:	80 81       	ld	r24, Z
     dd4:	86 60       	ori	r24, 0x06	; 6
     dd6:	80 83       	st	Z, r24
     dd8:	e1 ec       	ldi	r30, 0xC1	; 193
     dda:	f0 e0       	ldi	r31, 0x00	; 0
     ddc:	80 81       	ld	r24, Z
     dde:	80 6a       	ori	r24, 0xA0	; 160
     de0:	80 83       	st	Z, r24
     de2:	80 81       	ld	r24, Z
     de4:	88 61       	ori	r24, 0x18	; 24
     de6:	80 83       	st	Z, r24
     de8:	df 91       	pop	r29
     dea:	cf 91       	pop	r28
     dec:	08 95       	ret

00000dee <_Z13UART0_GetCharv>:
     dee:	90 91 00 02 	lds	r25, 0x0200	; 0x800200 <_ZL12UART0_RxHead>
     df2:	80 91 ff 01 	lds	r24, 0x01FF	; 0x8001ff <_ZL12UART0_RxTail>
     df6:	98 17       	cp	r25, r24
     df8:	91 f0       	breq	.+36     	; 0xe1e <_Z13UART0_GetCharv+0x30>
     dfa:	e0 91 ff 01 	lds	r30, 0x01FF	; 0x8001ff <_ZL12UART0_RxTail>
     dfe:	ef 5f       	subi	r30, 0xFF	; 255
     e00:	ef 71       	andi	r30, 0x1F	; 31
     e02:	e0 93 ff 01 	sts	0x01FF, r30	; 0x8001ff <_ZL12UART0_RxTail>
     e06:	f0 e0       	ldi	r31, 0x00	; 0
     e08:	ed 5f       	subi	r30, 0xFD	; 253
     e0a:	fd 4f       	sbci	r31, 0xFD	; 253
     e0c:	20 81       	ld	r18, Z
     e0e:	80 91 fe 01 	lds	r24, 0x01FE	; 0x8001fe <_ZL17UART0_LastRxError>
     e12:	90 e0       	ldi	r25, 0x00	; 0
     e14:	98 2f       	mov	r25, r24
     e16:	88 27       	eor	r24, r24
     e18:	82 0f       	add	r24, r18
     e1a:	91 1d       	adc	r25, r1
     e1c:	08 95       	ret
     e1e:	80 e0       	ldi	r24, 0x00	; 0
     e20:	91 e0       	ldi	r25, 0x01	; 1
     e22:	08 95       	ret

00000e24 <_Z15UART0_Availablev>:
     e24:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <_ZL12UART0_RxHead>
     e28:	20 91 ff 01 	lds	r18, 0x01FF	; 0x8001ff <_ZL12UART0_RxTail>
     e2c:	90 e0       	ldi	r25, 0x00	; 0
     e2e:	4f 96       	adiw	r24, 0x1f	; 31
     e30:	82 1b       	sub	r24, r18
     e32:	91 09       	sbc	r25, r1
     e34:	6f e1       	ldi	r22, 0x1F	; 31
     e36:	70 e0       	ldi	r23, 0x00	; 0
     e38:	0e 94 2b 09 	call	0x1256	; 0x1256 <__divmodhi4>
     e3c:	08 95       	ret

00000e3e <_Z15UART0_QueueCharh>:
     e3e:	90 91 02 02 	lds	r25, 0x0202	; 0x800202 <_ZL12UART0_TxHead>
     e42:	9f 5f       	subi	r25, 0xFF	; 255
     e44:	9f 71       	andi	r25, 0x1F	; 31
     e46:	20 91 01 02 	lds	r18, 0x0201	; 0x800201 <_ZL12UART0_TxTail>
     e4a:	92 17       	cp	r25, r18
     e4c:	51 f0       	breq	.+20     	; 0xe62 <_Z15UART0_QueueCharh+0x24>
     e4e:	e9 2f       	mov	r30, r25
     e50:	f0 e0       	ldi	r31, 0x00	; 0
     e52:	ed 5d       	subi	r30, 0xDD	; 221
     e54:	fd 4f       	sbci	r31, 0xFD	; 253
     e56:	80 83       	st	Z, r24
     e58:	90 93 02 02 	sts	0x0202, r25	; 0x800202 <_ZL12UART0_TxHead>
     e5c:	81 e0       	ldi	r24, 0x01	; 1
     e5e:	90 e0       	ldi	r25, 0x00	; 0
     e60:	08 95       	ret
     e62:	80 e0       	ldi	r24, 0x00	; 0
     e64:	90 e0       	ldi	r25, 0x00	; 0
     e66:	08 95       	ret

00000e68 <_Z14UART0_PutQueuev>:
     e68:	e1 ec       	ldi	r30, 0xC1	; 193
     e6a:	f0 e0       	ldi	r31, 0x00	; 0
     e6c:	80 81       	ld	r24, Z
     e6e:	80 62       	ori	r24, 0x20	; 32
     e70:	80 83       	st	Z, r24
     e72:	08 95       	ret

00000e74 <__vector_20>:
     e74:	1f 92       	push	r1
     e76:	0f 92       	push	r0
     e78:	0f b6       	in	r0, 0x3f	; 63
     e7a:	0f 92       	push	r0
     e7c:	11 24       	eor	r1, r1
     e7e:	2f 93       	push	r18
     e80:	8f 93       	push	r24
     e82:	9f 93       	push	r25
     e84:	ef 93       	push	r30
     e86:	ff 93       	push	r31
     e88:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
     e8c:	20 91 c6 00 	lds	r18, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
     e90:	87 70       	andi	r24, 0x07	; 7
     e92:	e0 91 00 02 	lds	r30, 0x0200	; 0x800200 <_ZL12UART0_RxHead>
     e96:	ef 5f       	subi	r30, 0xFF	; 255
     e98:	ef 71       	andi	r30, 0x1F	; 31
     e9a:	90 91 ff 01 	lds	r25, 0x01FF	; 0x8001ff <_ZL12UART0_RxTail>
     e9e:	e9 17       	cp	r30, r25
     ea0:	39 f0       	breq	.+14     	; 0xeb0 <__vector_20+0x3c>
     ea2:	e0 93 00 02 	sts	0x0200, r30	; 0x800200 <_ZL12UART0_RxHead>
     ea6:	f0 e0       	ldi	r31, 0x00	; 0
     ea8:	ed 5f       	subi	r30, 0xFD	; 253
     eaa:	fd 4f       	sbci	r31, 0xFD	; 253
     eac:	20 83       	st	Z, r18
     eae:	01 c0       	rjmp	.+2      	; 0xeb2 <__vector_20+0x3e>
     eb0:	82 e0       	ldi	r24, 0x02	; 2
     eb2:	80 93 fe 01 	sts	0x01FE, r24	; 0x8001fe <_ZL17UART0_LastRxError>
     eb6:	ff 91       	pop	r31
     eb8:	ef 91       	pop	r30
     eba:	9f 91       	pop	r25
     ebc:	8f 91       	pop	r24
     ebe:	2f 91       	pop	r18
     ec0:	0f 90       	pop	r0
     ec2:	0f be       	out	0x3f, r0	; 63
     ec4:	0f 90       	pop	r0
     ec6:	1f 90       	pop	r1
     ec8:	18 95       	reti

00000eca <__vector_21>:
     eca:	1f 92       	push	r1
     ecc:	0f 92       	push	r0
     ece:	0f b6       	in	r0, 0x3f	; 63
     ed0:	0f 92       	push	r0
     ed2:	11 24       	eor	r1, r1
     ed4:	8f 93       	push	r24
     ed6:	9f 93       	push	r25
     ed8:	ef 93       	push	r30
     eda:	ff 93       	push	r31
     edc:	90 91 02 02 	lds	r25, 0x0202	; 0x800202 <_ZL12UART0_TxHead>
     ee0:	80 91 01 02 	lds	r24, 0x0201	; 0x800201 <_ZL12UART0_TxTail>
     ee4:	98 17       	cp	r25, r24
     ee6:	69 f0       	breq	.+26     	; 0xf02 <__vector_21+0x38>
     ee8:	e0 91 01 02 	lds	r30, 0x0201	; 0x800201 <_ZL12UART0_TxTail>
     eec:	ef 5f       	subi	r30, 0xFF	; 255
     eee:	ef 71       	andi	r30, 0x1F	; 31
     ef0:	e0 93 01 02 	sts	0x0201, r30	; 0x800201 <_ZL12UART0_TxTail>
     ef4:	f0 e0       	ldi	r31, 0x00	; 0
     ef6:	ed 5d       	subi	r30, 0xDD	; 221
     ef8:	fd 4f       	sbci	r31, 0xFD	; 253
     efa:	80 81       	ld	r24, Z
     efc:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
     f00:	05 c0       	rjmp	.+10     	; 0xf0c <__vector_21+0x42>
     f02:	e1 ec       	ldi	r30, 0xC1	; 193
     f04:	f0 e0       	ldi	r31, 0x00	; 0
     f06:	80 81       	ld	r24, Z
     f08:	8f 7d       	andi	r24, 0xDF	; 223
     f0a:	80 83       	st	Z, r24
     f0c:	ff 91       	pop	r31
     f0e:	ef 91       	pop	r30
     f10:	9f 91       	pop	r25
     f12:	8f 91       	pop	r24
     f14:	0f 90       	pop	r0
     f16:	0f be       	out	0x3f, r0	; 63
     f18:	0f 90       	pop	r0
     f1a:	1f 90       	pop	r1
     f1c:	18 95       	reti

00000f1e <_Z10UART1_Initjhh>:
     f1e:	cf 93       	push	r28
     f20:	df 93       	push	r29
     f22:	d6 2f       	mov	r29, r22
     f24:	c4 2f       	mov	r28, r20
     f26:	53 9a       	sbi	0x0a, 3	; 10
     f28:	5b 9a       	sbi	0x0b, 3	; 11
     f2a:	10 92 bd 01 	sts	0x01BD, r1	; 0x8001bd <_ZL12UART1_TxHead>
     f2e:	10 92 bc 01 	sts	0x01BC, r1	; 0x8001bc <_ZL12UART1_TxTail>
     f32:	10 92 bb 01 	sts	0x01BB, r1	; 0x8001bb <_ZL12UART1_RxHead>
     f36:	10 92 ba 01 	sts	0x01BA, r1	; 0x8001ba <_ZL12UART1_RxTail>
     f3a:	a0 e0       	ldi	r26, 0x00	; 0
     f3c:	b0 e0       	ldi	r27, 0x00	; 0
     f3e:	88 0f       	add	r24, r24
     f40:	99 1f       	adc	r25, r25
     f42:	aa 1f       	adc	r26, r26
     f44:	bb 1f       	adc	r27, r27
     f46:	88 0f       	add	r24, r24
     f48:	99 1f       	adc	r25, r25
     f4a:	aa 1f       	adc	r26, r26
     f4c:	bb 1f       	adc	r27, r27
     f4e:	9c 01       	movw	r18, r24
     f50:	ad 01       	movw	r20, r26
     f52:	22 0f       	add	r18, r18
     f54:	33 1f       	adc	r19, r19
     f56:	44 1f       	adc	r20, r20
     f58:	55 1f       	adc	r21, r21
     f5a:	22 0f       	add	r18, r18
     f5c:	33 1f       	adc	r19, r19
     f5e:	44 1f       	adc	r20, r20
     f60:	55 1f       	adc	r21, r21
     f62:	60 e0       	ldi	r22, 0x00	; 0
     f64:	7d e2       	ldi	r23, 0x2D	; 45
     f66:	81 e3       	ldi	r24, 0x31	; 49
     f68:	91 e0       	ldi	r25, 0x01	; 1
     f6a:	0e 94 3f 09 	call	0x127e	; 0x127e <__udivmodsi4>
     f6e:	21 50       	subi	r18, 0x01	; 1
     f70:	31 09       	sbc	r19, r1
     f72:	30 93 cd 00 	sts	0x00CD, r19	; 0x8000cd <__TEXT_REGION_LENGTH__+0x7e00cd>
     f76:	20 93 cc 00 	sts	0x00CC, r18	; 0x8000cc <__TEXT_REGION_LENGTH__+0x7e00cc>
     f7a:	ea ec       	ldi	r30, 0xCA	; 202
     f7c:	f0 e0       	ldi	r31, 0x00	; 0
     f7e:	80 81       	ld	r24, Z
     f80:	8f 73       	andi	r24, 0x3F	; 63
     f82:	80 83       	st	Z, r24
     f84:	d2 30       	cpi	r29, 0x02	; 2
     f86:	21 f4       	brne	.+8      	; 0xf90 <_Z10UART1_Initjhh+0x72>
     f88:	80 81       	ld	r24, Z
     f8a:	88 60       	ori	r24, 0x08	; 8
     f8c:	80 83       	st	Z, r24
     f8e:	05 c0       	rjmp	.+10     	; 0xf9a <_Z10UART1_Initjhh+0x7c>
     f90:	ea ec       	ldi	r30, 0xCA	; 202
     f92:	f0 e0       	ldi	r31, 0x00	; 0
     f94:	80 81       	ld	r24, Z
     f96:	87 7f       	andi	r24, 0xF7	; 247
     f98:	80 83       	st	Z, r24
     f9a:	c2 30       	cpi	r28, 0x02	; 2
     f9c:	31 f4       	brne	.+12     	; 0xfaa <_Z10UART1_Initjhh+0x8c>
     f9e:	ea ec       	ldi	r30, 0xCA	; 202
     fa0:	f0 e0       	ldi	r31, 0x00	; 0
     fa2:	80 81       	ld	r24, Z
     fa4:	80 62       	ori	r24, 0x20	; 32
     fa6:	80 83       	st	Z, r24
     fa8:	0d c0       	rjmp	.+26     	; 0xfc4 <_Z10UART1_Initjhh+0xa6>
     faa:	c3 30       	cpi	r28, 0x03	; 3
     fac:	31 f4       	brne	.+12     	; 0xfba <_Z10UART1_Initjhh+0x9c>
     fae:	ea ec       	ldi	r30, 0xCA	; 202
     fb0:	f0 e0       	ldi	r31, 0x00	; 0
     fb2:	80 81       	ld	r24, Z
     fb4:	80 63       	ori	r24, 0x30	; 48
     fb6:	80 83       	st	Z, r24
     fb8:	05 c0       	rjmp	.+10     	; 0xfc4 <_Z10UART1_Initjhh+0xa6>
     fba:	ea ec       	ldi	r30, 0xCA	; 202
     fbc:	f0 e0       	ldi	r31, 0x00	; 0
     fbe:	80 81       	ld	r24, Z
     fc0:	8f 7c       	andi	r24, 0xCF	; 207
     fc2:	80 83       	st	Z, r24
     fc4:	ea ec       	ldi	r30, 0xCA	; 202
     fc6:	f0 e0       	ldi	r31, 0x00	; 0
     fc8:	80 81       	ld	r24, Z
     fca:	86 60       	ori	r24, 0x06	; 6
     fcc:	80 83       	st	Z, r24
     fce:	e9 ec       	ldi	r30, 0xC9	; 201
     fd0:	f0 e0       	ldi	r31, 0x00	; 0
     fd2:	80 81       	ld	r24, Z
     fd4:	80 6a       	ori	r24, 0xA0	; 160
     fd6:	80 83       	st	Z, r24
     fd8:	80 81       	ld	r24, Z
     fda:	88 61       	ori	r24, 0x18	; 24
     fdc:	80 83       	st	Z, r24
     fde:	df 91       	pop	r29
     fe0:	cf 91       	pop	r28
     fe2:	08 95       	ret

00000fe4 <_Z13UART1_GetCharv>:
     fe4:	90 91 bb 01 	lds	r25, 0x01BB	; 0x8001bb <_ZL12UART1_RxHead>
     fe8:	80 91 ba 01 	lds	r24, 0x01BA	; 0x8001ba <_ZL12UART1_RxTail>
     fec:	98 17       	cp	r25, r24
     fee:	91 f0       	breq	.+36     	; 0x1014 <_Z13UART1_GetCharv+0x30>
     ff0:	e0 91 ba 01 	lds	r30, 0x01BA	; 0x8001ba <_ZL12UART1_RxTail>
     ff4:	ef 5f       	subi	r30, 0xFF	; 255
     ff6:	ef 71       	andi	r30, 0x1F	; 31
     ff8:	e0 93 ba 01 	sts	0x01BA, r30	; 0x8001ba <_ZL12UART1_RxTail>
     ffc:	f0 e0       	ldi	r31, 0x00	; 0
     ffe:	e2 54       	subi	r30, 0x42	; 66
    1000:	fe 4f       	sbci	r31, 0xFE	; 254
    1002:	20 81       	ld	r18, Z
    1004:	80 91 b9 01 	lds	r24, 0x01B9	; 0x8001b9 <_ZL17UART1_LastRxError>
    1008:	90 e0       	ldi	r25, 0x00	; 0
    100a:	98 2f       	mov	r25, r24
    100c:	88 27       	eor	r24, r24
    100e:	82 0f       	add	r24, r18
    1010:	91 1d       	adc	r25, r1
    1012:	08 95       	ret
    1014:	80 e0       	ldi	r24, 0x00	; 0
    1016:	91 e0       	ldi	r25, 0x01	; 1
    1018:	08 95       	ret

0000101a <_Z15UART1_Availablev>:
    101a:	80 91 bb 01 	lds	r24, 0x01BB	; 0x8001bb <_ZL12UART1_RxHead>
    101e:	20 91 ba 01 	lds	r18, 0x01BA	; 0x8001ba <_ZL12UART1_RxTail>
    1022:	90 e0       	ldi	r25, 0x00	; 0
    1024:	4f 96       	adiw	r24, 0x1f	; 31
    1026:	82 1b       	sub	r24, r18
    1028:	91 09       	sbc	r25, r1
    102a:	6f e1       	ldi	r22, 0x1F	; 31
    102c:	70 e0       	ldi	r23, 0x00	; 0
    102e:	0e 94 2b 09 	call	0x1256	; 0x1256 <__divmodhi4>
    1032:	08 95       	ret

00001034 <__vector_28>:
/*************************************************************************
Function: UART1 Receive Complete interrupt
Purpose:  called when the UART has received a character
**************************************************************************/
ISR(USART1_RX_vect)
{
    1034:	1f 92       	push	r1
    1036:	0f 92       	push	r0
    1038:	0f b6       	in	r0, 0x3f	; 63
    103a:	0f 92       	push	r0
    103c:	11 24       	eor	r1, r1
    103e:	2f 93       	push	r18
    1040:	8f 93       	push	r24
    1042:	9f 93       	push	r25
    1044:	ef 93       	push	r30
    1046:	ff 93       	push	r31
	unsigned char usr;
	unsigned char lastRxError;
	
	
	/* read UART status register and UART data register */
	usr  = UCSR1A;
    1048:	80 91 c8 00 	lds	r24, 0x00C8	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7e00c8>
	data = UDR1;
    104c:	20 91 ce 00 	lds	r18, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7e00ce>
	
	/* */
	lastRxError = (usr & (FE1 | DOR1));
    1050:	87 70       	andi	r24, 0x07	; 7
	
	/* calculate buffer index */
	tmphead = ( UART1_RxHead + 1) & UART1_RX_BUFFER_MASK;
    1052:	e0 91 bb 01 	lds	r30, 0x01BB	; 0x8001bb <_ZL12UART1_RxHead>
    1056:	ef 5f       	subi	r30, 0xFF	; 255
    1058:	ef 71       	andi	r30, 0x1F	; 31
	
	if ( tmphead == UART1_RxTail )
    105a:	90 91 ba 01 	lds	r25, 0x01BA	; 0x8001ba <_ZL12UART1_RxTail>
    105e:	e9 17       	cp	r30, r25
    1060:	39 f0       	breq	.+14     	; 0x1070 <__vector_28+0x3c>
		lastRxError = UART_BUFFER_OVERFLOW >> 8;
	}
	else
	{
		/* store new index */
		UART1_RxHead = tmphead;
    1062:	e0 93 bb 01 	sts	0x01BB, r30	; 0x8001bb <_ZL12UART1_RxHead>
		/* store received data in buffer */
		UART1_RxBuf[tmphead] = data;
    1066:	f0 e0       	ldi	r31, 0x00	; 0
    1068:	e2 54       	subi	r30, 0x42	; 66
    106a:	fe 4f       	sbci	r31, 0xFE	; 254
    106c:	20 83       	st	Z, r18
    106e:	01 c0       	rjmp	.+2      	; 0x1072 <__vector_28+0x3e>
	tmphead = ( UART1_RxHead + 1) & UART1_RX_BUFFER_MASK;
	
	if ( tmphead == UART1_RxTail )
	{
		/* error: receive buffer overflow */
		lastRxError = UART_BUFFER_OVERFLOW >> 8;
    1070:	82 e0       	ldi	r24, 0x02	; 2
		UART1_RxHead = tmphead;
		/* store received data in buffer */
		UART1_RxBuf[tmphead] = data;
	}

	UART1_LastRxError = lastRxError;
    1072:	80 93 b9 01 	sts	0x01B9, r24	; 0x8001b9 <_ZL17UART1_LastRxError>
}
    1076:	ff 91       	pop	r31
    1078:	ef 91       	pop	r30
    107a:	9f 91       	pop	r25
    107c:	8f 91       	pop	r24
    107e:	2f 91       	pop	r18
    1080:	0f 90       	pop	r0
    1082:	0f be       	out	0x3f, r0	; 63
    1084:	0f 90       	pop	r0
    1086:	1f 90       	pop	r1
    1088:	18 95       	reti

0000108a <__vector_29>:
/*************************************************************************
Function: UART1 Data Register Empty interrupt
Purpose:  called when the UART is ready to transmit the next byte
**************************************************************************/
ISR(USART1_UDRE_vect)
{
    108a:	1f 92       	push	r1
    108c:	0f 92       	push	r0
    108e:	0f b6       	in	r0, 0x3f	; 63
    1090:	0f 92       	push	r0
    1092:	11 24       	eor	r1, r1
    1094:	8f 93       	push	r24
    1096:	9f 93       	push	r25
    1098:	ef 93       	push	r30
    109a:	ff 93       	push	r31
	unsigned char tmptail;
	
	if ( UART1_TxHead != UART1_TxTail)
    109c:	90 91 bd 01 	lds	r25, 0x01BD	; 0x8001bd <_ZL12UART1_TxHead>
    10a0:	80 91 bc 01 	lds	r24, 0x01BC	; 0x8001bc <_ZL12UART1_TxTail>
    10a4:	98 17       	cp	r25, r24
    10a6:	69 f0       	breq	.+26     	; 0x10c2 <__vector_29+0x38>
	{
		/* calculate and store new buffer index */
		tmptail = (UART1_TxTail + 1) & UART1_TX_BUFFER_MASK;
    10a8:	e0 91 bc 01 	lds	r30, 0x01BC	; 0x8001bc <_ZL12UART1_TxTail>
    10ac:	ef 5f       	subi	r30, 0xFF	; 255
    10ae:	ef 71       	andi	r30, 0x1F	; 31
		UART1_TxTail = tmptail;
    10b0:	e0 93 bc 01 	sts	0x01BC, r30	; 0x8001bc <_ZL12UART1_TxTail>

		/* get one byte from buffer and write it to UART */
		UDR1 = UART1_TxBuf[tmptail];  /* start transmission */
    10b4:	f0 e0       	ldi	r31, 0x00	; 0
    10b6:	e2 52       	subi	r30, 0x22	; 34
    10b8:	fe 4f       	sbci	r31, 0xFE	; 254
    10ba:	80 81       	ld	r24, Z
    10bc:	80 93 ce 00 	sts	0x00CE, r24	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7e00ce>
    10c0:	05 c0       	rjmp	.+10     	; 0x10cc <__vector_29+0x42>
	}
	else
	{
		/* tx buffer empty, disable UDRE interrupt */
		UCSR1B &= ~(1 << UDRIE1);
    10c2:	e9 ec       	ldi	r30, 0xC9	; 201
    10c4:	f0 e0       	ldi	r31, 0x00	; 0
    10c6:	80 81       	ld	r24, Z
    10c8:	8f 7d       	andi	r24, 0xDF	; 223
    10ca:	80 83       	st	Z, r24
	}
    10cc:	ff 91       	pop	r31
    10ce:	ef 91       	pop	r30
    10d0:	9f 91       	pop	r25
    10d2:	8f 91       	pop	r24
    10d4:	0f 90       	pop	r0
    10d6:	0f be       	out	0x3f, r0	; 63
    10d8:	0f 90       	pop	r0
    10da:	1f 90       	pop	r1
    10dc:	18 95       	reti

000010de <_Z7UI_Initv>:
MCP_Output ModeMIDI_LED;
MCP_Output LoopPreset_LEDs[8];
MCP_Output SW_Ctrl_LEDs[4];

void UI_Init()
{
    10de:	ef 92       	push	r14
    10e0:	ff 92       	push	r15
    10e2:	1f 93       	push	r17
    10e4:	cf 93       	push	r28
    10e6:	df 93       	push	r29
    10e8:	cd b7       	in	r28, 0x3d	; 61
    10ea:	de b7       	in	r29, 0x3e	; 62
    10ec:	64 97       	sbiw	r28, 0x14	; 20
    10ee:	0f b6       	in	r0, 0x3f	; 63
    10f0:	f8 94       	cli
    10f2:	de bf       	out	0x3e, r29	; 62
    10f4:	0f be       	out	0x3f, r0	; 63
    10f6:	cd bf       	out	0x3d, r28	; 61
	ModeRun_LED = MCP_Output(MCP23017_UI_LEDS_ADDR, PortB, (MCP23017_Pin)UI_MODE_RUN_LED_PIN);
    10f8:	25 e0       	ldi	r18, 0x05	; 5
    10fa:	41 e0       	ldi	r20, 0x01	; 1
    10fc:	60 e0       	ldi	r22, 0x00	; 0
    10fe:	ce 01       	movw	r24, r28
    1100:	41 96       	adiw	r24, 0x11	; 17
    1102:	0e 94 48 02 	call	0x490	; 0x490 <_ZN10MCP_OutputC1Eh13MCP23017_Port12MCP23017_Pin>
    1106:	89 89       	ldd	r24, Y+17	; 0x11
    1108:	9a 89       	ldd	r25, Y+18	; 0x12
    110a:	ab 89       	ldd	r26, Y+19	; 0x13
    110c:	bc 89       	ldd	r27, Y+20	; 0x14
    110e:	80 93 7b 02 	sts	0x027B, r24	; 0x80027b <ModeRun_LED>
    1112:	90 93 7c 02 	sts	0x027C, r25	; 0x80027c <ModeRun_LED+0x1>
    1116:	a0 93 7d 02 	sts	0x027D, r26	; 0x80027d <ModeRun_LED+0x2>
    111a:	b0 93 7e 02 	sts	0x027E, r27	; 0x80027e <ModeRun_LED+0x3>
	ModePreset_LED = MCP_Output(MCP23017_UI_LEDS_ADDR, PortB, (MCP23017_Pin)UI_MODE_PRESET_LED_PIN);
    111e:	26 e0       	ldi	r18, 0x06	; 6
    1120:	41 e0       	ldi	r20, 0x01	; 1
    1122:	60 e0       	ldi	r22, 0x00	; 0
    1124:	ce 01       	movw	r24, r28
    1126:	0d 96       	adiw	r24, 0x0d	; 13
    1128:	0e 94 48 02 	call	0x490	; 0x490 <_ZN10MCP_OutputC1Eh13MCP23017_Port12MCP23017_Pin>
    112c:	8d 85       	ldd	r24, Y+13	; 0x0d
    112e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1130:	af 85       	ldd	r26, Y+15	; 0x0f
    1132:	b8 89       	ldd	r27, Y+16	; 0x10
    1134:	80 93 77 02 	sts	0x0277, r24	; 0x800277 <ModePreset_LED>
    1138:	90 93 78 02 	sts	0x0278, r25	; 0x800278 <ModePreset_LED+0x1>
    113c:	a0 93 79 02 	sts	0x0279, r26	; 0x800279 <ModePreset_LED+0x2>
    1140:	b0 93 7a 02 	sts	0x027A, r27	; 0x80027a <ModePreset_LED+0x3>
	ModeMIDI_LED = MCP_Output(MCP23017_UI_LEDS_ADDR, PortB, (MCP23017_Pin)UI_MODE_MIDI_LED_PIN);
    1144:	27 e0       	ldi	r18, 0x07	; 7
    1146:	41 e0       	ldi	r20, 0x01	; 1
    1148:	60 e0       	ldi	r22, 0x00	; 0
    114a:	ce 01       	movw	r24, r28
    114c:	09 96       	adiw	r24, 0x09	; 9
    114e:	0e 94 48 02 	call	0x490	; 0x490 <_ZN10MCP_OutputC1Eh13MCP23017_Port12MCP23017_Pin>
    1152:	89 85       	ldd	r24, Y+9	; 0x09
    1154:	9a 85       	ldd	r25, Y+10	; 0x0a
    1156:	ab 85       	ldd	r26, Y+11	; 0x0b
    1158:	bc 85       	ldd	r27, Y+12	; 0x0c
    115a:	80 93 73 02 	sts	0x0273, r24	; 0x800273 <ModeMIDI_LED>
    115e:	90 93 74 02 	sts	0x0274, r25	; 0x800274 <ModeMIDI_LED+0x1>
    1162:	a0 93 75 02 	sts	0x0275, r26	; 0x800275 <ModeMIDI_LED+0x2>
    1166:	b0 93 76 02 	sts	0x0276, r27	; 0x800276 <ModeMIDI_LED+0x3>
    116a:	0f 2e       	mov	r0, r31
    116c:	f3 e5       	ldi	r31, 0x53	; 83
    116e:	ef 2e       	mov	r14, r31
    1170:	f2 e0       	ldi	r31, 0x02	; 2
    1172:	ff 2e       	mov	r15, r31
    1174:	f0 2d       	mov	r31, r0
	
	for (uint8_t i = 0; i < NELEMS(LoopPreset_LEDs); i++)
    1176:	10 e0       	ldi	r17, 0x00	; 0
		LoopPreset_LEDs[i] = MCP_Output(MCP23017_UI_LEDS_ADDR, PortA, (MCP23017_Pin)i);
    1178:	21 2f       	mov	r18, r17
    117a:	40 e0       	ldi	r20, 0x00	; 0
    117c:	60 e0       	ldi	r22, 0x00	; 0
    117e:	ce 01       	movw	r24, r28
    1180:	05 96       	adiw	r24, 0x05	; 5
    1182:	0e 94 48 02 	call	0x490	; 0x490 <_ZN10MCP_OutputC1Eh13MCP23017_Port12MCP23017_Pin>
    1186:	8d 81       	ldd	r24, Y+5	; 0x05
    1188:	9e 81       	ldd	r25, Y+6	; 0x06
    118a:	af 81       	ldd	r26, Y+7	; 0x07
    118c:	b8 85       	ldd	r27, Y+8	; 0x08
    118e:	f7 01       	movw	r30, r14
    1190:	81 93       	st	Z+, r24
    1192:	91 93       	st	Z+, r25
    1194:	a1 93       	st	Z+, r26
    1196:	b1 93       	st	Z+, r27
    1198:	7f 01       	movw	r14, r30
{
	ModeRun_LED = MCP_Output(MCP23017_UI_LEDS_ADDR, PortB, (MCP23017_Pin)UI_MODE_RUN_LED_PIN);
	ModePreset_LED = MCP_Output(MCP23017_UI_LEDS_ADDR, PortB, (MCP23017_Pin)UI_MODE_PRESET_LED_PIN);
	ModeMIDI_LED = MCP_Output(MCP23017_UI_LEDS_ADDR, PortB, (MCP23017_Pin)UI_MODE_MIDI_LED_PIN);
	
	for (uint8_t i = 0; i < NELEMS(LoopPreset_LEDs); i++)
    119a:	1f 5f       	subi	r17, 0xFF	; 255
    119c:	18 30       	cpi	r17, 0x08	; 8
    119e:	61 f7       	brne	.-40     	; 0x1178 <_Z7UI_Initv+0x9a>
    11a0:	0f 2e       	mov	r0, r31
    11a2:	f3 e4       	ldi	r31, 0x43	; 67
    11a4:	ef 2e       	mov	r14, r31
    11a6:	f2 e0       	ldi	r31, 0x02	; 2
    11a8:	ff 2e       	mov	r15, r31
    11aa:	f0 2d       	mov	r31, r0
    11ac:	10 e0       	ldi	r17, 0x00	; 0
		LoopPreset_LEDs[i] = MCP_Output(MCP23017_UI_LEDS_ADDR, PortA, (MCP23017_Pin)i);
		
	for (uint8_t i = 0; i < NELEMS(SW_Ctrl_LEDs); i++)
		SW_Ctrl_LEDs[i] = MCP_Output(MCP23017_UI_LEDS_ADDR, PortB, (MCP23017_Pin)(i));
    11ae:	21 2f       	mov	r18, r17
    11b0:	41 e0       	ldi	r20, 0x01	; 1
    11b2:	60 e0       	ldi	r22, 0x00	; 0
    11b4:	ce 01       	movw	r24, r28
    11b6:	01 96       	adiw	r24, 0x01	; 1
    11b8:	0e 94 48 02 	call	0x490	; 0x490 <_ZN10MCP_OutputC1Eh13MCP23017_Port12MCP23017_Pin>
    11bc:	89 81       	ldd	r24, Y+1	; 0x01
    11be:	9a 81       	ldd	r25, Y+2	; 0x02
    11c0:	ab 81       	ldd	r26, Y+3	; 0x03
    11c2:	bc 81       	ldd	r27, Y+4	; 0x04
    11c4:	f7 01       	movw	r30, r14
    11c6:	81 93       	st	Z+, r24
    11c8:	91 93       	st	Z+, r25
    11ca:	a1 93       	st	Z+, r26
    11cc:	b1 93       	st	Z+, r27
    11ce:	7f 01       	movw	r14, r30
	ModeMIDI_LED = MCP_Output(MCP23017_UI_LEDS_ADDR, PortB, (MCP23017_Pin)UI_MODE_MIDI_LED_PIN);
	
	for (uint8_t i = 0; i < NELEMS(LoopPreset_LEDs); i++)
		LoopPreset_LEDs[i] = MCP_Output(MCP23017_UI_LEDS_ADDR, PortA, (MCP23017_Pin)i);
		
	for (uint8_t i = 0; i < NELEMS(SW_Ctrl_LEDs); i++)
    11d0:	1f 5f       	subi	r17, 0xFF	; 255
    11d2:	14 30       	cpi	r17, 0x04	; 4
    11d4:	61 f7       	brne	.-40     	; 0x11ae <_Z7UI_Initv+0xd0>
		SW_Ctrl_LEDs[i] = MCP_Output(MCP23017_UI_LEDS_ADDR, PortB, (MCP23017_Pin)(i));
		
	MCP_Output::SetAutoToggleSpeed(400);
    11d6:	80 e9       	ldi	r24, 0x90	; 144
    11d8:	91 e0       	ldi	r25, 0x01	; 1
    11da:	0e 94 6c 02 	call	0x4d8	; 0x4d8 <_ZN10MCP_Output18SetAutoToggleSpeedEj>
}
    11de:	64 96       	adiw	r28, 0x14	; 20
    11e0:	0f b6       	in	r0, 0x3f	; 63
    11e2:	f8 94       	cli
    11e4:	de bf       	out	0x3e, r29	; 62
    11e6:	0f be       	out	0x3f, r0	; 63
    11e8:	cd bf       	out	0x3d, r28	; 61
    11ea:	df 91       	pop	r29
    11ec:	cf 91       	pop	r28
    11ee:	1f 91       	pop	r17
    11f0:	ff 90       	pop	r15
    11f2:	ef 90       	pop	r14
    11f4:	08 95       	ret

000011f6 <_GLOBAL__sub_I_ModeRun_LED>:
    11f6:	0f 93       	push	r16
    11f8:	1f 93       	push	r17
    11fa:	cf 93       	push	r28
    11fc:	df 93       	push	r29

#define UI_MODE_RUN_LED_PIN			5
#define UI_MODE_PRESET_LED_PIN		6
#define UI_MODE_MIDI_LED_PIN		7

MCP_Output ModeRun_LED;
    11fe:	8b e7       	ldi	r24, 0x7B	; 123
    1200:	92 e0       	ldi	r25, 0x02	; 2
    1202:	0e 94 cd 01 	call	0x39a	; 0x39a <_ZN10MCP_OutputC1Ev>
MCP_Output ModePreset_LED;
    1206:	87 e7       	ldi	r24, 0x77	; 119
    1208:	92 e0       	ldi	r25, 0x02	; 2
    120a:	0e 94 cd 01 	call	0x39a	; 0x39a <_ZN10MCP_OutputC1Ev>
MCP_Output ModeMIDI_LED;
    120e:	83 e7       	ldi	r24, 0x73	; 115
    1210:	92 e0       	ldi	r25, 0x02	; 2
    1212:	0e 94 cd 01 	call	0x39a	; 0x39a <_ZN10MCP_OutputC1Ev>
    1216:	c3 e5       	ldi	r28, 0x53	; 83
    1218:	d2 e0       	ldi	r29, 0x02	; 2
    121a:	03 e7       	ldi	r16, 0x73	; 115
    121c:	12 e0       	ldi	r17, 0x02	; 2
MCP_Output LoopPreset_LEDs[8];
    121e:	ce 01       	movw	r24, r28
    1220:	0e 94 cd 01 	call	0x39a	; 0x39a <_ZN10MCP_OutputC1Ev>
    1224:	24 96       	adiw	r28, 0x04	; 4
    1226:	c0 17       	cp	r28, r16
    1228:	d1 07       	cpc	r29, r17
    122a:	c9 f7       	brne	.-14     	; 0x121e <_GLOBAL__sub_I_ModeRun_LED+0x28>
MCP_Output SW_Ctrl_LEDs[4];
    122c:	83 e4       	ldi	r24, 0x43	; 67
    122e:	92 e0       	ldi	r25, 0x02	; 2
    1230:	0e 94 cd 01 	call	0x39a	; 0x39a <_ZN10MCP_OutputC1Ev>
    1234:	87 e4       	ldi	r24, 0x47	; 71
    1236:	92 e0       	ldi	r25, 0x02	; 2
    1238:	0e 94 cd 01 	call	0x39a	; 0x39a <_ZN10MCP_OutputC1Ev>
    123c:	8b e4       	ldi	r24, 0x4B	; 75
    123e:	92 e0       	ldi	r25, 0x02	; 2
    1240:	0e 94 cd 01 	call	0x39a	; 0x39a <_ZN10MCP_OutputC1Ev>
    1244:	8f e4       	ldi	r24, 0x4F	; 79
    1246:	92 e0       	ldi	r25, 0x02	; 2
    1248:	0e 94 cd 01 	call	0x39a	; 0x39a <_ZN10MCP_OutputC1Ev>
		
	for (uint8_t i = 0; i < NELEMS(SW_Ctrl_LEDs); i++)
		SW_Ctrl_LEDs[i] = MCP_Output(MCP23017_UI_LEDS_ADDR, PortB, (MCP23017_Pin)(i));
		
	MCP_Output::SetAutoToggleSpeed(400);
}
    124c:	df 91       	pop	r29
    124e:	cf 91       	pop	r28
    1250:	1f 91       	pop	r17
    1252:	0f 91       	pop	r16
    1254:	08 95       	ret

00001256 <__divmodhi4>:
    1256:	97 fb       	bst	r25, 7
    1258:	07 2e       	mov	r0, r23
    125a:	16 f4       	brtc	.+4      	; 0x1260 <__divmodhi4+0xa>
    125c:	00 94       	com	r0
    125e:	07 d0       	rcall	.+14     	; 0x126e <__divmodhi4_neg1>
    1260:	77 fd       	sbrc	r23, 7
    1262:	09 d0       	rcall	.+18     	; 0x1276 <__divmodhi4_neg2>
    1264:	0e 94 6c 09 	call	0x12d8	; 0x12d8 <__udivmodhi4>
    1268:	07 fc       	sbrc	r0, 7
    126a:	05 d0       	rcall	.+10     	; 0x1276 <__divmodhi4_neg2>
    126c:	3e f4       	brtc	.+14     	; 0x127c <__divmodhi4_exit>

0000126e <__divmodhi4_neg1>:
    126e:	90 95       	com	r25
    1270:	81 95       	neg	r24
    1272:	9f 4f       	sbci	r25, 0xFF	; 255
    1274:	08 95       	ret

00001276 <__divmodhi4_neg2>:
    1276:	70 95       	com	r23
    1278:	61 95       	neg	r22
    127a:	7f 4f       	sbci	r23, 0xFF	; 255

0000127c <__divmodhi4_exit>:
    127c:	08 95       	ret

0000127e <__udivmodsi4>:
    127e:	a1 e2       	ldi	r26, 0x21	; 33
    1280:	1a 2e       	mov	r1, r26
    1282:	aa 1b       	sub	r26, r26
    1284:	bb 1b       	sub	r27, r27
    1286:	fd 01       	movw	r30, r26
    1288:	0d c0       	rjmp	.+26     	; 0x12a4 <__udivmodsi4_ep>

0000128a <__udivmodsi4_loop>:
    128a:	aa 1f       	adc	r26, r26
    128c:	bb 1f       	adc	r27, r27
    128e:	ee 1f       	adc	r30, r30
    1290:	ff 1f       	adc	r31, r31
    1292:	a2 17       	cp	r26, r18
    1294:	b3 07       	cpc	r27, r19
    1296:	e4 07       	cpc	r30, r20
    1298:	f5 07       	cpc	r31, r21
    129a:	20 f0       	brcs	.+8      	; 0x12a4 <__udivmodsi4_ep>
    129c:	a2 1b       	sub	r26, r18
    129e:	b3 0b       	sbc	r27, r19
    12a0:	e4 0b       	sbc	r30, r20
    12a2:	f5 0b       	sbc	r31, r21

000012a4 <__udivmodsi4_ep>:
    12a4:	66 1f       	adc	r22, r22
    12a6:	77 1f       	adc	r23, r23
    12a8:	88 1f       	adc	r24, r24
    12aa:	99 1f       	adc	r25, r25
    12ac:	1a 94       	dec	r1
    12ae:	69 f7       	brne	.-38     	; 0x128a <__udivmodsi4_loop>
    12b0:	60 95       	com	r22
    12b2:	70 95       	com	r23
    12b4:	80 95       	com	r24
    12b6:	90 95       	com	r25
    12b8:	9b 01       	movw	r18, r22
    12ba:	ac 01       	movw	r20, r24
    12bc:	bd 01       	movw	r22, r26
    12be:	cf 01       	movw	r24, r30
    12c0:	08 95       	ret

000012c2 <__muluhisi3>:
    12c2:	0e 94 86 09 	call	0x130c	; 0x130c <__umulhisi3>
    12c6:	a5 9f       	mul	r26, r21
    12c8:	90 0d       	add	r25, r0
    12ca:	b4 9f       	mul	r27, r20
    12cc:	90 0d       	add	r25, r0
    12ce:	a4 9f       	mul	r26, r20
    12d0:	80 0d       	add	r24, r0
    12d2:	91 1d       	adc	r25, r1
    12d4:	11 24       	eor	r1, r1
    12d6:	08 95       	ret

000012d8 <__udivmodhi4>:
    12d8:	aa 1b       	sub	r26, r26
    12da:	bb 1b       	sub	r27, r27
    12dc:	51 e1       	ldi	r21, 0x11	; 17
    12de:	07 c0       	rjmp	.+14     	; 0x12ee <__udivmodhi4_ep>

000012e0 <__udivmodhi4_loop>:
    12e0:	aa 1f       	adc	r26, r26
    12e2:	bb 1f       	adc	r27, r27
    12e4:	a6 17       	cp	r26, r22
    12e6:	b7 07       	cpc	r27, r23
    12e8:	10 f0       	brcs	.+4      	; 0x12ee <__udivmodhi4_ep>
    12ea:	a6 1b       	sub	r26, r22
    12ec:	b7 0b       	sbc	r27, r23

000012ee <__udivmodhi4_ep>:
    12ee:	88 1f       	adc	r24, r24
    12f0:	99 1f       	adc	r25, r25
    12f2:	5a 95       	dec	r21
    12f4:	a9 f7       	brne	.-22     	; 0x12e0 <__udivmodhi4_loop>
    12f6:	80 95       	com	r24
    12f8:	90 95       	com	r25
    12fa:	bc 01       	movw	r22, r24
    12fc:	cd 01       	movw	r24, r26
    12fe:	08 95       	ret

00001300 <__tablejump2__>:
    1300:	ee 0f       	add	r30, r30
    1302:	ff 1f       	adc	r31, r31
    1304:	05 90       	lpm	r0, Z+
    1306:	f4 91       	lpm	r31, Z
    1308:	e0 2d       	mov	r30, r0
    130a:	09 94       	ijmp

0000130c <__umulhisi3>:
    130c:	a2 9f       	mul	r26, r18
    130e:	b0 01       	movw	r22, r0
    1310:	b3 9f       	mul	r27, r19
    1312:	c0 01       	movw	r24, r0
    1314:	a3 9f       	mul	r26, r19
    1316:	70 0d       	add	r23, r0
    1318:	81 1d       	adc	r24, r1
    131a:	11 24       	eor	r1, r1
    131c:	91 1d       	adc	r25, r1
    131e:	b2 9f       	mul	r27, r18
    1320:	70 0d       	add	r23, r0
    1322:	81 1d       	adc	r24, r1
    1324:	11 24       	eor	r1, r1
    1326:	91 1d       	adc	r25, r1
    1328:	08 95       	ret

0000132a <eeprom_read_byte>:
    132a:	f9 99       	sbic	0x1f, 1	; 31
    132c:	fe cf       	rjmp	.-4      	; 0x132a <eeprom_read_byte>
    132e:	92 bd       	out	0x22, r25	; 34
    1330:	81 bd       	out	0x21, r24	; 33
    1332:	f8 9a       	sbi	0x1f, 0	; 31
    1334:	99 27       	eor	r25, r25
    1336:	80 b5       	in	r24, 0x20	; 32
    1338:	08 95       	ret

0000133a <eeprom_write_byte>:
    133a:	26 2f       	mov	r18, r22

0000133c <eeprom_write_r18>:
    133c:	f9 99       	sbic	0x1f, 1	; 31
    133e:	fe cf       	rjmp	.-4      	; 0x133c <eeprom_write_r18>
    1340:	1f ba       	out	0x1f, r1	; 31
    1342:	92 bd       	out	0x22, r25	; 34
    1344:	81 bd       	out	0x21, r24	; 33
    1346:	20 bd       	out	0x20, r18	; 32
    1348:	0f b6       	in	r0, 0x3f	; 63
    134a:	f8 94       	cli
    134c:	fa 9a       	sbi	0x1f, 2	; 31
    134e:	f9 9a       	sbi	0x1f, 1	; 31
    1350:	0f be       	out	0x3f, r0	; 63
    1352:	01 96       	adiw	r24, 0x01	; 1
    1354:	08 95       	ret

00001356 <_exit>:
    1356:	f8 94       	cli

00001358 <__stop_program>:
    1358:	ff cf       	rjmp	.-2      	; 0x1358 <__stop_program>
