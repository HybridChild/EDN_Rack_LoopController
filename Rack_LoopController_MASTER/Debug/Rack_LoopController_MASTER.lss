
Rack_LoopController_MASTER.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000003e  00800100  000021c4  00002258  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000021c4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000001be  0080013e  0080013e  00002296  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00002296  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000022c8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000438  00000000  00000000  00002308  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00004a74  00000000  00000000  00002740  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001a2b  00000000  00000000  000071b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000025d4  00000000  00000000  00008bdf  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000914  00000000  00000000  0000b1b4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00001b4a  00000000  00000000  0000bac8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001c8b  00000000  00000000  0000d612  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000328  00000000  00000000  0000f29d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__ctors_end>
       4:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
       8:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
       c:	0c 94 5b 05 	jmp	0xab6	; 0xab6 <__vector_3>
      10:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
      14:	0c 94 3a 05 	jmp	0xa74	; 0xa74 <__vector_5>
      18:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
      1c:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
      20:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
      24:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
      28:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
      2c:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
      30:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
      34:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
      38:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
      3c:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
      40:	0c 94 92 0c 	jmp	0x1924	; 0x1924 <__vector_16>
      44:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
      48:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
      4c:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
      50:	0c 94 0b 0e 	jmp	0x1c16	; 0x1c16 <__vector_20>
      54:	0c 94 36 0e 	jmp	0x1c6c	; 0x1c6c <__vector_21>
      58:	0c 94 f3 04 	jmp	0x9e6	; 0x9e6 <__vector_22>
      5c:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
      60:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
      64:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
      68:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
      6c:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
      70:	0c 94 0f 0f 	jmp	0x1e1e	; 0x1e1e <__vector_28>
      74:	0c 94 3a 0f 	jmp	0x1e74	; 0x1e74 <__vector_29>
      78:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
      7c:	97 07       	cpc	r25, r23
      7e:	98 09       	sbc	r25, r8
      80:	98 09       	sbc	r25, r8
      82:	d1 07       	cpc	r29, r17
      84:	98 09       	sbc	r25, r8
      86:	d1 07       	cpc	r29, r17
      88:	98 09       	sbc	r25, r8
      8a:	98 09       	sbc	r25, r8
      8c:	98 09       	sbc	r25, r8
      8e:	0d 08       	sbc	r0, r13
      90:	98 09       	sbc	r25, r8
      92:	4e 08       	sbc	r4, r14
      94:	98 09       	sbc	r25, r8
      96:	c6 08       	sbc	r12, r6
      98:	98 09       	sbc	r25, r8
      9a:	f5 08       	sbc	r15, r5
      9c:	f2 09       	sbc	r31, r2
      9e:	36 0a       	sbc	r3, r22
      a0:	59 0a       	sbc	r5, r25
      a2:	7c 0a       	sbc	r7, r28
      a4:	94 0a       	sbc	r9, r20
      a6:	c6 0a       	sbc	r12, r22
      a8:	e8 0a       	sbc	r14, r24
      aa:	55 0c       	add	r5, r5
      ac:	55 0c       	add	r5, r5
      ae:	2c 0b       	sbc	r18, r28
      b0:	44 0b       	sbc	r20, r20
      b2:	81 0b       	sbc	r24, r17
      b4:	aa 0b       	sbc	r26, r26
      b6:	e6 0b       	sbc	r30, r22
      b8:	55 0c       	add	r5, r5
      ba:	0b 0c       	add	r0, r11

000000bc <__ctors_start>:
      bc:	f0 0f       	add	r31, r16

000000be <__ctors_end>:
      be:	11 24       	eor	r1, r1
      c0:	1f be       	out	0x3f, r1	; 63
      c2:	cf ef       	ldi	r28, 0xFF	; 255
      c4:	d8 e0       	ldi	r29, 0x08	; 8
      c6:	de bf       	out	0x3e, r29	; 62
      c8:	cd bf       	out	0x3d, r28	; 61

000000ca <__do_copy_data>:
      ca:	11 e0       	ldi	r17, 0x01	; 1
      cc:	a0 e0       	ldi	r26, 0x00	; 0
      ce:	b1 e0       	ldi	r27, 0x01	; 1
      d0:	e4 ec       	ldi	r30, 0xC4	; 196
      d2:	f1 e2       	ldi	r31, 0x21	; 33
      d4:	02 c0       	rjmp	.+4      	; 0xda <__do_copy_data+0x10>
      d6:	05 90       	lpm	r0, Z+
      d8:	0d 92       	st	X+, r0
      da:	ae 33       	cpi	r26, 0x3E	; 62
      dc:	b1 07       	cpc	r27, r17
      de:	d9 f7       	brne	.-10     	; 0xd6 <__do_copy_data+0xc>

000000e0 <__do_clear_bss>:
      e0:	22 e0       	ldi	r18, 0x02	; 2
      e2:	ae e3       	ldi	r26, 0x3E	; 62
      e4:	b1 e0       	ldi	r27, 0x01	; 1
      e6:	01 c0       	rjmp	.+2      	; 0xea <.do_clear_bss_start>

000000e8 <.do_clear_bss_loop>:
      e8:	1d 92       	st	X+, r1

000000ea <.do_clear_bss_start>:
      ea:	ac 3f       	cpi	r26, 0xFC	; 252
      ec:	b2 07       	cpc	r27, r18
      ee:	e1 f7       	brne	.-8      	; 0xe8 <.do_clear_bss_loop>

000000f0 <__do_global_ctors>:
      f0:	10 e0       	ldi	r17, 0x00	; 0
      f2:	cf e5       	ldi	r28, 0x5F	; 95
      f4:	d0 e0       	ldi	r29, 0x00	; 0
      f6:	04 c0       	rjmp	.+8      	; 0x100 <__do_global_ctors+0x10>
      f8:	21 97       	sbiw	r28, 0x01	; 1
      fa:	fe 01       	movw	r30, r28
      fc:	0e 94 7c 10 	call	0x20f8	; 0x20f8 <__tablejump2__>
     100:	ce 35       	cpi	r28, 0x5E	; 94
     102:	d1 07       	cpc	r29, r17
     104:	c9 f7       	brne	.-14     	; 0xf8 <__do_global_ctors+0x8>
     106:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <main>
     10a:	0c 94 e0 10 	jmp	0x21c0	; 0x21c0 <_exit>

0000010e <__bad_interrupt>:
     10e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000112 <_Z8i2c_initv>:
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWEA);
	while(!(TWCR & (1<<TWINT)));    

    return TWDR;

}/* i2c_readAck */
     112:	10 92 b9 00 	sts	0x00B9, r1	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
     116:	8c e5       	ldi	r24, 0x5C	; 92
     118:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7e00b8>
     11c:	08 95       	ret

0000011e <_Z9i2c_starth>:
     11e:	94 ea       	ldi	r25, 0xA4	; 164
     120:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
     124:	ec eb       	ldi	r30, 0xBC	; 188
     126:	f0 e0       	ldi	r31, 0x00	; 0
     128:	90 81       	ld	r25, Z
     12a:	99 23       	and	r25, r25
     12c:	ec f7       	brge	.-6      	; 0x128 <_Z9i2c_starth+0xa>
     12e:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
     132:	98 7f       	andi	r25, 0xF8	; 248
     134:	98 30       	cpi	r25, 0x08	; 8
     136:	11 f0       	breq	.+4      	; 0x13c <_Z9i2c_starth+0x1e>
     138:	90 31       	cpi	r25, 0x10	; 16
     13a:	a1 f4       	brne	.+40     	; 0x164 <_Z9i2c_starth+0x46>
     13c:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
     140:	84 e8       	ldi	r24, 0x84	; 132
     142:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
     146:	ec eb       	ldi	r30, 0xBC	; 188
     148:	f0 e0       	ldi	r31, 0x00	; 0
     14a:	80 81       	ld	r24, Z
     14c:	88 23       	and	r24, r24
     14e:	ec f7       	brge	.-6      	; 0x14a <_Z9i2c_starth+0x2c>
     150:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
     154:	98 7f       	andi	r25, 0xF8	; 248
     156:	98 31       	cpi	r25, 0x18	; 24
     158:	39 f0       	breq	.+14     	; 0x168 <_Z9i2c_starth+0x4a>
     15a:	81 e0       	ldi	r24, 0x01	; 1
     15c:	90 34       	cpi	r25, 0x40	; 64
     15e:	29 f4       	brne	.+10     	; 0x16a <_Z9i2c_starth+0x4c>
     160:	80 e0       	ldi	r24, 0x00	; 0
     162:	08 95       	ret
     164:	81 e0       	ldi	r24, 0x01	; 1
     166:	08 95       	ret
     168:	80 e0       	ldi	r24, 0x00	; 0
     16a:	08 95       	ret

0000016c <_Z8i2c_stopv>:
     16c:	84 e9       	ldi	r24, 0x94	; 148
     16e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
     172:	ec eb       	ldi	r30, 0xBC	; 188
     174:	f0 e0       	ldi	r31, 0x00	; 0
     176:	80 81       	ld	r24, Z
     178:	84 fd       	sbrc	r24, 4
     17a:	fd cf       	rjmp	.-6      	; 0x176 <_Z8i2c_stopv+0xa>
     17c:	08 95       	ret

0000017e <_Z9i2c_writeh>:
     17e:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
     182:	84 e8       	ldi	r24, 0x84	; 132
     184:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
     188:	ec eb       	ldi	r30, 0xBC	; 188
     18a:	f0 e0       	ldi	r31, 0x00	; 0
     18c:	80 81       	ld	r24, Z
     18e:	88 23       	and	r24, r24
     190:	ec f7       	brge	.-6      	; 0x18c <_Z9i2c_writeh+0xe>
     192:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
     196:	98 7f       	andi	r25, 0xF8	; 248
     198:	81 e0       	ldi	r24, 0x01	; 1
     19a:	98 32       	cpi	r25, 0x28	; 40
     19c:	09 f4       	brne	.+2      	; 0x1a0 <_Z9i2c_writeh+0x22>
     19e:	80 e0       	ldi	r24, 0x00	; 0
     1a0:	08 95       	ret

000001a2 <_Z11i2c_readNakv>:
 
 Return:  byte read from I2C device
*************************************************************************/
unsigned char i2c_readNak(void)
{
	TWCR = (1<<TWINT) | (1<<TWEN);
     1a2:	84 e8       	ldi	r24, 0x84	; 132
     1a4:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	while(!(TWCR & (1<<TWINT)));
     1a8:	ec eb       	ldi	r30, 0xBC	; 188
     1aa:	f0 e0       	ldi	r31, 0x00	; 0
     1ac:	80 81       	ld	r24, Z
     1ae:	88 23       	and	r24, r24
     1b0:	ec f7       	brge	.-6      	; 0x1ac <_Z11i2c_readNakv+0xa>
	
    return TWDR;
     1b2:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>

}/* i2c_readNak */
     1b6:	08 95       	ret

000001b8 <main>:
#define MIDI_UART_BAUDRATE		31250

int main(void)
{
	/* Initialization */
	Timer0_Init();
     1b8:	0e 94 74 0c 	call	0x18e8	; 0x18e8 <_Z11Timer0_Initv>
	i2c_init();
     1bc:	0e 94 89 00 	call	0x112	; 0x112 <_Z8i2c_initv>
	UART0_Init(PEDAL_UART_BAUDRATE, UART_2_STOP_BITS, UART_NO_PARITY);
     1c0:	40 e0       	ldi	r20, 0x00	; 0
     1c2:	62 e0       	ldi	r22, 0x02	; 2
     1c4:	80 e0       	ldi	r24, 0x00	; 0
     1c6:	9b e4       	ldi	r25, 0x4B	; 75
     1c8:	0e 94 62 0d 	call	0x1ac4	; 0x1ac4 <_Z10UART0_Initjhh>
	UART1_Init(MIDI_UART_BAUDRATE, UART_1_STOP_BIT, UART_NO_PARITY);
     1cc:	40 e0       	ldi	r20, 0x00	; 0
     1ce:	61 e0       	ldi	r22, 0x01	; 1
     1d0:	82 e1       	ldi	r24, 0x12	; 18
     1d2:	9a e7       	ldi	r25, 0x7A	; 122
     1d4:	0e 94 60 0e 	call	0x1cc0	; 0x1cc0 <_Z10UART1_Initjhh>
	PedalComm_Init();
     1d8:	0e 94 e1 04 	call	0x9c2	; 0x9c2 <_Z14PedalComm_Initv>
	
	RotaryEncoder_Init();
     1dc:	0e 94 18 05 	call	0xa30	; 0xa30 <_Z18RotaryEncoder_Initv>
	SP10281_Init();
     1e0:	0e 94 24 06 	call	0xc48	; 0xc48 <_Z12SP10281_Initv>
	UI_Init();
     1e4:	0e 94 64 0f 	call	0x1ec8	; 0x1ec8 <_Z7UI_Initv>
	
	sei();	// Global Enable Interrupt
     1e8:	78 94       	sei
	
	/* Main loop */
    while (1) 
    {
		/* Handle incoming MIDI */
		if (UART1_Available())
     1ea:	0e 94 02 0f 	call	0x1e04	; 0x1e04 <_Z15UART1_Availablev>
     1ee:	89 2b       	or	r24, r25
     1f0:	11 f0       	breq	.+4      	; 0x1f6 <main+0x3e>
		{
			MIDI_ReceiveIncoming();
     1f2:	0e 94 7b 02 	call	0x4f6	; 0x4f6 <_Z20MIDI_ReceiveIncomingv>
		}
		
		if (MIDI_ProgramChangeFlag)
     1f6:	80 91 44 01 	lds	r24, 0x0144	; 0x800144 <MIDI_ProgramChangeFlag>
     1fa:	88 23       	and	r24, r24
     1fc:	21 f0       	breq	.+8      	; 0x206 <main+0x4e>
		{
			MIDI_ProgramChangeFlag = false;
     1fe:	10 92 44 01 	sts	0x0144, r1	; 0x800144 <MIDI_ProgramChangeFlag>
			System_HandleMIDIProgramChange();
     202:	0e 94 13 07 	call	0xe26	; 0xe26 <_Z30System_HandleMIDIProgramChangev>
		}
		
		/* Handle incoming data from Pedal */
		while (UART0_Available())
     206:	0e 94 e3 0d 	call	0x1bc6	; 0x1bc6 <_Z15UART0_Availablev>
     20a:	89 2b       	or	r24, r25
     20c:	19 f0       	breq	.+6      	; 0x214 <main+0x5c>
		{
			PedalComm_Receive();
     20e:	0e 94 f1 02 	call	0x5e2	; 0x5e2 <_Z17PedalComm_Receivev>
			MIDI_ProgramChangeFlag = false;
			System_HandleMIDIProgramChange();
		}
		
		/* Handle incoming data from Pedal */
		while (UART0_Available())
     212:	f9 cf       	rjmp	.-14     	; 0x206 <main+0x4e>
		{
			PedalComm_Receive();
		}
		
		/* Handle command received from pedal. (Only once per program loop) */
		if (PedalComm_RxAvailable())
     214:	0e 94 cd 02 	call	0x59a	; 0x59a <_Z21PedalComm_RxAvailablev>
     218:	81 11       	cpse	r24, r1
		{
			PedalComm_HandleReceived();
     21a:	0e 94 b3 03 	call	0x766	; 0x766 <_Z24PedalComm_HandleReceivedv>
		}
		
		/* Transmit command to Pedal if any are queued up */
		if (PedalComm_TxAvailable())
     21e:	0e 94 d6 02 	call	0x5ac	; 0x5ac <_Z21PedalComm_TxAvailablev>
     222:	81 11       	cpse	r24, r1
		{
			PedalComm_PutCommand();
     224:	0e 94 3d 04 	call	0x87a	; 0x87a <_Z20PedalComm_PutCommandv>
		}
		
		/* Transmit data to Pedal */
		if (PedalComm_DelayTxFlag)
     228:	80 91 50 01 	lds	r24, 0x0150	; 0x800150 <PedalComm_DelayTxFlag>
     22c:	88 23       	and	r24, r24
     22e:	21 f0       	breq	.+8      	; 0x238 <main+0x80>
		{
			PedalComm_DelayTxFlag = false;
     230:	10 92 50 01 	sts	0x0150, r1	; 0x800150 <PedalComm_DelayTxFlag>
			PedalComm_Transmit();
     234:	0e 94 ed 04 	call	0x9da	; 0x9da <_Z18PedalComm_Transmitv>
		}
		
		/* Pedal heartbeat */
		if (PedalComm_ResponseTimeoutFlag)
     238:	80 91 4e 01 	lds	r24, 0x014E	; 0x80014e <PedalComm_ResponseTimeoutFlag>
     23c:	88 23       	and	r24, r24
     23e:	89 f0       	breq	.+34     	; 0x262 <main+0xaa>
		{
			PedalComm_ResponseTimeoutFlag = false;
     240:	10 92 4e 01 	sts	0x014E, r1	; 0x80014e <PedalComm_ResponseTimeoutFlag>
			
			/* If last command did not get an ACK */
			if (PedalComm_TxAvailable())
     244:	0e 94 d6 02 	call	0x5ac	; 0x5ac <_Z21PedalComm_TxAvailablev>
     248:	88 23       	and	r24, r24
     24a:	29 f0       	breq	.+10     	; 0x256 <main+0x9e>
			{
				PedalComm_ConnectionOpen = false;
     24c:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <PedalComm_ConnectionOpen>
				PedalComm_FlushTxQueue();
     250:	0e 94 df 02 	call	0x5be	; 0x5be <_Z22PedalComm_FlushTxQueuev>
     254:	06 c0       	rjmp	.+12     	; 0x262 <main+0xaa>
			}
			else
			{
				PedalComm_QueueCommand(Heartbeat, 0, (uint8_t*)0);
     256:	40 e0       	ldi	r20, 0x00	; 0
     258:	50 e0       	ldi	r21, 0x00	; 0
     25a:	60 e0       	ldi	r22, 0x00	; 0
     25c:	8b ee       	ldi	r24, 0xEB	; 235
     25e:	0e 94 e4 03 	call	0x7c8	; 0x7c8 <_Z22PedalComm_QueueCommand3CMDhPh>
			}
		}
		
		/* Service 7-segment display */
		if (SP10281_OvfFlag)
     262:	80 91 c9 01 	lds	r24, 0x01C9	; 0x8001c9 <SP10281_OvfFlag>
     266:	88 23       	and	r24, r24
     268:	21 f0       	breq	.+8      	; 0x272 <main+0xba>
		{
			SP10281_OvfFlag = 0;
     26a:	10 92 c9 01 	sts	0x01C9, r1	; 0x8001c9 <SP10281_OvfFlag>
			SP10281_Update();
     26e:	0e 94 79 05 	call	0xaf2	; 0xaf2 <_Z14SP10281_Updatev>
		}
		
		/* Blink UI LEDs */
		if (MCP_Output::AutoToggle_Flag)
     272:	80 91 40 01 	lds	r24, 0x0140	; 0x800140 <_ZN10MCP_Output15AutoToggle_FlagE>
     276:	88 23       	and	r24, r24
     278:	29 f0       	breq	.+10     	; 0x284 <main+0xcc>
		{
			MCP_Output::AutoToggle_Flag = 0;
     27a:	10 92 40 01 	sts	0x0140, r1	; 0x800140 <_ZN10MCP_Output15AutoToggle_FlagE>
			MCP_Output::PerformAutoToggle(MCP23017_UI_LEDS_ADDR);
     27e:	80 e0       	ldi	r24, 0x00	; 0
     280:	0e 94 5c 02 	call	0x4b8	; 0x4b8 <_ZN10MCP_Output17PerformAutoToggleEh>
		}
		
		/* Handle input from rotary encoder */
		if (RotEnc_State != IDLE && RotEnc_State != PRESSED)
     284:	80 91 c5 01 	lds	r24, 0x01C5	; 0x8001c5 <RotEnc_State>
     288:	88 23       	and	r24, r24
     28a:	21 f0       	breq	.+8      	; 0x294 <main+0xdc>
     28c:	80 91 c5 01 	lds	r24, 0x01C5	; 0x8001c5 <RotEnc_State>
     290:	84 30       	cpi	r24, 0x04	; 4
     292:	99 f4       	brne	.+38     	; 0x2ba <main+0x102>
			RotEnc_State = IDLE;
			RotaryEncoder_EnableInterrupt();
		}
		
		/* Handle temp select timeout condition */
		if (System_TempSelectFlag)
     294:	80 91 03 02 	lds	r24, 0x0203	; 0x800203 <System_TempSelectFlag>
     298:	88 23       	and	r24, r24
     29a:	21 f0       	breq	.+8      	; 0x2a4 <main+0xec>
		{
			System_TempSelectFlag = false;
     29c:	10 92 03 02 	sts	0x0203, r1	; 0x800203 <System_TempSelectFlag>
			System_HandleTempSelectTimeout();
     2a0:	0e 94 2e 06 	call	0xc5c	; 0xc5c <_Z30System_HandleTempSelectTimeoutv>
		}
		
		/* Reset UI LEDs after selection mark */
		if (System_MarkSelectionFlag)
     2a4:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <System_MarkSelectionFlag>
     2a8:	88 23       	and	r24, r24
     2aa:	21 f0       	breq	.+8      	; 0x2b4 <main+0xfc>
		{
			System_MarkSelectionFlag = false;
     2ac:	10 92 00 02 	sts	0x0200, r1	; 0x800200 <System_MarkSelectionFlag>
			System_HandleMarkSelection();
     2b0:	0e 94 88 06 	call	0xd10	; 0xd10 <_Z26System_HandleMarkSelectionv>
		}
		
		/* The grand state machine */
		System_Run();
     2b4:	0e 94 e3 09 	call	0x13c6	; 0x13c6 <_Z10System_Runv>
	UI_Init();
	
	sei();	// Global Enable Interrupt
	
	/* Main loop */
    while (1) 
     2b8:	98 cf       	rjmp	.-208    	; 0x1ea <main+0x32>
		}
		
		/* Handle input from rotary encoder */
		if (RotEnc_State != IDLE && RotEnc_State != PRESSED)
		{
			System_HandleRotaryEncoderInput();
     2ba:	0e 94 87 07 	call	0xf0e	; 0xf0e <_Z31System_HandleRotaryEncoderInputv>
			
			RotEnc_State = IDLE;
     2be:	10 92 c5 01 	sts	0x01C5, r1	; 0x8001c5 <RotEnc_State>
			RotaryEncoder_EnableInterrupt();
     2c2:	0e 94 31 05 	call	0xa62	; 0xa62 <_Z29RotaryEncoder_EnableInterruptv>
     2c6:	e6 cf       	rjmp	.-52     	; 0x294 <main+0xdc>

000002c8 <_Z17MCP23017_WriteReghhh>:
	{
		this->Set();
	} 
	else if (State == SET)
	{
		this->Clear();
     2c8:	cf 93       	push	r28
     2ca:	df 93       	push	r29
     2cc:	d6 2f       	mov	r29, r22
     2ce:	c4 2f       	mov	r28, r20
     2d0:	80 62       	ori	r24, 0x20	; 32
     2d2:	88 0f       	add	r24, r24
     2d4:	0e 94 8f 00 	call	0x11e	; 0x11e <_Z9i2c_starth>
     2d8:	8d 2f       	mov	r24, r29
     2da:	0e 94 bf 00 	call	0x17e	; 0x17e <_Z9i2c_writeh>
     2de:	8c 2f       	mov	r24, r28
     2e0:	0e 94 bf 00 	call	0x17e	; 0x17e <_Z9i2c_writeh>
     2e4:	0e 94 b6 00 	call	0x16c	; 0x16c <_Z8i2c_stopv>
     2e8:	df 91       	pop	r29
     2ea:	cf 91       	pop	r28
     2ec:	08 95       	ret

000002ee <_Z16MCP23017_ReadReghh>:
     2ee:	cf 93       	push	r28
     2f0:	df 93       	push	r29
     2f2:	d6 2f       	mov	r29, r22
     2f4:	80 62       	ori	r24, 0x20	; 32
     2f6:	c8 2f       	mov	r28, r24
     2f8:	cc 0f       	add	r28, r28
     2fa:	8c 2f       	mov	r24, r28
     2fc:	0e 94 8f 00 	call	0x11e	; 0x11e <_Z9i2c_starth>
     300:	8d 2f       	mov	r24, r29
     302:	0e 94 bf 00 	call	0x17e	; 0x17e <_Z9i2c_writeh>
     306:	0e 94 b6 00 	call	0x16c	; 0x16c <_Z8i2c_stopv>
     30a:	8c 2f       	mov	r24, r28
     30c:	81 60       	ori	r24, 0x01	; 1
     30e:	0e 94 8f 00 	call	0x11e	; 0x11e <_Z9i2c_starth>
     312:	0e 94 d1 00 	call	0x1a2	; 0x1a2 <_Z11i2c_readNakv>
     316:	df 91       	pop	r29
     318:	cf 91       	pop	r28
     31a:	08 95       	ret

0000031c <_ZN10MCP_OutputC1Ev>:
     31c:	08 95       	ret

0000031e <_ZN10MCP_Output8getStateEv>:
     31e:	fc 01       	movw	r30, r24
     320:	83 81       	ldd	r24, Z+3	; 0x03
     322:	08 95       	ret

00000324 <_ZN10MCP_Output3SetEv>:
     324:	1f 93       	push	r17
     326:	cf 93       	push	r28
     328:	df 93       	push	r29
     32a:	ec 01       	movw	r28, r24
     32c:	89 81       	ldd	r24, Y+1	; 0x01
     32e:	81 11       	cpse	r24, r1
     330:	10 c0       	rjmp	.+32     	; 0x352 <_ZN10MCP_Output3SetEv+0x2e>
     332:	20 91 3f 01 	lds	r18, 0x013F	; 0x80013f <_ZN10MCP_Output16AutoToggle_PortAE>
     336:	81 e0       	ldi	r24, 0x01	; 1
     338:	90 e0       	ldi	r25, 0x00	; 0
     33a:	0a 80       	ldd	r0, Y+2	; 0x02
     33c:	02 c0       	rjmp	.+4      	; 0x342 <_ZN10MCP_Output3SetEv+0x1e>
     33e:	88 0f       	add	r24, r24
     340:	99 1f       	adc	r25, r25
     342:	0a 94       	dec	r0
     344:	e2 f7       	brpl	.-8      	; 0x33e <_ZN10MCP_Output3SetEv+0x1a>
     346:	80 95       	com	r24
     348:	82 23       	and	r24, r18
     34a:	80 93 3f 01 	sts	0x013F, r24	; 0x80013f <_ZN10MCP_Output16AutoToggle_PortAE>
     34e:	14 e1       	ldi	r17, 0x14	; 20
     350:	0f c0       	rjmp	.+30     	; 0x370 <_ZN10MCP_Output3SetEv+0x4c>
     352:	20 91 3e 01 	lds	r18, 0x013E	; 0x80013e <__data_end>
     356:	81 e0       	ldi	r24, 0x01	; 1
     358:	90 e0       	ldi	r25, 0x00	; 0
     35a:	0a 80       	ldd	r0, Y+2	; 0x02
     35c:	02 c0       	rjmp	.+4      	; 0x362 <_ZN10MCP_Output3SetEv+0x3e>
     35e:	88 0f       	add	r24, r24
     360:	99 1f       	adc	r25, r25
     362:	0a 94       	dec	r0
     364:	e2 f7       	brpl	.-8      	; 0x35e <_ZN10MCP_Output3SetEv+0x3a>
     366:	80 95       	com	r24
     368:	82 23       	and	r24, r18
     36a:	80 93 3e 01 	sts	0x013E, r24	; 0x80013e <__data_end>
     36e:	15 e1       	ldi	r17, 0x15	; 21
     370:	61 2f       	mov	r22, r17
     372:	88 81       	ld	r24, Y
     374:	0e 94 77 01 	call	0x2ee	; 0x2ee <_Z16MCP23017_ReadReghh>
     378:	41 e0       	ldi	r20, 0x01	; 1
     37a:	50 e0       	ldi	r21, 0x00	; 0
     37c:	0a 80       	ldd	r0, Y+2	; 0x02
     37e:	02 c0       	rjmp	.+4      	; 0x384 <_ZN10MCP_Output3SetEv+0x60>
     380:	44 0f       	add	r20, r20
     382:	55 1f       	adc	r21, r21
     384:	0a 94       	dec	r0
     386:	e2 f7       	brpl	.-8      	; 0x380 <_ZN10MCP_Output3SetEv+0x5c>
     388:	48 2b       	or	r20, r24
     38a:	61 2f       	mov	r22, r17
     38c:	88 81       	ld	r24, Y
     38e:	0e 94 64 01 	call	0x2c8	; 0x2c8 <_Z17MCP23017_WriteReghhh>
     392:	81 e0       	ldi	r24, 0x01	; 1
     394:	8b 83       	std	Y+3, r24	; 0x03
     396:	df 91       	pop	r29
     398:	cf 91       	pop	r28
     39a:	1f 91       	pop	r17
     39c:	08 95       	ret

0000039e <_ZN10MCP_Output5ClearEv>:
     39e:	1f 93       	push	r17
     3a0:	cf 93       	push	r28
     3a2:	df 93       	push	r29
     3a4:	ec 01       	movw	r28, r24
     3a6:	89 81       	ldd	r24, Y+1	; 0x01
     3a8:	81 11       	cpse	r24, r1
     3aa:	10 c0       	rjmp	.+32     	; 0x3cc <_ZN10MCP_Output5ClearEv+0x2e>
     3ac:	20 91 3f 01 	lds	r18, 0x013F	; 0x80013f <_ZN10MCP_Output16AutoToggle_PortAE>
     3b0:	81 e0       	ldi	r24, 0x01	; 1
     3b2:	90 e0       	ldi	r25, 0x00	; 0
     3b4:	0a 80       	ldd	r0, Y+2	; 0x02
     3b6:	02 c0       	rjmp	.+4      	; 0x3bc <_ZN10MCP_Output5ClearEv+0x1e>
     3b8:	88 0f       	add	r24, r24
     3ba:	99 1f       	adc	r25, r25
     3bc:	0a 94       	dec	r0
     3be:	e2 f7       	brpl	.-8      	; 0x3b8 <_ZN10MCP_Output5ClearEv+0x1a>
     3c0:	80 95       	com	r24
     3c2:	82 23       	and	r24, r18
     3c4:	80 93 3f 01 	sts	0x013F, r24	; 0x80013f <_ZN10MCP_Output16AutoToggle_PortAE>
     3c8:	14 e1       	ldi	r17, 0x14	; 20
     3ca:	0f c0       	rjmp	.+30     	; 0x3ea <_ZN10MCP_Output5ClearEv+0x4c>
     3cc:	20 91 3e 01 	lds	r18, 0x013E	; 0x80013e <__data_end>
     3d0:	81 e0       	ldi	r24, 0x01	; 1
     3d2:	90 e0       	ldi	r25, 0x00	; 0
     3d4:	0a 80       	ldd	r0, Y+2	; 0x02
     3d6:	02 c0       	rjmp	.+4      	; 0x3dc <_ZN10MCP_Output5ClearEv+0x3e>
     3d8:	88 0f       	add	r24, r24
     3da:	99 1f       	adc	r25, r25
     3dc:	0a 94       	dec	r0
     3de:	e2 f7       	brpl	.-8      	; 0x3d8 <_ZN10MCP_Output5ClearEv+0x3a>
     3e0:	80 95       	com	r24
     3e2:	82 23       	and	r24, r18
     3e4:	80 93 3e 01 	sts	0x013E, r24	; 0x80013e <__data_end>
     3e8:	15 e1       	ldi	r17, 0x15	; 21
     3ea:	61 2f       	mov	r22, r17
     3ec:	88 81       	ld	r24, Y
     3ee:	0e 94 77 01 	call	0x2ee	; 0x2ee <_Z16MCP23017_ReadReghh>
     3f2:	41 e0       	ldi	r20, 0x01	; 1
     3f4:	50 e0       	ldi	r21, 0x00	; 0
     3f6:	0a 80       	ldd	r0, Y+2	; 0x02
     3f8:	02 c0       	rjmp	.+4      	; 0x3fe <_ZN10MCP_Output5ClearEv+0x60>
     3fa:	44 0f       	add	r20, r20
     3fc:	55 1f       	adc	r21, r21
     3fe:	0a 94       	dec	r0
     400:	e2 f7       	brpl	.-8      	; 0x3fa <_ZN10MCP_Output5ClearEv+0x5c>
     402:	40 95       	com	r20
     404:	48 23       	and	r20, r24
     406:	61 2f       	mov	r22, r17
     408:	88 81       	ld	r24, Y
     40a:	0e 94 64 01 	call	0x2c8	; 0x2c8 <_Z17MCP23017_WriteReghhh>
     40e:	1b 82       	std	Y+3, r1	; 0x03
     410:	df 91       	pop	r29
     412:	cf 91       	pop	r28
     414:	1f 91       	pop	r17
     416:	08 95       	ret

00000418 <_ZN10MCP_OutputC1Eh13MCP23017_Port12MCP23017_Pin>:
     418:	1f 93       	push	r17
     41a:	cf 93       	push	r28
     41c:	df 93       	push	r29
     41e:	ec 01       	movw	r28, r24
     420:	86 2f       	mov	r24, r22
     422:	68 83       	st	Y, r22
     424:	49 83       	std	Y+1, r20	; 0x01
     426:	2a 83       	std	Y+2, r18	; 0x02
     428:	11 e0       	ldi	r17, 0x01	; 1
     42a:	41 11       	cpse	r20, r1
     42c:	01 c0       	rjmp	.+2      	; 0x430 <_ZN10MCP_OutputC1Eh13MCP23017_Port12MCP23017_Pin+0x18>
     42e:	10 e0       	ldi	r17, 0x00	; 0
     430:	61 2f       	mov	r22, r17
     432:	0e 94 77 01 	call	0x2ee	; 0x2ee <_Z16MCP23017_ReadReghh>
     436:	41 e0       	ldi	r20, 0x01	; 1
     438:	50 e0       	ldi	r21, 0x00	; 0
     43a:	0a 80       	ldd	r0, Y+2	; 0x02
     43c:	02 c0       	rjmp	.+4      	; 0x442 <_ZN10MCP_OutputC1Eh13MCP23017_Port12MCP23017_Pin+0x2a>
     43e:	44 0f       	add	r20, r20
     440:	55 1f       	adc	r21, r21
     442:	0a 94       	dec	r0
     444:	e2 f7       	brpl	.-8      	; 0x43e <_ZN10MCP_OutputC1Eh13MCP23017_Port12MCP23017_Pin+0x26>
     446:	40 95       	com	r20
     448:	48 23       	and	r20, r24
     44a:	61 2f       	mov	r22, r17
     44c:	88 81       	ld	r24, Y
     44e:	0e 94 64 01 	call	0x2c8	; 0x2c8 <_Z17MCP23017_WriteReghhh>
     452:	ce 01       	movw	r24, r28
     454:	0e 94 cf 01 	call	0x39e	; 0x39e <_ZN10MCP_Output5ClearEv>
     458:	df 91       	pop	r29
     45a:	cf 91       	pop	r28
     45c:	1f 91       	pop	r17
     45e:	08 95       	ret

00000460 <_ZN10MCP_Output10AutoToggleEv>:
	}
}

void MCP_Output::AutoToggle()
{
     460:	fc 01       	movw	r30, r24
	State = AUTO_TOGGLE;
     462:	82 e0       	ldi	r24, 0x02	; 2
     464:	83 83       	std	Z+3, r24	; 0x03
	
	if (Port == PortA)
     466:	81 81       	ldd	r24, Z+1	; 0x01
     468:	81 11       	cpse	r24, r1
     46a:	0e c0       	rjmp	.+28     	; 0x488 <_ZN10MCP_Output10AutoToggleEv+0x28>
	{
		MCP_Output::AutoToggle_PortA |= (1 << Pin);
     46c:	20 91 3f 01 	lds	r18, 0x013F	; 0x80013f <_ZN10MCP_Output16AutoToggle_PortAE>
     470:	81 e0       	ldi	r24, 0x01	; 1
     472:	90 e0       	ldi	r25, 0x00	; 0
     474:	02 80       	ldd	r0, Z+2	; 0x02
     476:	02 c0       	rjmp	.+4      	; 0x47c <_ZN10MCP_Output10AutoToggleEv+0x1c>
     478:	88 0f       	add	r24, r24
     47a:	99 1f       	adc	r25, r25
     47c:	0a 94       	dec	r0
     47e:	e2 f7       	brpl	.-8      	; 0x478 <_ZN10MCP_Output10AutoToggleEv+0x18>
     480:	82 2b       	or	r24, r18
     482:	80 93 3f 01 	sts	0x013F, r24	; 0x80013f <_ZN10MCP_Output16AutoToggle_PortAE>
     486:	08 95       	ret
	}
	else
	{
		MCP_Output::AutoToggle_PortB |= (1 << Pin);
     488:	20 91 3e 01 	lds	r18, 0x013E	; 0x80013e <__data_end>
     48c:	81 e0       	ldi	r24, 0x01	; 1
     48e:	90 e0       	ldi	r25, 0x00	; 0
     490:	02 80       	ldd	r0, Z+2	; 0x02
     492:	02 c0       	rjmp	.+4      	; 0x498 <_ZN10MCP_Output10AutoToggleEv+0x38>
     494:	88 0f       	add	r24, r24
     496:	99 1f       	adc	r25, r25
     498:	0a 94       	dec	r0
     49a:	e2 f7       	brpl	.-8      	; 0x494 <_ZN10MCP_Output10AutoToggleEv+0x34>
     49c:	82 2b       	or	r24, r18
     49e:	80 93 3e 01 	sts	0x013E, r24	; 0x80013e <__data_end>
     4a2:	08 95       	ret

000004a4 <_ZN10MCP_Output18SetAutoToggleSpeedEj>:
	}
}

void MCP_Output::SetAutoToggleSpeed(uint16_t ms)
{
	AutoToggle_Timeout = (uint16_t)Timer0_ms2cnt(ms);
     4a4:	bc 01       	movw	r22, r24
     4a6:	80 e0       	ldi	r24, 0x00	; 0
     4a8:	90 e0       	ldi	r25, 0x00	; 0
     4aa:	0e 94 83 0c 	call	0x1906	; 0x1906 <_Z13Timer0_ms2cntm>
     4ae:	70 93 01 01 	sts	0x0101, r23	; 0x800101 <_ZN10MCP_Output18AutoToggle_TimeoutE+0x1>
     4b2:	60 93 00 01 	sts	0x0100, r22	; 0x800100 <_ZN10MCP_Output18AutoToggle_TimeoutE>
     4b6:	08 95       	ret

000004b8 <_ZN10MCP_Output17PerformAutoToggleEh>:
}

void MCP_Output::PerformAutoToggle(uint8_t addr)
{
     4b8:	1f 93       	push	r17
     4ba:	cf 93       	push	r28
     4bc:	df 93       	push	r29
     4be:	c8 2f       	mov	r28, r24
	uint8_t valA = MCP23017_ReadReg(addr, OLATA);
     4c0:	64 e1       	ldi	r22, 0x14	; 20
     4c2:	0e 94 77 01 	call	0x2ee	; 0x2ee <_Z16MCP23017_ReadReghh>
     4c6:	18 2f       	mov	r17, r24
	uint8_t valB = MCP23017_ReadReg(addr, OLATB);
     4c8:	65 e1       	ldi	r22, 0x15	; 21
     4ca:	8c 2f       	mov	r24, r28
     4cc:	0e 94 77 01 	call	0x2ee	; 0x2ee <_Z16MCP23017_ReadReghh>
	
	valA ^= MCP_Output::AutoToggle_PortA;
     4d0:	40 91 3f 01 	lds	r20, 0x013F	; 0x80013f <_ZN10MCP_Output16AutoToggle_PortAE>
	valB ^= MCP_Output::AutoToggle_PortB;
     4d4:	d0 91 3e 01 	lds	r29, 0x013E	; 0x80013e <__data_end>
     4d8:	d8 27       	eor	r29, r24
	
	MCP23017_WriteReg(addr, OLATA, valA);
     4da:	41 27       	eor	r20, r17
     4dc:	64 e1       	ldi	r22, 0x14	; 20
     4de:	8c 2f       	mov	r24, r28
     4e0:	0e 94 64 01 	call	0x2c8	; 0x2c8 <_Z17MCP23017_WriteReghhh>
	MCP23017_WriteReg(addr, OLATB, valB);
     4e4:	4d 2f       	mov	r20, r29
     4e6:	65 e1       	ldi	r22, 0x15	; 21
     4e8:	8c 2f       	mov	r24, r28
     4ea:	0e 94 64 01 	call	0x2c8	; 0x2c8 <_Z17MCP23017_WriteReghhh>
}
     4ee:	df 91       	pop	r29
     4f0:	cf 91       	pop	r28
     4f2:	1f 91       	pop	r17
     4f4:	08 95       	ret

000004f6 <_Z20MIDI_ReceiveIncomingv>:
volatile char MIDI_TxBuffer[MIDI_BUF_SIZE] = {0};
volatile uint8_t MIDI_ReceivedProgram = 0;
volatile bool MIDI_ProgramChangeFlag = false;

void MIDI_ReceiveIncoming()
{
     4f6:	cf 93       	push	r28
     4f8:	df 93       	push	r29
	static uint8_t RX_ByteCnt = 0;
	
	MIDI_RxBuffer[RX_ByteCnt] = UART1_GetChar();
     4fa:	c0 91 43 01 	lds	r28, 0x0143	; 0x800143 <_ZZ20MIDI_ReceiveIncomingvE10RX_ByteCnt>
     4fe:	d0 e0       	ldi	r29, 0x00	; 0
     500:	0e 94 c3 0e 	call	0x1d86	; 0x1d86 <_Z13UART1_GetCharv>
     504:	c7 5b       	subi	r28, 0xB7	; 183
     506:	de 4f       	sbci	r29, 0xFE	; 254
     508:	88 83       	st	Y, r24
	
	if (RX_ByteCnt == 0)
     50a:	80 91 43 01 	lds	r24, 0x0143	; 0x800143 <_ZZ20MIDI_ReceiveIncomingvE10RX_ByteCnt>
     50e:	81 11       	cpse	r24, r1
     510:	18 c0       	rjmp	.+48     	; 0x542 <_Z20MIDI_ReceiveIncomingv+0x4c>
	{
		/* Check if command is a Program Change */
		if ( (MIDI_RxBuffer[RX_ByteCnt] & 0xF0) == 0xC0 )
     512:	80 91 49 01 	lds	r24, 0x0149	; 0x800149 <MIDI_RxBuffer>
     516:	80 7f       	andi	r24, 0xF0	; 240
     518:	80 3c       	cpi	r24, 0xC0	; 192
     51a:	29 f5       	brne	.+74     	; 0x566 <_Z20MIDI_ReceiveIncomingv+0x70>
		{
			/* Check if command is relevant to this device */
			if ( (System_MidiChannel == MIDI_CH_OMNI) || ( (MIDI_RxBuffer[RX_ByteCnt] & 0x0F) != (System_MidiChannel-1) ) )
     51c:	80 91 f6 01 	lds	r24, 0x01F6	; 0x8001f6 <System_MidiChannel>
     520:	88 23       	and	r24, r24
     522:	59 f0       	breq	.+22     	; 0x53a <_Z20MIDI_ReceiveIncomingv+0x44>
     524:	20 91 49 01 	lds	r18, 0x0149	; 0x800149 <MIDI_RxBuffer>
     528:	80 91 f6 01 	lds	r24, 0x01F6	; 0x8001f6 <System_MidiChannel>
     52c:	2f 70       	andi	r18, 0x0F	; 15
     52e:	30 e0       	ldi	r19, 0x00	; 0
     530:	90 e0       	ldi	r25, 0x00	; 0
     532:	01 97       	sbiw	r24, 0x01	; 1
     534:	28 17       	cp	r18, r24
     536:	39 07       	cpc	r19, r25
     538:	b1 f0       	breq	.+44     	; 0x566 <_Z20MIDI_ReceiveIncomingv+0x70>
			{
				RX_ByteCnt++;
     53a:	81 e0       	ldi	r24, 0x01	; 1
     53c:	80 93 43 01 	sts	0x0143, r24	; 0x800143 <_ZZ20MIDI_ReceiveIncomingvE10RX_ByteCnt>
     540:	12 c0       	rjmp	.+36     	; 0x566 <_Z20MIDI_ReceiveIncomingv+0x70>
		}
	}
	else if (RX_ByteCnt > 0)
	{
		/* Check if data byte contains a valid MIDI program (is between 0 and 127) */
		if (MIDI_RxBuffer[RX_ByteCnt] <= MIDI_PC_MAX)
     542:	90 e0       	ldi	r25, 0x00	; 0
     544:	fc 01       	movw	r30, r24
     546:	e7 5b       	subi	r30, 0xB7	; 183
     548:	fe 4f       	sbci	r31, 0xFE	; 254
     54a:	20 81       	ld	r18, Z
     54c:	22 23       	and	r18, r18
     54e:	4c f0       	brlt	.+18     	; 0x562 <_Z20MIDI_ReceiveIncomingv+0x6c>
		{
			MIDI_ReceivedProgram = MIDI_RxBuffer[RX_ByteCnt];
     550:	fc 01       	movw	r30, r24
     552:	e7 5b       	subi	r30, 0xB7	; 183
     554:	fe 4f       	sbci	r31, 0xFE	; 254
     556:	80 81       	ld	r24, Z
     558:	80 93 45 01 	sts	0x0145, r24	; 0x800145 <MIDI_ReceivedProgram>
			MIDI_ProgramChangeFlag = true;
     55c:	81 e0       	ldi	r24, 0x01	; 1
     55e:	80 93 44 01 	sts	0x0144, r24	; 0x800144 <MIDI_ProgramChangeFlag>
		}
		
		RX_ByteCnt = 0;
     562:	10 92 43 01 	sts	0x0143, r1	; 0x800143 <_ZZ20MIDI_ReceiveIncomingvE10RX_ByteCnt>
	}
}
     566:	df 91       	pop	r29
     568:	cf 91       	pop	r28
     56a:	08 95       	ret

0000056c <_Z26MIDI_TransmitProgramChangeh>:

void MIDI_TransmitProgramChange(uint8_t prg)
{
	MIDI_TxBuffer[0] = 0xC0;
     56c:	90 ec       	ldi	r25, 0xC0	; 192
     56e:	90 93 46 01 	sts	0x0146, r25	; 0x800146 <MIDI_TxBuffer>
	
	if (System_MidiChannel != MIDI_CH_OMNI)
     572:	90 91 f6 01 	lds	r25, 0x01F6	; 0x8001f6 <System_MidiChannel>
     576:	99 23       	and	r25, r25
     578:	41 f0       	breq	.+16     	; 0x58a <_Z26MIDI_TransmitProgramChangeh+0x1e>
	{
		MIDI_TxBuffer[0] |= (System_MidiChannel - 1);
     57a:	90 91 f6 01 	lds	r25, 0x01F6	; 0x8001f6 <System_MidiChannel>
     57e:	e6 e4       	ldi	r30, 0x46	; 70
     580:	f1 e0       	ldi	r31, 0x01	; 1
     582:	20 81       	ld	r18, Z
     584:	91 50       	subi	r25, 0x01	; 1
     586:	92 2b       	or	r25, r18
     588:	90 83       	st	Z, r25
	}
	
	MIDI_TxBuffer[1] = (char)prg;
     58a:	e6 e4       	ldi	r30, 0x46	; 70
     58c:	f1 e0       	ldi	r31, 0x01	; 1
     58e:	81 83       	std	Z+1, r24	; 0x01
	MIDI_TxBuffer[2] = 0;
     590:	12 82       	std	Z+2, r1	; 0x02
	
	UART1_PutString((char*)MIDI_TxBuffer);
     592:	cf 01       	movw	r24, r30
     594:	0e 94 f3 0e 	call	0x1de6	; 0x1de6 <_Z15UART1_PutStringPKc>
     598:	08 95       	ret

0000059a <_Z21PedalComm_RxAvailablev>:
	UCSR0B |= (1 << TXCIE0);
}

uint8_t PedalComm_RxAvailable()
{
	return (RxHead != RxTail);
     59a:	20 91 54 01 	lds	r18, 0x0154	; 0x800154 <RxHead>
     59e:	90 91 53 01 	lds	r25, 0x0153	; 0x800153 <RxTail>
     5a2:	81 e0       	ldi	r24, 0x01	; 1
     5a4:	29 13       	cpse	r18, r25
     5a6:	01 c0       	rjmp	.+2      	; 0x5aa <_Z21PedalComm_RxAvailablev+0x10>
     5a8:	80 e0       	ldi	r24, 0x00	; 0
}
     5aa:	08 95       	ret

000005ac <_Z21PedalComm_TxAvailablev>:

uint8_t PedalComm_TxAvailable()
{
	return (TxHead != TxTail);
     5ac:	20 91 52 01 	lds	r18, 0x0152	; 0x800152 <TxHead>
     5b0:	90 91 51 01 	lds	r25, 0x0151	; 0x800151 <TxTail>
     5b4:	81 e0       	ldi	r24, 0x01	; 1
     5b6:	29 13       	cpse	r18, r25
     5b8:	01 c0       	rjmp	.+2      	; 0x5bc <_Z21PedalComm_TxAvailablev+0x10>
     5ba:	80 e0       	ldi	r24, 0x00	; 0
}
     5bc:	08 95       	ret

000005be <_Z22PedalComm_FlushTxQueuev>:

void PedalComm_FlushTxQueue()
{
	TxTail = TxHead;
     5be:	80 91 52 01 	lds	r24, 0x0152	; 0x800152 <TxHead>
     5c2:	80 93 51 01 	sts	0x0151, r24	; 0x800151 <TxTail>
	TX_CommandQueue[TxHead].acked = true;
     5c6:	e0 91 52 01 	lds	r30, 0x0152	; 0x800152 <TxHead>
     5ca:	f0 e0       	ldi	r31, 0x00	; 0
     5cc:	ee 0f       	add	r30, r30
     5ce:	ff 1f       	adc	r31, r31
     5d0:	ee 0f       	add	r30, r30
     5d2:	ff 1f       	adc	r31, r31
     5d4:	ee 0f       	add	r30, r30
     5d6:	ff 1f       	adc	r31, r31
     5d8:	eb 5a       	subi	r30, 0xAB	; 171
     5da:	fe 4f       	sbci	r31, 0xFE	; 254
     5dc:	81 e0       	ldi	r24, 0x01	; 1
     5de:	87 83       	std	Z+7, r24	; 0x07
     5e0:	08 95       	ret

000005e2 <_Z17PedalComm_Receivev>:
}


void PedalComm_Receive()
{
     5e2:	cf 93       	push	r28
     5e4:	df 93       	push	r29
	static uint8_t RX_ByteCnt = 0;
	
	/* Start/reset Delay TX timer. Both in case a NACK needs to be sent, and also to
	   prevent response to previous command being sent while still receiving new data. */
	PedalComm_DelayTXOvfCnt = 1;
     5e6:	81 e0       	ldi	r24, 0x01	; 1
     5e8:	80 93 4f 01 	sts	0x014F, r24	; 0x80014f <PedalComm_DelayTXOvfCnt>
	
	/* Fetch new byte from UART buffer */
	RX_Buffer[RX_ByteCnt] = UART0_GetChar();
     5ec:	c0 91 4c 01 	lds	r28, 0x014C	; 0x80014c <_ZZ17PedalComm_ReceivevE10RX_ByteCnt>
     5f0:	d0 e0       	ldi	r29, 0x00	; 0
     5f2:	0e 94 c8 0d 	call	0x1b90	; 0x1b90 <_Z13UART0_GetCharv>
     5f6:	cb 54       	subi	r28, 0x4B	; 75
     5f8:	de 4f       	sbci	r29, 0xFE	; 254
     5fa:	88 83       	st	Y, r24
	RX_ByteCnt++;
     5fc:	80 91 4c 01 	lds	r24, 0x014C	; 0x80014c <_ZZ17PedalComm_ReceivevE10RX_ByteCnt>
     600:	8f 5f       	subi	r24, 0xFF	; 255
     602:	80 93 4c 01 	sts	0x014C, r24	; 0x80014c <_ZZ17PedalComm_ReceivevE10RX_ByteCnt>
	
	/* Handle new byte */
	if ((RX_ByteCnt - 1) == SOF_BYTE_IDX)
     606:	81 30       	cpi	r24, 0x01	; 1
     608:	09 f0       	breq	.+2      	; 0x60c <_Z17PedalComm_Receivev+0x2a>
     60a:	47 c0       	rjmp	.+142    	; 0x69a <_Z17PedalComm_Receivev+0xb8>
	{
		if (RX_Buffer[SOF_BYTE_IDX] != SOF_BYTE)
     60c:	80 91 b5 01 	lds	r24, 0x01B5	; 0x8001b5 <RX_Buffer>
     610:	8f 35       	cpi	r24, 0x5F	; 95
     612:	09 f4       	brne	.+2      	; 0x616 <_Z17PedalComm_Receivev+0x34>
     614:	a5 c0       	rjmp	.+330    	; 0x760 <_Z17PedalComm_Receivev+0x17e>
		{
			RX_ByteCnt = 0;
     616:	10 92 4c 01 	sts	0x014C, r1	; 0x80014c <_ZZ17PedalComm_ReceivevE10RX_ByteCnt>
				
			if (RX_Buffer[SOF_BYTE_IDX] == ACK_BYTE)
     61a:	80 91 b5 01 	lds	r24, 0x01B5	; 0x8001b5 <RX_Buffer>
     61e:	8c 3a       	cpi	r24, 0xAC	; 172
     620:	f9 f4       	brne	.+62     	; 0x660 <_Z17PedalComm_Receivev+0x7e>
			{
				PedalComm_ResponseTimeoutOvfCnt = 1;		// Reset timeout timer
     622:	81 e0       	ldi	r24, 0x01	; 1
     624:	90 e0       	ldi	r25, 0x00	; 0
     626:	90 93 04 01 	sts	0x0104, r25	; 0x800104 <PedalComm_ResponseTimeoutOvfCnt+0x1>
     62a:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <PedalComm_ResponseTimeoutOvfCnt>
				NackCnt = 0;
     62e:	10 92 4d 01 	sts	0x014D, r1	; 0x80014d <NackCnt>
				
				TX_CommandQueue[TxTail].acked = true;
     632:	e0 91 51 01 	lds	r30, 0x0151	; 0x800151 <TxTail>
     636:	f0 e0       	ldi	r31, 0x00	; 0
     638:	ee 0f       	add	r30, r30
     63a:	ff 1f       	adc	r31, r31
     63c:	ee 0f       	add	r30, r30
     63e:	ff 1f       	adc	r31, r31
     640:	ee 0f       	add	r30, r30
     642:	ff 1f       	adc	r31, r31
     644:	eb 5a       	subi	r30, 0xAB	; 171
     646:	fe 4f       	sbci	r31, 0xFE	; 254
     648:	87 83       	std	Z+7, r24	; 0x07
				
				if (!PedalComm_ConnectionOpen)
     64a:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <PedalComm_ConnectionOpen>
     64e:	81 11       	cpse	r24, r1
     650:	87 c0       	rjmp	.+270    	; 0x760 <_Z17PedalComm_Receivev+0x17e>
				{
					PedalComm_ConnectionOpen = true;
     652:	81 e0       	ldi	r24, 0x01	; 1
     654:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <PedalComm_ConnectionOpen>
					
					/* Set system state to initialize pedal */
					SystemState = INITIALIZE_SYSTEM;
     658:	82 e0       	ldi	r24, 0x02	; 2
     65a:	80 93 ff 01 	sts	0x01FF, r24	; 0x8001ff <SystemState>
     65e:	80 c0       	rjmp	.+256    	; 0x760 <_Z17PedalComm_Receivev+0x17e>
				}
			}
			else if (RX_Buffer[SOF_BYTE_IDX] == NACK_BYTE)
     660:	80 91 b5 01 	lds	r24, 0x01B5	; 0x8001b5 <RX_Buffer>
     664:	8a 32       	cpi	r24, 0x2A	; 42
     666:	09 f0       	breq	.+2      	; 0x66a <_Z17PedalComm_Receivev+0x88>
     668:	7b c0       	rjmp	.+246    	; 0x760 <_Z17PedalComm_Receivev+0x17e>
			{
				/* Stop retransmitting command if Pedal keeps responding with NACK. */
				if (++NackCnt <= 3)
     66a:	80 91 4d 01 	lds	r24, 0x014D	; 0x80014d <NackCnt>
     66e:	8f 5f       	subi	r24, 0xFF	; 255
     670:	80 93 4d 01 	sts	0x014D, r24	; 0x80014d <NackCnt>
     674:	84 30       	cpi	r24, 0x04	; 4
     676:	08 f0       	brcs	.+2      	; 0x67a <_Z17PedalComm_Receivev+0x98>
     678:	73 c0       	rjmp	.+230    	; 0x760 <_Z17PedalComm_Receivev+0x17e>
				{
					/* Prepare retransmit latest command */
					TX_CommandQueue[TxTail].sent = false;
     67a:	e0 91 51 01 	lds	r30, 0x0151	; 0x800151 <TxTail>
     67e:	f0 e0       	ldi	r31, 0x00	; 0
     680:	ee 0f       	add	r30, r30
     682:	ff 1f       	adc	r31, r31
     684:	ee 0f       	add	r30, r30
     686:	ff 1f       	adc	r31, r31
     688:	ee 0f       	add	r30, r30
     68a:	ff 1f       	adc	r31, r31
     68c:	eb 5a       	subi	r30, 0xAB	; 171
     68e:	fe 4f       	sbci	r31, 0xFE	; 254
     690:	16 82       	std	Z+6, r1	; 0x06
					PedalComm_DelayTXOvfCnt = 1;	// Start/reset Delay TX timer
     692:	81 e0       	ldi	r24, 0x01	; 1
     694:	80 93 4f 01 	sts	0x014F, r24	; 0x80014f <PedalComm_DelayTXOvfCnt>
     698:	63 c0       	rjmp	.+198    	; 0x760 <_Z17PedalComm_Receivev+0x17e>
				}
			}
		}
	}
	else if ((RX_ByteCnt - 1) == LENGTH_BYTE_IDX)
     69a:	82 30       	cpi	r24, 0x02	; 2
     69c:	79 f4       	brne	.+30     	; 0x6bc <_Z17PedalComm_Receivev+0xda>
	{
		RX_CommandQueue[RxHead].length = RX_Buffer[LENGTH_BYTE_IDX];
     69e:	e0 91 54 01 	lds	r30, 0x0154	; 0x800154 <RxHead>
     6a2:	f0 e0       	ldi	r31, 0x00	; 0
     6a4:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <RX_Buffer+0x1>
     6a8:	ee 0f       	add	r30, r30
     6aa:	ff 1f       	adc	r31, r31
     6ac:	ee 0f       	add	r30, r30
     6ae:	ff 1f       	adc	r31, r31
     6b0:	ee 0f       	add	r30, r30
     6b2:	ff 1f       	adc	r31, r31
     6b4:	eb 56       	subi	r30, 0x6B	; 107
     6b6:	fe 4f       	sbci	r31, 0xFE	; 254
     6b8:	81 83       	std	Z+1, r24	; 0x01
     6ba:	52 c0       	rjmp	.+164    	; 0x760 <_Z17PedalComm_Receivev+0x17e>
	}
	else if (RX_ByteCnt == RX_CommandQueue[RxHead].length)
     6bc:	e0 91 54 01 	lds	r30, 0x0154	; 0x800154 <RxHead>
     6c0:	f0 e0       	ldi	r31, 0x00	; 0
     6c2:	ee 0f       	add	r30, r30
     6c4:	ff 1f       	adc	r31, r31
     6c6:	ee 0f       	add	r30, r30
     6c8:	ff 1f       	adc	r31, r31
     6ca:	ee 0f       	add	r30, r30
     6cc:	ff 1f       	adc	r31, r31
     6ce:	eb 56       	subi	r30, 0x6B	; 107
     6d0:	fe 4f       	sbci	r31, 0xFE	; 254
     6d2:	91 81       	ldd	r25, Z+1	; 0x01
     6d4:	89 13       	cpse	r24, r25
     6d6:	44 c0       	rjmp	.+136    	; 0x760 <_Z17PedalComm_Receivev+0x17e>
	{
		/* If full frame received */
		if (RX_Buffer[RX_CommandQueue[RxHead].length - 1] == EOF_BYTE)
     6d8:	e0 91 54 01 	lds	r30, 0x0154	; 0x800154 <RxHead>
     6dc:	f0 e0       	ldi	r31, 0x00	; 0
     6de:	ee 0f       	add	r30, r30
     6e0:	ff 1f       	adc	r31, r31
     6e2:	ee 0f       	add	r30, r30
     6e4:	ff 1f       	adc	r31, r31
     6e6:	ee 0f       	add	r30, r30
     6e8:	ff 1f       	adc	r31, r31
     6ea:	eb 56       	subi	r30, 0x6B	; 107
     6ec:	fe 4f       	sbci	r31, 0xFE	; 254
     6ee:	e1 81       	ldd	r30, Z+1	; 0x01
     6f0:	f0 e0       	ldi	r31, 0x00	; 0
     6f2:	ec 54       	subi	r30, 0x4C	; 76
     6f4:	fe 4f       	sbci	r31, 0xFE	; 254
     6f6:	80 81       	ld	r24, Z
     6f8:	8f 3e       	cpi	r24, 0xEF	; 239
     6fa:	51 f5       	brne	.+84     	; 0x750 <_Z17PedalComm_Receivev+0x16e>
		{
			RX_CommandQueue[RxHead].command = (CMD)RX_Buffer[CMD_BYTE_IDX];
     6fc:	e0 91 54 01 	lds	r30, 0x0154	; 0x800154 <RxHead>
     700:	f0 e0       	ldi	r31, 0x00	; 0
     702:	a5 eb       	ldi	r26, 0xB5	; 181
     704:	b1 e0       	ldi	r27, 0x01	; 1
     706:	12 96       	adiw	r26, 0x02	; 2
     708:	8c 91       	ld	r24, X
     70a:	12 97       	sbiw	r26, 0x02	; 2
     70c:	ee 0f       	add	r30, r30
     70e:	ff 1f       	adc	r31, r31
     710:	ee 0f       	add	r30, r30
     712:	ff 1f       	adc	r31, r31
     714:	ee 0f       	add	r30, r30
     716:	ff 1f       	adc	r31, r31
     718:	eb 56       	subi	r30, 0x6B	; 107
     71a:	fe 4f       	sbci	r31, 0xFE	; 254
     71c:	80 83       	st	Z, r24
			RX_CommandQueue[RxHead].data[0] = RX_Buffer[DATA_BYTE_IDX];
     71e:	e0 91 54 01 	lds	r30, 0x0154	; 0x800154 <RxHead>
     722:	f0 e0       	ldi	r31, 0x00	; 0
     724:	13 96       	adiw	r26, 0x03	; 3
     726:	8c 91       	ld	r24, X
     728:	ee 0f       	add	r30, r30
     72a:	ff 1f       	adc	r31, r31
     72c:	ee 0f       	add	r30, r30
     72e:	ff 1f       	adc	r31, r31
     730:	ee 0f       	add	r30, r30
     732:	ff 1f       	adc	r31, r31
     734:	eb 56       	subi	r30, 0x6B	; 107
     736:	fe 4f       	sbci	r31, 0xFE	; 254
     738:	82 83       	std	Z+2, r24	; 0x02
			
			/* calculate new RX head index */
			uint8_t tmpHead = (RxHead + 1) & RX_QUEUE_MASK;
     73a:	80 91 54 01 	lds	r24, 0x0154	; 0x800154 <RxHead>
     73e:	8f 5f       	subi	r24, 0xFF	; 255
     740:	83 70       	andi	r24, 0x03	; 3
				
			if ( tmpHead == RxTail )
     742:	90 91 53 01 	lds	r25, 0x0153	; 0x800153 <RxTail>
     746:	89 17       	cp	r24, r25
     748:	49 f0       	breq	.+18     	; 0x75c <_Z17PedalComm_Receivev+0x17a>
				/* error: RX command queue overflow */
			}
			else
			{
				/* store new index */
				RxHead = tmpHead;
     74a:	80 93 54 01 	sts	0x0154, r24	; 0x800154 <RxHead>
     74e:	06 c0       	rjmp	.+12     	; 0x75c <_Z17PedalComm_Receivev+0x17a>
			}
		}
		else
		{
			/* Prepare Transmit NACK */
			UART0_QueueChar(NACK_BYTE);
     750:	8a e2       	ldi	r24, 0x2A	; 42
     752:	0e 94 f0 0d 	call	0x1be0	; 0x1be0 <_Z15UART0_QueueCharh>
			PedalComm_DelayTXOvfCnt = 1;	// Start/reset Delay TX timer
     756:	81 e0       	ldi	r24, 0x01	; 1
     758:	80 93 4f 01 	sts	0x014F, r24	; 0x80014f <PedalComm_DelayTXOvfCnt>
		}
			
		RX_ByteCnt = 0;
     75c:	10 92 4c 01 	sts	0x014C, r1	; 0x80014c <_ZZ17PedalComm_ReceivevE10RX_ByteCnt>
	}	
}
     760:	df 91       	pop	r29
     762:	cf 91       	pop	r28
     764:	08 95       	ret

00000766 <_Z24PedalComm_HandleReceivedv>:


void PedalComm_HandleReceived()
{
	unsigned char response;
	response = System_HandlePedalCommand(RX_CommandQueue[RxTail].command, RX_CommandQueue[RxTail].length, (uint8_t *)RX_CommandQueue[RxTail].data);
     766:	40 91 53 01 	lds	r20, 0x0153	; 0x800153 <RxTail>
     76a:	e0 91 53 01 	lds	r30, 0x0153	; 0x800153 <RxTail>
     76e:	f0 e0       	ldi	r31, 0x00	; 0
     770:	ee 0f       	add	r30, r30
     772:	ff 1f       	adc	r31, r31
     774:	ee 0f       	add	r30, r30
     776:	ff 1f       	adc	r31, r31
     778:	ee 0f       	add	r30, r30
     77a:	ff 1f       	adc	r31, r31
     77c:	eb 56       	subi	r30, 0x6B	; 107
     77e:	fe 4f       	sbci	r31, 0xFE	; 254
     780:	61 81       	ldd	r22, Z+1	; 0x01
     782:	e0 91 53 01 	lds	r30, 0x0153	; 0x800153 <RxTail>
     786:	f0 e0       	ldi	r31, 0x00	; 0
     788:	ee 0f       	add	r30, r30
     78a:	ff 1f       	adc	r31, r31
     78c:	ee 0f       	add	r30, r30
     78e:	ff 1f       	adc	r31, r31
     790:	ee 0f       	add	r30, r30
     792:	ff 1f       	adc	r31, r31
     794:	eb 56       	subi	r30, 0x6B	; 107
     796:	fe 4f       	sbci	r31, 0xFE	; 254
     798:	80 81       	ld	r24, Z
     79a:	50 e0       	ldi	r21, 0x00	; 0
     79c:	44 0f       	add	r20, r20
     79e:	55 1f       	adc	r21, r21
     7a0:	44 0f       	add	r20, r20
     7a2:	55 1f       	adc	r21, r21
     7a4:	44 0f       	add	r20, r20
     7a6:	55 1f       	adc	r21, r21
     7a8:	49 56       	subi	r20, 0x69	; 105
     7aa:	5e 4f       	sbci	r21, 0xFE	; 254
     7ac:	0e 94 9f 06 	call	0xd3e	; 0xd3e <_Z25System_HandlePedalCommand3CMDhPh>
		
	/* Calculate and store new queue index */
	RxTail = (RxTail + 1) & RX_QUEUE_MASK;
     7b0:	90 91 53 01 	lds	r25, 0x0153	; 0x800153 <RxTail>
     7b4:	9f 5f       	subi	r25, 0xFF	; 255
     7b6:	93 70       	andi	r25, 0x03	; 3
     7b8:	90 93 53 01 	sts	0x0153, r25	; 0x800153 <RxTail>

	/* Prepare Transmit response */
	UART0_QueueChar(response);
     7bc:	0e 94 f0 0d 	call	0x1be0	; 0x1be0 <_Z15UART0_QueueCharh>
	
	/* Start/reset Delay TX timer */
	PedalComm_DelayTXOvfCnt = 1;
     7c0:	81 e0       	ldi	r24, 0x01	; 1
     7c2:	80 93 4f 01 	sts	0x014F, r24	; 0x80014f <PedalComm_DelayTXOvfCnt>
     7c6:	08 95       	ret

000007c8 <_Z22PedalComm_QueueCommand3CMDhPh>:


bool PedalComm_QueueCommand(CMD cmd, uint8_t datLen, uint8_t *dat)
{
	/* Calculate new queue head index */
	uint8_t tmpHead = (TxHead + 1) & TX_QUEUE_MASK;
     7c8:	20 91 52 01 	lds	r18, 0x0152	; 0x800152 <TxHead>
     7cc:	2f 5f       	subi	r18, 0xFF	; 255
     7ce:	27 70       	andi	r18, 0x07	; 7
	
	/* Check for free space in queue */
	if ( tmpHead == TxTail )
     7d0:	90 91 51 01 	lds	r25, 0x0151	; 0x800151 <TxTail>
     7d4:	29 17       	cp	r18, r25
     7d6:	09 f4       	brne	.+2      	; 0x7da <_Z22PedalComm_QueueCommand3CMDhPh+0x12>
     7d8:	4e c0       	rjmp	.+156    	; 0x876 <_Z22PedalComm_QueueCommand3CMDhPh+0xae>
		return false;
	
	/* Copy command to queue */
	TX_CommandQueue[TxHead].command = cmd;
     7da:	e0 91 52 01 	lds	r30, 0x0152	; 0x800152 <TxHead>
     7de:	f0 e0       	ldi	r31, 0x00	; 0
     7e0:	ee 0f       	add	r30, r30
     7e2:	ff 1f       	adc	r31, r31
     7e4:	ee 0f       	add	r30, r30
     7e6:	ff 1f       	adc	r31, r31
     7e8:	ee 0f       	add	r30, r30
     7ea:	ff 1f       	adc	r31, r31
     7ec:	eb 5a       	subi	r30, 0xAB	; 171
     7ee:	fe 4f       	sbci	r31, 0xFE	; 254
     7f0:	80 83       	st	Z, r24
	TX_CommandQueue[TxHead].length = datLen + 4;
     7f2:	e0 91 52 01 	lds	r30, 0x0152	; 0x800152 <TxHead>
     7f6:	f0 e0       	ldi	r31, 0x00	; 0
     7f8:	ee 0f       	add	r30, r30
     7fa:	ff 1f       	adc	r31, r31
     7fc:	ee 0f       	add	r30, r30
     7fe:	ff 1f       	adc	r31, r31
     800:	ee 0f       	add	r30, r30
     802:	ff 1f       	adc	r31, r31
     804:	eb 5a       	subi	r30, 0xAB	; 171
     806:	fe 4f       	sbci	r31, 0xFE	; 254
     808:	84 e0       	ldi	r24, 0x04	; 4
     80a:	86 0f       	add	r24, r22
     80c:	81 83       	std	Z+1, r24	; 0x01
	TX_CommandQueue[TxHead].sent = false;
     80e:	e0 91 52 01 	lds	r30, 0x0152	; 0x800152 <TxHead>
     812:	f0 e0       	ldi	r31, 0x00	; 0
     814:	ee 0f       	add	r30, r30
     816:	ff 1f       	adc	r31, r31
     818:	ee 0f       	add	r30, r30
     81a:	ff 1f       	adc	r31, r31
     81c:	ee 0f       	add	r30, r30
     81e:	ff 1f       	adc	r31, r31
     820:	eb 5a       	subi	r30, 0xAB	; 171
     822:	fe 4f       	sbci	r31, 0xFE	; 254
     824:	16 82       	std	Z+6, r1	; 0x06
	TX_CommandQueue[TxHead].acked = false;
     826:	e0 91 52 01 	lds	r30, 0x0152	; 0x800152 <TxHead>
     82a:	f0 e0       	ldi	r31, 0x00	; 0
     82c:	ee 0f       	add	r30, r30
     82e:	ff 1f       	adc	r31, r31
     830:	ee 0f       	add	r30, r30
     832:	ff 1f       	adc	r31, r31
     834:	ee 0f       	add	r30, r30
     836:	ff 1f       	adc	r31, r31
     838:	eb 5a       	subi	r30, 0xAB	; 171
     83a:	fe 4f       	sbci	r31, 0xFE	; 254
     83c:	17 82       	std	Z+7, r1	; 0x07
	
	for (uint8_t i = 0; i < datLen; i++)
     83e:	66 23       	and	r22, r22
     840:	b1 f0       	breq	.+44     	; 0x86e <_Z22PedalComm_QueueCommand3CMDhPh+0xa6>
     842:	a4 2f       	mov	r26, r20
     844:	b5 2f       	mov	r27, r21
     846:	80 e0       	ldi	r24, 0x00	; 0
     848:	90 e0       	ldi	r25, 0x00	; 0
	{
		TX_CommandQueue[TxHead].data[i] = dat[i];
     84a:	e0 91 52 01 	lds	r30, 0x0152	; 0x800152 <TxHead>
     84e:	f0 e0       	ldi	r31, 0x00	; 0
     850:	3d 91       	ld	r19, X+
     852:	ee 0f       	add	r30, r30
     854:	ff 1f       	adc	r31, r31
     856:	ee 0f       	add	r30, r30
     858:	ff 1f       	adc	r31, r31
     85a:	ee 0f       	add	r30, r30
     85c:	ff 1f       	adc	r31, r31
     85e:	eb 5a       	subi	r30, 0xAB	; 171
     860:	fe 4f       	sbci	r31, 0xFE	; 254
     862:	e8 0f       	add	r30, r24
     864:	f9 1f       	adc	r31, r25
     866:	32 83       	std	Z+2, r19	; 0x02
     868:	01 96       	adiw	r24, 0x01	; 1
	TX_CommandQueue[TxHead].command = cmd;
	TX_CommandQueue[TxHead].length = datLen + 4;
	TX_CommandQueue[TxHead].sent = false;
	TX_CommandQueue[TxHead].acked = false;
	
	for (uint8_t i = 0; i < datLen; i++)
     86a:	86 17       	cp	r24, r22
     86c:	70 f3       	brcs	.-36     	; 0x84a <_Z22PedalComm_QueueCommand3CMDhPh+0x82>
	{
		TX_CommandQueue[TxHead].data[i] = dat[i];
	}
	
	/* Update queue head */
	TxHead = tmpHead;
     86e:	20 93 52 01 	sts	0x0152, r18	; 0x800152 <TxHead>
	
	return true;
     872:	81 e0       	ldi	r24, 0x01	; 1
     874:	08 95       	ret
	/* Calculate new queue head index */
	uint8_t tmpHead = (TxHead + 1) & TX_QUEUE_MASK;
	
	/* Check for free space in queue */
	if ( tmpHead == TxTail )
		return false;
     876:	80 e0       	ldi	r24, 0x00	; 0
	
	/* Update queue head */
	TxHead = tmpHead;
	
	return true;
}
     878:	08 95       	ret

0000087a <_Z20PedalComm_PutCommandv>:

void PedalComm_PutCommand()
{
     87a:	cf 93       	push	r28
	/* Only transmit new command if previous one got an ACK */
	if (TX_CommandQueue[TxTail].acked)
     87c:	e0 91 51 01 	lds	r30, 0x0151	; 0x800151 <TxTail>
     880:	f0 e0       	ldi	r31, 0x00	; 0
     882:	ee 0f       	add	r30, r30
     884:	ff 1f       	adc	r31, r31
     886:	ee 0f       	add	r30, r30
     888:	ff 1f       	adc	r31, r31
     88a:	ee 0f       	add	r30, r30
     88c:	ff 1f       	adc	r31, r31
     88e:	eb 5a       	subi	r30, 0xAB	; 171
     890:	fe 4f       	sbci	r31, 0xFE	; 254
     892:	87 81       	ldd	r24, Z+7	; 0x07
     894:	88 23       	and	r24, r24
     896:	39 f0       	breq	.+14     	; 0x8a6 <_Z20PedalComm_PutCommandv+0x2c>
	{
		/* Calculate and store new queue tail index */
		TxTail = (TxTail + 1) & TX_QUEUE_MASK;
     898:	80 91 51 01 	lds	r24, 0x0151	; 0x800151 <TxTail>
     89c:	8f 5f       	subi	r24, 0xFF	; 255
     89e:	87 70       	andi	r24, 0x07	; 7
     8a0:	80 93 51 01 	sts	0x0151, r24	; 0x800151 <TxTail>
     8a4:	84 c0       	rjmp	.+264    	; 0x9ae <__stack+0xaf>
	}
	else if (!(TX_CommandQueue[TxTail].sent))
     8a6:	e0 91 51 01 	lds	r30, 0x0151	; 0x800151 <TxTail>
     8aa:	f0 e0       	ldi	r31, 0x00	; 0
     8ac:	ee 0f       	add	r30, r30
     8ae:	ff 1f       	adc	r31, r31
     8b0:	ee 0f       	add	r30, r30
     8b2:	ff 1f       	adc	r31, r31
     8b4:	ee 0f       	add	r30, r30
     8b6:	ff 1f       	adc	r31, r31
     8b8:	eb 5a       	subi	r30, 0xAB	; 171
     8ba:	fe 4f       	sbci	r31, 0xFE	; 254
     8bc:	86 81       	ldd	r24, Z+6	; 0x06
     8be:	81 11       	cpse	r24, r1
     8c0:	76 c0       	rjmp	.+236    	; 0x9ae <__stack+0xaf>
	{
		/* Send command frame to UART TX buffer */
		UART0_QueueChar(SOF_BYTE);
     8c2:	8f e5       	ldi	r24, 0x5F	; 95
     8c4:	0e 94 f0 0d 	call	0x1be0	; 0x1be0 <_Z15UART0_QueueCharh>
		UART0_QueueChar((unsigned char)TX_CommandQueue[TxTail].length);
     8c8:	e0 91 51 01 	lds	r30, 0x0151	; 0x800151 <TxTail>
     8cc:	f0 e0       	ldi	r31, 0x00	; 0
     8ce:	ee 0f       	add	r30, r30
     8d0:	ff 1f       	adc	r31, r31
     8d2:	ee 0f       	add	r30, r30
     8d4:	ff 1f       	adc	r31, r31
     8d6:	ee 0f       	add	r30, r30
     8d8:	ff 1f       	adc	r31, r31
     8da:	eb 5a       	subi	r30, 0xAB	; 171
     8dc:	fe 4f       	sbci	r31, 0xFE	; 254
     8de:	81 81       	ldd	r24, Z+1	; 0x01
     8e0:	0e 94 f0 0d 	call	0x1be0	; 0x1be0 <_Z15UART0_QueueCharh>
		UART0_QueueChar((unsigned char)TX_CommandQueue[TxTail].command);
     8e4:	e0 91 51 01 	lds	r30, 0x0151	; 0x800151 <TxTail>
     8e8:	f0 e0       	ldi	r31, 0x00	; 0
     8ea:	ee 0f       	add	r30, r30
     8ec:	ff 1f       	adc	r31, r31
     8ee:	ee 0f       	add	r30, r30
     8f0:	ff 1f       	adc	r31, r31
     8f2:	ee 0f       	add	r30, r30
     8f4:	ff 1f       	adc	r31, r31
     8f6:	eb 5a       	subi	r30, 0xAB	; 171
     8f8:	fe 4f       	sbci	r31, 0xFE	; 254
     8fa:	80 81       	ld	r24, Z
     8fc:	0e 94 f0 0d 	call	0x1be0	; 0x1be0 <_Z15UART0_QueueCharh>
		
		for (uint8_t i = 0; i < (TX_CommandQueue[TxTail].length - 4); i++)
     900:	e0 91 51 01 	lds	r30, 0x0151	; 0x800151 <TxTail>
     904:	f0 e0       	ldi	r31, 0x00	; 0
     906:	ee 0f       	add	r30, r30
     908:	ff 1f       	adc	r31, r31
     90a:	ee 0f       	add	r30, r30
     90c:	ff 1f       	adc	r31, r31
     90e:	ee 0f       	add	r30, r30
     910:	ff 1f       	adc	r31, r31
     912:	eb 5a       	subi	r30, 0xAB	; 171
     914:	fe 4f       	sbci	r31, 0xFE	; 254
     916:	81 81       	ldd	r24, Z+1	; 0x01
     918:	90 e0       	ldi	r25, 0x00	; 0
     91a:	04 97       	sbiw	r24, 0x04	; 4
     91c:	18 16       	cp	r1, r24
     91e:	19 06       	cpc	r1, r25
     920:	4c f5       	brge	.+82     	; 0x974 <__stack+0x75>
     922:	20 e0       	ldi	r18, 0x00	; 0
     924:	30 e0       	ldi	r19, 0x00	; 0
     926:	c0 e0       	ldi	r28, 0x00	; 0
		{
			UART0_QueueChar((unsigned char)TX_CommandQueue[TxTail].data[i]);
     928:	80 91 51 01 	lds	r24, 0x0151	; 0x800151 <TxTail>
     92c:	e8 2f       	mov	r30, r24
     92e:	f0 e0       	ldi	r31, 0x00	; 0
     930:	ee 0f       	add	r30, r30
     932:	ff 1f       	adc	r31, r31
     934:	ee 0f       	add	r30, r30
     936:	ff 1f       	adc	r31, r31
     938:	ee 0f       	add	r30, r30
     93a:	ff 1f       	adc	r31, r31
     93c:	eb 5a       	subi	r30, 0xAB	; 171
     93e:	fe 4f       	sbci	r31, 0xFE	; 254
     940:	e2 0f       	add	r30, r18
     942:	f3 1f       	adc	r31, r19
     944:	82 81       	ldd	r24, Z+2	; 0x02
     946:	0e 94 f0 0d 	call	0x1be0	; 0x1be0 <_Z15UART0_QueueCharh>
		/* Send command frame to UART TX buffer */
		UART0_QueueChar(SOF_BYTE);
		UART0_QueueChar((unsigned char)TX_CommandQueue[TxTail].length);
		UART0_QueueChar((unsigned char)TX_CommandQueue[TxTail].command);
		
		for (uint8_t i = 0; i < (TX_CommandQueue[TxTail].length - 4); i++)
     94a:	cf 5f       	subi	r28, 0xFF	; 255
     94c:	2c 2f       	mov	r18, r28
     94e:	30 e0       	ldi	r19, 0x00	; 0
     950:	a0 91 51 01 	lds	r26, 0x0151	; 0x800151 <TxTail>
     954:	b0 e0       	ldi	r27, 0x00	; 0
     956:	aa 0f       	add	r26, r26
     958:	bb 1f       	adc	r27, r27
     95a:	aa 0f       	add	r26, r26
     95c:	bb 1f       	adc	r27, r27
     95e:	aa 0f       	add	r26, r26
     960:	bb 1f       	adc	r27, r27
     962:	ab 5a       	subi	r26, 0xAB	; 171
     964:	be 4f       	sbci	r27, 0xFE	; 254
     966:	11 96       	adiw	r26, 0x01	; 1
     968:	8c 91       	ld	r24, X
     96a:	90 e0       	ldi	r25, 0x00	; 0
     96c:	04 97       	sbiw	r24, 0x04	; 4
     96e:	28 17       	cp	r18, r24
     970:	39 07       	cpc	r19, r25
     972:	d4 f2       	brlt	.-76     	; 0x928 <__stack+0x29>
		{
			UART0_QueueChar((unsigned char)TX_CommandQueue[TxTail].data[i]);
		}
		
		UART0_QueueChar(EOF_BYTE);
     974:	8f ee       	ldi	r24, 0xEF	; 239
     976:	0e 94 f0 0d 	call	0x1be0	; 0x1be0 <_Z15UART0_QueueCharh>
		
		/* If no data is waiting to be transmitted */
		if (PedalComm_DelayTXOvfCnt == 0)
     97a:	80 91 4f 01 	lds	r24, 0x014F	; 0x80014f <PedalComm_DelayTXOvfCnt>
     97e:	81 11       	cpse	r24, r1
     980:	03 c0       	rjmp	.+6      	; 0x988 <__stack+0x89>
		{
			/* Signal that data is waiting to be transmitted without delay */
			PedalComm_DelayTxFlag = true;
     982:	81 e0       	ldi	r24, 0x01	; 1
     984:	80 93 50 01 	sts	0x0150, r24	; 0x800150 <PedalComm_DelayTxFlag>
		}
		
		TX_CommandQueue[TxTail].sent = true;
     988:	e0 91 51 01 	lds	r30, 0x0151	; 0x800151 <TxTail>
     98c:	f0 e0       	ldi	r31, 0x00	; 0
     98e:	ee 0f       	add	r30, r30
     990:	ff 1f       	adc	r31, r31
     992:	ee 0f       	add	r30, r30
     994:	ff 1f       	adc	r31, r31
     996:	ee 0f       	add	r30, r30
     998:	ff 1f       	adc	r31, r31
     99a:	eb 5a       	subi	r30, 0xAB	; 171
     99c:	fe 4f       	sbci	r31, 0xFE	; 254
     99e:	81 e0       	ldi	r24, 0x01	; 1
     9a0:	86 83       	std	Z+6, r24	; 0x06
		
		/* Start response timeout timer */
		PedalComm_ResponseTimeoutOvfCnt = 1;
     9a2:	81 e0       	ldi	r24, 0x01	; 1
     9a4:	90 e0       	ldi	r25, 0x00	; 0
     9a6:	90 93 04 01 	sts	0x0104, r25	; 0x800104 <PedalComm_ResponseTimeoutOvfCnt+0x1>
     9aa:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <PedalComm_ResponseTimeoutOvfCnt>
	}
}
     9ae:	cf 91       	pop	r28
     9b0:	08 95       	ret

000009b2 <_Z12Select_RX_TXh>:
}


void Select_RX_TX(uint8_t dir)
{
	if (dir == DIR_TRANSMIT)
     9b2:	81 11       	cpse	r24, r1
     9b4:	03 c0       	rjmp	.+6      	; 0x9bc <_Z12Select_RX_TXh+0xa>
	{
		SELECT_RX_TX_PORT &= ~(SELECT_RX_MASK);
     9b6:	2b 98       	cbi	0x05, 3	; 5
		SELECT_RX_TX_PORT |= SELECT_TX_MASK;
     9b8:	2c 9a       	sbi	0x05, 4	; 5
     9ba:	08 95       	ret
	}
	else
	{
		SELECT_RX_TX_PORT |= SELECT_RX_MASK;
     9bc:	2b 9a       	sbi	0x05, 3	; 5
		SELECT_RX_TX_PORT &= ~(SELECT_TX_MASK);
     9be:	2c 98       	cbi	0x05, 4	; 5
     9c0:	08 95       	ret

000009c2 <_Z14PedalComm_Initv>:

/* Function implementations */
void PedalComm_Init()
{
	/* Set RX/TX Select GPIOs to output */
	SELECT_RX_TX_DDR |= (SELECT_RX_MASK | SELECT_TX_MASK);
     9c2:	84 b1       	in	r24, 0x04	; 4
     9c4:	88 61       	ori	r24, 0x18	; 24
     9c6:	84 b9       	out	0x04, r24	; 4
	
	/* Activate receive */
	Select_RX_TX(DIR_RECEIVE);
     9c8:	81 e0       	ldi	r24, 0x01	; 1
     9ca:	0e 94 d9 04 	call	0x9b2	; 0x9b2 <_Z12Select_RX_TXh>
	
	/* Enable TX Complete Interrupt */
	UCSR0B |= (1 << TXCIE0);
     9ce:	e1 ec       	ldi	r30, 0xC1	; 193
     9d0:	f0 e0       	ldi	r31, 0x00	; 0
     9d2:	80 81       	ld	r24, Z
     9d4:	80 64       	ori	r24, 0x40	; 64
     9d6:	80 83       	st	Z, r24
     9d8:	08 95       	ret

000009da <_Z18PedalComm_Transmitv>:


void PedalComm_Transmit()
{
	/* Activate Transmit */
	Select_RX_TX(DIR_TRANSMIT);
     9da:	80 e0       	ldi	r24, 0x00	; 0
     9dc:	0e 94 d9 04 	call	0x9b2	; 0x9b2 <_Z12Select_RX_TXh>
	
	/* Start transmit */
	UART0_PutQueue();
     9e0:	0e 94 05 0e 	call	0x1c0a	; 0x1c0a <_Z14UART0_PutQueuev>
     9e4:	08 95       	ret

000009e6 <__vector_22>:
	}
}

/* TX Complete Interrupt ISR */
ISR(USART0_TX_vect)
{
     9e6:	1f 92       	push	r1
     9e8:	0f 92       	push	r0
     9ea:	0f b6       	in	r0, 0x3f	; 63
     9ec:	0f 92       	push	r0
     9ee:	11 24       	eor	r1, r1
     9f0:	2f 93       	push	r18
     9f2:	3f 93       	push	r19
     9f4:	4f 93       	push	r20
     9f6:	5f 93       	push	r21
     9f8:	6f 93       	push	r22
     9fa:	7f 93       	push	r23
     9fc:	8f 93       	push	r24
     9fe:	9f 93       	push	r25
     a00:	af 93       	push	r26
     a02:	bf 93       	push	r27
     a04:	ef 93       	push	r30
     a06:	ff 93       	push	r31
	/* Deactivate Transmit */
	Select_RX_TX(DIR_RECEIVE);
     a08:	81 e0       	ldi	r24, 0x01	; 1
     a0a:	0e 94 d9 04 	call	0x9b2	; 0x9b2 <_Z12Select_RX_TXh>
     a0e:	ff 91       	pop	r31
     a10:	ef 91       	pop	r30
     a12:	bf 91       	pop	r27
     a14:	af 91       	pop	r26
     a16:	9f 91       	pop	r25
     a18:	8f 91       	pop	r24
     a1a:	7f 91       	pop	r23
     a1c:	6f 91       	pop	r22
     a1e:	5f 91       	pop	r21
     a20:	4f 91       	pop	r20
     a22:	3f 91       	pop	r19
     a24:	2f 91       	pop	r18
     a26:	0f 90       	pop	r0
     a28:	0f be       	out	0x3f, r0	; 63
     a2a:	0f 90       	pop	r0
     a2c:	1f 90       	pop	r1
     a2e:	18 95       	reti

00000a30 <_Z18RotaryEncoder_Initv>:
volatile enum RotaryEncoder_State RotEnc_State = IDLE;

void RotaryEncoder_Init()
{
	/* Setup input GPIO pins */
	GPIO_ROT_ENC_DDR &= ~(GPIO_ROT_ENC_PRESS_MASK | GPIO_ROT_ENC_INDICATOR_MASK | GPIO_ROT_ENC_TRIGGER_MASK);
     a30:	84 b1       	in	r24, 0x04	; 4
     a32:	88 7f       	andi	r24, 0xF8	; 248
     a34:	84 b9       	out	0x04, r24	; 4
	
	/* Setup Pin Change interrupt */
	PCMSK1 |= (1 << PCINT8_BIT);	// Enable Pin Change interrupt for Pin 1 (PCINT8)
     a36:	ec e6       	ldi	r30, 0x6C	; 108
     a38:	f0 e0       	ldi	r31, 0x00	; 0
     a3a:	80 81       	ld	r24, Z
     a3c:	81 60       	ori	r24, 0x01	; 1
     a3e:	80 83       	st	Z, r24
	PCICR |= (1 << PCIE1);			// Enable Pin Change interrupt PCINT[15:8]
     a40:	e8 e6       	ldi	r30, 0x68	; 104
     a42:	f0 e0       	ldi	r31, 0x00	; 0
     a44:	80 81       	ld	r24, Z
     a46:	82 60       	ori	r24, 0x02	; 2
     a48:	80 83       	st	Z, r24
	
	/* Setup Interrupt Sense (INT2) */
	EICRA |= ((1 << ISC21) | (1 << ISC20));		// Rising edge trigger for INT2
     a4a:	e9 e6       	ldi	r30, 0x69	; 105
     a4c:	f0 e0       	ldi	r31, 0x00	; 0
     a4e:	80 81       	ld	r24, Z
     a50:	80 63       	ori	r24, 0x30	; 48
     a52:	80 83       	st	Z, r24
	EIMSK |= (1 << INT2);						// Enable External Interrupt Request (INT2)
     a54:	ea 9a       	sbi	0x1d, 2	; 29
     a56:	08 95       	ret

00000a58 <_Z23RotaryEncoder_IsPressedv>:
}

bool RotaryEncoder_IsPressed()
{
	return GPIO_ROT_ENC_PIN & GPIO_ROT_ENC_PRESS_MASK;
     a58:	83 b1       	in	r24, 0x03	; 3
}
     a5a:	82 fb       	bst	r24, 2
     a5c:	88 27       	eor	r24, r24
     a5e:	80 f9       	bld	r24, 0
     a60:	08 95       	ret

00000a62 <_Z29RotaryEncoder_EnableInterruptv>:

void RotaryEncoder_EnableInterrupt()
{
	/* Clear and reenable interrupt */
	EIFR |= (1 << INTF2);		// Clear External interrupt (INT2) Flag
     a62:	e2 9a       	sbi	0x1c, 2	; 28
	PCIFR |= (1 << PCIF1);		// Clear Pin Change interrupt Flag
     a64:	d9 9a       	sbi	0x1b, 1	; 27
	EIMSK |= (1 << INT2);		// Enable External Interrupt Request (INT2)
     a66:	ea 9a       	sbi	0x1d, 2	; 29
	PCICR |= (1 << PCIE1);		// Enable Pin Change interrupt (PCI1) PCINT[15:8]
     a68:	e8 e6       	ldi	r30, 0x68	; 104
     a6a:	f0 e0       	ldi	r31, 0x00	; 0
     a6c:	80 81       	ld	r24, Z
     a6e:	82 60       	ori	r24, 0x02	; 2
     a70:	80 83       	st	Z, r24
     a72:	08 95       	ret

00000a74 <__vector_5>:


/* Pin Change Interrupt Request 1 Service Routine */
/* To handle Rotary Encoder Rotation */
ISR(PCINT1_vect)
{
     a74:	1f 92       	push	r1
     a76:	0f 92       	push	r0
     a78:	0f b6       	in	r0, 0x3f	; 63
     a7a:	0f 92       	push	r0
     a7c:	11 24       	eor	r1, r1
     a7e:	8f 93       	push	r24
     a80:	ef 93       	push	r30
     a82:	ff 93       	push	r31
	if (GPIO_ROT_ENC_PIN & GPIO_ROT_ENC_TRIGGER_MASK)	// Only react on rising edge
     a84:	18 9b       	sbis	0x03, 0	; 3
     a86:	0f c0       	rjmp	.+30     	; 0xaa6 <__vector_5+0x32>
	{
		/* Disable External interrupts */
		EIMSK &= ~(1 << INT2);		// Disable External Interrupt Request (INT2)
     a88:	ea 98       	cbi	0x1d, 2	; 29
		PCICR &= ~(1 << PCIE1);		// Disable Pin Change interrupt (PCI1) PCINT[15:8]
     a8a:	e8 e6       	ldi	r30, 0x68	; 104
     a8c:	f0 e0       	ldi	r31, 0x00	; 0
     a8e:	80 81       	ld	r24, Z
     a90:	8d 7f       	andi	r24, 0xFD	; 253
     a92:	80 83       	st	Z, r24
		
		/* Determine Left/Right turn */
		if (GPIO_ROT_ENC_PIN & GPIO_ROT_ENC_INDICATOR_MASK)
     a94:	19 9b       	sbis	0x03, 1	; 3
     a96:	04 c0       	rjmp	.+8      	; 0xaa0 <__vector_5+0x2c>
			RotEnc_State = ROT_RIGHT;
     a98:	81 e0       	ldi	r24, 0x01	; 1
     a9a:	80 93 c5 01 	sts	0x01C5, r24	; 0x8001c5 <RotEnc_State>
     a9e:	03 c0       	rjmp	.+6      	; 0xaa6 <__vector_5+0x32>
		else
			RotEnc_State = ROT_LEFT;
     aa0:	82 e0       	ldi	r24, 0x02	; 2
     aa2:	80 93 c5 01 	sts	0x01C5, r24	; 0x8001c5 <RotEnc_State>
	}
}
     aa6:	ff 91       	pop	r31
     aa8:	ef 91       	pop	r30
     aaa:	8f 91       	pop	r24
     aac:	0f 90       	pop	r0
     aae:	0f be       	out	0x3f, r0	; 63
     ab0:	0f 90       	pop	r0
     ab2:	1f 90       	pop	r1
     ab4:	18 95       	reti

00000ab6 <__vector_3>:

/* External Interrupt Request 2 Service routine */
/* To handle Rotary Encoder Press */
ISR(INT2_vect)
{
     ab6:	1f 92       	push	r1
     ab8:	0f 92       	push	r0
     aba:	0f b6       	in	r0, 0x3f	; 63
     abc:	0f 92       	push	r0
     abe:	11 24       	eor	r1, r1
     ac0:	8f 93       	push	r24
     ac2:	9f 93       	push	r25
     ac4:	ef 93       	push	r30
     ac6:	ff 93       	push	r31
	RotaryEncoder_OvfCnt = 1;		// Start overflow counter
     ac8:	81 e0       	ldi	r24, 0x01	; 1
     aca:	90 e0       	ldi	r25, 0x00	; 0
     acc:	90 93 c7 01 	sts	0x01C7, r25	; 0x8001c7 <RotaryEncoder_OvfCnt+0x1>
     ad0:	80 93 c6 01 	sts	0x01C6, r24	; 0x8001c6 <RotaryEncoder_OvfCnt>
	
	/* Disable External interrupts */
	EIMSK &= ~(1 << INT2);		// Disable External Interrupt Request (INT2)
     ad4:	ea 98       	cbi	0x1d, 2	; 29
	PCICR &= ~(1 << PCIE1);		// Disable Pin Change interrupt (PCI1) PCINT[15:8]
     ad6:	e8 e6       	ldi	r30, 0x68	; 104
     ad8:	f0 e0       	ldi	r31, 0x00	; 0
     ada:	80 81       	ld	r24, Z
     adc:	8d 7f       	andi	r24, 0xFD	; 253
     ade:	80 83       	st	Z, r24
     ae0:	ff 91       	pop	r31
     ae2:	ef 91       	pop	r30
     ae4:	9f 91       	pop	r25
     ae6:	8f 91       	pop	r24
     ae8:	0f 90       	pop	r0
     aea:	0f be       	out	0x3f, r0	; 63
     aec:	0f 90       	pop	r0
     aee:	1f 90       	pop	r1
     af0:	18 95       	reti

00000af2 <_Z14SP10281_Updatev>:
void SP10281_Update()
{
	static unsigned char tmp = 0;

	/* Increment digit counter */
	if (++SP10281_DigitCnt >= SP10281_NUMBER_OF_DIGITS)
     af2:	80 91 cb 01 	lds	r24, 0x01CB	; 0x8001cb <SP10281_DigitCnt>
     af6:	8f 5f       	subi	r24, 0xFF	; 255
     af8:	80 93 cb 01 	sts	0x01CB, r24	; 0x8001cb <SP10281_DigitCnt>
     afc:	83 30       	cpi	r24, 0x03	; 3
     afe:	10 f0       	brcs	.+4      	; 0xb04 <_Z14SP10281_Updatev+0x12>
		SP10281_DigitCnt = 0;
     b00:	10 92 cb 01 	sts	0x01CB, r1	; 0x8001cb <SP10281_DigitCnt>

	/* Activate next digit */
	tmp = (1 << (SP10281_DigitCnt + GPIO_SP10281_DIGIT0_PIN));
     b04:	90 91 cb 01 	lds	r25, 0x01CB	; 0x8001cb <SP10281_DigitCnt>
     b08:	9b 5f       	subi	r25, 0xFB	; 251
     b0a:	81 e0       	ldi	r24, 0x01	; 1
     b0c:	01 c0       	rjmp	.+2      	; 0xb10 <_Z14SP10281_Updatev+0x1e>
     b0e:	88 0f       	add	r24, r24
     b10:	9a 95       	dec	r25
     b12:	ea f7       	brpl	.-6      	; 0xb0e <_Z14SP10281_Updatev+0x1c>
     b14:	80 93 c8 01 	sts	0x01C8, r24	; 0x8001c8 <_ZZ14SP10281_UpdatevE3tmp>
	GPIO_SP10281_DIGIT_PORT |= GPIO_SP10281_DIGIT_MASK;
     b18:	85 b1       	in	r24, 0x05	; 5
     b1a:	80 6e       	ori	r24, 0xE0	; 224
     b1c:	85 b9       	out	0x05, r24	; 5
	GPIO_SP10281_DIGIT_PORT &= ~tmp;
     b1e:	95 b1       	in	r25, 0x05	; 5
     b20:	80 91 c8 01 	lds	r24, 0x01C8	; 0x8001c8 <_ZZ14SP10281_UpdatevE3tmp>
     b24:	80 95       	com	r24
     b26:	89 23       	and	r24, r25
     b28:	85 b9       	out	0x05, r24	; 5

	/* Update segments */
	GPIO_SP10281_SEGMENT_PORT = SP10281_DigitData[SP10281_DigitCnt];
     b2a:	e0 91 cb 01 	lds	r30, 0x01CB	; 0x8001cb <SP10281_DigitCnt>
     b2e:	f0 e0       	ldi	r31, 0x00	; 0
     b30:	e4 53       	subi	r30, 0x34	; 52
     b32:	fe 4f       	sbci	r31, 0xFE	; 254
     b34:	80 81       	ld	r24, Z
     b36:	82 b9       	out	0x02, r24	; 2
     b38:	08 95       	ret

00000b3a <_Z18SP10281_WriteDigithch>:
}

void SP10281_WriteDigit(unsigned char dig, char data, unsigned char dot)
{
	if (data >= '0' && data <= '9')
     b3a:	e0 ed       	ldi	r30, 0xD0	; 208
     b3c:	e6 0f       	add	r30, r22
     b3e:	ea 30       	cpi	r30, 0x0A	; 10
     b40:	a8 f0       	brcs	.+42     	; 0xb6c <_Z18SP10281_WriteDigithch+0x32>
	{
		data -= '0';
	}
	else if (data >= 'A' && data <= 'Z')
     b42:	9f eb       	ldi	r25, 0xBF	; 191
     b44:	96 0f       	add	r25, r22
     b46:	9a 31       	cpi	r25, 0x1A	; 26
     b48:	18 f4       	brcc	.+6      	; 0xb50 <_Z18SP10281_WriteDigithch+0x16>
	{
		data -= 'A';
		data += 10;
     b4a:	e9 ec       	ldi	r30, 0xC9	; 201
     b4c:	e6 0f       	add	r30, r22
     b4e:	0e c0       	rjmp	.+28     	; 0xb6c <_Z18SP10281_WriteDigithch+0x32>
	}
	else if (data >= 'a' && data <= 'z')
     b50:	9f e9       	ldi	r25, 0x9F	; 159
     b52:	96 0f       	add	r25, r22
     b54:	9a 31       	cpi	r25, 0x1A	; 26
     b56:	18 f4       	brcc	.+6      	; 0xb5e <_Z18SP10281_WriteDigithch+0x24>
	{
		data -= 'a';
		data += 10;
     b58:	e9 ea       	ldi	r30, 0xA9	; 169
     b5a:	e6 0f       	add	r30, r22
     b5c:	07 c0       	rjmp	.+14     	; 0xb6c <_Z18SP10281_WriteDigithch+0x32>
	}
	else if (data == '-')
     b5e:	6d 32       	cpi	r22, 0x2D	; 45
     b60:	21 f0       	breq	.+8      	; 0xb6a <_Z18SP10281_WriteDigithch+0x30>
	{
		data = 36;
	}
	else if (data == ' ')
     b62:	60 32       	cpi	r22, 0x20	; 32
     b64:	d9 f4       	brne	.+54     	; 0xb9c <_Z18SP10281_WriteDigithch+0x62>
	{
		data = 37;
     b66:	e5 e2       	ldi	r30, 0x25	; 37
     b68:	01 c0       	rjmp	.+2      	; 0xb6c <_Z18SP10281_WriteDigithch+0x32>
		data -= 'a';
		data += 10;
	}
	else if (data == '-')
	{
		data = 36;
     b6a:	e4 e2       	ldi	r30, 0x24	; 36
	else
	{
		return;
	}
	
	SP10281_DigitData[dig] = SP10281_DigitTable[(unsigned char)data];
     b6c:	90 e0       	ldi	r25, 0x00	; 0
     b6e:	f0 e0       	ldi	r31, 0x00	; 0
     b70:	eb 5f       	subi	r30, 0xFB	; 251
     b72:	fe 4f       	sbci	r31, 0xFE	; 254
     b74:	20 81       	ld	r18, Z
     b76:	fc 01       	movw	r30, r24
     b78:	e4 53       	subi	r30, 0x34	; 52
     b7a:	fe 4f       	sbci	r31, 0xFE	; 254
     b7c:	20 83       	st	Z, r18
	
	/* Set or clear dot */
	if (dot)
     b7e:	44 23       	and	r20, r20
     b80:	39 f0       	breq	.+14     	; 0xb90 <_Z18SP10281_WriteDigithch+0x56>
	SP10281_DigitData[dig] &= 0b01111111;
     b82:	fc 01       	movw	r30, r24
     b84:	e4 53       	subi	r30, 0x34	; 52
     b86:	fe 4f       	sbci	r31, 0xFE	; 254
     b88:	80 81       	ld	r24, Z
     b8a:	8f 77       	andi	r24, 0x7F	; 127
     b8c:	80 83       	st	Z, r24
     b8e:	08 95       	ret
	else
	SP10281_DigitData[dig] |= 0b10000000;
     b90:	fc 01       	movw	r30, r24
     b92:	e4 53       	subi	r30, 0x34	; 52
     b94:	fe 4f       	sbci	r31, 0xFE	; 254
     b96:	80 81       	ld	r24, Z
     b98:	80 68       	ori	r24, 0x80	; 128
     b9a:	80 83       	st	Z, r24
     b9c:	08 95       	ret

00000b9e <_Z17SP10281_WriteCharccchhh>:
}

void SP10281_WriteChar(char d2, char d1, char d0, unsigned char dot2, unsigned char dot1, unsigned char dot0)
{
     b9e:	ef 92       	push	r14
     ba0:	0f 93       	push	r16
     ba2:	1f 93       	push	r17
     ba4:	cf 93       	push	r28
     ba6:	df 93       	push	r29
     ba8:	c8 2f       	mov	r28, r24
     baa:	16 2f       	mov	r17, r22
     bac:	64 2f       	mov	r22, r20
     bae:	d2 2f       	mov	r29, r18
     bb0:	4e 2d       	mov	r20, r14
	SP10281_WriteDigit(SP10281_DIGIT_0, d0, dot0);
     bb2:	80 e0       	ldi	r24, 0x00	; 0
     bb4:	0e 94 9d 05 	call	0xb3a	; 0xb3a <_Z18SP10281_WriteDigithch>
	SP10281_WriteDigit(SP10281_DIGIT_1, d1, dot1);
     bb8:	40 2f       	mov	r20, r16
     bba:	61 2f       	mov	r22, r17
     bbc:	81 e0       	ldi	r24, 0x01	; 1
     bbe:	0e 94 9d 05 	call	0xb3a	; 0xb3a <_Z18SP10281_WriteDigithch>
	SP10281_WriteDigit(SP10281_DIGIT_2, d2, dot2);
     bc2:	4d 2f       	mov	r20, r29
     bc4:	6c 2f       	mov	r22, r28
     bc6:	82 e0       	ldi	r24, 0x02	; 2
     bc8:	0e 94 9d 05 	call	0xb3a	; 0xb3a <_Z18SP10281_WriteDigithch>
}
     bcc:	df 91       	pop	r29
     bce:	cf 91       	pop	r28
     bd0:	1f 91       	pop	r17
     bd2:	0f 91       	pop	r16
     bd4:	ef 90       	pop	r14
     bd6:	08 95       	ret

00000bd8 <_Z19SP10281_WriteNumbers>:

/* Writes a number between -99 and 999 to the display */
void SP10281_WriteNumber(short num)
{
     bd8:	cf 93       	push	r28
     bda:	df 93       	push	r29
	short tmp = 0;
	
	if (num >= -99 && num <= 999)
     bdc:	9c 01       	movw	r18, r24
     bde:	2d 59       	subi	r18, 0x9D	; 157
     be0:	3f 4f       	sbci	r19, 0xFF	; 255
     be2:	2b 34       	cpi	r18, 0x4B	; 75
     be4:	34 40       	sbci	r19, 0x04	; 4
     be6:	68 f5       	brcc	.+90     	; 0xc42 <_Z19SP10281_WriteNumbers+0x6a>
     be8:	ec 01       	movw	r28, r24
	{
		if (num < 0)
     bea:	99 23       	and	r25, r25
     bec:	54 f4       	brge	.+20     	; 0xc02 <_Z19SP10281_WriteNumbers+0x2a>
		{
			SP10281_WriteDigit(SP10281_DIGIT_2, '-', 0);
     bee:	40 e0       	ldi	r20, 0x00	; 0
     bf0:	6d e2       	ldi	r22, 0x2D	; 45
     bf2:	82 e0       	ldi	r24, 0x02	; 2
     bf4:	0e 94 9d 05 	call	0xb3a	; 0xb3a <_Z18SP10281_WriteDigithch>
			num = -num;
     bf8:	88 27       	eor	r24, r24
     bfa:	99 27       	eor	r25, r25
     bfc:	8c 1b       	sub	r24, r28
     bfe:	9d 0b       	sbc	r25, r29
     c00:	0e c0       	rjmp	.+28     	; 0xc1e <_Z19SP10281_WriteNumbers+0x46>
		}
		else
		{
			tmp = num / 100;
     c02:	64 e6       	ldi	r22, 0x64	; 100
     c04:	70 e0       	ldi	r23, 0x00	; 0
     c06:	0e 94 46 10 	call	0x208c	; 0x208c <__divmodhi4>
     c0a:	d8 2f       	mov	r29, r24
     c0c:	c9 2f       	mov	r28, r25
			tmp += '0';
			SP10281_WriteDigit(SP10281_DIGIT_2, tmp, 0);
     c0e:	60 5d       	subi	r22, 0xD0	; 208
     c10:	7f 4f       	sbci	r23, 0xFF	; 255
     c12:	40 e0       	ldi	r20, 0x00	; 0
     c14:	82 e0       	ldi	r24, 0x02	; 2
     c16:	0e 94 9d 05 	call	0xb3a	; 0xb3a <_Z18SP10281_WriteDigithch>
			num %= 100;
     c1a:	8d 2f       	mov	r24, r29
     c1c:	9c 2f       	mov	r25, r28
		}
		
		tmp = num / 10;
     c1e:	6a e0       	ldi	r22, 0x0A	; 10
     c20:	70 e0       	ldi	r23, 0x00	; 0
     c22:	0e 94 46 10 	call	0x208c	; 0x208c <__divmodhi4>
     c26:	ec 01       	movw	r28, r24
		tmp += '0';
		SP10281_WriteDigit(SP10281_DIGIT_1, tmp, 0);
     c28:	60 5d       	subi	r22, 0xD0	; 208
     c2a:	7f 4f       	sbci	r23, 0xFF	; 255
     c2c:	40 e0       	ldi	r20, 0x00	; 0
     c2e:	81 e0       	ldi	r24, 0x01	; 1
     c30:	0e 94 9d 05 	call	0xb3a	; 0xb3a <_Z18SP10281_WriteDigithch>
		num %= 10;
		
		tmp = num + '0';
		SP10281_WriteDigit(SP10281_DIGIT_0, tmp, 0);
     c34:	be 01       	movw	r22, r28
     c36:	60 5d       	subi	r22, 0xD0	; 208
     c38:	7f 4f       	sbci	r23, 0xFF	; 255
     c3a:	40 e0       	ldi	r20, 0x00	; 0
     c3c:	80 e0       	ldi	r24, 0x00	; 0
     c3e:	0e 94 9d 05 	call	0xb3a	; 0xb3a <_Z18SP10281_WriteDigithch>
	}
}
     c42:	df 91       	pop	r29
     c44:	cf 91       	pop	r28
     c46:	08 95       	ret

00000c48 <_Z12SP10281_Initv>:
};

void SP10281_Init()
{
	/* Setup GPIOs */
	GPIO_SP10281_DIGIT_DDR |= GPIO_SP10281_DIGIT_MASK;	// Set GPIO output pins for digit control
     c48:	84 b1       	in	r24, 0x04	; 4
     c4a:	80 6e       	ori	r24, 0xE0	; 224
     c4c:	84 b9       	out	0x04, r24	; 4
	GPIO_SP10281_SEGMENT_DDR = 0xFF;					// Set GPIO output pins for individual segments
     c4e:	8f ef       	ldi	r24, 0xFF	; 255
     c50:	81 b9       	out	0x01, r24	; 1
	
	SP10281_WriteNumber(123);
     c52:	8b e7       	ldi	r24, 0x7B	; 123
     c54:	90 e0       	ldi	r25, 0x00	; 0
     c56:	0e 94 ec 05 	call	0xbd8	; 0xbd8 <_Z19SP10281_WriteNumbers>
     c5a:	08 95       	ret

00000c5c <_Z30System_HandleTempSelectTimeoutv>:
			{
				CtrlSwitchRelays[i].Clear();
			}
		}
	}
}
     c5c:	ef 92       	push	r14
     c5e:	0f 93       	push	r16
     c60:	80 91 ff 01 	lds	r24, 0x01FF	; 0x8001ff <SystemState>
     c64:	84 30       	cpi	r24, 0x04	; 4
     c66:	71 f0       	breq	.+28     	; 0xc84 <_Z30System_HandleTempSelectTimeoutv+0x28>
     c68:	18 f4       	brcc	.+6      	; 0xc70 <_Z30System_HandleTempSelectTimeoutv+0x14>
     c6a:	81 30       	cpi	r24, 0x01	; 1
     c6c:	31 f0       	breq	.+12     	; 0xc7a <_Z30System_HandleTempSelectTimeoutv+0x1e>
     c6e:	4d c0       	rjmp	.+154    	; 0xd0a <_Z30System_HandleTempSelectTimeoutv+0xae>
     c70:	86 30       	cpi	r24, 0x06	; 6
     c72:	e9 f0       	breq	.+58     	; 0xcae <_Z30System_HandleTempSelectTimeoutv+0x52>
     c74:	80 31       	cpi	r24, 0x10	; 16
     c76:	99 f1       	breq	.+102    	; 0xcde <_Z30System_HandleTempSelectTimeoutv+0x82>
     c78:	48 c0       	rjmp	.+144    	; 0xd0a <_Z30System_HandleTempSelectTimeoutv+0xae>
     c7a:	80 91 f6 01 	lds	r24, 0x01F6	; 0x8001f6 <System_MidiChannel>
     c7e:	80 93 f8 01 	sts	0x01F8, r24	; 0x8001f8 <TempSelectMidiChannel>
     c82:	43 c0       	rjmp	.+134    	; 0xd0a <_Z30System_HandleTempSelectTimeoutv+0xae>
     c84:	0e 94 2c 05 	call	0xa58	; 0xa58 <_Z23RotaryEncoder_IsPressedv>
     c88:	88 23       	and	r24, r24
     c8a:	29 f0       	breq	.+10     	; 0xc96 <_Z30System_HandleTempSelectTimeoutv+0x3a>
     c8c:	80 91 fb 01 	lds	r24, 0x01FB	; 0x8001fb <TempSelectPreset>
     c90:	80 93 fd 01 	sts	0x01FD, r24	; 0x8001fd <ActivePreset>
     c94:	08 c0       	rjmp	.+16     	; 0xca6 <_Z30System_HandleTempSelectTimeoutv+0x4a>
     c96:	80 91 fd 01 	lds	r24, 0x01FD	; 0x8001fd <ActivePreset>
     c9a:	80 93 fb 01 	sts	0x01FB, r24	; 0x8001fb <TempSelectPreset>
     c9e:	80 91 fd 01 	lds	r24, 0x01FD	; 0x8001fd <ActivePreset>
     ca2:	80 93 fa 01 	sts	0x01FA, r24	; 0x8001fa <LastTempSelectPreset>
     ca6:	83 e0       	ldi	r24, 0x03	; 3
     ca8:	80 93 ff 01 	sts	0x01FF, r24	; 0x8001ff <SystemState>
     cac:	2e c0       	rjmp	.+92     	; 0xd0a <_Z30System_HandleTempSelectTimeoutv+0xae>
     cae:	0e 94 2c 05 	call	0xa58	; 0xa58 <_Z23RotaryEncoder_IsPressedv>
     cb2:	88 23       	and	r24, r24
     cb4:	41 f0       	breq	.+16     	; 0xcc6 <_Z30System_HandleTempSelectTimeoutv+0x6a>
     cb6:	80 91 fb 01 	lds	r24, 0x01FB	; 0x8001fb <TempSelectPreset>
     cba:	80 93 fd 01 	sts	0x01FD, r24	; 0x8001fd <ActivePreset>
     cbe:	83 e0       	ldi	r24, 0x03	; 3
     cc0:	80 93 ff 01 	sts	0x01FF, r24	; 0x8001ff <SystemState>
     cc4:	22 c0       	rjmp	.+68     	; 0xd0a <_Z30System_HandleTempSelectTimeoutv+0xae>
     cc6:	80 91 fd 01 	lds	r24, 0x01FD	; 0x8001fd <ActivePreset>
     cca:	80 93 fb 01 	sts	0x01FB, r24	; 0x8001fb <TempSelectPreset>
     cce:	80 91 fd 01 	lds	r24, 0x01FD	; 0x8001fd <ActivePreset>
     cd2:	80 93 fa 01 	sts	0x01FA, r24	; 0x8001fa <LastTempSelectPreset>
     cd6:	85 e0       	ldi	r24, 0x05	; 5
     cd8:	80 93 ff 01 	sts	0x01FF, r24	; 0x8001ff <SystemState>
     cdc:	16 c0       	rjmp	.+44     	; 0xd0a <_Z30System_HandleTempSelectTimeoutv+0xae>
     cde:	80 91 f1 01 	lds	r24, 0x01F1	; 0x8001f1 <LastTempSelectMidiPC>
     ce2:	80 93 f2 01 	sts	0x01F2, r24	; 0x8001f2 <TempSelectMidiPC>
     ce6:	80 91 f2 01 	lds	r24, 0x01F2	; 0x8001f2 <TempSelectMidiPC>
     cea:	8f 3f       	cpi	r24, 0xFF	; 255
     cec:	49 f4       	brne	.+18     	; 0xd00 <_Z30System_HandleTempSelectTimeoutv+0xa4>
     cee:	e1 2c       	mov	r14, r1
     cf0:	00 e0       	ldi	r16, 0x00	; 0
     cf2:	20 e0       	ldi	r18, 0x00	; 0
     cf4:	46 e6       	ldi	r20, 0x66	; 102
     cf6:	66 e6       	ldi	r22, 0x66	; 102
     cf8:	8f e6       	ldi	r24, 0x6F	; 111
     cfa:	0e 94 cf 05 	call	0xb9e	; 0xb9e <_Z17SP10281_WriteCharccchhh>
     cfe:	05 c0       	rjmp	.+10     	; 0xd0a <_Z30System_HandleTempSelectTimeoutv+0xae>
     d00:	80 91 f2 01 	lds	r24, 0x01F2	; 0x8001f2 <TempSelectMidiPC>
     d04:	90 e0       	ldi	r25, 0x00	; 0
     d06:	0e 94 ec 05 	call	0xbd8	; 0xbd8 <_Z19SP10281_WriteNumbers>
     d0a:	0f 91       	pop	r16
     d0c:	ef 90       	pop	r14
     d0e:	08 95       	ret

00000d10 <_Z26System_HandleMarkSelectionv>:
     d10:	cf 93       	push	r28
     d12:	df 93       	push	r29
     d14:	80 91 ff 01 	lds	r24, 0x01FF	; 0x8001ff <SystemState>
     d18:	8c 30       	cpi	r24, 0x0C	; 12
     d1a:	71 f4       	brne	.+28     	; 0xd38 <_Z26System_HandleMarkSelectionv+0x28>
     d1c:	cf e2       	ldi	r28, 0x2F	; 47
     d1e:	d1 e0       	ldi	r29, 0x01	; 1
     d20:	48 81       	ld	r20, Y
     d22:	64 e1       	ldi	r22, 0x14	; 20
     d24:	80 e0       	ldi	r24, 0x00	; 0
     d26:	0e 94 64 01 	call	0x2c8	; 0x2c8 <_Z17MCP23017_WriteReghhh>
     d2a:	49 81       	ldd	r20, Y+1	; 0x01
     d2c:	4f 70       	andi	r20, 0x0F	; 15
     d2e:	40 64       	ori	r20, 0x40	; 64
     d30:	65 e1       	ldi	r22, 0x15	; 21
     d32:	80 e0       	ldi	r24, 0x00	; 0
     d34:	0e 94 64 01 	call	0x2c8	; 0x2c8 <_Z17MCP23017_WriteReghhh>
     d38:	df 91       	pop	r29
     d3a:	cf 91       	pop	r28
     d3c:	08 95       	ret

00000d3e <_Z25System_HandlePedalCommand3CMDhPh>:
     d3e:	81 3b       	cpi	r24, 0xB1	; 177
     d40:	21 f5       	brne	.+72     	; 0xd8a <_Z25System_HandlePedalCommand3CMDhPh+0x4c>
     d42:	80 91 ff 01 	lds	r24, 0x01FF	; 0x8001ff <SystemState>
     d46:	84 30       	cpi	r24, 0x04	; 4
     d48:	49 f4       	brne	.+18     	; 0xd5c <_Z25System_HandlePedalCommand3CMDhPh+0x1e>
     d4a:	fa 01       	movw	r30, r20
     d4c:	80 81       	ld	r24, Z
     d4e:	0e 94 3b 10 	call	0x2076	; 0x2076 <_Z12Util_Bit2Inth>
     d52:	81 50       	subi	r24, 0x01	; 1
     d54:	80 93 fd 01 	sts	0x01FD, r24	; 0x8001fd <ActivePreset>
     d58:	8c ea       	ldi	r24, 0xAC	; 172
     d5a:	08 95       	ret
     d5c:	80 91 ff 01 	lds	r24, 0x01FF	; 0x8001ff <SystemState>
     d60:	86 30       	cpi	r24, 0x06	; 6
     d62:	49 f4       	brne	.+18     	; 0xd76 <_Z25System_HandlePedalCommand3CMDhPh+0x38>
     d64:	ef e2       	ldi	r30, 0x2F	; 47
     d66:	f1 e0       	ldi	r31, 0x01	; 1
     d68:	90 81       	ld	r25, Z
     d6a:	da 01       	movw	r26, r20
     d6c:	8c 91       	ld	r24, X
     d6e:	89 27       	eor	r24, r25
     d70:	80 83       	st	Z, r24
     d72:	8c ea       	ldi	r24, 0xAC	; 172
     d74:	08 95       	ret
     d76:	80 91 ff 01 	lds	r24, 0x01FF	; 0x8001ff <SystemState>
     d7a:	88 30       	cpi	r24, 0x08	; 8
     d7c:	09 f0       	breq	.+2      	; 0xd80 <_Z25System_HandlePedalCommand3CMDhPh+0x42>
     d7e:	4b c0       	rjmp	.+150    	; 0xe16 <_Z25System_HandlePedalCommand3CMDhPh+0xd8>
     d80:	82 e0       	ldi	r24, 0x02	; 2
     d82:	80 93 ff 01 	sts	0x01FF, r24	; 0x8001ff <SystemState>
     d86:	8c ea       	ldi	r24, 0xAC	; 172
     d88:	08 95       	ret
     d8a:	82 3b       	cpi	r24, 0xB2	; 178
     d8c:	61 f5       	brne	.+88     	; 0xde6 <_Z25System_HandlePedalCommand3CMDhPh+0xa8>
     d8e:	80 91 ff 01 	lds	r24, 0x01FF	; 0x8001ff <SystemState>
     d92:	84 30       	cpi	r24, 0x04	; 4
     d94:	41 f4       	brne	.+16     	; 0xda6 <_Z25System_HandlePedalCommand3CMDhPh+0x68>
     d96:	81 e0       	ldi	r24, 0x01	; 1
     d98:	80 93 f9 01 	sts	0x01F9, r24	; 0x8001f9 <SystemRunMode>
     d9c:	82 e0       	ldi	r24, 0x02	; 2
     d9e:	80 93 ff 01 	sts	0x01FF, r24	; 0x8001ff <SystemState>
     da2:	8c ea       	ldi	r24, 0xAC	; 172
     da4:	08 95       	ret
     da6:	80 91 ff 01 	lds	r24, 0x01FF	; 0x8001ff <SystemState>
     daa:	86 30       	cpi	r24, 0x06	; 6
     dac:	99 f4       	brne	.+38     	; 0xdd4 <_Z25System_HandlePedalCommand3CMDhPh+0x96>
     dae:	fa 01       	movw	r30, r20
     db0:	80 81       	ld	r24, Z
     db2:	98 2f       	mov	r25, r24
     db4:	9f 70       	andi	r25, 0x0F	; 15
     db6:	39 f0       	breq	.+14     	; 0xdc6 <_Z25System_HandlePedalCommand3CMDhPh+0x88>
     db8:	ef e2       	ldi	r30, 0x2F	; 47
     dba:	f1 e0       	ldi	r31, 0x01	; 1
     dbc:	91 81       	ldd	r25, Z+1	; 0x01
     dbe:	89 27       	eor	r24, r25
     dc0:	81 83       	std	Z+1, r24	; 0x01
     dc2:	8c ea       	ldi	r24, 0xAC	; 172
     dc4:	08 95       	ret
     dc6:	10 92 f9 01 	sts	0x01F9, r1	; 0x8001f9 <SystemRunMode>
     dca:	82 e0       	ldi	r24, 0x02	; 2
     dcc:	80 93 ff 01 	sts	0x01FF, r24	; 0x8001ff <SystemState>
     dd0:	8c ea       	ldi	r24, 0xAC	; 172
     dd2:	08 95       	ret
     dd4:	80 91 ff 01 	lds	r24, 0x01FF	; 0x8001ff <SystemState>
     dd8:	88 30       	cpi	r24, 0x08	; 8
     dda:	f9 f4       	brne	.+62     	; 0xe1a <_Z25System_HandlePedalCommand3CMDhPh+0xdc>
     ddc:	82 e0       	ldi	r24, 0x02	; 2
     dde:	80 93 ff 01 	sts	0x01FF, r24	; 0x8001ff <SystemState>
     de2:	8c ea       	ldi	r24, 0xAC	; 172
     de4:	08 95       	ret
     de6:	84 3b       	cpi	r24, 0xB4	; 180
     de8:	d1 f4       	brne	.+52     	; 0xe1e <_Z25System_HandlePedalCommand3CMDhPh+0xe0>
     dea:	80 91 ff 01 	lds	r24, 0x01FF	; 0x8001ff <SystemState>
     dee:	84 30       	cpi	r24, 0x04	; 4
     df0:	21 f0       	breq	.+8      	; 0xdfa <_Z25System_HandlePedalCommand3CMDhPh+0xbc>
     df2:	80 91 ff 01 	lds	r24, 0x01FF	; 0x8001ff <SystemState>
     df6:	86 30       	cpi	r24, 0x06	; 6
     df8:	29 f4       	brne	.+10     	; 0xe04 <_Z25System_HandlePedalCommand3CMDhPh+0xc6>
     dfa:	88 e0       	ldi	r24, 0x08	; 8
     dfc:	80 93 ff 01 	sts	0x01FF, r24	; 0x8001ff <SystemState>
     e00:	8c ea       	ldi	r24, 0xAC	; 172
     e02:	08 95       	ret
     e04:	80 91 ff 01 	lds	r24, 0x01FF	; 0x8001ff <SystemState>
     e08:	88 30       	cpi	r24, 0x08	; 8
     e0a:	59 f4       	brne	.+22     	; 0xe22 <_Z25System_HandlePedalCommand3CMDhPh+0xe4>
     e0c:	82 e0       	ldi	r24, 0x02	; 2
     e0e:	80 93 ff 01 	sts	0x01FF, r24	; 0x8001ff <SystemState>
     e12:	8c ea       	ldi	r24, 0xAC	; 172
     e14:	08 95       	ret
     e16:	8c ea       	ldi	r24, 0xAC	; 172
     e18:	08 95       	ret
     e1a:	8c ea       	ldi	r24, 0xAC	; 172
     e1c:	08 95       	ret
     e1e:	8a e2       	ldi	r24, 0x2A	; 42
     e20:	08 95       	ret
     e22:	8c ea       	ldi	r24, 0xAC	; 172
     e24:	08 95       	ret

00000e26 <_Z30System_HandleMIDIProgramChangev>:
     e26:	e1 ed       	ldi	r30, 0xD1	; 209
     e28:	f1 e0       	ldi	r31, 0x01	; 1
     e2a:	80 e0       	ldi	r24, 0x00	; 0
     e2c:	90 91 45 01 	lds	r25, 0x0145	; 0x800145 <MIDI_ReceivedProgram>
     e30:	22 81       	ldd	r18, Z+2	; 0x02
     e32:	29 13       	cpse	r18, r25
     e34:	02 c0       	rjmp	.+4      	; 0xe3a <_Z30System_HandleMIDIProgramChangev+0x14>
     e36:	80 93 fd 01 	sts	0x01FD, r24	; 0x8001fd <ActivePreset>
     e3a:	8f 5f       	subi	r24, 0xFF	; 255
     e3c:	34 96       	adiw	r30, 0x04	; 4
     e3e:	88 30       	cpi	r24, 0x08	; 8
     e40:	a9 f7       	brne	.-22     	; 0xe2c <_Z30System_HandleMIDIProgramChangev+0x6>
     e42:	08 95       	ret

00000e44 <_Z20System_UpdateUI_LEDsv>:
     e44:	ef 92       	push	r14
     e46:	ff 92       	push	r15
     e48:	0f 93       	push	r16
     e4a:	1f 93       	push	r17
     e4c:	cf 93       	push	r28
     e4e:	df 93       	push	r29
     e50:	00 ed       	ldi	r16, 0xD0	; 208
     e52:	12 e0       	ldi	r17, 0x02	; 2
     e54:	c0 e0       	ldi	r28, 0x00	; 0
     e56:	d0 e0       	ldi	r29, 0x00	; 0
     e58:	0f 2e       	mov	r0, r31
     e5a:	ff e2       	ldi	r31, 0x2F	; 47
     e5c:	ef 2e       	mov	r14, r31
     e5e:	f1 e0       	ldi	r31, 0x01	; 1
     e60:	ff 2e       	mov	r15, r31
     e62:	f0 2d       	mov	r31, r0
     e64:	f7 01       	movw	r30, r14
     e66:	80 81       	ld	r24, Z
     e68:	90 e0       	ldi	r25, 0x00	; 0
     e6a:	0c 2e       	mov	r0, r28
     e6c:	02 c0       	rjmp	.+4      	; 0xe72 <_Z20System_UpdateUI_LEDsv+0x2e>
     e6e:	95 95       	asr	r25
     e70:	87 95       	ror	r24
     e72:	0a 94       	dec	r0
     e74:	e2 f7       	brpl	.-8      	; 0xe6e <_Z20System_UpdateUI_LEDsv+0x2a>
     e76:	80 ff       	sbrs	r24, 0
     e78:	09 c0       	rjmp	.+18     	; 0xe8c <_Z20System_UpdateUI_LEDsv+0x48>
     e7a:	c8 01       	movw	r24, r16
     e7c:	0e 94 8f 01 	call	0x31e	; 0x31e <_ZN10MCP_Output8getStateEv>
     e80:	81 30       	cpi	r24, 0x01	; 1
     e82:	61 f0       	breq	.+24     	; 0xe9c <_Z20System_UpdateUI_LEDsv+0x58>
     e84:	c8 01       	movw	r24, r16
     e86:	0e 94 92 01 	call	0x324	; 0x324 <_ZN10MCP_Output3SetEv>
     e8a:	08 c0       	rjmp	.+16     	; 0xe9c <_Z20System_UpdateUI_LEDsv+0x58>
     e8c:	c8 01       	movw	r24, r16
     e8e:	0e 94 8f 01 	call	0x31e	; 0x31e <_ZN10MCP_Output8getStateEv>
     e92:	88 23       	and	r24, r24
     e94:	19 f0       	breq	.+6      	; 0xe9c <_Z20System_UpdateUI_LEDsv+0x58>
     e96:	c8 01       	movw	r24, r16
     e98:	0e 94 cf 01 	call	0x39e	; 0x39e <_ZN10MCP_Output5ClearEv>
     e9c:	21 96       	adiw	r28, 0x01	; 1
     e9e:	0c 5f       	subi	r16, 0xFC	; 252
     ea0:	1f 4f       	sbci	r17, 0xFF	; 255
     ea2:	c8 30       	cpi	r28, 0x08	; 8
     ea4:	d1 05       	cpc	r29, r1
     ea6:	f1 f6       	brne	.-68     	; 0xe64 <_Z20System_UpdateUI_LEDsv+0x20>
     ea8:	00 ec       	ldi	r16, 0xC0	; 192
     eaa:	12 e0       	ldi	r17, 0x02	; 2
     eac:	c0 e0       	ldi	r28, 0x00	; 0
     eae:	d0 e0       	ldi	r29, 0x00	; 0
     eb0:	0f 2e       	mov	r0, r31
     eb2:	ff e2       	ldi	r31, 0x2F	; 47
     eb4:	ef 2e       	mov	r14, r31
     eb6:	f1 e0       	ldi	r31, 0x01	; 1
     eb8:	ff 2e       	mov	r15, r31
     eba:	f0 2d       	mov	r31, r0
     ebc:	f7 01       	movw	r30, r14
     ebe:	81 81       	ldd	r24, Z+1	; 0x01
     ec0:	90 e0       	ldi	r25, 0x00	; 0
     ec2:	0c 2e       	mov	r0, r28
     ec4:	02 c0       	rjmp	.+4      	; 0xeca <_Z20System_UpdateUI_LEDsv+0x86>
     ec6:	95 95       	asr	r25
     ec8:	87 95       	ror	r24
     eca:	0a 94       	dec	r0
     ecc:	e2 f7       	brpl	.-8      	; 0xec6 <_Z20System_UpdateUI_LEDsv+0x82>
     ece:	80 ff       	sbrs	r24, 0
     ed0:	09 c0       	rjmp	.+18     	; 0xee4 <_Z20System_UpdateUI_LEDsv+0xa0>
     ed2:	c8 01       	movw	r24, r16
     ed4:	0e 94 8f 01 	call	0x31e	; 0x31e <_ZN10MCP_Output8getStateEv>
     ed8:	81 30       	cpi	r24, 0x01	; 1
     eda:	61 f0       	breq	.+24     	; 0xef4 <_Z20System_UpdateUI_LEDsv+0xb0>
     edc:	c8 01       	movw	r24, r16
     ede:	0e 94 92 01 	call	0x324	; 0x324 <_ZN10MCP_Output3SetEv>
     ee2:	08 c0       	rjmp	.+16     	; 0xef4 <_Z20System_UpdateUI_LEDsv+0xb0>
     ee4:	c8 01       	movw	r24, r16
     ee6:	0e 94 8f 01 	call	0x31e	; 0x31e <_ZN10MCP_Output8getStateEv>
     eea:	88 23       	and	r24, r24
     eec:	19 f0       	breq	.+6      	; 0xef4 <_Z20System_UpdateUI_LEDsv+0xb0>
     eee:	c8 01       	movw	r24, r16
     ef0:	0e 94 cf 01 	call	0x39e	; 0x39e <_ZN10MCP_Output5ClearEv>
     ef4:	21 96       	adiw	r28, 0x01	; 1
     ef6:	0c 5f       	subi	r16, 0xFC	; 252
     ef8:	1f 4f       	sbci	r17, 0xFF	; 255
     efa:	c4 30       	cpi	r28, 0x04	; 4
     efc:	d1 05       	cpc	r29, r1
     efe:	f1 f6       	brne	.-68     	; 0xebc <_Z20System_UpdateUI_LEDsv+0x78>
     f00:	df 91       	pop	r29
     f02:	cf 91       	pop	r28
     f04:	1f 91       	pop	r17
     f06:	0f 91       	pop	r16
     f08:	ff 90       	pop	r15
     f0a:	ef 90       	pop	r14
     f0c:	08 95       	ret

00000f0e <_Z31System_HandleRotaryEncoderInputv>:
     f0e:	ef 92       	push	r14
     f10:	0f 93       	push	r16
     f12:	e0 91 ff 01 	lds	r30, 0x01FF	; 0x8001ff <SystemState>
     f16:	8e 2f       	mov	r24, r30
     f18:	90 e0       	ldi	r25, 0x00	; 0
     f1a:	fc 01       	movw	r30, r24
     f1c:	31 97       	sbiw	r30, 0x01	; 1
     f1e:	e0 31       	cpi	r30, 0x10	; 16
     f20:	f1 05       	cpc	r31, r1
     f22:	08 f0       	brcs	.+2      	; 0xf26 <_Z31System_HandleRotaryEncoderInputv+0x18>
     f24:	05 c2       	rjmp	.+1034   	; 0x1330 <_Z31System_HandleRotaryEncoderInputv+0x422>
     f26:	e2 5c       	subi	r30, 0xC2	; 194
     f28:	ff 4f       	sbci	r31, 0xFF	; 255
     f2a:	0c 94 7c 10 	jmp	0x20f8	; 0x20f8 <__tablejump2__>
     f2e:	80 91 c5 01 	lds	r24, 0x01C5	; 0x8001c5 <RotEnc_State>
     f32:	83 30       	cpi	r24, 0x03	; 3
     f34:	29 f4       	brne	.+10     	; 0xf40 <_Z31System_HandleRotaryEncoderInputv+0x32>
     f36:	80 91 f8 01 	lds	r24, 0x01F8	; 0x8001f8 <TempSelectMidiChannel>
     f3a:	80 93 f6 01 	sts	0x01F6, r24	; 0x8001f6 <System_MidiChannel>
     f3e:	f8 c1       	rjmp	.+1008   	; 0x1330 <_Z31System_HandleRotaryEncoderInputv+0x422>
     f40:	80 91 c5 01 	lds	r24, 0x01C5	; 0x8001c5 <RotEnc_State>
     f44:	85 30       	cpi	r24, 0x05	; 5
     f46:	71 f4       	brne	.+28     	; 0xf64 <_Z31System_HandleRotaryEncoderInputv+0x56>
     f48:	80 91 f8 01 	lds	r24, 0x01F8	; 0x8001f8 <TempSelectMidiChannel>
     f4c:	80 93 f6 01 	sts	0x01F6, r24	; 0x8001f6 <System_MidiChannel>
     f50:	60 91 f6 01 	lds	r22, 0x01F6	; 0x8001f6 <System_MidiChannel>
     f54:	80 e0       	ldi	r24, 0x00	; 0
     f56:	90 e0       	ldi	r25, 0x00	; 0
     f58:	0e 94 d2 10 	call	0x21a4	; 0x21a4 <eeprom_write_byte>
     f5c:	82 e0       	ldi	r24, 0x02	; 2
     f5e:	80 93 ff 01 	sts	0x01FF, r24	; 0x8001ff <SystemState>
     f62:	e6 c1       	rjmp	.+972    	; 0x1330 <_Z31System_HandleRotaryEncoderInputv+0x422>
     f64:	80 91 c5 01 	lds	r24, 0x01C5	; 0x8001c5 <RotEnc_State>
     f68:	81 30       	cpi	r24, 0x01	; 1
     f6a:	59 f4       	brne	.+22     	; 0xf82 <_Z31System_HandleRotaryEncoderInputv+0x74>
     f6c:	80 91 f8 01 	lds	r24, 0x01F8	; 0x8001f8 <TempSelectMidiChannel>
     f70:	80 31       	cpi	r24, 0x10	; 16
     f72:	08 f0       	brcs	.+2      	; 0xf76 <_Z31System_HandleRotaryEncoderInputv+0x68>
     f74:	dd c1       	rjmp	.+954    	; 0x1330 <_Z31System_HandleRotaryEncoderInputv+0x422>
     f76:	80 91 f8 01 	lds	r24, 0x01F8	; 0x8001f8 <TempSelectMidiChannel>
     f7a:	8f 5f       	subi	r24, 0xFF	; 255
     f7c:	80 93 f8 01 	sts	0x01F8, r24	; 0x8001f8 <TempSelectMidiChannel>
     f80:	d7 c1       	rjmp	.+942    	; 0x1330 <_Z31System_HandleRotaryEncoderInputv+0x422>
     f82:	80 91 c5 01 	lds	r24, 0x01C5	; 0x8001c5 <RotEnc_State>
     f86:	82 30       	cpi	r24, 0x02	; 2
     f88:	09 f0       	breq	.+2      	; 0xf8c <_Z31System_HandleRotaryEncoderInputv+0x7e>
     f8a:	d2 c1       	rjmp	.+932    	; 0x1330 <_Z31System_HandleRotaryEncoderInputv+0x422>
     f8c:	80 91 f8 01 	lds	r24, 0x01F8	; 0x8001f8 <TempSelectMidiChannel>
     f90:	88 23       	and	r24, r24
     f92:	09 f4       	brne	.+2      	; 0xf96 <_Z31System_HandleRotaryEncoderInputv+0x88>
     f94:	cd c1       	rjmp	.+922    	; 0x1330 <_Z31System_HandleRotaryEncoderInputv+0x422>
     f96:	80 91 f8 01 	lds	r24, 0x01F8	; 0x8001f8 <TempSelectMidiChannel>
     f9a:	81 50       	subi	r24, 0x01	; 1
     f9c:	80 93 f8 01 	sts	0x01F8, r24	; 0x8001f8 <TempSelectMidiChannel>
     fa0:	c7 c1       	rjmp	.+910    	; 0x1330 <_Z31System_HandleRotaryEncoderInputv+0x422>
     fa2:	80 91 c5 01 	lds	r24, 0x01C5	; 0x8001c5 <RotEnc_State>
     fa6:	83 30       	cpi	r24, 0x03	; 3
     fa8:	69 f4       	brne	.+26     	; 0xfc4 <_Z31System_HandleRotaryEncoderInputv+0xb6>
     faa:	80 91 fb 01 	lds	r24, 0x01FB	; 0x8001fb <TempSelectPreset>
     fae:	80 93 fd 01 	sts	0x01FD, r24	; 0x8001fd <ActivePreset>
     fb2:	80 91 f9 01 	lds	r24, 0x01F9	; 0x8001f9 <SystemRunMode>
     fb6:	81 30       	cpi	r24, 0x01	; 1
     fb8:	09 f0       	breq	.+2      	; 0xfbc <_Z31System_HandleRotaryEncoderInputv+0xae>
     fba:	ba c1       	rjmp	.+884    	; 0x1330 <_Z31System_HandleRotaryEncoderInputv+0x422>
     fbc:	83 e0       	ldi	r24, 0x03	; 3
     fbe:	80 93 ff 01 	sts	0x01FF, r24	; 0x8001ff <SystemState>
     fc2:	b6 c1       	rjmp	.+876    	; 0x1330 <_Z31System_HandleRotaryEncoderInputv+0x422>
     fc4:	80 91 c5 01 	lds	r24, 0x01C5	; 0x8001c5 <RotEnc_State>
     fc8:	85 30       	cpi	r24, 0x05	; 5
     fca:	41 f4       	brne	.+16     	; 0xfdc <_Z31System_HandleRotaryEncoderInputv+0xce>
     fcc:	80 91 fb 01 	lds	r24, 0x01FB	; 0x8001fb <TempSelectPreset>
     fd0:	80 93 fd 01 	sts	0x01FD, r24	; 0x8001fd <ActivePreset>
     fd4:	89 e0       	ldi	r24, 0x09	; 9
     fd6:	80 93 ff 01 	sts	0x01FF, r24	; 0x8001ff <SystemState>
     fda:	aa c1       	rjmp	.+852    	; 0x1330 <_Z31System_HandleRotaryEncoderInputv+0x422>
     fdc:	80 91 c5 01 	lds	r24, 0x01C5	; 0x8001c5 <RotEnc_State>
     fe0:	81 30       	cpi	r24, 0x01	; 1
     fe2:	59 f4       	brne	.+22     	; 0xffa <_Z31System_HandleRotaryEncoderInputv+0xec>
     fe4:	80 91 fb 01 	lds	r24, 0x01FB	; 0x8001fb <TempSelectPreset>
     fe8:	87 30       	cpi	r24, 0x07	; 7
     fea:	08 f0       	brcs	.+2      	; 0xfee <_Z31System_HandleRotaryEncoderInputv+0xe0>
     fec:	a1 c1       	rjmp	.+834    	; 0x1330 <_Z31System_HandleRotaryEncoderInputv+0x422>
     fee:	80 91 fb 01 	lds	r24, 0x01FB	; 0x8001fb <TempSelectPreset>
     ff2:	8f 5f       	subi	r24, 0xFF	; 255
     ff4:	80 93 fb 01 	sts	0x01FB, r24	; 0x8001fb <TempSelectPreset>
     ff8:	9b c1       	rjmp	.+822    	; 0x1330 <_Z31System_HandleRotaryEncoderInputv+0x422>
     ffa:	80 91 c5 01 	lds	r24, 0x01C5	; 0x8001c5 <RotEnc_State>
     ffe:	82 30       	cpi	r24, 0x02	; 2
    1000:	09 f0       	breq	.+2      	; 0x1004 <_Z31System_HandleRotaryEncoderInputv+0xf6>
    1002:	96 c1       	rjmp	.+812    	; 0x1330 <_Z31System_HandleRotaryEncoderInputv+0x422>
    1004:	80 91 fb 01 	lds	r24, 0x01FB	; 0x8001fb <TempSelectPreset>
    1008:	88 23       	and	r24, r24
    100a:	09 f4       	brne	.+2      	; 0x100e <_Z31System_HandleRotaryEncoderInputv+0x100>
    100c:	91 c1       	rjmp	.+802    	; 0x1330 <_Z31System_HandleRotaryEncoderInputv+0x422>
    100e:	80 91 fb 01 	lds	r24, 0x01FB	; 0x8001fb <TempSelectPreset>
    1012:	81 50       	subi	r24, 0x01	; 1
    1014:	80 93 fb 01 	sts	0x01FB, r24	; 0x8001fb <TempSelectPreset>
    1018:	8b c1       	rjmp	.+790    	; 0x1330 <_Z31System_HandleRotaryEncoderInputv+0x422>
    101a:	80 91 c5 01 	lds	r24, 0x01C5	; 0x8001c5 <RotEnc_State>
    101e:	83 30       	cpi	r24, 0x03	; 3
    1020:	c9 f4       	brne	.+50     	; 0x1054 <_Z31System_HandleRotaryEncoderInputv+0x146>
    1022:	80 91 f5 01 	lds	r24, 0x01F5	; 0x8001f5 <SystemUIMode>
    1026:	81 11       	cpse	r24, r1
    1028:	04 c0       	rjmp	.+8      	; 0x1032 <_Z31System_HandleRotaryEncoderInputv+0x124>
    102a:	82 e0       	ldi	r24, 0x02	; 2
    102c:	80 93 ff 01 	sts	0x01FF, r24	; 0x8001ff <SystemState>
    1030:	7f c1       	rjmp	.+766    	; 0x1330 <_Z31System_HandleRotaryEncoderInputv+0x422>
    1032:	80 91 f5 01 	lds	r24, 0x01F5	; 0x8001f5 <SystemUIMode>
    1036:	81 30       	cpi	r24, 0x01	; 1
    1038:	21 f4       	brne	.+8      	; 0x1042 <_Z31System_HandleRotaryEncoderInputv+0x134>
    103a:	8b e0       	ldi	r24, 0x0B	; 11
    103c:	80 93 ff 01 	sts	0x01FF, r24	; 0x8001ff <SystemState>
    1040:	77 c1       	rjmp	.+750    	; 0x1330 <_Z31System_HandleRotaryEncoderInputv+0x422>
    1042:	80 91 f5 01 	lds	r24, 0x01F5	; 0x8001f5 <SystemUIMode>
    1046:	82 30       	cpi	r24, 0x02	; 2
    1048:	09 f0       	breq	.+2      	; 0x104c <_Z31System_HandleRotaryEncoderInputv+0x13e>
    104a:	72 c1       	rjmp	.+740    	; 0x1330 <_Z31System_HandleRotaryEncoderInputv+0x422>
    104c:	8d e0       	ldi	r24, 0x0D	; 13
    104e:	80 93 ff 01 	sts	0x01FF, r24	; 0x8001ff <SystemState>
    1052:	6e c1       	rjmp	.+732    	; 0x1330 <_Z31System_HandleRotaryEncoderInputv+0x422>
    1054:	80 91 c5 01 	lds	r24, 0x01C5	; 0x8001c5 <RotEnc_State>
    1058:	85 30       	cpi	r24, 0x05	; 5
    105a:	09 f4       	brne	.+2      	; 0x105e <_Z31System_HandleRotaryEncoderInputv+0x150>
    105c:	69 c1       	rjmp	.+722    	; 0x1330 <_Z31System_HandleRotaryEncoderInputv+0x422>
    105e:	80 91 c5 01 	lds	r24, 0x01C5	; 0x8001c5 <RotEnc_State>
    1062:	81 30       	cpi	r24, 0x01	; 1
    1064:	59 f4       	brne	.+22     	; 0x107c <_Z31System_HandleRotaryEncoderInputv+0x16e>
    1066:	80 91 f5 01 	lds	r24, 0x01F5	; 0x8001f5 <SystemUIMode>
    106a:	82 30       	cpi	r24, 0x02	; 2
    106c:	08 f0       	brcs	.+2      	; 0x1070 <_Z31System_HandleRotaryEncoderInputv+0x162>
    106e:	60 c1       	rjmp	.+704    	; 0x1330 <_Z31System_HandleRotaryEncoderInputv+0x422>
    1070:	80 91 f5 01 	lds	r24, 0x01F5	; 0x8001f5 <SystemUIMode>
    1074:	8f 5f       	subi	r24, 0xFF	; 255
    1076:	80 93 f5 01 	sts	0x01F5, r24	; 0x8001f5 <SystemUIMode>
    107a:	5a c1       	rjmp	.+692    	; 0x1330 <_Z31System_HandleRotaryEncoderInputv+0x422>
    107c:	80 91 c5 01 	lds	r24, 0x01C5	; 0x8001c5 <RotEnc_State>
    1080:	82 30       	cpi	r24, 0x02	; 2
    1082:	09 f0       	breq	.+2      	; 0x1086 <_Z31System_HandleRotaryEncoderInputv+0x178>
    1084:	55 c1       	rjmp	.+682    	; 0x1330 <_Z31System_HandleRotaryEncoderInputv+0x422>
    1086:	80 91 f5 01 	lds	r24, 0x01F5	; 0x8001f5 <SystemUIMode>
    108a:	88 23       	and	r24, r24
    108c:	09 f4       	brne	.+2      	; 0x1090 <_Z31System_HandleRotaryEncoderInputv+0x182>
    108e:	50 c1       	rjmp	.+672    	; 0x1330 <_Z31System_HandleRotaryEncoderInputv+0x422>
    1090:	80 91 f5 01 	lds	r24, 0x01F5	; 0x8001f5 <SystemUIMode>
    1094:	81 50       	subi	r24, 0x01	; 1
    1096:	80 93 f5 01 	sts	0x01F5, r24	; 0x8001f5 <SystemUIMode>
    109a:	4a c1       	rjmp	.+660    	; 0x1330 <_Z31System_HandleRotaryEncoderInputv+0x422>
    109c:	80 91 c5 01 	lds	r24, 0x01C5	; 0x8001c5 <RotEnc_State>
    10a0:	83 30       	cpi	r24, 0x03	; 3
    10a2:	29 f5       	brne	.+74     	; 0x10ee <_Z31System_HandleRotaryEncoderInputv+0x1e0>
    10a4:	80 91 d0 01 	lds	r24, 0x01D0	; 0x8001d0 <UserEditSelection>
    10a8:	88 30       	cpi	r24, 0x08	; 8
    10aa:	78 f4       	brcc	.+30     	; 0x10ca <_Z31System_HandleRotaryEncoderInputv+0x1bc>
    10ac:	20 91 d0 01 	lds	r18, 0x01D0	; 0x8001d0 <UserEditSelection>
    10b0:	ef e2       	ldi	r30, 0x2F	; 47
    10b2:	f1 e0       	ldi	r31, 0x01	; 1
    10b4:	81 e0       	ldi	r24, 0x01	; 1
    10b6:	90 e0       	ldi	r25, 0x00	; 0
    10b8:	02 c0       	rjmp	.+4      	; 0x10be <_Z31System_HandleRotaryEncoderInputv+0x1b0>
    10ba:	88 0f       	add	r24, r24
    10bc:	99 1f       	adc	r25, r25
    10be:	2a 95       	dec	r18
    10c0:	e2 f7       	brpl	.-8      	; 0x10ba <_Z31System_HandleRotaryEncoderInputv+0x1ac>
    10c2:	90 81       	ld	r25, Z
    10c4:	89 27       	eor	r24, r25
    10c6:	80 83       	st	Z, r24
    10c8:	0f c0       	rjmp	.+30     	; 0x10e8 <_Z31System_HandleRotaryEncoderInputv+0x1da>
    10ca:	20 91 d0 01 	lds	r18, 0x01D0	; 0x8001d0 <UserEditSelection>
    10ce:	ef e2       	ldi	r30, 0x2F	; 47
    10d0:	f1 e0       	ldi	r31, 0x01	; 1
    10d2:	28 50       	subi	r18, 0x08	; 8
    10d4:	81 e0       	ldi	r24, 0x01	; 1
    10d6:	90 e0       	ldi	r25, 0x00	; 0
    10d8:	02 c0       	rjmp	.+4      	; 0x10de <_Z31System_HandleRotaryEncoderInputv+0x1d0>
    10da:	88 0f       	add	r24, r24
    10dc:	99 1f       	adc	r25, r25
    10de:	2a 95       	dec	r18
    10e0:	e2 f7       	brpl	.-8      	; 0x10da <_Z31System_HandleRotaryEncoderInputv+0x1cc>
    10e2:	91 81       	ldd	r25, Z+1	; 0x01
    10e4:	89 27       	eor	r24, r25
    10e6:	81 83       	std	Z+1, r24	; 0x01
    10e8:	0e 94 22 07 	call	0xe44	; 0xe44 <_Z20System_UpdateUI_LEDsv>
    10ec:	21 c1       	rjmp	.+578    	; 0x1330 <_Z31System_HandleRotaryEncoderInputv+0x422>
    10ee:	80 91 c5 01 	lds	r24, 0x01C5	; 0x8001c5 <RotEnc_State>
    10f2:	85 30       	cpi	r24, 0x05	; 5
    10f4:	61 f5       	brne	.+88     	; 0x114e <_Z31System_HandleRotaryEncoderInputv+0x240>
    10f6:	60 91 fd 01 	lds	r22, 0x01FD	; 0x8001fd <ActivePreset>
    10fa:	70 e0       	ldi	r23, 0x00	; 0
    10fc:	66 0f       	add	r22, r22
    10fe:	77 1f       	adc	r23, r23
    1100:	66 0f       	add	r22, r22
    1102:	77 1f       	adc	r23, r23
    1104:	6c 59       	subi	r22, 0x9C	; 156
    1106:	7f 4f       	sbci	r23, 0xFF	; 255
    1108:	42 e0       	ldi	r20, 0x02	; 2
    110a:	50 e0       	ldi	r21, 0x00	; 0
    110c:	8f e2       	ldi	r24, 0x2F	; 47
    110e:	91 e0       	ldi	r25, 0x01	; 1
    1110:	0e 94 c8 10 	call	0x2190	; 0x2190 <eeprom_write_block>
    1114:	e0 91 fd 01 	lds	r30, 0x01FD	; 0x8001fd <ActivePreset>
    1118:	f0 e0       	ldi	r31, 0x00	; 0
    111a:	ee 0f       	add	r30, r30
    111c:	ff 1f       	adc	r31, r31
    111e:	ee 0f       	add	r30, r30
    1120:	ff 1f       	adc	r31, r31
    1122:	ef 52       	subi	r30, 0x2F	; 47
    1124:	fe 4f       	sbci	r31, 0xFE	; 254
    1126:	af e2       	ldi	r26, 0x2F	; 47
    1128:	b1 e0       	ldi	r27, 0x01	; 1
    112a:	8c 91       	ld	r24, X
    112c:	80 83       	st	Z, r24
    112e:	e0 91 fd 01 	lds	r30, 0x01FD	; 0x8001fd <ActivePreset>
    1132:	f0 e0       	ldi	r31, 0x00	; 0
    1134:	ee 0f       	add	r30, r30
    1136:	ff 1f       	adc	r31, r31
    1138:	ee 0f       	add	r30, r30
    113a:	ff 1f       	adc	r31, r31
    113c:	ef 52       	subi	r30, 0x2F	; 47
    113e:	fe 4f       	sbci	r31, 0xFE	; 254
    1140:	11 96       	adiw	r26, 0x01	; 1
    1142:	8c 91       	ld	r24, X
    1144:	81 83       	std	Z+1, r24	; 0x01
    1146:	89 e0       	ldi	r24, 0x09	; 9
    1148:	80 93 ff 01 	sts	0x01FF, r24	; 0x8001ff <SystemState>
    114c:	f1 c0       	rjmp	.+482    	; 0x1330 <_Z31System_HandleRotaryEncoderInputv+0x422>
    114e:	80 91 c5 01 	lds	r24, 0x01C5	; 0x8001c5 <RotEnc_State>
    1152:	81 30       	cpi	r24, 0x01	; 1
    1154:	59 f4       	brne	.+22     	; 0x116c <_Z31System_HandleRotaryEncoderInputv+0x25e>
    1156:	80 91 d0 01 	lds	r24, 0x01D0	; 0x8001d0 <UserEditSelection>
    115a:	8b 30       	cpi	r24, 0x0B	; 11
    115c:	08 f0       	brcs	.+2      	; 0x1160 <_Z31System_HandleRotaryEncoderInputv+0x252>
    115e:	e8 c0       	rjmp	.+464    	; 0x1330 <_Z31System_HandleRotaryEncoderInputv+0x422>
    1160:	80 91 d0 01 	lds	r24, 0x01D0	; 0x8001d0 <UserEditSelection>
    1164:	8f 5f       	subi	r24, 0xFF	; 255
    1166:	80 93 d0 01 	sts	0x01D0, r24	; 0x8001d0 <UserEditSelection>
    116a:	e2 c0       	rjmp	.+452    	; 0x1330 <_Z31System_HandleRotaryEncoderInputv+0x422>
    116c:	80 91 c5 01 	lds	r24, 0x01C5	; 0x8001c5 <RotEnc_State>
    1170:	82 30       	cpi	r24, 0x02	; 2
    1172:	09 f0       	breq	.+2      	; 0x1176 <_Z31System_HandleRotaryEncoderInputv+0x268>
    1174:	dd c0       	rjmp	.+442    	; 0x1330 <_Z31System_HandleRotaryEncoderInputv+0x422>
    1176:	80 91 d0 01 	lds	r24, 0x01D0	; 0x8001d0 <UserEditSelection>
    117a:	88 23       	and	r24, r24
    117c:	09 f4       	brne	.+2      	; 0x1180 <_Z31System_HandleRotaryEncoderInputv+0x272>
    117e:	d8 c0       	rjmp	.+432    	; 0x1330 <_Z31System_HandleRotaryEncoderInputv+0x422>
    1180:	80 91 d0 01 	lds	r24, 0x01D0	; 0x8001d0 <UserEditSelection>
    1184:	81 50       	subi	r24, 0x01	; 1
    1186:	80 93 d0 01 	sts	0x01D0, r24	; 0x8001d0 <UserEditSelection>
    118a:	d2 c0       	rjmp	.+420    	; 0x1330 <_Z31System_HandleRotaryEncoderInputv+0x422>
    118c:	80 91 c5 01 	lds	r24, 0x01C5	; 0x8001c5 <RotEnc_State>
    1190:	83 30       	cpi	r24, 0x03	; 3
    1192:	21 f4       	brne	.+8      	; 0x119c <_Z31System_HandleRotaryEncoderInputv+0x28e>
    1194:	8f e0       	ldi	r24, 0x0F	; 15
    1196:	80 93 ff 01 	sts	0x01FF, r24	; 0x8001ff <SystemState>
    119a:	ca c0       	rjmp	.+404    	; 0x1330 <_Z31System_HandleRotaryEncoderInputv+0x422>
    119c:	80 91 c5 01 	lds	r24, 0x01C5	; 0x8001c5 <RotEnc_State>
    11a0:	85 30       	cpi	r24, 0x05	; 5
    11a2:	21 f4       	brne	.+8      	; 0x11ac <_Z31System_HandleRotaryEncoderInputv+0x29e>
    11a4:	89 e0       	ldi	r24, 0x09	; 9
    11a6:	80 93 ff 01 	sts	0x01FF, r24	; 0x8001ff <SystemState>
    11aa:	c2 c0       	rjmp	.+388    	; 0x1330 <_Z31System_HandleRotaryEncoderInputv+0x422>
    11ac:	80 91 c5 01 	lds	r24, 0x01C5	; 0x8001c5 <RotEnc_State>
    11b0:	81 30       	cpi	r24, 0x01	; 1
    11b2:	59 f4       	brne	.+22     	; 0x11ca <_Z31System_HandleRotaryEncoderInputv+0x2bc>
    11b4:	80 93 f3 01 	sts	0x01F3, r24	; 0x8001f3 <SetMidiEdit>
    11b8:	e1 2c       	mov	r14, r1
    11ba:	00 e0       	ldi	r16, 0x00	; 0
    11bc:	20 e0       	ldi	r18, 0x00	; 0
    11be:	44 e7       	ldi	r20, 0x74	; 116
    11c0:	65 e7       	ldi	r22, 0x75	; 117
    11c2:	8f e6       	ldi	r24, 0x6F	; 111
    11c4:	0e 94 cf 05 	call	0xb9e	; 0xb9e <_Z17SP10281_WriteCharccchhh>
    11c8:	b3 c0       	rjmp	.+358    	; 0x1330 <_Z31System_HandleRotaryEncoderInputv+0x422>
    11ca:	80 91 c5 01 	lds	r24, 0x01C5	; 0x8001c5 <RotEnc_State>
    11ce:	82 30       	cpi	r24, 0x02	; 2
    11d0:	09 f0       	breq	.+2      	; 0x11d4 <_Z31System_HandleRotaryEncoderInputv+0x2c6>
    11d2:	ae c0       	rjmp	.+348    	; 0x1330 <_Z31System_HandleRotaryEncoderInputv+0x422>
    11d4:	10 92 f3 01 	sts	0x01F3, r1	; 0x8001f3 <SetMidiEdit>
    11d8:	e1 2c       	mov	r14, r1
    11da:	00 e0       	ldi	r16, 0x00	; 0
    11dc:	20 e0       	ldi	r18, 0x00	; 0
    11de:	40 e2       	ldi	r20, 0x20	; 32
    11e0:	6e e6       	ldi	r22, 0x6E	; 110
    11e2:	89 e6       	ldi	r24, 0x69	; 105
    11e4:	0e 94 cf 05 	call	0xb9e	; 0xb9e <_Z17SP10281_WriteCharccchhh>
    11e8:	a3 c0       	rjmp	.+326    	; 0x1330 <_Z31System_HandleRotaryEncoderInputv+0x422>
    11ea:	80 91 c5 01 	lds	r24, 0x01C5	; 0x8001c5 <RotEnc_State>
    11ee:	83 30       	cpi	r24, 0x03	; 3
    11f0:	49 f4       	brne	.+18     	; 0x1204 <_Z31System_HandleRotaryEncoderInputv+0x2f6>
    11f2:	10 92 05 02 	sts	0x0205, r1	; 0x800205 <System_TempSelectOvfCnt+0x1>
    11f6:	10 92 04 02 	sts	0x0204, r1	; 0x800204 <System_TempSelectOvfCnt>
    11fa:	80 91 f2 01 	lds	r24, 0x01F2	; 0x8001f2 <TempSelectMidiPC>
    11fe:	80 93 f1 01 	sts	0x01F1, r24	; 0x8001f1 <LastTempSelectMidiPC>
    1202:	96 c0       	rjmp	.+300    	; 0x1330 <_Z31System_HandleRotaryEncoderInputv+0x422>
    1204:	80 91 c5 01 	lds	r24, 0x01C5	; 0x8001c5 <RotEnc_State>
    1208:	85 30       	cpi	r24, 0x05	; 5
    120a:	d9 f5       	brne	.+118    	; 0x1282 <_Z31System_HandleRotaryEncoderInputv+0x374>
    120c:	80 91 f3 01 	lds	r24, 0x01F3	; 0x8001f3 <SetMidiEdit>
    1210:	81 11       	cpse	r24, r1
    1212:	1a c0       	rjmp	.+52     	; 0x1248 <_Z31System_HandleRotaryEncoderInputv+0x33a>
    1214:	e0 91 fd 01 	lds	r30, 0x01FD	; 0x8001fd <ActivePreset>
    1218:	80 91 f2 01 	lds	r24, 0x01F2	; 0x8001f2 <TempSelectMidiPC>
    121c:	f0 e0       	ldi	r31, 0x00	; 0
    121e:	ee 0f       	add	r30, r30
    1220:	ff 1f       	adc	r31, r31
    1222:	ee 0f       	add	r30, r30
    1224:	ff 1f       	adc	r31, r31
    1226:	ef 52       	subi	r30, 0x2F	; 47
    1228:	fe 4f       	sbci	r31, 0xFE	; 254
    122a:	82 83       	std	Z+2, r24	; 0x02
    122c:	60 91 f2 01 	lds	r22, 0x01F2	; 0x8001f2 <TempSelectMidiPC>
    1230:	80 91 fd 01 	lds	r24, 0x01FD	; 0x8001fd <ActivePreset>
    1234:	90 e0       	ldi	r25, 0x00	; 0
    1236:	88 0f       	add	r24, r24
    1238:	99 1f       	adc	r25, r25
    123a:	88 0f       	add	r24, r24
    123c:	99 1f       	adc	r25, r25
    123e:	8a 59       	subi	r24, 0x9A	; 154
    1240:	9f 4f       	sbci	r25, 0xFF	; 255
    1242:	0e 94 d2 10 	call	0x21a4	; 0x21a4 <eeprom_write_byte>
    1246:	19 c0       	rjmp	.+50     	; 0x127a <_Z31System_HandleRotaryEncoderInputv+0x36c>
    1248:	e0 91 fd 01 	lds	r30, 0x01FD	; 0x8001fd <ActivePreset>
    124c:	80 91 f2 01 	lds	r24, 0x01F2	; 0x8001f2 <TempSelectMidiPC>
    1250:	f0 e0       	ldi	r31, 0x00	; 0
    1252:	ee 0f       	add	r30, r30
    1254:	ff 1f       	adc	r31, r31
    1256:	ee 0f       	add	r30, r30
    1258:	ff 1f       	adc	r31, r31
    125a:	ef 52       	subi	r30, 0x2F	; 47
    125c:	fe 4f       	sbci	r31, 0xFE	; 254
    125e:	83 83       	std	Z+3, r24	; 0x03
    1260:	60 91 f2 01 	lds	r22, 0x01F2	; 0x8001f2 <TempSelectMidiPC>
    1264:	80 91 fd 01 	lds	r24, 0x01FD	; 0x8001fd <ActivePreset>
    1268:	90 e0       	ldi	r25, 0x00	; 0
    126a:	88 0f       	add	r24, r24
    126c:	99 1f       	adc	r25, r25
    126e:	88 0f       	add	r24, r24
    1270:	99 1f       	adc	r25, r25
    1272:	89 59       	subi	r24, 0x99	; 153
    1274:	9f 4f       	sbci	r25, 0xFF	; 255
    1276:	0e 94 d2 10 	call	0x21a4	; 0x21a4 <eeprom_write_byte>
    127a:	8d e0       	ldi	r24, 0x0D	; 13
    127c:	80 93 ff 01 	sts	0x01FF, r24	; 0x8001ff <SystemState>
    1280:	57 c0       	rjmp	.+174    	; 0x1330 <_Z31System_HandleRotaryEncoderInputv+0x422>
    1282:	80 91 c5 01 	lds	r24, 0x01C5	; 0x8001c5 <RotEnc_State>
    1286:	81 30       	cpi	r24, 0x01	; 1
    1288:	11 f5       	brne	.+68     	; 0x12ce <_Z31System_HandleRotaryEncoderInputv+0x3c0>
    128a:	80 91 f2 01 	lds	r24, 0x01F2	; 0x8001f2 <TempSelectMidiPC>
    128e:	8f 37       	cpi	r24, 0x7F	; 127
    1290:	29 f0       	breq	.+10     	; 0x129c <_Z31System_HandleRotaryEncoderInputv+0x38e>
    1292:	80 91 f2 01 	lds	r24, 0x01F2	; 0x8001f2 <TempSelectMidiPC>
    1296:	8f 5f       	subi	r24, 0xFF	; 255
    1298:	80 93 f2 01 	sts	0x01F2, r24	; 0x8001f2 <TempSelectMidiPC>
    129c:	80 91 f2 01 	lds	r24, 0x01F2	; 0x8001f2 <TempSelectMidiPC>
    12a0:	8f 3f       	cpi	r24, 0xFF	; 255
    12a2:	49 f4       	brne	.+18     	; 0x12b6 <_Z31System_HandleRotaryEncoderInputv+0x3a8>
    12a4:	e1 2c       	mov	r14, r1
    12a6:	00 e0       	ldi	r16, 0x00	; 0
    12a8:	20 e0       	ldi	r18, 0x00	; 0
    12aa:	46 e6       	ldi	r20, 0x66	; 102
    12ac:	66 e6       	ldi	r22, 0x66	; 102
    12ae:	8f e6       	ldi	r24, 0x6F	; 111
    12b0:	0e 94 cf 05 	call	0xb9e	; 0xb9e <_Z17SP10281_WriteCharccchhh>
    12b4:	05 c0       	rjmp	.+10     	; 0x12c0 <_Z31System_HandleRotaryEncoderInputv+0x3b2>
    12b6:	80 91 f2 01 	lds	r24, 0x01F2	; 0x8001f2 <TempSelectMidiPC>
    12ba:	90 e0       	ldi	r25, 0x00	; 0
    12bc:	0e 94 ec 05 	call	0xbd8	; 0xbd8 <_Z19SP10281_WriteNumbers>
    12c0:	81 e0       	ldi	r24, 0x01	; 1
    12c2:	90 e0       	ldi	r25, 0x00	; 0
    12c4:	90 93 05 02 	sts	0x0205, r25	; 0x800205 <System_TempSelectOvfCnt+0x1>
    12c8:	80 93 04 02 	sts	0x0204, r24	; 0x800204 <System_TempSelectOvfCnt>
    12cc:	31 c0       	rjmp	.+98     	; 0x1330 <_Z31System_HandleRotaryEncoderInputv+0x422>
    12ce:	80 91 c5 01 	lds	r24, 0x01C5	; 0x8001c5 <RotEnc_State>
    12d2:	82 30       	cpi	r24, 0x02	; 2
    12d4:	69 f5       	brne	.+90     	; 0x1330 <_Z31System_HandleRotaryEncoderInputv+0x422>
    12d6:	80 91 f2 01 	lds	r24, 0x01F2	; 0x8001f2 <TempSelectMidiPC>
    12da:	88 23       	and	r24, r24
    12dc:	24 f0       	brlt	.+8      	; 0x12e6 <_Z31System_HandleRotaryEncoderInputv+0x3d8>
    12de:	80 91 f2 01 	lds	r24, 0x01F2	; 0x8001f2 <TempSelectMidiPC>
    12e2:	81 11       	cpse	r24, r1
    12e4:	04 c0       	rjmp	.+8      	; 0x12ee <_Z31System_HandleRotaryEncoderInputv+0x3e0>
    12e6:	8f ef       	ldi	r24, 0xFF	; 255
    12e8:	80 93 f2 01 	sts	0x01F2, r24	; 0x8001f2 <TempSelectMidiPC>
    12ec:	09 c0       	rjmp	.+18     	; 0x1300 <_Z31System_HandleRotaryEncoderInputv+0x3f2>
    12ee:	80 91 f2 01 	lds	r24, 0x01F2	; 0x8001f2 <TempSelectMidiPC>
    12f2:	88 23       	and	r24, r24
    12f4:	29 f0       	breq	.+10     	; 0x1300 <_Z31System_HandleRotaryEncoderInputv+0x3f2>
    12f6:	80 91 f2 01 	lds	r24, 0x01F2	; 0x8001f2 <TempSelectMidiPC>
    12fa:	81 50       	subi	r24, 0x01	; 1
    12fc:	80 93 f2 01 	sts	0x01F2, r24	; 0x8001f2 <TempSelectMidiPC>
    1300:	80 91 f2 01 	lds	r24, 0x01F2	; 0x8001f2 <TempSelectMidiPC>
    1304:	8f 3f       	cpi	r24, 0xFF	; 255
    1306:	49 f4       	brne	.+18     	; 0x131a <_Z31System_HandleRotaryEncoderInputv+0x40c>
    1308:	e1 2c       	mov	r14, r1
    130a:	00 e0       	ldi	r16, 0x00	; 0
    130c:	20 e0       	ldi	r18, 0x00	; 0
    130e:	46 e6       	ldi	r20, 0x66	; 102
    1310:	66 e6       	ldi	r22, 0x66	; 102
    1312:	8f e6       	ldi	r24, 0x6F	; 111
    1314:	0e 94 cf 05 	call	0xb9e	; 0xb9e <_Z17SP10281_WriteCharccchhh>
    1318:	05 c0       	rjmp	.+10     	; 0x1324 <_Z31System_HandleRotaryEncoderInputv+0x416>
    131a:	80 91 f2 01 	lds	r24, 0x01F2	; 0x8001f2 <TempSelectMidiPC>
    131e:	90 e0       	ldi	r25, 0x00	; 0
    1320:	0e 94 ec 05 	call	0xbd8	; 0xbd8 <_Z19SP10281_WriteNumbers>
    1324:	81 e0       	ldi	r24, 0x01	; 1
    1326:	90 e0       	ldi	r25, 0x00	; 0
    1328:	90 93 05 02 	sts	0x0205, r25	; 0x800205 <System_TempSelectOvfCnt+0x1>
    132c:	80 93 04 02 	sts	0x0204, r24	; 0x800204 <System_TempSelectOvfCnt>
    1330:	0f 91       	pop	r16
    1332:	ef 90       	pop	r14
    1334:	08 95       	ret

00001336 <_Z19System_ChangePresetv>:

void System_ChangePreset()
{
	LoopModePreset = PresetTable[ActivePreset];
    1336:	e0 91 fd 01 	lds	r30, 0x01FD	; 0x8001fd <ActivePreset>
    133a:	f0 e0       	ldi	r31, 0x00	; 0
    133c:	ee 0f       	add	r30, r30
    133e:	ff 1f       	adc	r31, r31
    1340:	ee 0f       	add	r30, r30
    1342:	ff 1f       	adc	r31, r31
    1344:	ef 52       	subi	r30, 0x2F	; 47
    1346:	fe 4f       	sbci	r31, 0xFE	; 254
    1348:	80 81       	ld	r24, Z
    134a:	91 81       	ldd	r25, Z+1	; 0x01
    134c:	a2 81       	ldd	r26, Z+2	; 0x02
    134e:	b3 81       	ldd	r27, Z+3	; 0x03
    1350:	80 93 2f 01 	sts	0x012F, r24	; 0x80012f <LoopModePreset>
    1354:	90 93 30 01 	sts	0x0130, r25	; 0x800130 <LoopModePreset+0x1>
    1358:	a0 93 31 01 	sts	0x0131, r26	; 0x800131 <LoopModePreset+0x2>
    135c:	b0 93 32 01 	sts	0x0132, r27	; 0x800132 <LoopModePreset+0x3>
	
	/* Update relays */
	//System_UpdateUI_Relays();
				
	/* Send MIDI PC message if MIDI Out is set for preset */
	if (PresetTable[ActivePreset].MIDI_PC_Out != MIDI_PC_OFF)
    1360:	e0 91 fd 01 	lds	r30, 0x01FD	; 0x8001fd <ActivePreset>
    1364:	f0 e0       	ldi	r31, 0x00	; 0
    1366:	ee 0f       	add	r30, r30
    1368:	ff 1f       	adc	r31, r31
    136a:	ee 0f       	add	r30, r30
    136c:	ff 1f       	adc	r31, r31
    136e:	ef 52       	subi	r30, 0x2F	; 47
    1370:	fe 4f       	sbci	r31, 0xFE	; 254
    1372:	83 81       	ldd	r24, Z+3	; 0x03
    1374:	8f 3f       	cpi	r24, 0xFF	; 255
    1376:	61 f0       	breq	.+24     	; 0x1390 <_Z19System_ChangePresetv+0x5a>
	{
		MIDI_TransmitProgramChange(PresetTable[ActivePreset].MIDI_PC_Out);
    1378:	e0 91 fd 01 	lds	r30, 0x01FD	; 0x8001fd <ActivePreset>
    137c:	f0 e0       	ldi	r31, 0x00	; 0
    137e:	ee 0f       	add	r30, r30
    1380:	ff 1f       	adc	r31, r31
    1382:	ee 0f       	add	r30, r30
    1384:	ff 1f       	adc	r31, r31
    1386:	ef 52       	subi	r30, 0x2F	; 47
    1388:	fe 4f       	sbci	r31, 0xFE	; 254
    138a:	83 81       	ldd	r24, Z+3	; 0x03
    138c:	0e 94 b6 02 	call	0x56c	; 0x56c <_Z26MIDI_TransmitProgramChangeh>
	}
				
	/* Update Pedal display */
	PedalComm_QueueCommand(UpdateTunerLEDs, 1, 0);
    1390:	40 e0       	ldi	r20, 0x00	; 0
    1392:	50 e0       	ldi	r21, 0x00	; 0
    1394:	61 e0       	ldi	r22, 0x01	; 1
    1396:	83 ed       	ldi	r24, 0xD3	; 211
    1398:	0e 94 e4 03 	call	0x7c8	; 0x7c8 <_Z22PedalComm_QueueCommand3CMDhPh>
	PedalComm_QueueCommand(Update7segments, 4, (uint8_t*)"Pre ");
    139c:	43 e3       	ldi	r20, 0x33	; 51
    139e:	51 e0       	ldi	r21, 0x01	; 1
    13a0:	64 e0       	ldi	r22, 0x04	; 4
    13a2:	87 ed       	ldi	r24, 0xD7	; 215
    13a4:	0e 94 e4 03 	call	0x7c8	; 0x7c8 <_Z22PedalComm_QueueCommand3CMDhPh>
	PedalComm_QueueCommand(UpdatePresetLoopLEDs, 1, (uint8_t*)&ActivePreset);
    13a8:	4d ef       	ldi	r20, 0xFD	; 253
    13aa:	51 e0       	ldi	r21, 0x01	; 1
    13ac:	61 e0       	ldi	r22, 0x01	; 1
    13ae:	80 ed       	ldi	r24, 0xD0	; 208
    13b0:	0e 94 e4 03 	call	0x7c8	; 0x7c8 <_Z22PedalComm_QueueCommand3CMDhPh>
				
	/* Update 7-segment display */
	SP10281_WriteNumber(ActivePreset + 1);
    13b4:	80 91 fd 01 	lds	r24, 0x01FD	; 0x8001fd <ActivePreset>
    13b8:	90 e0       	ldi	r25, 0x00	; 0
    13ba:	01 96       	adiw	r24, 0x01	; 1
    13bc:	0e 94 ec 05 	call	0xbd8	; 0xbd8 <_Z19SP10281_WriteNumbers>
				
	/* Update UI LEDs */
	System_UpdateUI_LEDs();
    13c0:	0e 94 22 07 	call	0xe44	; 0xe44 <_Z20System_UpdateUI_LEDsv>
    13c4:	08 95       	ret

000013c6 <_Z10System_Runv>:

volatile uint8_t UserEditSelection = 0;
volatile uint8_t LastUserEditSelection = 0;

void System_Run()
{
    13c6:	ef 92       	push	r14
    13c8:	0f 93       	push	r16
	switch (SystemState)
    13ca:	e0 91 ff 01 	lds	r30, 0x01FF	; 0x8001ff <SystemState>
    13ce:	8e 2f       	mov	r24, r30
    13d0:	90 e0       	ldi	r25, 0x00	; 0
    13d2:	80 31       	cpi	r24, 0x10	; 16
    13d4:	91 05       	cpc	r25, r1
    13d6:	08 f0       	brcs	.+2      	; 0x13da <_Z10System_Runv+0x14>
    13d8:	68 c2       	rjmp	.+1232   	; 0x18aa <_Z10System_Runv+0x4e4>
    13da:	fc 01       	movw	r30, r24
    13dc:	e2 5b       	subi	r30, 0xB2	; 178
    13de:	ff 4f       	sbci	r31, 0xFF	; 255
    13e0:	0c 94 7c 10 	jmp	0x20f8	; 0x20f8 <__tablejump2__>
	{
		case BOOT_UP:
			/* Fill preset table from EEPROM */
			eeprom_read_block((void*)PresetTable, (void*)EEPROM_PRESETS_BASE_ADDR, sizeof(Preset) * NUMBER_OF_PRESETS);
    13e4:	40 e2       	ldi	r20, 0x20	; 32
    13e6:	50 e0       	ldi	r21, 0x00	; 0
    13e8:	64 e6       	ldi	r22, 0x64	; 100
    13ea:	70 e0       	ldi	r23, 0x00	; 0
    13ec:	81 ed       	ldi	r24, 0xD1	; 209
    13ee:	91 e0       	ldi	r25, 0x01	; 1
    13f0:	0e 94 b0 10 	call	0x2160	; 0x2160 <eeprom_read_block>
			
			/* Get device MIDI channel from EEPROM */
			System_MidiChannel = (MIDI_Channel)eeprom_read_byte((uint8_t*)EEPROM_MIDI_CH_ADDR);
    13f4:	80 e0       	ldi	r24, 0x00	; 0
    13f6:	90 e0       	ldi	r25, 0x00	; 0
    13f8:	0e 94 c0 10 	call	0x2180	; 0x2180 <eeprom_read_byte>
    13fc:	80 93 f6 01 	sts	0x01F6, r24	; 0x8001f6 <System_MidiChannel>
			
			if (System_MidiChannel > MIDI_CH_MAX)
    1400:	80 91 f6 01 	lds	r24, 0x01F6	; 0x8001f6 <System_MidiChannel>
    1404:	81 31       	cpi	r24, 0x11	; 17
    1406:	40 f0       	brcs	.+16     	; 0x1418 <_Z10System_Runv+0x52>
			{
				System_MidiChannel = MIDI_CH_OMNI;
    1408:	10 92 f6 01 	sts	0x01F6, r1	; 0x8001f6 <System_MidiChannel>
				eeprom_write_byte((uint8_t*)EEPROM_MIDI_CH_ADDR, System_MidiChannel);
    140c:	60 91 f6 01 	lds	r22, 0x01F6	; 0x8001f6 <System_MidiChannel>
    1410:	80 e0       	ldi	r24, 0x00	; 0
    1412:	90 e0       	ldi	r25, 0x00	; 0
    1414:	0e 94 d2 10 	call	0x21a4	; 0x21a4 <eeprom_write_byte>
			}
			
			/* Check if button pressed for MIDI channel edit */
			if (RotaryEncoder_IsPressed())
    1418:	0e 94 2c 05 	call	0xa58	; 0xa58 <_Z23RotaryEncoder_IsPressedv>
    141c:	88 23       	and	r24, r24
    141e:	11 f1       	breq	.+68     	; 0x1464 <_Z10System_Runv+0x9e>
			{
				/* Update UI mode LEDs */
				ModeRunLED.Clear();
    1420:	88 ef       	ldi	r24, 0xF8	; 248
    1422:	92 e0       	ldi	r25, 0x02	; 2
    1424:	0e 94 cf 01 	call	0x39e	; 0x39e <_ZN10MCP_Output5ClearEv>
				ModeEditPresetLED.Clear();
    1428:	84 ef       	ldi	r24, 0xF4	; 244
    142a:	92 e0       	ldi	r25, 0x02	; 2
    142c:	0e 94 cf 01 	call	0x39e	; 0x39e <_ZN10MCP_Output5ClearEv>
				ModeEditMidiLED.Set();
    1430:	80 ef       	ldi	r24, 0xF0	; 240
    1432:	92 e0       	ldi	r25, 0x02	; 2
    1434:	0e 94 92 01 	call	0x324	; 0x324 <_ZN10MCP_Output3SetEv>
				
				if (System_MidiChannel == MIDI_CH_OMNI)
    1438:	80 91 f6 01 	lds	r24, 0x01F6	; 0x8001f6 <System_MidiChannel>
    143c:	81 11       	cpse	r24, r1
    143e:	09 c0       	rjmp	.+18     	; 0x1452 <_Z10System_Runv+0x8c>
				{
					SP10281_WriteChar('o', 'm', 'n', 0, 0, 0);
    1440:	e1 2c       	mov	r14, r1
    1442:	00 e0       	ldi	r16, 0x00	; 0
    1444:	20 e0       	ldi	r18, 0x00	; 0
    1446:	4e e6       	ldi	r20, 0x6E	; 110
    1448:	6d e6       	ldi	r22, 0x6D	; 109
    144a:	8f e6       	ldi	r24, 0x6F	; 111
    144c:	0e 94 cf 05 	call	0xb9e	; 0xb9e <_Z17SP10281_WriteCharccchhh>
    1450:	05 c0       	rjmp	.+10     	; 0x145c <_Z10System_Runv+0x96>
				} 
				else
				{
					SP10281_WriteNumber(System_MidiChannel);
    1452:	80 91 f6 01 	lds	r24, 0x01F6	; 0x8001f6 <System_MidiChannel>
    1456:	90 e0       	ldi	r25, 0x00	; 0
    1458:	0e 94 ec 05 	call	0xbd8	; 0xbd8 <_Z19SP10281_WriteNumbers>
				}
				
				SystemState = EDIT_MIDI_CHANNEL;
    145c:	81 e0       	ldi	r24, 0x01	; 1
    145e:	80 93 ff 01 	sts	0x01FF, r24	; 0x8001ff <SystemState>
    1462:	23 c2       	rjmp	.+1094   	; 0x18aa <_Z10System_Runv+0x4e4>
			} 
			else
			{
				SystemState = INITIALIZE_SYSTEM;
    1464:	82 e0       	ldi	r24, 0x02	; 2
    1466:	80 93 ff 01 	sts	0x01FF, r24	; 0x8001ff <SystemState>
    146a:	1f c2       	rjmp	.+1086   	; 0x18aa <_Z10System_Runv+0x4e4>
			
			break;
		
		case EDIT_MIDI_CHANNEL:
			/* If user is selecting new MIDI channel */
			if (TempSelectMidiChannel != LastTempSelectMidiChannel)
    146c:	90 91 f8 01 	lds	r25, 0x01F8	; 0x8001f8 <TempSelectMidiChannel>
    1470:	80 91 f7 01 	lds	r24, 0x01F7	; 0x8001f7 <LastTempSelectMidiChannel>
    1474:	98 17       	cp	r25, r24
    1476:	c1 f0       	breq	.+48     	; 0x14a8 <_Z10System_Runv+0xe2>
			{
				/* Write selected MIDI channel to 7-segment display */
				if (TempSelectMidiChannel == MIDI_CH_OMNI)
    1478:	80 91 f8 01 	lds	r24, 0x01F8	; 0x8001f8 <TempSelectMidiChannel>
    147c:	81 11       	cpse	r24, r1
    147e:	09 c0       	rjmp	.+18     	; 0x1492 <_Z10System_Runv+0xcc>
				{
					SP10281_WriteChar('o', 'm', 'n', 0, 0, 0);
    1480:	e1 2c       	mov	r14, r1
    1482:	00 e0       	ldi	r16, 0x00	; 0
    1484:	20 e0       	ldi	r18, 0x00	; 0
    1486:	4e e6       	ldi	r20, 0x6E	; 110
    1488:	6d e6       	ldi	r22, 0x6D	; 109
    148a:	8f e6       	ldi	r24, 0x6F	; 111
    148c:	0e 94 cf 05 	call	0xb9e	; 0xb9e <_Z17SP10281_WriteCharccchhh>
    1490:	05 c0       	rjmp	.+10     	; 0x149c <_Z10System_Runv+0xd6>
				}
				else
				{
					SP10281_WriteNumber(TempSelectMidiChannel);
    1492:	80 91 f8 01 	lds	r24, 0x01F8	; 0x8001f8 <TempSelectMidiChannel>
    1496:	90 e0       	ldi	r25, 0x00	; 0
    1498:	0e 94 ec 05 	call	0xbd8	; 0xbd8 <_Z19SP10281_WriteNumbers>
				}
				
				/* Start timer */
				System_TempSelectOvfCnt = 1;
    149c:	81 e0       	ldi	r24, 0x01	; 1
    149e:	90 e0       	ldi	r25, 0x00	; 0
    14a0:	90 93 05 02 	sts	0x0205, r25	; 0x800205 <System_TempSelectOvfCnt+0x1>
    14a4:	80 93 04 02 	sts	0x0204, r24	; 0x800204 <System_TempSelectOvfCnt>
			}
			
			LastTempSelectMidiChannel = TempSelectMidiChannel;
    14a8:	80 91 f8 01 	lds	r24, 0x01F8	; 0x8001f8 <TempSelectMidiChannel>
    14ac:	80 93 f7 01 	sts	0x01F7, r24	; 0x8001f7 <LastTempSelectMidiChannel>
			
			break;
    14b0:	fc c1       	rjmp	.+1016   	; 0x18aa <_Z10System_Runv+0x4e4>
		
		case INITIALIZE_SYSTEM:			
			/* Write active preset to 7-segment display */
			SP10281_WriteNumber(ActivePreset+1);
    14b2:	80 91 fd 01 	lds	r24, 0x01FD	; 0x8001fd <ActivePreset>
    14b6:	90 e0       	ldi	r25, 0x00	; 0
    14b8:	01 96       	adiw	r24, 0x01	; 1
    14ba:	0e 94 ec 05 	call	0xbd8	; 0xbd8 <_Z19SP10281_WriteNumbers>
			
			/* Update mode LEDs */
			ModeRunLED.Set();
    14be:	88 ef       	ldi	r24, 0xF8	; 248
    14c0:	92 e0       	ldi	r25, 0x02	; 2
    14c2:	0e 94 92 01 	call	0x324	; 0x324 <_ZN10MCP_Output3SetEv>
			ModeEditPresetLED.Clear();
    14c6:	84 ef       	ldi	r24, 0xF4	; 244
    14c8:	92 e0       	ldi	r25, 0x02	; 2
    14ca:	0e 94 cf 01 	call	0x39e	; 0x39e <_ZN10MCP_Output5ClearEv>
			ModeEditMidiLED.Clear();
    14ce:	80 ef       	ldi	r24, 0xF0	; 240
    14d0:	92 e0       	ldi	r25, 0x02	; 2
    14d2:	0e 94 cf 01 	call	0x39e	; 0x39e <_ZN10MCP_Output5ClearEv>
			
			/* Set appropriate System State */
			if (SystemRunMode == RUN_PRESET_MODE)
    14d6:	80 91 f9 01 	lds	r24, 0x01F9	; 0x8001f9 <SystemRunMode>
    14da:	81 11       	cpse	r24, r1
    14dc:	04 c0       	rjmp	.+8      	; 0x14e6 <_Z10System_Runv+0x120>
			{
				SystemState = ENTER_RUN_PRESET_CTRL;
    14de:	83 e0       	ldi	r24, 0x03	; 3
    14e0:	80 93 ff 01 	sts	0x01FF, r24	; 0x8001ff <SystemState>
    14e4:	e2 c1       	rjmp	.+964    	; 0x18aa <_Z10System_Runv+0x4e4>
			}
			else if (SystemRunMode == RUN_LOOP_MODE)
    14e6:	80 91 f9 01 	lds	r24, 0x01F9	; 0x8001f9 <SystemRunMode>
    14ea:	81 30       	cpi	r24, 0x01	; 1
    14ec:	09 f0       	breq	.+2      	; 0x14f0 <_Z10System_Runv+0x12a>
    14ee:	dd c1       	rjmp	.+954    	; 0x18aa <_Z10System_Runv+0x4e4>
			{
				SystemState = ENTER_RUN_LOOP_CTRL;
    14f0:	85 e0       	ldi	r24, 0x05	; 5
    14f2:	80 93 ff 01 	sts	0x01FF, r24	; 0x8001ff <SystemState>
    14f6:	d9 c1       	rjmp	.+946    	; 0x18aa <_Z10System_Runv+0x4e4>
			
			break;
		
		case ENTER_RUN_PRESET_CTRL:
			/* Update state variables */
			SystemRunMode = RUN_PRESET_MODE;
    14f8:	10 92 f9 01 	sts	0x01F9, r1	; 0x8001f9 <SystemRunMode>
			SystemState = RUN_PRESET_CTRL;
    14fc:	84 e0       	ldi	r24, 0x04	; 4
    14fe:	80 93 ff 01 	sts	0x01FF, r24	; 0x8001ff <SystemState>
		
			/* Change LastActivePreset to force update system */
			if (ActivePreset > PRESET_1)
    1502:	80 91 fd 01 	lds	r24, 0x01FD	; 0x8001fd <ActivePreset>
    1506:	88 23       	and	r24, r24
    1508:	31 f0       	breq	.+12     	; 0x1516 <_Z10System_Runv+0x150>
			{
				LastActivePreset = System_Preset(LastActivePreset - 1);
    150a:	80 91 fc 01 	lds	r24, 0x01FC	; 0x8001fc <LastActivePreset>
    150e:	81 50       	subi	r24, 0x01	; 1
    1510:	80 93 fc 01 	sts	0x01FC, r24	; 0x8001fc <LastActivePreset>
    1514:	09 c0       	rjmp	.+18     	; 0x1528 <_Z10System_Runv+0x162>
			}
			else if (ActivePreset < PRESET_8)
    1516:	80 91 fd 01 	lds	r24, 0x01FD	; 0x8001fd <ActivePreset>
    151a:	87 30       	cpi	r24, 0x07	; 7
    151c:	28 f4       	brcc	.+10     	; 0x1528 <_Z10System_Runv+0x162>
			{
				LastActivePreset = System_Preset(LastActivePreset + 1);
    151e:	80 91 fc 01 	lds	r24, 0x01FC	; 0x8001fc <LastActivePreset>
    1522:	8f 5f       	subi	r24, 0xFF	; 255
    1524:	80 93 fc 01 	sts	0x01FC, r24	; 0x8001fc <LastActivePreset>
			}
			
		case RUN_PRESET_CTRL:
			/* If active preset has changed since last cycle then update system */
			if (ActivePreset != LastActivePreset)
    1528:	90 91 fd 01 	lds	r25, 0x01FD	; 0x8001fd <ActivePreset>
    152c:	80 91 fc 01 	lds	r24, 0x01FC	; 0x8001fc <LastActivePreset>
    1530:	98 13       	cpse	r25, r24
			{
				System_ChangePreset();
    1532:	0e 94 9b 09 	call	0x1336	; 0x1336 <_Z19System_ChangePresetv>
			}
			
			/* If user is browsing presets */
			if (TempSelectPreset != LastTempSelectPreset)
    1536:	90 91 fb 01 	lds	r25, 0x01FB	; 0x8001fb <TempSelectPreset>
    153a:	80 91 fa 01 	lds	r24, 0x01FA	; 0x8001fa <LastTempSelectPreset>
    153e:	98 17       	cp	r25, r24
    1540:	09 f4       	brne	.+2      	; 0x1544 <_Z10System_Runv+0x17e>
    1542:	b3 c1       	rjmp	.+870    	; 0x18aa <_Z10System_Runv+0x4e4>
			{
				/* Update 7-segment display */
				SP10281_WriteNumber(TempSelectPreset + 1);
    1544:	80 91 fb 01 	lds	r24, 0x01FB	; 0x8001fb <TempSelectPreset>
    1548:	90 e0       	ldi	r25, 0x00	; 0
    154a:	01 96       	adiw	r24, 0x01	; 1
    154c:	0e 94 ec 05 	call	0xbd8	; 0xbd8 <_Z19SP10281_WriteNumbers>
								
				/* Update UI LEDs */
				LoopModePreset = PresetTable[TempSelectPreset];
    1550:	e0 91 fb 01 	lds	r30, 0x01FB	; 0x8001fb <TempSelectPreset>
    1554:	f0 e0       	ldi	r31, 0x00	; 0
    1556:	ee 0f       	add	r30, r30
    1558:	ff 1f       	adc	r31, r31
    155a:	ee 0f       	add	r30, r30
    155c:	ff 1f       	adc	r31, r31
    155e:	ef 52       	subi	r30, 0x2F	; 47
    1560:	fe 4f       	sbci	r31, 0xFE	; 254
    1562:	80 81       	ld	r24, Z
    1564:	91 81       	ldd	r25, Z+1	; 0x01
    1566:	a2 81       	ldd	r26, Z+2	; 0x02
    1568:	b3 81       	ldd	r27, Z+3	; 0x03
    156a:	80 93 2f 01 	sts	0x012F, r24	; 0x80012f <LoopModePreset>
    156e:	90 93 30 01 	sts	0x0130, r25	; 0x800130 <LoopModePreset+0x1>
    1572:	a0 93 31 01 	sts	0x0131, r26	; 0x800131 <LoopModePreset+0x2>
    1576:	b0 93 32 01 	sts	0x0132, r27	; 0x800132 <LoopModePreset+0x3>
				System_UpdateUI_LEDs();
    157a:	0e 94 22 07 	call	0xe44	; 0xe44 <_Z20System_UpdateUI_LEDsv>
				
				/* Start timer */
				System_TempSelectOvfCnt = 1;
    157e:	81 e0       	ldi	r24, 0x01	; 1
    1580:	90 e0       	ldi	r25, 0x00	; 0
    1582:	90 93 05 02 	sts	0x0205, r25	; 0x800205 <System_TempSelectOvfCnt+0x1>
    1586:	80 93 04 02 	sts	0x0204, r24	; 0x800204 <System_TempSelectOvfCnt>
    158a:	8f c1       	rjmp	.+798    	; 0x18aa <_Z10System_Runv+0x4e4>
			
			break;
		
		case ENTER_RUN_LOOP_CTRL:
			/* Update Pedal display */
			PedalComm_QueueCommand(UpdateTunerLEDs, 1, 0);
    158c:	40 e0       	ldi	r20, 0x00	; 0
    158e:	50 e0       	ldi	r21, 0x00	; 0
    1590:	61 e0       	ldi	r22, 0x01	; 1
    1592:	83 ed       	ldi	r24, 0xD3	; 211
    1594:	0e 94 e4 03 	call	0x7c8	; 0x7c8 <_Z22PedalComm_QueueCommand3CMDhPh>
			PedalComm_QueueCommand(Update7segments, 4, (uint8_t*)"Loop");
    1598:	48 e3       	ldi	r20, 0x38	; 56
    159a:	51 e0       	ldi	r21, 0x01	; 1
    159c:	64 e0       	ldi	r22, 0x04	; 4
    159e:	87 ed       	ldi	r24, 0xD7	; 215
    15a0:	0e 94 e4 03 	call	0x7c8	; 0x7c8 <_Z22PedalComm_QueueCommand3CMDhPh>
			PedalComm_QueueCommand(UpdatePresetLoopLEDs, 1, (uint8_t*)&LoopModePreset.Active_Loops);
    15a4:	4f e2       	ldi	r20, 0x2F	; 47
    15a6:	51 e0       	ldi	r21, 0x01	; 1
    15a8:	61 e0       	ldi	r22, 0x01	; 1
    15aa:	80 ed       	ldi	r24, 0xD0	; 208
    15ac:	0e 94 e4 03 	call	0x7c8	; 0x7c8 <_Z22PedalComm_QueueCommand3CMDhPh>
			
			/* Update UI LEDs */
			System_UpdateUI_LEDs();
    15b0:	0e 94 22 07 	call	0xe44	; 0xe44 <_Z20System_UpdateUI_LEDsv>
			
			/* Update 7-segment display */
			SP10281_WriteChar('M', 'L', 'C', 0, 0, 0);
    15b4:	e1 2c       	mov	r14, r1
    15b6:	00 e0       	ldi	r16, 0x00	; 0
    15b8:	20 e0       	ldi	r18, 0x00	; 0
    15ba:	43 e4       	ldi	r20, 0x43	; 67
    15bc:	6c e4       	ldi	r22, 0x4C	; 76
    15be:	8d e4       	ldi	r24, 0x4D	; 77
    15c0:	0e 94 cf 05 	call	0xb9e	; 0xb9e <_Z17SP10281_WriteCharccchhh>
			
			/* Update state variables */
			SystemRunMode = RUN_LOOP_MODE;
    15c4:	81 e0       	ldi	r24, 0x01	; 1
    15c6:	80 93 f9 01 	sts	0x01F9, r24	; 0x8001f9 <SystemRunMode>
			SystemState = RUN_LOOP_CTRL;
    15ca:	86 e0       	ldi	r24, 0x06	; 6
    15cc:	80 93 ff 01 	sts	0x01FF, r24	; 0x8001ff <SystemState>
inline bool operator!=(const Preset& lhs, const Preset& rhs)
{
	return	(	lhs.Active_Loops != rhs.Active_Loops
			||	lhs.Active_CtrlSwitches != rhs.Active_CtrlSwitches
			||	lhs.MIDI_PC_In != rhs.MIDI_PC_In
			||	lhs.MIDI_PC_Out != rhs.MIDI_PC_Out);
    15d0:	90 91 2f 01 	lds	r25, 0x012F	; 0x80012f <LoopModePreset>
    15d4:	80 91 2b 01 	lds	r24, 0x012B	; 0x80012b <LastLoopModePreset>
    15d8:	98 13       	cpse	r25, r24
    15da:	11 c0       	rjmp	.+34     	; 0x15fe <_Z10System_Runv+0x238>
}

inline bool operator!=(const Preset& lhs, const Preset& rhs)
{
	return	(	lhs.Active_Loops != rhs.Active_Loops
			||	lhs.Active_CtrlSwitches != rhs.Active_CtrlSwitches
    15dc:	90 91 30 01 	lds	r25, 0x0130	; 0x800130 <LoopModePreset+0x1>
    15e0:	80 91 2c 01 	lds	r24, 0x012C	; 0x80012c <LastLoopModePreset+0x1>
    15e4:	98 13       	cpse	r25, r24
    15e6:	0b c0       	rjmp	.+22     	; 0x15fe <_Z10System_Runv+0x238>
			||	lhs.MIDI_PC_In != rhs.MIDI_PC_In
    15e8:	90 91 31 01 	lds	r25, 0x0131	; 0x800131 <LoopModePreset+0x2>
    15ec:	80 91 2d 01 	lds	r24, 0x012D	; 0x80012d <LastLoopModePreset+0x2>
    15f0:	98 13       	cpse	r25, r24
    15f2:	05 c0       	rjmp	.+10     	; 0x15fe <_Z10System_Runv+0x238>
			
		case RUN_LOOP_CTRL:
			/* If active loops or ctrl switches has changed since last cycle */
			if (LoopModePreset != LastLoopModePreset)
    15f4:	90 91 32 01 	lds	r25, 0x0132	; 0x800132 <LoopModePreset+0x3>
    15f8:	80 91 2e 01 	lds	r24, 0x012E	; 0x80012e <LastLoopModePreset+0x3>
    15fc:	98 13       	cpse	r25, r24
			{
				/* Update relays */
				//System_UpdateUI_Relays();
				
				/* Update UI LEDs */
				System_UpdateUI_LEDs();
    15fe:	0e 94 22 07 	call	0xe44	; 0xe44 <_Z20System_UpdateUI_LEDsv>
			}
			
			/* If user is browsing presets */
			if (TempSelectPreset != LastTempSelectPreset)
    1602:	90 91 fb 01 	lds	r25, 0x01FB	; 0x8001fb <TempSelectPreset>
    1606:	80 91 fa 01 	lds	r24, 0x01FA	; 0x8001fa <LastTempSelectPreset>
    160a:	98 17       	cp	r25, r24
    160c:	09 f4       	brne	.+2      	; 0x1610 <_Z10System_Runv+0x24a>
    160e:	4d c1       	rjmp	.+666    	; 0x18aa <_Z10System_Runv+0x4e4>
			{
				/* Update 7-segment display */
				SP10281_WriteNumber(TempSelectPreset + 1);
    1610:	80 91 fb 01 	lds	r24, 0x01FB	; 0x8001fb <TempSelectPreset>
    1614:	90 e0       	ldi	r25, 0x00	; 0
    1616:	01 96       	adiw	r24, 0x01	; 1
    1618:	0e 94 ec 05 	call	0xbd8	; 0xbd8 <_Z19SP10281_WriteNumbers>
							
				/* Update UI LEDs */
				LoopModePreset = PresetTable[TempSelectPreset];
    161c:	e0 91 fb 01 	lds	r30, 0x01FB	; 0x8001fb <TempSelectPreset>
    1620:	f0 e0       	ldi	r31, 0x00	; 0
    1622:	ee 0f       	add	r30, r30
    1624:	ff 1f       	adc	r31, r31
    1626:	ee 0f       	add	r30, r30
    1628:	ff 1f       	adc	r31, r31
    162a:	ef 52       	subi	r30, 0x2F	; 47
    162c:	fe 4f       	sbci	r31, 0xFE	; 254
    162e:	80 81       	ld	r24, Z
    1630:	91 81       	ldd	r25, Z+1	; 0x01
    1632:	a2 81       	ldd	r26, Z+2	; 0x02
    1634:	b3 81       	ldd	r27, Z+3	; 0x03
    1636:	80 93 2f 01 	sts	0x012F, r24	; 0x80012f <LoopModePreset>
    163a:	90 93 30 01 	sts	0x0130, r25	; 0x800130 <LoopModePreset+0x1>
    163e:	a0 93 31 01 	sts	0x0131, r26	; 0x800131 <LoopModePreset+0x2>
    1642:	b0 93 32 01 	sts	0x0132, r27	; 0x800132 <LoopModePreset+0x3>
				System_UpdateUI_LEDs();
    1646:	0e 94 22 07 	call	0xe44	; 0xe44 <_Z20System_UpdateUI_LEDsv>
				
				/* Start timer */
				System_TempSelectOvfCnt = 1;
    164a:	81 e0       	ldi	r24, 0x01	; 1
    164c:	90 e0       	ldi	r25, 0x00	; 0
    164e:	90 93 05 02 	sts	0x0205, r25	; 0x800205 <System_TempSelectOvfCnt+0x1>
    1652:	80 93 04 02 	sts	0x0204, r24	; 0x800204 <System_TempSelectOvfCnt>
    1656:	29 c1       	rjmp	.+594    	; 0x18aa <_Z10System_Runv+0x4e4>
		case TUNER:
			break;
		
		case ENTER_EDIT_UI_MODE:
			/* Change LastSystemUIMode to force update mode LEDs */
			if (SystemUIMode < MODE_EDIT_MIDI)
    1658:	80 91 f5 01 	lds	r24, 0x01F5	; 0x8001f5 <SystemUIMode>
    165c:	82 30       	cpi	r24, 0x02	; 2
    165e:	30 f4       	brcc	.+12     	; 0x166c <_Z10System_Runv+0x2a6>
			{
				LastSystemUIMode = System_UI_Mode(SystemUIMode + 1);
    1660:	80 91 f5 01 	lds	r24, 0x01F5	; 0x8001f5 <SystemUIMode>
    1664:	8f 5f       	subi	r24, 0xFF	; 255
    1666:	80 93 f4 01 	sts	0x01F4, r24	; 0x8001f4 <LastSystemUIMode>
    166a:	09 c0       	rjmp	.+18     	; 0x167e <_Z10System_Runv+0x2b8>
			}
			else if (SystemUIMode > MODE_RUN)
    166c:	80 91 f5 01 	lds	r24, 0x01F5	; 0x8001f5 <SystemUIMode>
    1670:	88 23       	and	r24, r24
    1672:	29 f0       	breq	.+10     	; 0x167e <_Z10System_Runv+0x2b8>
			{
				LastSystemUIMode = System_UI_Mode(SystemUIMode - 1);
    1674:	80 91 f5 01 	lds	r24, 0x01F5	; 0x8001f5 <SystemUIMode>
    1678:	81 50       	subi	r24, 0x01	; 1
    167a:	80 93 f4 01 	sts	0x01F4, r24	; 0x8001f4 <LastSystemUIMode>
			}
			
			System_ChangePreset();
    167e:	0e 94 9b 09 	call	0x1336	; 0x1336 <_Z19System_ChangePresetv>
			
			SystemState = EDIT_UI_MODE;
    1682:	8a e0       	ldi	r24, 0x0A	; 10
    1684:	80 93 ff 01 	sts	0x01FF, r24	; 0x8001ff <SystemState>
			
		case EDIT_UI_MODE:
			/* If user is changing the UI mode then update mode LEDs*/
			if (SystemUIMode != LastSystemUIMode)
    1688:	90 91 f5 01 	lds	r25, 0x01F5	; 0x8001f5 <SystemUIMode>
    168c:	80 91 f4 01 	lds	r24, 0x01F4	; 0x8001f4 <LastSystemUIMode>
    1690:	98 17       	cp	r25, r24
    1692:	91 f1       	breq	.+100    	; 0x16f8 <_Z10System_Runv+0x332>
			{
				if (SystemUIMode == MODE_RUN)
    1694:	80 91 f5 01 	lds	r24, 0x01F5	; 0x8001f5 <SystemUIMode>
    1698:	81 11       	cpse	r24, r1
    169a:	0d c0       	rjmp	.+26     	; 0x16b6 <_Z10System_Runv+0x2f0>
				{
					ModeRunLED.AutoToggle();
    169c:	88 ef       	ldi	r24, 0xF8	; 248
    169e:	92 e0       	ldi	r25, 0x02	; 2
    16a0:	0e 94 30 02 	call	0x460	; 0x460 <_ZN10MCP_Output10AutoToggleEv>
					ModeEditPresetLED.Clear();
    16a4:	84 ef       	ldi	r24, 0xF4	; 244
    16a6:	92 e0       	ldi	r25, 0x02	; 2
    16a8:	0e 94 cf 01 	call	0x39e	; 0x39e <_ZN10MCP_Output5ClearEv>
					ModeEditMidiLED.Clear();
    16ac:	80 ef       	ldi	r24, 0xF0	; 240
    16ae:	92 e0       	ldi	r25, 0x02	; 2
    16b0:	0e 94 cf 01 	call	0x39e	; 0x39e <_ZN10MCP_Output5ClearEv>
    16b4:	21 c0       	rjmp	.+66     	; 0x16f8 <_Z10System_Runv+0x332>
				}
				else if (SystemUIMode == MODE_EDIT_PRESET)
    16b6:	80 91 f5 01 	lds	r24, 0x01F5	; 0x8001f5 <SystemUIMode>
    16ba:	81 30       	cpi	r24, 0x01	; 1
    16bc:	69 f4       	brne	.+26     	; 0x16d8 <_Z10System_Runv+0x312>
				{
					ModeRunLED.Clear();
    16be:	88 ef       	ldi	r24, 0xF8	; 248
    16c0:	92 e0       	ldi	r25, 0x02	; 2
    16c2:	0e 94 cf 01 	call	0x39e	; 0x39e <_ZN10MCP_Output5ClearEv>
					ModeEditPresetLED.AutoToggle();
    16c6:	84 ef       	ldi	r24, 0xF4	; 244
    16c8:	92 e0       	ldi	r25, 0x02	; 2
    16ca:	0e 94 30 02 	call	0x460	; 0x460 <_ZN10MCP_Output10AutoToggleEv>
					ModeEditMidiLED.Clear();
    16ce:	80 ef       	ldi	r24, 0xF0	; 240
    16d0:	92 e0       	ldi	r25, 0x02	; 2
    16d2:	0e 94 cf 01 	call	0x39e	; 0x39e <_ZN10MCP_Output5ClearEv>
    16d6:	10 c0       	rjmp	.+32     	; 0x16f8 <_Z10System_Runv+0x332>
				}
				else if (SystemUIMode == MODE_EDIT_MIDI)
    16d8:	80 91 f5 01 	lds	r24, 0x01F5	; 0x8001f5 <SystemUIMode>
    16dc:	82 30       	cpi	r24, 0x02	; 2
    16de:	61 f4       	brne	.+24     	; 0x16f8 <_Z10System_Runv+0x332>
				{
					ModeRunLED.Clear();
    16e0:	88 ef       	ldi	r24, 0xF8	; 248
    16e2:	92 e0       	ldi	r25, 0x02	; 2
    16e4:	0e 94 cf 01 	call	0x39e	; 0x39e <_ZN10MCP_Output5ClearEv>
					ModeEditPresetLED.Clear();
    16e8:	84 ef       	ldi	r24, 0xF4	; 244
    16ea:	92 e0       	ldi	r25, 0x02	; 2
    16ec:	0e 94 cf 01 	call	0x39e	; 0x39e <_ZN10MCP_Output5ClearEv>
					ModeEditMidiLED.AutoToggle();
    16f0:	80 ef       	ldi	r24, 0xF0	; 240
    16f2:	92 e0       	ldi	r25, 0x02	; 2
    16f4:	0e 94 30 02 	call	0x460	; 0x460 <_ZN10MCP_Output10AutoToggleEv>
				}
			}
			
			LastSystemUIMode = SystemUIMode;
    16f8:	80 91 f5 01 	lds	r24, 0x01F5	; 0x8001f5 <SystemUIMode>
    16fc:	80 93 f4 01 	sts	0x01F4, r24	; 0x8001f4 <LastSystemUIMode>
			
			break;
    1700:	d4 c0       	rjmp	.+424    	; 0x18aa <_Z10System_Runv+0x4e4>
		
		case ENTER_EDIT_PRESET:
			/* Disable Auto toggle */
			ModeRunLED.Clear();
    1702:	88 ef       	ldi	r24, 0xF8	; 248
    1704:	92 e0       	ldi	r25, 0x02	; 2
    1706:	0e 94 cf 01 	call	0x39e	; 0x39e <_ZN10MCP_Output5ClearEv>
			ModeEditPresetLED.Set();
    170a:	84 ef       	ldi	r24, 0xF4	; 244
    170c:	92 e0       	ldi	r25, 0x02	; 2
    170e:	0e 94 92 01 	call	0x324	; 0x324 <_ZN10MCP_Output3SetEv>
			ModeEditMidiLED.Clear();
    1712:	80 ef       	ldi	r24, 0xF0	; 240
    1714:	92 e0       	ldi	r25, 0x02	; 2
    1716:	0e 94 cf 01 	call	0x39e	; 0x39e <_ZN10MCP_Output5ClearEv>
			
			LoopModePreset = PresetTable[ActivePreset];
    171a:	e0 91 fd 01 	lds	r30, 0x01FD	; 0x8001fd <ActivePreset>
    171e:	f0 e0       	ldi	r31, 0x00	; 0
    1720:	ee 0f       	add	r30, r30
    1722:	ff 1f       	adc	r31, r31
    1724:	ee 0f       	add	r30, r30
    1726:	ff 1f       	adc	r31, r31
    1728:	ef 52       	subi	r30, 0x2F	; 47
    172a:	fe 4f       	sbci	r31, 0xFE	; 254
    172c:	80 81       	ld	r24, Z
    172e:	91 81       	ldd	r25, Z+1	; 0x01
    1730:	a2 81       	ldd	r26, Z+2	; 0x02
    1732:	b3 81       	ldd	r27, Z+3	; 0x03
    1734:	80 93 2f 01 	sts	0x012F, r24	; 0x80012f <LoopModePreset>
    1738:	90 93 30 01 	sts	0x0130, r25	; 0x800130 <LoopModePreset+0x1>
    173c:	a0 93 31 01 	sts	0x0131, r26	; 0x800131 <LoopModePreset+0x2>
    1740:	b0 93 32 01 	sts	0x0132, r27	; 0x800132 <LoopModePreset+0x3>
			
			UserEditSelection = 0;
    1744:	10 92 d0 01 	sts	0x01D0, r1	; 0x8001d0 <UserEditSelection>
			LastUserEditSelection = 1;
    1748:	81 e0       	ldi	r24, 0x01	; 1
    174a:	80 93 cf 01 	sts	0x01CF, r24	; 0x8001cf <LastUserEditSelection>
			
			SystemState = EDIT_PRESET;
    174e:	8c e0       	ldi	r24, 0x0C	; 12
    1750:	80 93 ff 01 	sts	0x01FF, r24	; 0x8001ff <SystemState>
			
		case EDIT_PRESET:
			/* If user is selecting */
			if (UserEditSelection != LastUserEditSelection)
    1754:	90 91 d0 01 	lds	r25, 0x01D0	; 0x8001d0 <UserEditSelection>
    1758:	80 91 cf 01 	lds	r24, 0x01CF	; 0x8001cf <LastUserEditSelection>
    175c:	98 17       	cp	r25, r24
    175e:	89 f1       	breq	.+98     	; 0x17c2 <_Z10System_Runv+0x3fc>
			{
				/* Blank LEDs except from selection */
				if (UserEditSelection <= 7)
    1760:	80 91 d0 01 	lds	r24, 0x01D0	; 0x8001d0 <UserEditSelection>
    1764:	88 30       	cpi	r24, 0x08	; 8
    1766:	98 f4       	brcc	.+38     	; 0x178e <_Z10System_Runv+0x3c8>
				{
					MCP23017_WriteReg(MCP23017_UI_LEDS_ADDR, OLATA, (1 << UserEditSelection));
    1768:	80 91 d0 01 	lds	r24, 0x01D0	; 0x8001d0 <UserEditSelection>
    176c:	41 e0       	ldi	r20, 0x01	; 1
    176e:	50 e0       	ldi	r21, 0x00	; 0
    1770:	02 c0       	rjmp	.+4      	; 0x1776 <_Z10System_Runv+0x3b0>
    1772:	44 0f       	add	r20, r20
    1774:	55 1f       	adc	r21, r21
    1776:	8a 95       	dec	r24
    1778:	e2 f7       	brpl	.-8      	; 0x1772 <_Z10System_Runv+0x3ac>
    177a:	64 e1       	ldi	r22, 0x14	; 20
    177c:	80 e0       	ldi	r24, 0x00	; 0
    177e:	0e 94 64 01 	call	0x2c8	; 0x2c8 <_Z17MCP23017_WriteReghhh>
					MCP23017_WriteReg(MCP23017_UI_LEDS_ADDR, OLATB, (1 << UI_MODE_PRESET_LED_PIN));
    1782:	40 e4       	ldi	r20, 0x40	; 64
    1784:	65 e1       	ldi	r22, 0x15	; 21
    1786:	80 e0       	ldi	r24, 0x00	; 0
    1788:	0e 94 64 01 	call	0x2c8	; 0x2c8 <_Z17MCP23017_WriteReghhh>
    178c:	14 c0       	rjmp	.+40     	; 0x17b6 <_Z10System_Runv+0x3f0>
				}
				else
				{
					MCP23017_WriteReg(MCP23017_UI_LEDS_ADDR, OLATA, 0x00);
    178e:	40 e0       	ldi	r20, 0x00	; 0
    1790:	64 e1       	ldi	r22, 0x14	; 20
    1792:	80 e0       	ldi	r24, 0x00	; 0
    1794:	0e 94 64 01 	call	0x2c8	; 0x2c8 <_Z17MCP23017_WriteReghhh>
					MCP23017_WriteReg(MCP23017_UI_LEDS_ADDR, OLATB, ((1 << UI_MODE_PRESET_LED_PIN) | (1 << (UserEditSelection - 8))));
    1798:	80 91 d0 01 	lds	r24, 0x01D0	; 0x8001d0 <UserEditSelection>
    179c:	88 50       	subi	r24, 0x08	; 8
    179e:	41 e0       	ldi	r20, 0x01	; 1
    17a0:	50 e0       	ldi	r21, 0x00	; 0
    17a2:	02 c0       	rjmp	.+4      	; 0x17a8 <_Z10System_Runv+0x3e2>
    17a4:	44 0f       	add	r20, r20
    17a6:	55 1f       	adc	r21, r21
    17a8:	8a 95       	dec	r24
    17aa:	e2 f7       	brpl	.-8      	; 0x17a4 <_Z10System_Runv+0x3de>
    17ac:	40 64       	ori	r20, 0x40	; 64
    17ae:	65 e1       	ldi	r22, 0x15	; 21
    17b0:	80 e0       	ldi	r24, 0x00	; 0
    17b2:	0e 94 64 01 	call	0x2c8	; 0x2c8 <_Z17MCP23017_WriteReghhh>
				}
				
				/* Start timer */
				System_MarkSelectionOvfCnt = 1;
    17b6:	81 e0       	ldi	r24, 0x01	; 1
    17b8:	90 e0       	ldi	r25, 0x00	; 0
    17ba:	90 93 02 02 	sts	0x0202, r25	; 0x800202 <System_MarkSelectionOvfCnt+0x1>
    17be:	80 93 01 02 	sts	0x0201, r24	; 0x800201 <System_MarkSelectionOvfCnt>
			}
			
			LastUserEditSelection = UserEditSelection;
    17c2:	80 91 d0 01 	lds	r24, 0x01D0	; 0x8001d0 <UserEditSelection>
    17c6:	80 93 cf 01 	sts	0x01CF, r24	; 0x8001cf <LastUserEditSelection>
			break;
    17ca:	6f c0       	rjmp	.+222    	; 0x18aa <_Z10System_Runv+0x4e4>
			
		case ENTER_EDIT_MIDI_IN_OUT:
			/* Disable Auto toggle */
			ModeRunLED.Clear();
    17cc:	88 ef       	ldi	r24, 0xF8	; 248
    17ce:	92 e0       	ldi	r25, 0x02	; 2
    17d0:	0e 94 cf 01 	call	0x39e	; 0x39e <_ZN10MCP_Output5ClearEv>
			ModeEditPresetLED.Clear();
    17d4:	84 ef       	ldi	r24, 0xF4	; 244
    17d6:	92 e0       	ldi	r25, 0x02	; 2
    17d8:	0e 94 cf 01 	call	0x39e	; 0x39e <_ZN10MCP_Output5ClearEv>
			ModeEditMidiLED.Set();
    17dc:	80 ef       	ldi	r24, 0xF0	; 240
    17de:	92 e0       	ldi	r25, 0x02	; 2
    17e0:	0e 94 92 01 	call	0x324	; 0x324 <_ZN10MCP_Output3SetEv>
			
			/* Update 7-segment display */
			if (SetMidiEdit == MIDI_IN)
    17e4:	80 91 f3 01 	lds	r24, 0x01F3	; 0x8001f3 <SetMidiEdit>
    17e8:	81 11       	cpse	r24, r1
    17ea:	09 c0       	rjmp	.+18     	; 0x17fe <_Z10System_Runv+0x438>
			{
				SP10281_WriteChar('i', 'n', ' ', 0, 0, 0);
    17ec:	e1 2c       	mov	r14, r1
    17ee:	00 e0       	ldi	r16, 0x00	; 0
    17f0:	20 e0       	ldi	r18, 0x00	; 0
    17f2:	40 e2       	ldi	r20, 0x20	; 32
    17f4:	6e e6       	ldi	r22, 0x6E	; 110
    17f6:	89 e6       	ldi	r24, 0x69	; 105
    17f8:	0e 94 cf 05 	call	0xb9e	; 0xb9e <_Z17SP10281_WriteCharccchhh>
    17fc:	08 c0       	rjmp	.+16     	; 0x180e <_Z10System_Runv+0x448>
			}
			else
			{
				SP10281_WriteChar('o', 'u', 't', 0, 0, 0);
    17fe:	e1 2c       	mov	r14, r1
    1800:	00 e0       	ldi	r16, 0x00	; 0
    1802:	20 e0       	ldi	r18, 0x00	; 0
    1804:	44 e7       	ldi	r20, 0x74	; 116
    1806:	65 e7       	ldi	r22, 0x75	; 117
    1808:	8f e6       	ldi	r24, 0x6F	; 111
    180a:	0e 94 cf 05 	call	0xb9e	; 0xb9e <_Z17SP10281_WriteCharccchhh>
			}
			
			SystemState = EDIT_MIDI_IN_OUT;
    180e:	8e e0       	ldi	r24, 0x0E	; 14
    1810:	80 93 ff 01 	sts	0x01FF, r24	; 0x8001ff <SystemState>
    1814:	4a c0       	rjmp	.+148    	; 0x18aa <_Z10System_Runv+0x4e4>
		case EDIT_MIDI_IN_OUT:
			break;
		
		case ENTER_EDIT_MIDI_PC:
			/* Get setup for active preset */
			if (SetMidiEdit == MIDI_IN)
    1816:	80 91 f3 01 	lds	r24, 0x01F3	; 0x8001f3 <SetMidiEdit>
    181a:	81 11       	cpse	r24, r1
    181c:	19 c0       	rjmp	.+50     	; 0x1850 <_Z10System_Runv+0x48a>
			{
				TempSelectMidiPC = PresetTable[ActivePreset].MIDI_PC_In;
    181e:	e0 91 fd 01 	lds	r30, 0x01FD	; 0x8001fd <ActivePreset>
    1822:	f0 e0       	ldi	r31, 0x00	; 0
    1824:	ee 0f       	add	r30, r30
    1826:	ff 1f       	adc	r31, r31
    1828:	ee 0f       	add	r30, r30
    182a:	ff 1f       	adc	r31, r31
    182c:	ef 52       	subi	r30, 0x2F	; 47
    182e:	fe 4f       	sbci	r31, 0xFE	; 254
    1830:	82 81       	ldd	r24, Z+2	; 0x02
    1832:	80 93 f2 01 	sts	0x01F2, r24	; 0x8001f2 <TempSelectMidiPC>
				LastTempSelectMidiPC = PresetTable[ActivePreset].MIDI_PC_In;
    1836:	e0 91 fd 01 	lds	r30, 0x01FD	; 0x8001fd <ActivePreset>
    183a:	f0 e0       	ldi	r31, 0x00	; 0
    183c:	ee 0f       	add	r30, r30
    183e:	ff 1f       	adc	r31, r31
    1840:	ee 0f       	add	r30, r30
    1842:	ff 1f       	adc	r31, r31
    1844:	ef 52       	subi	r30, 0x2F	; 47
    1846:	fe 4f       	sbci	r31, 0xFE	; 254
    1848:	82 81       	ldd	r24, Z+2	; 0x02
    184a:	80 93 f1 01 	sts	0x01F1, r24	; 0x8001f1 <LastTempSelectMidiPC>
    184e:	18 c0       	rjmp	.+48     	; 0x1880 <_Z10System_Runv+0x4ba>
			}
			else
			{
				TempSelectMidiPC = PresetTable[ActivePreset].MIDI_PC_Out;
    1850:	e0 91 fd 01 	lds	r30, 0x01FD	; 0x8001fd <ActivePreset>
    1854:	f0 e0       	ldi	r31, 0x00	; 0
    1856:	ee 0f       	add	r30, r30
    1858:	ff 1f       	adc	r31, r31
    185a:	ee 0f       	add	r30, r30
    185c:	ff 1f       	adc	r31, r31
    185e:	ef 52       	subi	r30, 0x2F	; 47
    1860:	fe 4f       	sbci	r31, 0xFE	; 254
    1862:	83 81       	ldd	r24, Z+3	; 0x03
    1864:	80 93 f2 01 	sts	0x01F2, r24	; 0x8001f2 <TempSelectMidiPC>
				LastTempSelectMidiPC = PresetTable[ActivePreset].MIDI_PC_Out;
    1868:	e0 91 fd 01 	lds	r30, 0x01FD	; 0x8001fd <ActivePreset>
    186c:	f0 e0       	ldi	r31, 0x00	; 0
    186e:	ee 0f       	add	r30, r30
    1870:	ff 1f       	adc	r31, r31
    1872:	ee 0f       	add	r30, r30
    1874:	ff 1f       	adc	r31, r31
    1876:	ef 52       	subi	r30, 0x2F	; 47
    1878:	fe 4f       	sbci	r31, 0xFE	; 254
    187a:	83 81       	ldd	r24, Z+3	; 0x03
    187c:	80 93 f1 01 	sts	0x01F1, r24	; 0x8001f1 <LastTempSelectMidiPC>
			}
			
			/* Update 7-segment display */
			if (TempSelectMidiPC == MIDI_PC_OFF)
    1880:	80 91 f2 01 	lds	r24, 0x01F2	; 0x8001f2 <TempSelectMidiPC>
    1884:	8f 3f       	cpi	r24, 0xFF	; 255
    1886:	49 f4       	brne	.+18     	; 0x189a <_Z10System_Runv+0x4d4>
			{
				SP10281_WriteChar('o', 'f', 'f', 0, 0, 0);
    1888:	e1 2c       	mov	r14, r1
    188a:	00 e0       	ldi	r16, 0x00	; 0
    188c:	20 e0       	ldi	r18, 0x00	; 0
    188e:	46 e6       	ldi	r20, 0x66	; 102
    1890:	66 e6       	ldi	r22, 0x66	; 102
    1892:	8f e6       	ldi	r24, 0x6F	; 111
    1894:	0e 94 cf 05 	call	0xb9e	; 0xb9e <_Z17SP10281_WriteCharccchhh>
    1898:	05 c0       	rjmp	.+10     	; 0x18a4 <_Z10System_Runv+0x4de>
			}
			else
			{
				SP10281_WriteNumber(TempSelectMidiPC);
    189a:	80 91 f2 01 	lds	r24, 0x01F2	; 0x8001f2 <TempSelectMidiPC>
    189e:	90 e0       	ldi	r25, 0x00	; 0
    18a0:	0e 94 ec 05 	call	0xbd8	; 0xbd8 <_Z19SP10281_WriteNumbers>
			}
			
			SystemState = EDIT_MIDI_PC;
    18a4:	80 e1       	ldi	r24, 0x10	; 16
    18a6:	80 93 ff 01 	sts	0x01FF, r24	; 0x8001ff <SystemState>
		
		default:
			break;
	}
	
	LastActivePreset = ActivePreset;
    18aa:	80 91 fd 01 	lds	r24, 0x01FD	; 0x8001fd <ActivePreset>
    18ae:	80 93 fc 01 	sts	0x01FC, r24	; 0x8001fc <LastActivePreset>
	LastSystemState = SystemState;
    18b2:	80 91 ff 01 	lds	r24, 0x01FF	; 0x8001ff <SystemState>
    18b6:	80 93 fe 01 	sts	0x01FE, r24	; 0x8001fe <LastSystemState>
	LastLoopModePreset = LoopModePreset;
    18ba:	80 91 2f 01 	lds	r24, 0x012F	; 0x80012f <LoopModePreset>
    18be:	90 91 30 01 	lds	r25, 0x0130	; 0x800130 <LoopModePreset+0x1>
    18c2:	a0 91 31 01 	lds	r26, 0x0131	; 0x800131 <LoopModePreset+0x2>
    18c6:	b0 91 32 01 	lds	r27, 0x0132	; 0x800132 <LoopModePreset+0x3>
    18ca:	80 93 2b 01 	sts	0x012B, r24	; 0x80012b <LastLoopModePreset>
    18ce:	90 93 2c 01 	sts	0x012C, r25	; 0x80012c <LastLoopModePreset+0x1>
    18d2:	a0 93 2d 01 	sts	0x012D, r26	; 0x80012d <LastLoopModePreset+0x2>
    18d6:	b0 93 2e 01 	sts	0x012E, r27	; 0x80012e <LastLoopModePreset+0x3>
	LastTempSelectPreset = TempSelectPreset;
    18da:	80 91 fb 01 	lds	r24, 0x01FB	; 0x8001fb <TempSelectPreset>
    18de:	80 93 fa 01 	sts	0x01FA, r24	; 0x8001fa <LastTempSelectPreset>
}
    18e2:	0f 91       	pop	r16
    18e4:	ef 90       	pop	r14
    18e6:	08 95       	ret

000018e8 <_Z11Timer0_Initv>:
#include "System.h"

void Timer0_Init()
{
	/* Setup Timer */
	TCCR0A |= (1 << WGM01);		// Set Timer to CTC mode (Clear Timer on Compare match)
    18e8:	84 b5       	in	r24, 0x24	; 36
    18ea:	82 60       	ori	r24, 0x02	; 2
    18ec:	84 bd       	out	0x24, r24	; 36
	TCNT0 = 0;					// Clear counter register
    18ee:	16 bc       	out	0x26, r1	; 38
	OCR0A = 155;				// Set Output Compare value (78125Hz / 156 = 500,8Hz (1,997ms))
    18f0:	8b e9       	ldi	r24, 0x9B	; 155
    18f2:	87 bd       	out	0x27, r24	; 39
	TIMSK0 |= (1 << OCIE0A);	// Output Compare A Match Interrupt Enable
    18f4:	ee e6       	ldi	r30, 0x6E	; 110
    18f6:	f0 e0       	ldi	r31, 0x00	; 0
    18f8:	80 81       	ld	r24, Z
    18fa:	82 60       	ori	r24, 0x02	; 2
    18fc:	80 83       	st	Z, r24
	
	/* Start Timer */
	TCCR0B |= (1 << CS02);		// Set clock prescaler to 256 (20MHz / 256 = 78125Hz)
    18fe:	85 b5       	in	r24, 0x25	; 37
    1900:	84 60       	ori	r24, 0x04	; 4
    1902:	85 bd       	out	0x25, r24	; 37
    1904:	08 95       	ret

00001906 <_Z13Timer0_ms2cntm>:
}

uint32_t Timer0_ms2cnt(uint32_t ms)
{
    1906:	9b 01       	movw	r18, r22
    1908:	ac 01       	movw	r20, r24
	ms *= 1000;
	return (uint32_t)(ms / TIMER0_PERIOD_US);
    190a:	a8 ee       	ldi	r26, 0xE8	; 232
    190c:	b3 e0       	ldi	r27, 0x03	; 3
    190e:	0e 94 82 10 	call	0x2104	; 0x2104 <__muluhisi3>
    1912:	2d ec       	ldi	r18, 0xCD	; 205
    1914:	37 e0       	ldi	r19, 0x07	; 7
    1916:	40 e0       	ldi	r20, 0x00	; 0
    1918:	50 e0       	ldi	r21, 0x00	; 0
    191a:	0e 94 5a 10 	call	0x20b4	; 0x20b4 <__udivmodsi4>
}
    191e:	ca 01       	movw	r24, r20
    1920:	b9 01       	movw	r22, r18
    1922:	08 95       	ret

00001924 <__vector_16>:

/* Timer0 Compare A Match Interrupt Service Routine */
ISR(TIMER0_COMPA_vect)
{
    1924:	1f 92       	push	r1
    1926:	0f 92       	push	r0
    1928:	0f b6       	in	r0, 0x3f	; 63
    192a:	0f 92       	push	r0
    192c:	11 24       	eor	r1, r1
    192e:	2f 93       	push	r18
    1930:	3f 93       	push	r19
    1932:	8f 93       	push	r24
    1934:	9f 93       	push	r25
	/* Overflow counter to reset parameter if user doesn't commit */
	if (System_TempSelectOvfCnt)
    1936:	80 91 04 02 	lds	r24, 0x0204	; 0x800204 <System_TempSelectOvfCnt>
    193a:	90 91 05 02 	lds	r25, 0x0205	; 0x800205 <System_TempSelectOvfCnt+0x1>
    193e:	89 2b       	or	r24, r25
    1940:	99 f0       	breq	.+38     	; 0x1968 <__vector_16+0x44>
	{
		if (++System_TempSelectOvfCnt > SYSTEM_TEMP_SELECT_TIMEOUT)
    1942:	80 91 04 02 	lds	r24, 0x0204	; 0x800204 <System_TempSelectOvfCnt>
    1946:	90 91 05 02 	lds	r25, 0x0205	; 0x800205 <System_TempSelectOvfCnt+0x1>
    194a:	01 96       	adiw	r24, 0x01	; 1
    194c:	90 93 05 02 	sts	0x0205, r25	; 0x800205 <System_TempSelectOvfCnt+0x1>
    1950:	80 93 04 02 	sts	0x0204, r24	; 0x800204 <System_TempSelectOvfCnt>
    1954:	8d 3d       	cpi	r24, 0xDD	; 221
    1956:	95 40       	sbci	r25, 0x05	; 5
    1958:	38 f0       	brcs	.+14     	; 0x1968 <__vector_16+0x44>
		{
			System_TempSelectOvfCnt = 0;
    195a:	10 92 05 02 	sts	0x0205, r1	; 0x800205 <System_TempSelectOvfCnt+0x1>
    195e:	10 92 04 02 	sts	0x0204, r1	; 0x800204 <System_TempSelectOvfCnt>
			System_TempSelectFlag = true;
    1962:	81 e0       	ldi	r24, 0x01	; 1
    1964:	80 93 03 02 	sts	0x0203, r24	; 0x800203 <System_TempSelectFlag>
		}
	}
	
	/* Overflow counter to shortly blank LEDs to mark selection */
	if (System_MarkSelectionOvfCnt)
    1968:	80 91 01 02 	lds	r24, 0x0201	; 0x800201 <System_MarkSelectionOvfCnt>
    196c:	90 91 02 02 	lds	r25, 0x0202	; 0x800202 <System_MarkSelectionOvfCnt+0x1>
    1970:	89 2b       	or	r24, r25
    1972:	99 f0       	breq	.+38     	; 0x199a <__vector_16+0x76>
	{
		if (++System_MarkSelectionOvfCnt > SYSTEM_MARK_SELECTION_TIMEOUT)
    1974:	80 91 01 02 	lds	r24, 0x0201	; 0x800201 <System_MarkSelectionOvfCnt>
    1978:	90 91 02 02 	lds	r25, 0x0202	; 0x800202 <System_MarkSelectionOvfCnt+0x1>
    197c:	01 96       	adiw	r24, 0x01	; 1
    197e:	90 93 02 02 	sts	0x0202, r25	; 0x800202 <System_MarkSelectionOvfCnt+0x1>
    1982:	80 93 01 02 	sts	0x0201, r24	; 0x800201 <System_MarkSelectionOvfCnt>
    1986:	87 39       	cpi	r24, 0x97	; 151
    1988:	91 05       	cpc	r25, r1
    198a:	38 f0       	brcs	.+14     	; 0x199a <__vector_16+0x76>
		{
			System_MarkSelectionOvfCnt = 0;
    198c:	10 92 02 02 	sts	0x0202, r1	; 0x800202 <System_MarkSelectionOvfCnt+0x1>
    1990:	10 92 01 02 	sts	0x0201, r1	; 0x800201 <System_MarkSelectionOvfCnt>
			System_MarkSelectionFlag = true;
    1994:	81 e0       	ldi	r24, 0x01	; 1
    1996:	80 93 00 02 	sts	0x0200, r24	; 0x800200 <System_MarkSelectionFlag>
		}
	}
	
	/* Overflow counter for delaying transmit to pedal */
	if (PedalComm_DelayTXOvfCnt)
    199a:	80 91 4f 01 	lds	r24, 0x014F	; 0x80014f <PedalComm_DelayTXOvfCnt>
    199e:	88 23       	and	r24, r24
    19a0:	61 f0       	breq	.+24     	; 0x19ba <__vector_16+0x96>
	{
		if (++PedalComm_DelayTXOvfCnt > PEDALCOMM_DELAY_TX_TIMEOUT)
    19a2:	80 91 4f 01 	lds	r24, 0x014F	; 0x80014f <PedalComm_DelayTXOvfCnt>
    19a6:	8f 5f       	subi	r24, 0xFF	; 255
    19a8:	80 93 4f 01 	sts	0x014F, r24	; 0x80014f <PedalComm_DelayTXOvfCnt>
    19ac:	84 30       	cpi	r24, 0x04	; 4
    19ae:	28 f0       	brcs	.+10     	; 0x19ba <__vector_16+0x96>
		{
			PedalComm_DelayTXOvfCnt = 0;	// Stop overflow counter
    19b0:	10 92 4f 01 	sts	0x014F, r1	; 0x80014f <PedalComm_DelayTXOvfCnt>
			PedalComm_DelayTxFlag = true;
    19b4:	81 e0       	ldi	r24, 0x01	; 1
    19b6:	80 93 50 01 	sts	0x0150, r24	; 0x800150 <PedalComm_DelayTxFlag>
		}
	}

	/* Overflow counter for Pedal response timeout and heartbeat */
	if (++PedalComm_ResponseTimeoutOvfCnt > PEDALCOMM_RESPONSE_TIMEOUT)
    19ba:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <PedalComm_ResponseTimeoutOvfCnt>
    19be:	90 91 04 01 	lds	r25, 0x0104	; 0x800104 <PedalComm_ResponseTimeoutOvfCnt+0x1>
    19c2:	01 96       	adiw	r24, 0x01	; 1
    19c4:	90 93 04 01 	sts	0x0104, r25	; 0x800104 <PedalComm_ResponseTimeoutOvfCnt+0x1>
    19c8:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <PedalComm_ResponseTimeoutOvfCnt>
    19cc:	89 3e       	cpi	r24, 0xE9	; 233
    19ce:	93 40       	sbci	r25, 0x03	; 3
    19d0:	40 f0       	brcs	.+16     	; 0x19e2 <__vector_16+0xbe>
	{
		PedalComm_ResponseTimeoutOvfCnt = 1;	// Reset overflow counter
    19d2:	81 e0       	ldi	r24, 0x01	; 1
    19d4:	90 e0       	ldi	r25, 0x00	; 0
    19d6:	90 93 04 01 	sts	0x0104, r25	; 0x800104 <PedalComm_ResponseTimeoutOvfCnt+0x1>
    19da:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <PedalComm_ResponseTimeoutOvfCnt>
		PedalComm_ResponseTimeoutFlag = true;
    19de:	80 93 4e 01 	sts	0x014E, r24	; 0x80014e <PedalComm_ResponseTimeoutFlag>
	}
	
	/* Overflow counter for multiplexing 3x7-segment display */
	if (++SP10281_OvfCnt >= SP10281_OVF_RESET)
    19e2:	80 91 ca 01 	lds	r24, 0x01CA	; 0x8001ca <SP10281_OvfCnt>
    19e6:	8f 5f       	subi	r24, 0xFF	; 255
    19e8:	80 93 ca 01 	sts	0x01CA, r24	; 0x8001ca <SP10281_OvfCnt>
    19ec:	83 30       	cpi	r24, 0x03	; 3
    19ee:	28 f0       	brcs	.+10     	; 0x19fa <__vector_16+0xd6>
	{
		SP10281_OvfCnt = 0;		// Stop overflow counter
    19f0:	10 92 ca 01 	sts	0x01CA, r1	; 0x8001ca <SP10281_OvfCnt>
		SP10281_OvfFlag = 1;
    19f4:	81 e0       	ldi	r24, 0x01	; 1
    19f6:	80 93 c9 01 	sts	0x01C9, r24	; 0x8001c9 <SP10281_OvfFlag>
	}
	
	/* Overflow counter for blinking UI LEDs */
	if (++(MCP_Output::AutoToggle_OvfCnt) > MCP_Output::AutoToggle_Timeout)
    19fa:	80 91 41 01 	lds	r24, 0x0141	; 0x800141 <_ZN10MCP_Output17AutoToggle_OvfCntE>
    19fe:	90 91 42 01 	lds	r25, 0x0142	; 0x800142 <_ZN10MCP_Output17AutoToggle_OvfCntE+0x1>
    1a02:	01 96       	adiw	r24, 0x01	; 1
    1a04:	90 93 42 01 	sts	0x0142, r25	; 0x800142 <_ZN10MCP_Output17AutoToggle_OvfCntE+0x1>
    1a08:	80 93 41 01 	sts	0x0141, r24	; 0x800141 <_ZN10MCP_Output17AutoToggle_OvfCntE>
    1a0c:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <_ZN10MCP_Output18AutoToggle_TimeoutE>
    1a10:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <_ZN10MCP_Output18AutoToggle_TimeoutE+0x1>
    1a14:	28 17       	cp	r18, r24
    1a16:	39 07       	cpc	r19, r25
    1a18:	78 f4       	brcc	.+30     	; 0x1a38 <__vector_16+0x114>
	{
		MCP_Output::AutoToggle_OvfCnt = 0;		// Reset overflow counter
    1a1a:	10 92 42 01 	sts	0x0142, r1	; 0x800142 <_ZN10MCP_Output17AutoToggle_OvfCntE+0x1>
    1a1e:	10 92 41 01 	sts	0x0141, r1	; 0x800141 <_ZN10MCP_Output17AutoToggle_OvfCntE>
		
		if (MCP_Output::AutoToggle_PortA || MCP_Output::AutoToggle_PortB)
    1a22:	80 91 3f 01 	lds	r24, 0x013F	; 0x80013f <_ZN10MCP_Output16AutoToggle_PortAE>
    1a26:	81 11       	cpse	r24, r1
    1a28:	04 c0       	rjmp	.+8      	; 0x1a32 <__vector_16+0x10e>
    1a2a:	80 91 3e 01 	lds	r24, 0x013E	; 0x80013e <__data_end>
    1a2e:	88 23       	and	r24, r24
    1a30:	19 f0       	breq	.+6      	; 0x1a38 <__vector_16+0x114>
		{
			MCP_Output::AutoToggle_Flag = 1;
    1a32:	81 e0       	ldi	r24, 0x01	; 1
    1a34:	80 93 40 01 	sts	0x0140, r24	; 0x800140 <_ZN10MCP_Output15AutoToggle_FlagE>
		}
	}
	
	/* Overflow counter for rotary encoder handling */
	if (RotaryEncoder_OvfCnt)
    1a38:	80 91 c6 01 	lds	r24, 0x01C6	; 0x8001c6 <RotaryEncoder_OvfCnt>
    1a3c:	90 91 c7 01 	lds	r25, 0x01C7	; 0x8001c7 <RotaryEncoder_OvfCnt+0x1>
    1a40:	89 2b       	or	r24, r25
    1a42:	b9 f1       	breq	.+110    	; 0x1ab2 <__vector_16+0x18e>
	{
		RotaryEncoder_OvfCnt++;
    1a44:	80 91 c6 01 	lds	r24, 0x01C6	; 0x8001c6 <RotaryEncoder_OvfCnt>
    1a48:	90 91 c7 01 	lds	r25, 0x01C7	; 0x8001c7 <RotaryEncoder_OvfCnt+0x1>
    1a4c:	01 96       	adiw	r24, 0x01	; 1
    1a4e:	90 93 c7 01 	sts	0x01C7, r25	; 0x8001c7 <RotaryEncoder_OvfCnt+0x1>
    1a52:	80 93 c6 01 	sts	0x01C6, r24	; 0x8001c6 <RotaryEncoder_OvfCnt>
		
		if (RotaryEncoder_OvfCnt > ROT_ENC_LONG_PRESS_OVF)
    1a56:	80 91 c6 01 	lds	r24, 0x01C6	; 0x8001c6 <RotaryEncoder_OvfCnt>
    1a5a:	90 91 c7 01 	lds	r25, 0x01C7	; 0x8001c7 <RotaryEncoder_OvfCnt+0x1>
    1a5e:	89 35       	cpi	r24, 0x59	; 89
    1a60:	92 40       	sbci	r25, 0x02	; 2
    1a62:	68 f0       	brcs	.+26     	; 0x1a7e <__vector_16+0x15a>
		{
			/* If button is still pressed */
			if ( GPIO_ROT_ENC_PIN & GPIO_ROT_ENC_PRESS_MASK )
    1a64:	1a 9b       	sbis	0x03, 2	; 3
    1a66:	04 c0       	rjmp	.+8      	; 0x1a70 <__vector_16+0x14c>
			{
				RotEnc_State = LONG_PRESS;
    1a68:	85 e0       	ldi	r24, 0x05	; 5
    1a6a:	80 93 c5 01 	sts	0x01C5, r24	; 0x8001c5 <RotEnc_State>
    1a6e:	02 c0       	rjmp	.+4      	; 0x1a74 <__vector_16+0x150>
			}
			else
			{
				RotEnc_State = IDLE;
    1a70:	10 92 c5 01 	sts	0x01C5, r1	; 0x8001c5 <RotEnc_State>
			}
			
			RotaryEncoder_OvfCnt = 0;		// Stop overflow counter
    1a74:	10 92 c7 01 	sts	0x01C7, r1	; 0x8001c7 <RotaryEncoder_OvfCnt+0x1>
    1a78:	10 92 c6 01 	sts	0x01C6, r1	; 0x8001c6 <RotaryEncoder_OvfCnt>
    1a7c:	1a c0       	rjmp	.+52     	; 0x1ab2 <__vector_16+0x18e>
		}
		else if (RotaryEncoder_OvfCnt > ROT_ENC_PRESS_OVF && RotEnc_State == IDLE)
    1a7e:	80 91 c6 01 	lds	r24, 0x01C6	; 0x8001c6 <RotaryEncoder_OvfCnt>
    1a82:	90 91 c7 01 	lds	r25, 0x01C7	; 0x8001c7 <RotaryEncoder_OvfCnt+0x1>
    1a86:	cd 97       	sbiw	r24, 0x3d	; 61
    1a88:	a0 f0       	brcs	.+40     	; 0x1ab2 <__vector_16+0x18e>
    1a8a:	80 91 c5 01 	lds	r24, 0x01C5	; 0x8001c5 <RotEnc_State>
    1a8e:	88 23       	and	r24, r24
    1a90:	69 f0       	breq	.+26     	; 0x1aac <__vector_16+0x188>
    1a92:	0f c0       	rjmp	.+30     	; 0x1ab2 <__vector_16+0x18e>
		{
			/* If button is no longer pressed */
			if ( !(GPIO_ROT_ENC_PIN & GPIO_ROT_ENC_PRESS_MASK) )
			{
				RotEnc_State = SHORT_PRESS;
    1a94:	83 e0       	ldi	r24, 0x03	; 3
    1a96:	80 93 c5 01 	sts	0x01C5, r24	; 0x8001c5 <RotEnc_State>
				RotaryEncoder_OvfCnt = 0;	// Stop overflow counter
    1a9a:	10 92 c7 01 	sts	0x01C7, r1	; 0x8001c7 <RotaryEncoder_OvfCnt+0x1>
    1a9e:	10 92 c6 01 	sts	0x01C6, r1	; 0x8001c6 <RotaryEncoder_OvfCnt>
    1aa2:	07 c0       	rjmp	.+14     	; 0x1ab2 <__vector_16+0x18e>
			}
			else
			RotEnc_State = PRESSED;
    1aa4:	84 e0       	ldi	r24, 0x04	; 4
    1aa6:	80 93 c5 01 	sts	0x01C5, r24	; 0x8001c5 <RotEnc_State>

		}
	}
    1aaa:	03 c0       	rjmp	.+6      	; 0x1ab2 <__vector_16+0x18e>
			RotaryEncoder_OvfCnt = 0;		// Stop overflow counter
		}
		else if (RotaryEncoder_OvfCnt > ROT_ENC_PRESS_OVF && RotEnc_State == IDLE)
		{
			/* If button is no longer pressed */
			if ( !(GPIO_ROT_ENC_PIN & GPIO_ROT_ENC_PRESS_MASK) )
    1aac:	1a 99       	sbic	0x03, 2	; 3
    1aae:	fa cf       	rjmp	.-12     	; 0x1aa4 <__vector_16+0x180>
    1ab0:	f1 cf       	rjmp	.-30     	; 0x1a94 <__vector_16+0x170>
			else
			RotEnc_State = PRESSED;

		}
	}
    1ab2:	9f 91       	pop	r25
    1ab4:	8f 91       	pop	r24
    1ab6:	3f 91       	pop	r19
    1ab8:	2f 91       	pop	r18
    1aba:	0f 90       	pop	r0
    1abc:	0f be       	out	0x3f, r0	; 63
    1abe:	0f 90       	pop	r0
    1ac0:	1f 90       	pop	r1
    1ac2:	18 95       	reti

00001ac4 <_Z10UART0_Initjhh>:
Input:    None
Returns:  None
**************************************************************************/
void UART1_Flush(void)
{
	UART1_RxHead = UART1_RxTail;
    1ac4:	cf 93       	push	r28
    1ac6:	df 93       	push	r29
    1ac8:	d6 2f       	mov	r29, r22
    1aca:	c4 2f       	mov	r28, r20
    1acc:	51 9a       	sbi	0x0a, 1	; 10
    1ace:	59 9a       	sbi	0x0b, 1	; 11
    1ad0:	10 92 4f 02 	sts	0x024F, r1	; 0x80024f <_ZL12UART0_TxHead>
    1ad4:	10 92 4e 02 	sts	0x024E, r1	; 0x80024e <_ZL12UART0_TxTail>
    1ad8:	10 92 4d 02 	sts	0x024D, r1	; 0x80024d <_ZL12UART0_RxHead>
    1adc:	10 92 4c 02 	sts	0x024C, r1	; 0x80024c <_ZL12UART0_RxTail>
    1ae0:	a0 e0       	ldi	r26, 0x00	; 0
    1ae2:	b0 e0       	ldi	r27, 0x00	; 0
    1ae4:	88 0f       	add	r24, r24
    1ae6:	99 1f       	adc	r25, r25
    1ae8:	aa 1f       	adc	r26, r26
    1aea:	bb 1f       	adc	r27, r27
    1aec:	88 0f       	add	r24, r24
    1aee:	99 1f       	adc	r25, r25
    1af0:	aa 1f       	adc	r26, r26
    1af2:	bb 1f       	adc	r27, r27
    1af4:	9c 01       	movw	r18, r24
    1af6:	ad 01       	movw	r20, r26
    1af8:	22 0f       	add	r18, r18
    1afa:	33 1f       	adc	r19, r19
    1afc:	44 1f       	adc	r20, r20
    1afe:	55 1f       	adc	r21, r21
    1b00:	22 0f       	add	r18, r18
    1b02:	33 1f       	adc	r19, r19
    1b04:	44 1f       	adc	r20, r20
    1b06:	55 1f       	adc	r21, r21
    1b08:	60 e0       	ldi	r22, 0x00	; 0
    1b0a:	7d e2       	ldi	r23, 0x2D	; 45
    1b0c:	81 e3       	ldi	r24, 0x31	; 49
    1b0e:	91 e0       	ldi	r25, 0x01	; 1
    1b10:	0e 94 5a 10 	call	0x20b4	; 0x20b4 <__udivmodsi4>
    1b14:	21 50       	subi	r18, 0x01	; 1
    1b16:	31 09       	sbc	r19, r1
    1b18:	30 93 c5 00 	sts	0x00C5, r19	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
    1b1c:	20 93 c4 00 	sts	0x00C4, r18	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
    1b20:	e2 ec       	ldi	r30, 0xC2	; 194
    1b22:	f0 e0       	ldi	r31, 0x00	; 0
    1b24:	80 81       	ld	r24, Z
    1b26:	8f 73       	andi	r24, 0x3F	; 63
    1b28:	80 83       	st	Z, r24
    1b2a:	d2 30       	cpi	r29, 0x02	; 2
    1b2c:	21 f4       	brne	.+8      	; 0x1b36 <_Z10UART0_Initjhh+0x72>
    1b2e:	80 81       	ld	r24, Z
    1b30:	88 60       	ori	r24, 0x08	; 8
    1b32:	80 83       	st	Z, r24
    1b34:	05 c0       	rjmp	.+10     	; 0x1b40 <_Z10UART0_Initjhh+0x7c>
    1b36:	e2 ec       	ldi	r30, 0xC2	; 194
    1b38:	f0 e0       	ldi	r31, 0x00	; 0
    1b3a:	80 81       	ld	r24, Z
    1b3c:	87 7f       	andi	r24, 0xF7	; 247
    1b3e:	80 83       	st	Z, r24
    1b40:	c2 30       	cpi	r28, 0x02	; 2
    1b42:	49 f4       	brne	.+18     	; 0x1b56 <_Z10UART0_Initjhh+0x92>
    1b44:	e2 ec       	ldi	r30, 0xC2	; 194
    1b46:	f0 e0       	ldi	r31, 0x00	; 0
    1b48:	80 81       	ld	r24, Z
    1b4a:	8f 7e       	andi	r24, 0xEF	; 239
    1b4c:	80 83       	st	Z, r24
    1b4e:	80 81       	ld	r24, Z
    1b50:	80 62       	ori	r24, 0x20	; 32
    1b52:	80 83       	st	Z, r24
    1b54:	0d c0       	rjmp	.+26     	; 0x1b70 <_Z10UART0_Initjhh+0xac>
    1b56:	c3 30       	cpi	r28, 0x03	; 3
    1b58:	31 f4       	brne	.+12     	; 0x1b66 <_Z10UART0_Initjhh+0xa2>
    1b5a:	e2 ec       	ldi	r30, 0xC2	; 194
    1b5c:	f0 e0       	ldi	r31, 0x00	; 0
    1b5e:	80 81       	ld	r24, Z
    1b60:	80 63       	ori	r24, 0x30	; 48
    1b62:	80 83       	st	Z, r24
    1b64:	05 c0       	rjmp	.+10     	; 0x1b70 <_Z10UART0_Initjhh+0xac>
    1b66:	e2 ec       	ldi	r30, 0xC2	; 194
    1b68:	f0 e0       	ldi	r31, 0x00	; 0
    1b6a:	80 81       	ld	r24, Z
    1b6c:	8f 7c       	andi	r24, 0xCF	; 207
    1b6e:	80 83       	st	Z, r24
    1b70:	e2 ec       	ldi	r30, 0xC2	; 194
    1b72:	f0 e0       	ldi	r31, 0x00	; 0
    1b74:	80 81       	ld	r24, Z
    1b76:	86 60       	ori	r24, 0x06	; 6
    1b78:	80 83       	st	Z, r24
    1b7a:	e1 ec       	ldi	r30, 0xC1	; 193
    1b7c:	f0 e0       	ldi	r31, 0x00	; 0
    1b7e:	80 81       	ld	r24, Z
    1b80:	80 6a       	ori	r24, 0xA0	; 160
    1b82:	80 83       	st	Z, r24
    1b84:	80 81       	ld	r24, Z
    1b86:	88 61       	ori	r24, 0x18	; 24
    1b88:	80 83       	st	Z, r24
    1b8a:	df 91       	pop	r29
    1b8c:	cf 91       	pop	r28
    1b8e:	08 95       	ret

00001b90 <_Z13UART0_GetCharv>:
    1b90:	90 91 4d 02 	lds	r25, 0x024D	; 0x80024d <_ZL12UART0_RxHead>
    1b94:	80 91 4c 02 	lds	r24, 0x024C	; 0x80024c <_ZL12UART0_RxTail>
    1b98:	98 17       	cp	r25, r24
    1b9a:	91 f0       	breq	.+36     	; 0x1bc0 <_Z13UART0_GetCharv+0x30>
    1b9c:	e0 91 4c 02 	lds	r30, 0x024C	; 0x80024c <_ZL12UART0_RxTail>
    1ba0:	ef 5f       	subi	r30, 0xFF	; 255
    1ba2:	ef 71       	andi	r30, 0x1F	; 31
    1ba4:	e0 93 4c 02 	sts	0x024C, r30	; 0x80024c <_ZL12UART0_RxTail>
    1ba8:	f0 e0       	ldi	r31, 0x00	; 0
    1baa:	e0 5b       	subi	r30, 0xB0	; 176
    1bac:	fd 4f       	sbci	r31, 0xFD	; 253
    1bae:	20 81       	ld	r18, Z
    1bb0:	80 91 4b 02 	lds	r24, 0x024B	; 0x80024b <_ZL17UART0_LastRxError>
    1bb4:	90 e0       	ldi	r25, 0x00	; 0
    1bb6:	98 2f       	mov	r25, r24
    1bb8:	88 27       	eor	r24, r24
    1bba:	82 0f       	add	r24, r18
    1bbc:	91 1d       	adc	r25, r1
    1bbe:	08 95       	ret
    1bc0:	80 e0       	ldi	r24, 0x00	; 0
    1bc2:	91 e0       	ldi	r25, 0x01	; 1
    1bc4:	08 95       	ret

00001bc6 <_Z15UART0_Availablev>:
    1bc6:	80 91 4d 02 	lds	r24, 0x024D	; 0x80024d <_ZL12UART0_RxHead>
    1bca:	20 91 4c 02 	lds	r18, 0x024C	; 0x80024c <_ZL12UART0_RxTail>
    1bce:	90 e0       	ldi	r25, 0x00	; 0
    1bd0:	4f 96       	adiw	r24, 0x1f	; 31
    1bd2:	82 1b       	sub	r24, r18
    1bd4:	91 09       	sbc	r25, r1
    1bd6:	6f e1       	ldi	r22, 0x1F	; 31
    1bd8:	70 e0       	ldi	r23, 0x00	; 0
    1bda:	0e 94 46 10 	call	0x208c	; 0x208c <__divmodhi4>
    1bde:	08 95       	ret

00001be0 <_Z15UART0_QueueCharh>:
    1be0:	90 91 4f 02 	lds	r25, 0x024F	; 0x80024f <_ZL12UART0_TxHead>
    1be4:	9f 5f       	subi	r25, 0xFF	; 255
    1be6:	9f 71       	andi	r25, 0x1F	; 31
    1be8:	20 91 4e 02 	lds	r18, 0x024E	; 0x80024e <_ZL12UART0_TxTail>
    1bec:	92 17       	cp	r25, r18
    1bee:	51 f0       	breq	.+20     	; 0x1c04 <_Z15UART0_QueueCharh+0x24>
    1bf0:	e9 2f       	mov	r30, r25
    1bf2:	f0 e0       	ldi	r31, 0x00	; 0
    1bf4:	e0 59       	subi	r30, 0x90	; 144
    1bf6:	fd 4f       	sbci	r31, 0xFD	; 253
    1bf8:	80 83       	st	Z, r24
    1bfa:	90 93 4f 02 	sts	0x024F, r25	; 0x80024f <_ZL12UART0_TxHead>
    1bfe:	81 e0       	ldi	r24, 0x01	; 1
    1c00:	90 e0       	ldi	r25, 0x00	; 0
    1c02:	08 95       	ret
    1c04:	80 e0       	ldi	r24, 0x00	; 0
    1c06:	90 e0       	ldi	r25, 0x00	; 0
    1c08:	08 95       	ret

00001c0a <_Z14UART0_PutQueuev>:
    1c0a:	e1 ec       	ldi	r30, 0xC1	; 193
    1c0c:	f0 e0       	ldi	r31, 0x00	; 0
    1c0e:	80 81       	ld	r24, Z
    1c10:	80 62       	ori	r24, 0x20	; 32
    1c12:	80 83       	st	Z, r24
    1c14:	08 95       	ret

00001c16 <__vector_20>:
    1c16:	1f 92       	push	r1
    1c18:	0f 92       	push	r0
    1c1a:	0f b6       	in	r0, 0x3f	; 63
    1c1c:	0f 92       	push	r0
    1c1e:	11 24       	eor	r1, r1
    1c20:	2f 93       	push	r18
    1c22:	8f 93       	push	r24
    1c24:	9f 93       	push	r25
    1c26:	ef 93       	push	r30
    1c28:	ff 93       	push	r31
    1c2a:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
    1c2e:	20 91 c6 00 	lds	r18, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
    1c32:	87 70       	andi	r24, 0x07	; 7
    1c34:	e0 91 4d 02 	lds	r30, 0x024D	; 0x80024d <_ZL12UART0_RxHead>
    1c38:	ef 5f       	subi	r30, 0xFF	; 255
    1c3a:	ef 71       	andi	r30, 0x1F	; 31
    1c3c:	90 91 4c 02 	lds	r25, 0x024C	; 0x80024c <_ZL12UART0_RxTail>
    1c40:	e9 17       	cp	r30, r25
    1c42:	39 f0       	breq	.+14     	; 0x1c52 <__vector_20+0x3c>
    1c44:	e0 93 4d 02 	sts	0x024D, r30	; 0x80024d <_ZL12UART0_RxHead>
    1c48:	f0 e0       	ldi	r31, 0x00	; 0
    1c4a:	e0 5b       	subi	r30, 0xB0	; 176
    1c4c:	fd 4f       	sbci	r31, 0xFD	; 253
    1c4e:	20 83       	st	Z, r18
    1c50:	01 c0       	rjmp	.+2      	; 0x1c54 <__vector_20+0x3e>
    1c52:	82 e0       	ldi	r24, 0x02	; 2
    1c54:	80 93 4b 02 	sts	0x024B, r24	; 0x80024b <_ZL17UART0_LastRxError>
    1c58:	ff 91       	pop	r31
    1c5a:	ef 91       	pop	r30
    1c5c:	9f 91       	pop	r25
    1c5e:	8f 91       	pop	r24
    1c60:	2f 91       	pop	r18
    1c62:	0f 90       	pop	r0
    1c64:	0f be       	out	0x3f, r0	; 63
    1c66:	0f 90       	pop	r0
    1c68:	1f 90       	pop	r1
    1c6a:	18 95       	reti

00001c6c <__vector_21>:
    1c6c:	1f 92       	push	r1
    1c6e:	0f 92       	push	r0
    1c70:	0f b6       	in	r0, 0x3f	; 63
    1c72:	0f 92       	push	r0
    1c74:	11 24       	eor	r1, r1
    1c76:	8f 93       	push	r24
    1c78:	9f 93       	push	r25
    1c7a:	ef 93       	push	r30
    1c7c:	ff 93       	push	r31
    1c7e:	90 91 4f 02 	lds	r25, 0x024F	; 0x80024f <_ZL12UART0_TxHead>
    1c82:	80 91 4e 02 	lds	r24, 0x024E	; 0x80024e <_ZL12UART0_TxTail>
    1c86:	98 17       	cp	r25, r24
    1c88:	69 f0       	breq	.+26     	; 0x1ca4 <__vector_21+0x38>
    1c8a:	e0 91 4e 02 	lds	r30, 0x024E	; 0x80024e <_ZL12UART0_TxTail>
    1c8e:	ef 5f       	subi	r30, 0xFF	; 255
    1c90:	ef 71       	andi	r30, 0x1F	; 31
    1c92:	e0 93 4e 02 	sts	0x024E, r30	; 0x80024e <_ZL12UART0_TxTail>
    1c96:	f0 e0       	ldi	r31, 0x00	; 0
    1c98:	e0 59       	subi	r30, 0x90	; 144
    1c9a:	fd 4f       	sbci	r31, 0xFD	; 253
    1c9c:	80 81       	ld	r24, Z
    1c9e:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
    1ca2:	05 c0       	rjmp	.+10     	; 0x1cae <__vector_21+0x42>
    1ca4:	e1 ec       	ldi	r30, 0xC1	; 193
    1ca6:	f0 e0       	ldi	r31, 0x00	; 0
    1ca8:	80 81       	ld	r24, Z
    1caa:	8f 7d       	andi	r24, 0xDF	; 223
    1cac:	80 83       	st	Z, r24
    1cae:	ff 91       	pop	r31
    1cb0:	ef 91       	pop	r30
    1cb2:	9f 91       	pop	r25
    1cb4:	8f 91       	pop	r24
    1cb6:	0f 90       	pop	r0
    1cb8:	0f be       	out	0x3f, r0	; 63
    1cba:	0f 90       	pop	r0
    1cbc:	1f 90       	pop	r1
    1cbe:	18 95       	reti

00001cc0 <_Z10UART1_Initjhh>:
    1cc0:	cf 93       	push	r28
    1cc2:	df 93       	push	r29
    1cc4:	d6 2f       	mov	r29, r22
    1cc6:	c4 2f       	mov	r28, r20
    1cc8:	53 9a       	sbi	0x0a, 3	; 10
    1cca:	5b 9a       	sbi	0x0b, 3	; 11
    1ccc:	10 92 0a 02 	sts	0x020A, r1	; 0x80020a <_ZL12UART1_TxHead>
    1cd0:	10 92 09 02 	sts	0x0209, r1	; 0x800209 <_ZL12UART1_TxTail>
    1cd4:	10 92 08 02 	sts	0x0208, r1	; 0x800208 <_ZL12UART1_RxHead>
    1cd8:	10 92 07 02 	sts	0x0207, r1	; 0x800207 <_ZL12UART1_RxTail>
    1cdc:	a0 e0       	ldi	r26, 0x00	; 0
    1cde:	b0 e0       	ldi	r27, 0x00	; 0
    1ce0:	88 0f       	add	r24, r24
    1ce2:	99 1f       	adc	r25, r25
    1ce4:	aa 1f       	adc	r26, r26
    1ce6:	bb 1f       	adc	r27, r27
    1ce8:	88 0f       	add	r24, r24
    1cea:	99 1f       	adc	r25, r25
    1cec:	aa 1f       	adc	r26, r26
    1cee:	bb 1f       	adc	r27, r27
    1cf0:	9c 01       	movw	r18, r24
    1cf2:	ad 01       	movw	r20, r26
    1cf4:	22 0f       	add	r18, r18
    1cf6:	33 1f       	adc	r19, r19
    1cf8:	44 1f       	adc	r20, r20
    1cfa:	55 1f       	adc	r21, r21
    1cfc:	22 0f       	add	r18, r18
    1cfe:	33 1f       	adc	r19, r19
    1d00:	44 1f       	adc	r20, r20
    1d02:	55 1f       	adc	r21, r21
    1d04:	60 e0       	ldi	r22, 0x00	; 0
    1d06:	7d e2       	ldi	r23, 0x2D	; 45
    1d08:	81 e3       	ldi	r24, 0x31	; 49
    1d0a:	91 e0       	ldi	r25, 0x01	; 1
    1d0c:	0e 94 5a 10 	call	0x20b4	; 0x20b4 <__udivmodsi4>
    1d10:	21 50       	subi	r18, 0x01	; 1
    1d12:	31 09       	sbc	r19, r1
    1d14:	30 93 cd 00 	sts	0x00CD, r19	; 0x8000cd <__TEXT_REGION_LENGTH__+0x7e00cd>
    1d18:	20 93 cc 00 	sts	0x00CC, r18	; 0x8000cc <__TEXT_REGION_LENGTH__+0x7e00cc>
    1d1c:	ea ec       	ldi	r30, 0xCA	; 202
    1d1e:	f0 e0       	ldi	r31, 0x00	; 0
    1d20:	80 81       	ld	r24, Z
    1d22:	8f 73       	andi	r24, 0x3F	; 63
    1d24:	80 83       	st	Z, r24
    1d26:	d2 30       	cpi	r29, 0x02	; 2
    1d28:	21 f4       	brne	.+8      	; 0x1d32 <_Z10UART1_Initjhh+0x72>
    1d2a:	80 81       	ld	r24, Z
    1d2c:	88 60       	ori	r24, 0x08	; 8
    1d2e:	80 83       	st	Z, r24
    1d30:	05 c0       	rjmp	.+10     	; 0x1d3c <_Z10UART1_Initjhh+0x7c>
    1d32:	ea ec       	ldi	r30, 0xCA	; 202
    1d34:	f0 e0       	ldi	r31, 0x00	; 0
    1d36:	80 81       	ld	r24, Z
    1d38:	87 7f       	andi	r24, 0xF7	; 247
    1d3a:	80 83       	st	Z, r24
    1d3c:	c2 30       	cpi	r28, 0x02	; 2
    1d3e:	31 f4       	brne	.+12     	; 0x1d4c <_Z10UART1_Initjhh+0x8c>
    1d40:	ea ec       	ldi	r30, 0xCA	; 202
    1d42:	f0 e0       	ldi	r31, 0x00	; 0
    1d44:	80 81       	ld	r24, Z
    1d46:	80 62       	ori	r24, 0x20	; 32
    1d48:	80 83       	st	Z, r24
    1d4a:	0d c0       	rjmp	.+26     	; 0x1d66 <_Z10UART1_Initjhh+0xa6>
    1d4c:	c3 30       	cpi	r28, 0x03	; 3
    1d4e:	31 f4       	brne	.+12     	; 0x1d5c <_Z10UART1_Initjhh+0x9c>
    1d50:	ea ec       	ldi	r30, 0xCA	; 202
    1d52:	f0 e0       	ldi	r31, 0x00	; 0
    1d54:	80 81       	ld	r24, Z
    1d56:	80 63       	ori	r24, 0x30	; 48
    1d58:	80 83       	st	Z, r24
    1d5a:	05 c0       	rjmp	.+10     	; 0x1d66 <_Z10UART1_Initjhh+0xa6>
    1d5c:	ea ec       	ldi	r30, 0xCA	; 202
    1d5e:	f0 e0       	ldi	r31, 0x00	; 0
    1d60:	80 81       	ld	r24, Z
    1d62:	8f 7c       	andi	r24, 0xCF	; 207
    1d64:	80 83       	st	Z, r24
    1d66:	ea ec       	ldi	r30, 0xCA	; 202
    1d68:	f0 e0       	ldi	r31, 0x00	; 0
    1d6a:	80 81       	ld	r24, Z
    1d6c:	86 60       	ori	r24, 0x06	; 6
    1d6e:	80 83       	st	Z, r24
    1d70:	e9 ec       	ldi	r30, 0xC9	; 201
    1d72:	f0 e0       	ldi	r31, 0x00	; 0
    1d74:	80 81       	ld	r24, Z
    1d76:	80 6a       	ori	r24, 0xA0	; 160
    1d78:	80 83       	st	Z, r24
    1d7a:	80 81       	ld	r24, Z
    1d7c:	88 61       	ori	r24, 0x18	; 24
    1d7e:	80 83       	st	Z, r24
    1d80:	df 91       	pop	r29
    1d82:	cf 91       	pop	r28
    1d84:	08 95       	ret

00001d86 <_Z13UART1_GetCharv>:
    1d86:	90 91 08 02 	lds	r25, 0x0208	; 0x800208 <_ZL12UART1_RxHead>
    1d8a:	80 91 07 02 	lds	r24, 0x0207	; 0x800207 <_ZL12UART1_RxTail>
    1d8e:	98 17       	cp	r25, r24
    1d90:	91 f0       	breq	.+36     	; 0x1db6 <_Z13UART1_GetCharv+0x30>
    1d92:	e0 91 07 02 	lds	r30, 0x0207	; 0x800207 <_ZL12UART1_RxTail>
    1d96:	ef 5f       	subi	r30, 0xFF	; 255
    1d98:	ef 71       	andi	r30, 0x1F	; 31
    1d9a:	e0 93 07 02 	sts	0x0207, r30	; 0x800207 <_ZL12UART1_RxTail>
    1d9e:	f0 e0       	ldi	r31, 0x00	; 0
    1da0:	e5 5f       	subi	r30, 0xF5	; 245
    1da2:	fd 4f       	sbci	r31, 0xFD	; 253
    1da4:	20 81       	ld	r18, Z
    1da6:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <_ZL17UART1_LastRxError>
    1daa:	90 e0       	ldi	r25, 0x00	; 0
    1dac:	98 2f       	mov	r25, r24
    1dae:	88 27       	eor	r24, r24
    1db0:	82 0f       	add	r24, r18
    1db2:	91 1d       	adc	r25, r1
    1db4:	08 95       	ret
    1db6:	80 e0       	ldi	r24, 0x00	; 0
    1db8:	91 e0       	ldi	r25, 0x01	; 1
    1dba:	08 95       	ret

00001dbc <_Z13UART1_PutCharh>:
    1dbc:	20 91 0a 02 	lds	r18, 0x020A	; 0x80020a <_ZL12UART1_TxHead>
    1dc0:	2f 5f       	subi	r18, 0xFF	; 255
    1dc2:	2f 71       	andi	r18, 0x1F	; 31
    1dc4:	90 91 09 02 	lds	r25, 0x0209	; 0x800209 <_ZL12UART1_TxTail>
    1dc8:	29 17       	cp	r18, r25
    1dca:	e1 f3       	breq	.-8      	; 0x1dc4 <_Z13UART1_PutCharh+0x8>
    1dcc:	e2 2f       	mov	r30, r18
    1dce:	f0 e0       	ldi	r31, 0x00	; 0
    1dd0:	e5 5d       	subi	r30, 0xD5	; 213
    1dd2:	fd 4f       	sbci	r31, 0xFD	; 253
    1dd4:	80 83       	st	Z, r24
    1dd6:	20 93 0a 02 	sts	0x020A, r18	; 0x80020a <_ZL12UART1_TxHead>
    1dda:	e9 ec       	ldi	r30, 0xC9	; 201
    1ddc:	f0 e0       	ldi	r31, 0x00	; 0
    1dde:	80 81       	ld	r24, Z
    1de0:	80 62       	ori	r24, 0x20	; 32
    1de2:	80 83       	st	Z, r24
    1de4:	08 95       	ret

00001de6 <_Z15UART1_PutStringPKc>:
    1de6:	cf 93       	push	r28
    1de8:	df 93       	push	r29
    1dea:	ec 01       	movw	r28, r24
    1dec:	88 81       	ld	r24, Y
    1dee:	88 23       	and	r24, r24
    1df0:	31 f0       	breq	.+12     	; 0x1dfe <_Z15UART1_PutStringPKc+0x18>
    1df2:	21 96       	adiw	r28, 0x01	; 1
    1df4:	0e 94 de 0e 	call	0x1dbc	; 0x1dbc <_Z13UART1_PutCharh>
    1df8:	89 91       	ld	r24, Y+
    1dfa:	81 11       	cpse	r24, r1
    1dfc:	fb cf       	rjmp	.-10     	; 0x1df4 <_Z15UART1_PutStringPKc+0xe>
    1dfe:	df 91       	pop	r29
    1e00:	cf 91       	pop	r28
    1e02:	08 95       	ret

00001e04 <_Z15UART1_Availablev>:
    1e04:	80 91 08 02 	lds	r24, 0x0208	; 0x800208 <_ZL12UART1_RxHead>
    1e08:	20 91 07 02 	lds	r18, 0x0207	; 0x800207 <_ZL12UART1_RxTail>
    1e0c:	90 e0       	ldi	r25, 0x00	; 0
    1e0e:	4f 96       	adiw	r24, 0x1f	; 31
    1e10:	82 1b       	sub	r24, r18
    1e12:	91 09       	sbc	r25, r1
    1e14:	6f e1       	ldi	r22, 0x1F	; 31
    1e16:	70 e0       	ldi	r23, 0x00	; 0
    1e18:	0e 94 46 10 	call	0x208c	; 0x208c <__divmodhi4>
    1e1c:	08 95       	ret

00001e1e <__vector_28>:
/*************************************************************************
Function: UART1 Receive Complete interrupt
Purpose:  called when the UART has received a character
**************************************************************************/
ISR(USART1_RX_vect)
{
    1e1e:	1f 92       	push	r1
    1e20:	0f 92       	push	r0
    1e22:	0f b6       	in	r0, 0x3f	; 63
    1e24:	0f 92       	push	r0
    1e26:	11 24       	eor	r1, r1
    1e28:	2f 93       	push	r18
    1e2a:	8f 93       	push	r24
    1e2c:	9f 93       	push	r25
    1e2e:	ef 93       	push	r30
    1e30:	ff 93       	push	r31
	unsigned char usr;
	unsigned char lastRxError;
	
	
	/* read UART status register and UART data register */
	usr  = UCSR1A;
    1e32:	80 91 c8 00 	lds	r24, 0x00C8	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7e00c8>
	data = UDR1;
    1e36:	20 91 ce 00 	lds	r18, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7e00ce>
	
	/* */
	lastRxError = (usr & (FE1 | DOR1));
    1e3a:	87 70       	andi	r24, 0x07	; 7
	
	/* calculate buffer index */
	tmphead = ( UART1_RxHead + 1) & UART1_RX_BUFFER_MASK;
    1e3c:	e0 91 08 02 	lds	r30, 0x0208	; 0x800208 <_ZL12UART1_RxHead>
    1e40:	ef 5f       	subi	r30, 0xFF	; 255
    1e42:	ef 71       	andi	r30, 0x1F	; 31
	
	if ( tmphead == UART1_RxTail )
    1e44:	90 91 07 02 	lds	r25, 0x0207	; 0x800207 <_ZL12UART1_RxTail>
    1e48:	e9 17       	cp	r30, r25
    1e4a:	39 f0       	breq	.+14     	; 0x1e5a <__vector_28+0x3c>
		lastRxError = UART_BUFFER_OVERFLOW >> 8;
	}
	else
	{
		/* store new index */
		UART1_RxHead = tmphead;
    1e4c:	e0 93 08 02 	sts	0x0208, r30	; 0x800208 <_ZL12UART1_RxHead>
		/* store received data in buffer */
		UART1_RxBuf[tmphead] = data;
    1e50:	f0 e0       	ldi	r31, 0x00	; 0
    1e52:	e5 5f       	subi	r30, 0xF5	; 245
    1e54:	fd 4f       	sbci	r31, 0xFD	; 253
    1e56:	20 83       	st	Z, r18
    1e58:	01 c0       	rjmp	.+2      	; 0x1e5c <__vector_28+0x3e>
	tmphead = ( UART1_RxHead + 1) & UART1_RX_BUFFER_MASK;
	
	if ( tmphead == UART1_RxTail )
	{
		/* error: receive buffer overflow */
		lastRxError = UART_BUFFER_OVERFLOW >> 8;
    1e5a:	82 e0       	ldi	r24, 0x02	; 2
		UART1_RxHead = tmphead;
		/* store received data in buffer */
		UART1_RxBuf[tmphead] = data;
	}

	UART1_LastRxError = lastRxError;
    1e5c:	80 93 06 02 	sts	0x0206, r24	; 0x800206 <_ZL17UART1_LastRxError>
}
    1e60:	ff 91       	pop	r31
    1e62:	ef 91       	pop	r30
    1e64:	9f 91       	pop	r25
    1e66:	8f 91       	pop	r24
    1e68:	2f 91       	pop	r18
    1e6a:	0f 90       	pop	r0
    1e6c:	0f be       	out	0x3f, r0	; 63
    1e6e:	0f 90       	pop	r0
    1e70:	1f 90       	pop	r1
    1e72:	18 95       	reti

00001e74 <__vector_29>:
/*************************************************************************
Function: UART1 Data Register Empty interrupt
Purpose:  called when the UART is ready to transmit the next byte
**************************************************************************/
ISR(USART1_UDRE_vect)
{
    1e74:	1f 92       	push	r1
    1e76:	0f 92       	push	r0
    1e78:	0f b6       	in	r0, 0x3f	; 63
    1e7a:	0f 92       	push	r0
    1e7c:	11 24       	eor	r1, r1
    1e7e:	8f 93       	push	r24
    1e80:	9f 93       	push	r25
    1e82:	ef 93       	push	r30
    1e84:	ff 93       	push	r31
	unsigned char tmptail;
	
	if ( UART1_TxHead != UART1_TxTail)
    1e86:	90 91 0a 02 	lds	r25, 0x020A	; 0x80020a <_ZL12UART1_TxHead>
    1e8a:	80 91 09 02 	lds	r24, 0x0209	; 0x800209 <_ZL12UART1_TxTail>
    1e8e:	98 17       	cp	r25, r24
    1e90:	69 f0       	breq	.+26     	; 0x1eac <__vector_29+0x38>
	{
		/* calculate and store new buffer index */
		tmptail = (UART1_TxTail + 1) & UART1_TX_BUFFER_MASK;
    1e92:	e0 91 09 02 	lds	r30, 0x0209	; 0x800209 <_ZL12UART1_TxTail>
    1e96:	ef 5f       	subi	r30, 0xFF	; 255
    1e98:	ef 71       	andi	r30, 0x1F	; 31
		UART1_TxTail = tmptail;
    1e9a:	e0 93 09 02 	sts	0x0209, r30	; 0x800209 <_ZL12UART1_TxTail>

		/* get one byte from buffer and write it to UART */
		UDR1 = UART1_TxBuf[tmptail];  /* start transmission */
    1e9e:	f0 e0       	ldi	r31, 0x00	; 0
    1ea0:	e5 5d       	subi	r30, 0xD5	; 213
    1ea2:	fd 4f       	sbci	r31, 0xFD	; 253
    1ea4:	80 81       	ld	r24, Z
    1ea6:	80 93 ce 00 	sts	0x00CE, r24	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7e00ce>
    1eaa:	05 c0       	rjmp	.+10     	; 0x1eb6 <__vector_29+0x42>
	}
	else
	{
		/* tx buffer empty, disable UDRE interrupt */
		UCSR1B &= ~(1 << UDRIE1);
    1eac:	e9 ec       	ldi	r30, 0xC9	; 201
    1eae:	f0 e0       	ldi	r31, 0x00	; 0
    1eb0:	80 81       	ld	r24, Z
    1eb2:	8f 7d       	andi	r24, 0xDF	; 223
    1eb4:	80 83       	st	Z, r24
	}
    1eb6:	ff 91       	pop	r31
    1eb8:	ef 91       	pop	r30
    1eba:	9f 91       	pop	r25
    1ebc:	8f 91       	pop	r24
    1ebe:	0f 90       	pop	r0
    1ec0:	0f be       	out	0x3f, r0	; 63
    1ec2:	0f 90       	pop	r0
    1ec4:	1f 90       	pop	r1
    1ec6:	18 95       	reti

00001ec8 <_Z7UI_Initv>:

MCP_Output LoopRelays[NUMBER_OF_LOOPS];
MCP_Output CtrlSwitchRelays[NUMBER_OF_CTRL_SWITCHES];

void UI_Init()
{
    1ec8:	ef 92       	push	r14
    1eca:	ff 92       	push	r15
    1ecc:	1f 93       	push	r17
    1ece:	cf 93       	push	r28
    1ed0:	df 93       	push	r29
    1ed2:	cd b7       	in	r28, 0x3d	; 61
    1ed4:	de b7       	in	r29, 0x3e	; 62
    1ed6:	64 97       	sbiw	r28, 0x14	; 20
    1ed8:	0f b6       	in	r0, 0x3f	; 63
    1eda:	f8 94       	cli
    1edc:	de bf       	out	0x3e, r29	; 62
    1ede:	0f be       	out	0x3f, r0	; 63
    1ee0:	cd bf       	out	0x3d, r28	; 61
	/* Initialize outputs UI LEDs */
	ModeRunLED = MCP_Output(MCP23017_UI_LEDS_ADDR, PortB, (MCP23017_Pin)UI_MODE_RUN_LED_PIN);
    1ee2:	25 e0       	ldi	r18, 0x05	; 5
    1ee4:	41 e0       	ldi	r20, 0x01	; 1
    1ee6:	60 e0       	ldi	r22, 0x00	; 0
    1ee8:	ce 01       	movw	r24, r28
    1eea:	41 96       	adiw	r24, 0x11	; 17
    1eec:	0e 94 0c 02 	call	0x418	; 0x418 <_ZN10MCP_OutputC1Eh13MCP23017_Port12MCP23017_Pin>
    1ef0:	89 89       	ldd	r24, Y+17	; 0x11
    1ef2:	9a 89       	ldd	r25, Y+18	; 0x12
    1ef4:	ab 89       	ldd	r26, Y+19	; 0x13
    1ef6:	bc 89       	ldd	r27, Y+20	; 0x14
    1ef8:	80 93 f8 02 	sts	0x02F8, r24	; 0x8002f8 <ModeRunLED>
    1efc:	90 93 f9 02 	sts	0x02F9, r25	; 0x8002f9 <ModeRunLED+0x1>
    1f00:	a0 93 fa 02 	sts	0x02FA, r26	; 0x8002fa <ModeRunLED+0x2>
    1f04:	b0 93 fb 02 	sts	0x02FB, r27	; 0x8002fb <ModeRunLED+0x3>
	ModeEditPresetLED = MCP_Output(MCP23017_UI_LEDS_ADDR, PortB, (MCP23017_Pin)UI_MODE_PRESET_LED_PIN);
    1f08:	26 e0       	ldi	r18, 0x06	; 6
    1f0a:	41 e0       	ldi	r20, 0x01	; 1
    1f0c:	60 e0       	ldi	r22, 0x00	; 0
    1f0e:	ce 01       	movw	r24, r28
    1f10:	0d 96       	adiw	r24, 0x0d	; 13
    1f12:	0e 94 0c 02 	call	0x418	; 0x418 <_ZN10MCP_OutputC1Eh13MCP23017_Port12MCP23017_Pin>
    1f16:	8d 85       	ldd	r24, Y+13	; 0x0d
    1f18:	9e 85       	ldd	r25, Y+14	; 0x0e
    1f1a:	af 85       	ldd	r26, Y+15	; 0x0f
    1f1c:	b8 89       	ldd	r27, Y+16	; 0x10
    1f1e:	80 93 f4 02 	sts	0x02F4, r24	; 0x8002f4 <ModeEditPresetLED>
    1f22:	90 93 f5 02 	sts	0x02F5, r25	; 0x8002f5 <ModeEditPresetLED+0x1>
    1f26:	a0 93 f6 02 	sts	0x02F6, r26	; 0x8002f6 <ModeEditPresetLED+0x2>
    1f2a:	b0 93 f7 02 	sts	0x02F7, r27	; 0x8002f7 <ModeEditPresetLED+0x3>
	ModeEditMidiLED = MCP_Output(MCP23017_UI_LEDS_ADDR, PortB, (MCP23017_Pin)UI_MODE_MIDI_LED_PIN);
    1f2e:	27 e0       	ldi	r18, 0x07	; 7
    1f30:	41 e0       	ldi	r20, 0x01	; 1
    1f32:	60 e0       	ldi	r22, 0x00	; 0
    1f34:	ce 01       	movw	r24, r28
    1f36:	09 96       	adiw	r24, 0x09	; 9
    1f38:	0e 94 0c 02 	call	0x418	; 0x418 <_ZN10MCP_OutputC1Eh13MCP23017_Port12MCP23017_Pin>
    1f3c:	89 85       	ldd	r24, Y+9	; 0x09
    1f3e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f40:	ab 85       	ldd	r26, Y+11	; 0x0b
    1f42:	bc 85       	ldd	r27, Y+12	; 0x0c
    1f44:	80 93 f0 02 	sts	0x02F0, r24	; 0x8002f0 <ModeEditMidiLED>
    1f48:	90 93 f1 02 	sts	0x02F1, r25	; 0x8002f1 <ModeEditMidiLED+0x1>
    1f4c:	a0 93 f2 02 	sts	0x02F2, r26	; 0x8002f2 <ModeEditMidiLED+0x2>
    1f50:	b0 93 f3 02 	sts	0x02F3, r27	; 0x8002f3 <ModeEditMidiLED+0x3>
    1f54:	0f 2e       	mov	r0, r31
    1f56:	f0 ed       	ldi	r31, 0xD0	; 208
    1f58:	ef 2e       	mov	r14, r31
    1f5a:	f2 e0       	ldi	r31, 0x02	; 2
    1f5c:	ff 2e       	mov	r15, r31
    1f5e:	f0 2d       	mov	r31, r0
	
	for (uint8_t i = 0; i < NUMBER_OF_LOOPS; i++)
    1f60:	10 e0       	ldi	r17, 0x00	; 0
	{
		LoopLEDs[i] = MCP_Output(MCP23017_UI_LEDS_ADDR, PortA, (MCP23017_Pin)i);
    1f62:	21 2f       	mov	r18, r17
    1f64:	40 e0       	ldi	r20, 0x00	; 0
    1f66:	60 e0       	ldi	r22, 0x00	; 0
    1f68:	ce 01       	movw	r24, r28
    1f6a:	05 96       	adiw	r24, 0x05	; 5
    1f6c:	0e 94 0c 02 	call	0x418	; 0x418 <_ZN10MCP_OutputC1Eh13MCP23017_Port12MCP23017_Pin>
    1f70:	8d 81       	ldd	r24, Y+5	; 0x05
    1f72:	9e 81       	ldd	r25, Y+6	; 0x06
    1f74:	af 81       	ldd	r26, Y+7	; 0x07
    1f76:	b8 85       	ldd	r27, Y+8	; 0x08
    1f78:	f7 01       	movw	r30, r14
    1f7a:	81 93       	st	Z+, r24
    1f7c:	91 93       	st	Z+, r25
    1f7e:	a1 93       	st	Z+, r26
    1f80:	b1 93       	st	Z+, r27
    1f82:	7f 01       	movw	r14, r30
	/* Initialize outputs UI LEDs */
	ModeRunLED = MCP_Output(MCP23017_UI_LEDS_ADDR, PortB, (MCP23017_Pin)UI_MODE_RUN_LED_PIN);
	ModeEditPresetLED = MCP_Output(MCP23017_UI_LEDS_ADDR, PortB, (MCP23017_Pin)UI_MODE_PRESET_LED_PIN);
	ModeEditMidiLED = MCP_Output(MCP23017_UI_LEDS_ADDR, PortB, (MCP23017_Pin)UI_MODE_MIDI_LED_PIN);
	
	for (uint8_t i = 0; i < NUMBER_OF_LOOPS; i++)
    1f84:	1f 5f       	subi	r17, 0xFF	; 255
    1f86:	18 30       	cpi	r17, 0x08	; 8
    1f88:	61 f7       	brne	.-40     	; 0x1f62 <_Z7UI_Initv+0x9a>
    1f8a:	0f 2e       	mov	r0, r31
    1f8c:	f0 ec       	ldi	r31, 0xC0	; 192
    1f8e:	ef 2e       	mov	r14, r31
    1f90:	f2 e0       	ldi	r31, 0x02	; 2
    1f92:	ff 2e       	mov	r15, r31
    1f94:	f0 2d       	mov	r31, r0
    1f96:	10 e0       	ldi	r17, 0x00	; 0
		LoopLEDs[i] = MCP_Output(MCP23017_UI_LEDS_ADDR, PortA, (MCP23017_Pin)i);
	}
		
	for (uint8_t i = 0; i < NUMBER_OF_CTRL_SWITCHES; i++)
	{
		CtrlSwitchLEDs[i] = MCP_Output(MCP23017_UI_LEDS_ADDR, PortB, (MCP23017_Pin)(i));
    1f98:	21 2f       	mov	r18, r17
    1f9a:	41 e0       	ldi	r20, 0x01	; 1
    1f9c:	60 e0       	ldi	r22, 0x00	; 0
    1f9e:	ce 01       	movw	r24, r28
    1fa0:	01 96       	adiw	r24, 0x01	; 1
    1fa2:	0e 94 0c 02 	call	0x418	; 0x418 <_ZN10MCP_OutputC1Eh13MCP23017_Port12MCP23017_Pin>
    1fa6:	89 81       	ldd	r24, Y+1	; 0x01
    1fa8:	9a 81       	ldd	r25, Y+2	; 0x02
    1faa:	ab 81       	ldd	r26, Y+3	; 0x03
    1fac:	bc 81       	ldd	r27, Y+4	; 0x04
    1fae:	f7 01       	movw	r30, r14
    1fb0:	81 93       	st	Z+, r24
    1fb2:	91 93       	st	Z+, r25
    1fb4:	a1 93       	st	Z+, r26
    1fb6:	b1 93       	st	Z+, r27
    1fb8:	7f 01       	movw	r14, r30
	for (uint8_t i = 0; i < NUMBER_OF_LOOPS; i++)
	{
		LoopLEDs[i] = MCP_Output(MCP23017_UI_LEDS_ADDR, PortA, (MCP23017_Pin)i);
	}
		
	for (uint8_t i = 0; i < NUMBER_OF_CTRL_SWITCHES; i++)
    1fba:	1f 5f       	subi	r17, 0xFF	; 255
    1fbc:	14 30       	cpi	r17, 0x04	; 4
    1fbe:	61 f7       	brne	.-40     	; 0x1f98 <_Z7UI_Initv+0xd0>
	//{
		//CtrlSwitchRelays[i] = MCP_Output(MCP23017_RELAYS_ADDR, PortB, (MCP23017_Pin)i);
	//}
	
	/* Set auto toggle speed */
	MCP_Output::SetAutoToggleSpeed(360/*ms*/);
    1fc0:	88 e6       	ldi	r24, 0x68	; 104
    1fc2:	91 e0       	ldi	r25, 0x01	; 1
    1fc4:	0e 94 52 02 	call	0x4a4	; 0x4a4 <_ZN10MCP_Output18SetAutoToggleSpeedEj>
}
    1fc8:	64 96       	adiw	r28, 0x14	; 20
    1fca:	0f b6       	in	r0, 0x3f	; 63
    1fcc:	f8 94       	cli
    1fce:	de bf       	out	0x3e, r29	; 62
    1fd0:	0f be       	out	0x3f, r0	; 63
    1fd2:	cd bf       	out	0x3d, r28	; 61
    1fd4:	df 91       	pop	r29
    1fd6:	cf 91       	pop	r28
    1fd8:	1f 91       	pop	r17
    1fda:	ff 90       	pop	r15
    1fdc:	ef 90       	pop	r14
    1fde:	08 95       	ret

00001fe0 <_GLOBAL__sub_I_ModeRunLED>:
    1fe0:	0f 93       	push	r16
    1fe2:	1f 93       	push	r17
    1fe4:	cf 93       	push	r28
    1fe6:	df 93       	push	r29
#include <avr/io.h>
#include <stdint-gcc.h>
#include "MCP23017.h"
#include "UI.h"

MCP_Output ModeRunLED;
    1fe8:	88 ef       	ldi	r24, 0xF8	; 248
    1fea:	92 e0       	ldi	r25, 0x02	; 2
    1fec:	0e 94 8e 01 	call	0x31c	; 0x31c <_ZN10MCP_OutputC1Ev>
MCP_Output ModeEditPresetLED;
    1ff0:	84 ef       	ldi	r24, 0xF4	; 244
    1ff2:	92 e0       	ldi	r25, 0x02	; 2
    1ff4:	0e 94 8e 01 	call	0x31c	; 0x31c <_ZN10MCP_OutputC1Ev>
MCP_Output ModeEditMidiLED;
    1ff8:	80 ef       	ldi	r24, 0xF0	; 240
    1ffa:	92 e0       	ldi	r25, 0x02	; 2
    1ffc:	0e 94 8e 01 	call	0x31c	; 0x31c <_ZN10MCP_OutputC1Ev>
    2000:	c0 ed       	ldi	r28, 0xD0	; 208
    2002:	d2 e0       	ldi	r29, 0x02	; 2
    2004:	00 ef       	ldi	r16, 0xF0	; 240
    2006:	12 e0       	ldi	r17, 0x02	; 2
MCP_Output LoopLEDs[NUMBER_OF_LOOPS];
    2008:	ce 01       	movw	r24, r28
    200a:	0e 94 8e 01 	call	0x31c	; 0x31c <_ZN10MCP_OutputC1Ev>
    200e:	24 96       	adiw	r28, 0x04	; 4
    2010:	0c 17       	cp	r16, r28
    2012:	1d 07       	cpc	r17, r29
    2014:	c9 f7       	brne	.-14     	; 0x2008 <_GLOBAL__sub_I_ModeRunLED+0x28>
MCP_Output CtrlSwitchLEDs[NUMBER_OF_CTRL_SWITCHES];
    2016:	80 ec       	ldi	r24, 0xC0	; 192
    2018:	92 e0       	ldi	r25, 0x02	; 2
    201a:	0e 94 8e 01 	call	0x31c	; 0x31c <_ZN10MCP_OutputC1Ev>
    201e:	84 ec       	ldi	r24, 0xC4	; 196
    2020:	92 e0       	ldi	r25, 0x02	; 2
    2022:	0e 94 8e 01 	call	0x31c	; 0x31c <_ZN10MCP_OutputC1Ev>
    2026:	88 ec       	ldi	r24, 0xC8	; 200
    2028:	92 e0       	ldi	r25, 0x02	; 2
    202a:	0e 94 8e 01 	call	0x31c	; 0x31c <_ZN10MCP_OutputC1Ev>
    202e:	8c ec       	ldi	r24, 0xCC	; 204
    2030:	92 e0       	ldi	r25, 0x02	; 2
    2032:	0e 94 8e 01 	call	0x31c	; 0x31c <_ZN10MCP_OutputC1Ev>
    2036:	c0 ea       	ldi	r28, 0xA0	; 160
    2038:	d2 e0       	ldi	r29, 0x02	; 2
    203a:	00 ec       	ldi	r16, 0xC0	; 192
    203c:	12 e0       	ldi	r17, 0x02	; 2

MCP_Output LoopRelays[NUMBER_OF_LOOPS];
    203e:	ce 01       	movw	r24, r28
    2040:	0e 94 8e 01 	call	0x31c	; 0x31c <_ZN10MCP_OutputC1Ev>
    2044:	24 96       	adiw	r28, 0x04	; 4
    2046:	c0 17       	cp	r28, r16
    2048:	d1 07       	cpc	r29, r17
    204a:	c9 f7       	brne	.-14     	; 0x203e <_GLOBAL__sub_I_ModeRunLED+0x5e>
MCP_Output CtrlSwitchRelays[NUMBER_OF_CTRL_SWITCHES];
    204c:	80 e9       	ldi	r24, 0x90	; 144
    204e:	92 e0       	ldi	r25, 0x02	; 2
    2050:	0e 94 8e 01 	call	0x31c	; 0x31c <_ZN10MCP_OutputC1Ev>
    2054:	84 e9       	ldi	r24, 0x94	; 148
    2056:	92 e0       	ldi	r25, 0x02	; 2
    2058:	0e 94 8e 01 	call	0x31c	; 0x31c <_ZN10MCP_OutputC1Ev>
    205c:	88 e9       	ldi	r24, 0x98	; 152
    205e:	92 e0       	ldi	r25, 0x02	; 2
    2060:	0e 94 8e 01 	call	0x31c	; 0x31c <_ZN10MCP_OutputC1Ev>
    2064:	8c e9       	ldi	r24, 0x9C	; 156
    2066:	92 e0       	ldi	r25, 0x02	; 2
    2068:	0e 94 8e 01 	call	0x31c	; 0x31c <_ZN10MCP_OutputC1Ev>
		//CtrlSwitchRelays[i] = MCP_Output(MCP23017_RELAYS_ADDR, PortB, (MCP23017_Pin)i);
	//}
	
	/* Set auto toggle speed */
	MCP_Output::SetAutoToggleSpeed(360/*ms*/);
}
    206c:	df 91       	pop	r29
    206e:	cf 91       	pop	r28
    2070:	1f 91       	pop	r17
    2072:	0f 91       	pop	r16
    2074:	08 95       	ret

00002076 <_Z12Util_Bit2Inth>:

uint8_t Util_Bit2Int(uint8_t val)
{
	uint8_t i = 0;
	
	while (val)
    2076:	88 23       	and	r24, r24
    2078:	31 f0       	breq	.+12     	; 0x2086 <_Z12Util_Bit2Inth+0x10>
    207a:	90 e0       	ldi	r25, 0x00	; 0
	{
		val = (val >> 1);
    207c:	86 95       	lsr	r24
		i++;
    207e:	9f 5f       	subi	r25, 0xFF	; 255

uint8_t Util_Bit2Int(uint8_t val)
{
	uint8_t i = 0;
	
	while (val)
    2080:	81 11       	cpse	r24, r1
    2082:	fc cf       	rjmp	.-8      	; 0x207c <_Z12Util_Bit2Inth+0x6>
    2084:	01 c0       	rjmp	.+2      	; 0x2088 <_Z12Util_Bit2Inth+0x12>
	return b;
}

uint8_t Util_Bit2Int(uint8_t val)
{
	uint8_t i = 0;
    2086:	90 e0       	ldi	r25, 0x00	; 0
		val = (val >> 1);
		i++;
	}
	
	return i;
    2088:	89 2f       	mov	r24, r25
    208a:	08 95       	ret

0000208c <__divmodhi4>:
    208c:	97 fb       	bst	r25, 7
    208e:	07 2e       	mov	r0, r23
    2090:	16 f4       	brtc	.+4      	; 0x2096 <__divmodhi4+0xa>
    2092:	00 94       	com	r0
    2094:	07 d0       	rcall	.+14     	; 0x20a4 <__divmodhi4_neg1>
    2096:	77 fd       	sbrc	r23, 7
    2098:	09 d0       	rcall	.+18     	; 0x20ac <__divmodhi4_neg2>
    209a:	0e 94 8d 10 	call	0x211a	; 0x211a <__udivmodhi4>
    209e:	07 fc       	sbrc	r0, 7
    20a0:	05 d0       	rcall	.+10     	; 0x20ac <__divmodhi4_neg2>
    20a2:	3e f4       	brtc	.+14     	; 0x20b2 <__divmodhi4_exit>

000020a4 <__divmodhi4_neg1>:
    20a4:	90 95       	com	r25
    20a6:	81 95       	neg	r24
    20a8:	9f 4f       	sbci	r25, 0xFF	; 255
    20aa:	08 95       	ret

000020ac <__divmodhi4_neg2>:
    20ac:	70 95       	com	r23
    20ae:	61 95       	neg	r22
    20b0:	7f 4f       	sbci	r23, 0xFF	; 255

000020b2 <__divmodhi4_exit>:
    20b2:	08 95       	ret

000020b4 <__udivmodsi4>:
    20b4:	a1 e2       	ldi	r26, 0x21	; 33
    20b6:	1a 2e       	mov	r1, r26
    20b8:	aa 1b       	sub	r26, r26
    20ba:	bb 1b       	sub	r27, r27
    20bc:	fd 01       	movw	r30, r26
    20be:	0d c0       	rjmp	.+26     	; 0x20da <__udivmodsi4_ep>

000020c0 <__udivmodsi4_loop>:
    20c0:	aa 1f       	adc	r26, r26
    20c2:	bb 1f       	adc	r27, r27
    20c4:	ee 1f       	adc	r30, r30
    20c6:	ff 1f       	adc	r31, r31
    20c8:	a2 17       	cp	r26, r18
    20ca:	b3 07       	cpc	r27, r19
    20cc:	e4 07       	cpc	r30, r20
    20ce:	f5 07       	cpc	r31, r21
    20d0:	20 f0       	brcs	.+8      	; 0x20da <__udivmodsi4_ep>
    20d2:	a2 1b       	sub	r26, r18
    20d4:	b3 0b       	sbc	r27, r19
    20d6:	e4 0b       	sbc	r30, r20
    20d8:	f5 0b       	sbc	r31, r21

000020da <__udivmodsi4_ep>:
    20da:	66 1f       	adc	r22, r22
    20dc:	77 1f       	adc	r23, r23
    20de:	88 1f       	adc	r24, r24
    20e0:	99 1f       	adc	r25, r25
    20e2:	1a 94       	dec	r1
    20e4:	69 f7       	brne	.-38     	; 0x20c0 <__udivmodsi4_loop>
    20e6:	60 95       	com	r22
    20e8:	70 95       	com	r23
    20ea:	80 95       	com	r24
    20ec:	90 95       	com	r25
    20ee:	9b 01       	movw	r18, r22
    20f0:	ac 01       	movw	r20, r24
    20f2:	bd 01       	movw	r22, r26
    20f4:	cf 01       	movw	r24, r30
    20f6:	08 95       	ret

000020f8 <__tablejump2__>:
    20f8:	ee 0f       	add	r30, r30
    20fa:	ff 1f       	adc	r31, r31
    20fc:	05 90       	lpm	r0, Z+
    20fe:	f4 91       	lpm	r31, Z
    2100:	e0 2d       	mov	r30, r0
    2102:	09 94       	ijmp

00002104 <__muluhisi3>:
    2104:	0e 94 a1 10 	call	0x2142	; 0x2142 <__umulhisi3>
    2108:	a5 9f       	mul	r26, r21
    210a:	90 0d       	add	r25, r0
    210c:	b4 9f       	mul	r27, r20
    210e:	90 0d       	add	r25, r0
    2110:	a4 9f       	mul	r26, r20
    2112:	80 0d       	add	r24, r0
    2114:	91 1d       	adc	r25, r1
    2116:	11 24       	eor	r1, r1
    2118:	08 95       	ret

0000211a <__udivmodhi4>:
    211a:	aa 1b       	sub	r26, r26
    211c:	bb 1b       	sub	r27, r27
    211e:	51 e1       	ldi	r21, 0x11	; 17
    2120:	07 c0       	rjmp	.+14     	; 0x2130 <__udivmodhi4_ep>

00002122 <__udivmodhi4_loop>:
    2122:	aa 1f       	adc	r26, r26
    2124:	bb 1f       	adc	r27, r27
    2126:	a6 17       	cp	r26, r22
    2128:	b7 07       	cpc	r27, r23
    212a:	10 f0       	brcs	.+4      	; 0x2130 <__udivmodhi4_ep>
    212c:	a6 1b       	sub	r26, r22
    212e:	b7 0b       	sbc	r27, r23

00002130 <__udivmodhi4_ep>:
    2130:	88 1f       	adc	r24, r24
    2132:	99 1f       	adc	r25, r25
    2134:	5a 95       	dec	r21
    2136:	a9 f7       	brne	.-22     	; 0x2122 <__udivmodhi4_loop>
    2138:	80 95       	com	r24
    213a:	90 95       	com	r25
    213c:	bc 01       	movw	r22, r24
    213e:	cd 01       	movw	r24, r26
    2140:	08 95       	ret

00002142 <__umulhisi3>:
    2142:	a2 9f       	mul	r26, r18
    2144:	b0 01       	movw	r22, r0
    2146:	b3 9f       	mul	r27, r19
    2148:	c0 01       	movw	r24, r0
    214a:	a3 9f       	mul	r26, r19
    214c:	70 0d       	add	r23, r0
    214e:	81 1d       	adc	r24, r1
    2150:	11 24       	eor	r1, r1
    2152:	91 1d       	adc	r25, r1
    2154:	b2 9f       	mul	r27, r18
    2156:	70 0d       	add	r23, r0
    2158:	81 1d       	adc	r24, r1
    215a:	11 24       	eor	r1, r1
    215c:	91 1d       	adc	r25, r1
    215e:	08 95       	ret

00002160 <eeprom_read_block>:
    2160:	dc 01       	movw	r26, r24
    2162:	cb 01       	movw	r24, r22

00002164 <eeprom_read_blraw>:
    2164:	fc 01       	movw	r30, r24
    2166:	f9 99       	sbic	0x1f, 1	; 31
    2168:	fe cf       	rjmp	.-4      	; 0x2166 <eeprom_read_blraw+0x2>
    216a:	06 c0       	rjmp	.+12     	; 0x2178 <eeprom_read_blraw+0x14>
    216c:	f2 bd       	out	0x22, r31	; 34
    216e:	e1 bd       	out	0x21, r30	; 33
    2170:	f8 9a       	sbi	0x1f, 0	; 31
    2172:	31 96       	adiw	r30, 0x01	; 1
    2174:	00 b4       	in	r0, 0x20	; 32
    2176:	0d 92       	st	X+, r0
    2178:	41 50       	subi	r20, 0x01	; 1
    217a:	50 40       	sbci	r21, 0x00	; 0
    217c:	b8 f7       	brcc	.-18     	; 0x216c <eeprom_read_blraw+0x8>
    217e:	08 95       	ret

00002180 <eeprom_read_byte>:
    2180:	f9 99       	sbic	0x1f, 1	; 31
    2182:	fe cf       	rjmp	.-4      	; 0x2180 <eeprom_read_byte>
    2184:	92 bd       	out	0x22, r25	; 34
    2186:	81 bd       	out	0x21, r24	; 33
    2188:	f8 9a       	sbi	0x1f, 0	; 31
    218a:	99 27       	eor	r25, r25
    218c:	80 b5       	in	r24, 0x20	; 32
    218e:	08 95       	ret

00002190 <eeprom_write_block>:
    2190:	dc 01       	movw	r26, r24
    2192:	cb 01       	movw	r24, r22
    2194:	03 c0       	rjmp	.+6      	; 0x219c <eeprom_write_block+0xc>
    2196:	2d 91       	ld	r18, X+
    2198:	0e 94 d3 10 	call	0x21a6	; 0x21a6 <eeprom_write_r18>
    219c:	41 50       	subi	r20, 0x01	; 1
    219e:	50 40       	sbci	r21, 0x00	; 0
    21a0:	d0 f7       	brcc	.-12     	; 0x2196 <eeprom_write_block+0x6>
    21a2:	08 95       	ret

000021a4 <eeprom_write_byte>:
    21a4:	26 2f       	mov	r18, r22

000021a6 <eeprom_write_r18>:
    21a6:	f9 99       	sbic	0x1f, 1	; 31
    21a8:	fe cf       	rjmp	.-4      	; 0x21a6 <eeprom_write_r18>
    21aa:	1f ba       	out	0x1f, r1	; 31
    21ac:	92 bd       	out	0x22, r25	; 34
    21ae:	81 bd       	out	0x21, r24	; 33
    21b0:	20 bd       	out	0x20, r18	; 32
    21b2:	0f b6       	in	r0, 0x3f	; 63
    21b4:	f8 94       	cli
    21b6:	fa 9a       	sbi	0x1f, 2	; 31
    21b8:	f9 9a       	sbi	0x1f, 1	; 31
    21ba:	0f be       	out	0x3f, r0	; 63
    21bc:	01 96       	adiw	r24, 0x01	; 1
    21be:	08 95       	ret

000021c0 <_exit>:
    21c0:	f8 94       	cli

000021c2 <__stop_program>:
    21c2:	ff cf       	rjmp	.-2      	; 0x21c2 <__stop_program>
