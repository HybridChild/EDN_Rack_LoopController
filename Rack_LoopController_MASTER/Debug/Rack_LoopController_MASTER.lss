
Rack_LoopController_MASTER.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000002a  00800100  0000144a  000014de  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000144a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000158  0080012a  0080012a  00001508  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001508  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001538  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000003d0  00000000  00000000  00001578  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00003b3b  00000000  00000000  00001948  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001924  00000000  00000000  00005483  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001c77  00000000  00000000  00006da7  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000860  00000000  00000000  00008a20  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00001703  00000000  00000000  00009280  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001a03  00000000  00000000  0000a983  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000300  00000000  00000000  0000c386  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__ctors_end>
       4:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
       8:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
       c:	0c 94 76 05 	jmp	0xaec	; 0xaec <__vector_3>
      10:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
      14:	0c 94 55 05 	jmp	0xaaa	; 0xaaa <__vector_5>
      18:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
      1c:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
      20:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
      24:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
      28:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
      2c:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
      30:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
      34:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
      38:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
      3c:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
      40:	0c 94 6a 06 	jmp	0xcd4	; 0xcd4 <__vector_16>
      44:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
      48:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
      4c:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
      50:	0c 94 b2 07 	jmp	0xf64	; 0xf64 <__vector_20>
      54:	0c 94 dd 07 	jmp	0xfba	; 0xfba <__vector_21>
      58:	0c 94 13 05 	jmp	0xa26	; 0xa26 <__vector_22>
      5c:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
      60:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
      64:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
      68:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
      6c:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
      70:	0c 94 92 08 	jmp	0x1124	; 0x1124 <__vector_28>
      74:	0c 94 bd 08 	jmp	0x117a	; 0x117a <__vector_29>
      78:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>

0000007c <__ctors_start>:
      7c:	73 09       	sbc	r23, r3

0000007e <__ctors_end>:
      7e:	11 24       	eor	r1, r1
      80:	1f be       	out	0x3f, r1	; 63
      82:	cf ef       	ldi	r28, 0xFF	; 255
      84:	d8 e0       	ldi	r29, 0x08	; 8
      86:	de bf       	out	0x3e, r29	; 62
      88:	cd bf       	out	0x3d, r28	; 61

0000008a <__do_copy_data>:
      8a:	11 e0       	ldi	r17, 0x01	; 1
      8c:	a0 e0       	ldi	r26, 0x00	; 0
      8e:	b1 e0       	ldi	r27, 0x01	; 1
      90:	ea e4       	ldi	r30, 0x4A	; 74
      92:	f4 e1       	ldi	r31, 0x14	; 20
      94:	02 c0       	rjmp	.+4      	; 0x9a <__do_copy_data+0x10>
      96:	05 90       	lpm	r0, Z+
      98:	0d 92       	st	X+, r0
      9a:	aa 32       	cpi	r26, 0x2A	; 42
      9c:	b1 07       	cpc	r27, r17
      9e:	d9 f7       	brne	.-10     	; 0x96 <__do_copy_data+0xc>

000000a0 <__do_clear_bss>:
      a0:	22 e0       	ldi	r18, 0x02	; 2
      a2:	aa e2       	ldi	r26, 0x2A	; 42
      a4:	b1 e0       	ldi	r27, 0x01	; 1
      a6:	01 c0       	rjmp	.+2      	; 0xaa <.do_clear_bss_start>

000000a8 <.do_clear_bss_loop>:
      a8:	1d 92       	st	X+, r1

000000aa <.do_clear_bss_start>:
      aa:	a2 38       	cpi	r26, 0x82	; 130
      ac:	b2 07       	cpc	r27, r18
      ae:	e1 f7       	brne	.-8      	; 0xa8 <.do_clear_bss_loop>

000000b0 <__do_global_ctors>:
      b0:	10 e0       	ldi	r17, 0x00	; 0
      b2:	cf e3       	ldi	r28, 0x3F	; 63
      b4:	d0 e0       	ldi	r29, 0x00	; 0
      b6:	04 c0       	rjmp	.+8      	; 0xc0 <__do_global_ctors+0x10>
      b8:	21 97       	sbiw	r28, 0x01	; 1
      ba:	fe 01       	movw	r30, r28
      bc:	0e 94 f8 09 	call	0x13f0	; 0x13f0 <__tablejump2__>
      c0:	ce 33       	cpi	r28, 0x3E	; 62
      c2:	d1 07       	cpc	r29, r17
      c4:	c9 f7       	brne	.-14     	; 0xb8 <__do_global_ctors+0x8>
      c6:	0e 94 41 01 	call	0x282	; 0x282 <main>
      ca:	0c 94 23 0a 	jmp	0x1446	; 0x1446 <_exit>

000000ce <__bad_interrupt>:
      ce:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000d2 <_Z24Handle_MIDIProgramChangev>:
#include "RotaryEncoder.h"
#include "UI.h"
#include "SP10281_3x7segment.h"

void Handle_MIDIProgramChange()
{
      d2:	08 95       	ret

000000d4 <_Z19Handle_PedalCommand3CMDhPh>:
unsigned char Handle_PedalCommand(CMD cmd, uint8_t length, uint8_t *dat)
{
	unsigned char response = ACK_BYTE;
	
	/* Handle command */
	switch (cmd)
      d4:	82 3b       	cpi	r24, 0xB2	; 178
      d6:	51 f0       	breq	.+20     	; 0xec <_Z19Handle_PedalCommand3CMDhPh+0x18>
      d8:	84 3b       	cpi	r24, 0xB4	; 180
      da:	71 f0       	breq	.+28     	; 0xf8 <_Z19Handle_PedalCommand3CMDhPh+0x24>
      dc:	81 3b       	cpi	r24, 0xB1	; 177
      de:	91 f4       	brne	.+36     	; 0x104 <_Z19Handle_PedalCommand3CMDhPh+0x30>
	{
		case FootswitchShortPress:
			SP10281_WriteNumber(1);
      e0:	81 e0       	ldi	r24, 0x01	; 1
      e2:	90 e0       	ldi	r25, 0x00	; 0
      e4:	0e 94 07 06 	call	0xc0e	; 0xc0e <_Z19SP10281_WriteNumbers>
	// Do something with MIDI_ReceivedProgram
}

unsigned char Handle_PedalCommand(CMD cmd, uint8_t length, uint8_t *dat)
{
	unsigned char response = ACK_BYTE;
      e8:	8c ea       	ldi	r24, 0xAC	; 172
	/* Handle command */
	switch (cmd)
	{
		case FootswitchShortPress:
			SP10281_WriteNumber(1);
			break;
      ea:	08 95       	ret
		case FootswitchLongPress:
			SP10281_WriteNumber(2);
      ec:	82 e0       	ldi	r24, 0x02	; 2
      ee:	90 e0       	ldi	r25, 0x00	; 0
      f0:	0e 94 07 06 	call	0xc0e	; 0xc0e <_Z19SP10281_WriteNumbers>
	// Do something with MIDI_ReceivedProgram
}

unsigned char Handle_PedalCommand(CMD cmd, uint8_t length, uint8_t *dat)
{
	unsigned char response = ACK_BYTE;
      f4:	8c ea       	ldi	r24, 0xAC	; 172
		case FootswitchShortPress:
			SP10281_WriteNumber(1);
			break;
		case FootswitchLongPress:
			SP10281_WriteNumber(2);
			break;
      f6:	08 95       	ret
		case FootswitchLongLongPress:
			SP10281_WriteNumber(3);
      f8:	83 e0       	ldi	r24, 0x03	; 3
      fa:	90 e0       	ldi	r25, 0x00	; 0
      fc:	0e 94 07 06 	call	0xc0e	; 0xc0e <_Z19SP10281_WriteNumbers>
	// Do something with MIDI_ReceivedProgram
}

unsigned char Handle_PedalCommand(CMD cmd, uint8_t length, uint8_t *dat)
{
	unsigned char response = ACK_BYTE;
     100:	8c ea       	ldi	r24, 0xAC	; 172
		case FootswitchLongPress:
			SP10281_WriteNumber(2);
			break;
		case FootswitchLongLongPress:
			SP10281_WriteNumber(3);
			break;
     102:	08 95       	ret
		default:
			response = NACK_BYTE;
     104:	8a e2       	ldi	r24, 0x2A	; 42
			break;
	}
	
	return response;
}
     106:	08 95       	ret

00000108 <_Z26Handle_RotaryEncoderActionv>:


void Handle_RotaryEncoderAction()
{
     108:	ef 92       	push	r14
     10a:	0f 93       	push	r16
	volatile static uint8_t rotCnt = 0;
	
	switch (RotEnc_State)
     10c:	80 91 b1 01 	lds	r24, 0x01B1	; 0x8001b1 <RotEnc_State>
     110:	82 30       	cpi	r24, 0x02	; 2
     112:	59 f0       	breq	.+22     	; 0x12a <_Z26Handle_RotaryEncoderActionv+0x22>
     114:	18 f4       	brcc	.+6      	; 0x11c <_Z26Handle_RotaryEncoderActionv+0x14>
     116:	81 30       	cpi	r24, 0x01	; 1
     118:	49 f1       	breq	.+82     	; 0x16c <_Z26Handle_RotaryEncoderActionv+0x64>
     11a:	59 c0       	rjmp	.+178    	; 0x1ce <_Z26Handle_RotaryEncoderActionv+0xc6>
     11c:	83 30       	cpi	r24, 0x03	; 3
     11e:	09 f4       	brne	.+2      	; 0x122 <_Z26Handle_RotaryEncoderActionv+0x1a>
     120:	45 c0       	rjmp	.+138    	; 0x1ac <_Z26Handle_RotaryEncoderActionv+0xa4>
     122:	86 30       	cpi	r24, 0x06	; 6
     124:	09 f4       	brne	.+2      	; 0x128 <_Z26Handle_RotaryEncoderActionv+0x20>
     126:	4b c0       	rjmp	.+150    	; 0x1be <_Z26Handle_RotaryEncoderActionv+0xb6>
     128:	52 c0       	rjmp	.+164    	; 0x1ce <_Z26Handle_RotaryEncoderActionv+0xc6>
	{
		case ROT_LEFT:
			if (rotCnt < 7)
     12a:	80 91 2a 01 	lds	r24, 0x012A	; 0x80012a <__data_end>
     12e:	87 30       	cpi	r24, 0x07	; 7
     130:	08 f0       	brcs	.+2      	; 0x134 <_Z26Handle_RotaryEncoderActionv+0x2c>
     132:	4d c0       	rjmp	.+154    	; 0x1ce <_Z26Handle_RotaryEncoderActionv+0xc6>
			{
				LoopPreset_LEDs[rotCnt].Clear();
     134:	80 91 2a 01 	lds	r24, 0x012A	; 0x80012a <__data_end>
     138:	90 e0       	ldi	r25, 0x00	; 0
     13a:	88 0f       	add	r24, r24
     13c:	99 1f       	adc	r25, r25
     13e:	88 0f       	add	r24, r24
     140:	99 1f       	adc	r25, r25
     142:	8a 5a       	subi	r24, 0xAA	; 170
     144:	9d 4f       	sbci	r25, 0xFD	; 253
     146:	0e 94 21 02 	call	0x442	; 0x442 <_ZN10MCP_Output5ClearEv>
				rotCnt++;
     14a:	80 91 2a 01 	lds	r24, 0x012A	; 0x80012a <__data_end>
     14e:	8f 5f       	subi	r24, 0xFF	; 255
     150:	80 93 2a 01 	sts	0x012A, r24	; 0x80012a <__data_end>
				LoopPreset_LEDs[rotCnt].Set();
     154:	80 91 2a 01 	lds	r24, 0x012A	; 0x80012a <__data_end>
     158:	90 e0       	ldi	r25, 0x00	; 0
     15a:	88 0f       	add	r24, r24
     15c:	99 1f       	adc	r25, r25
     15e:	88 0f       	add	r24, r24
     160:	99 1f       	adc	r25, r25
     162:	8a 5a       	subi	r24, 0xAA	; 170
     164:	9d 4f       	sbci	r25, 0xFD	; 253
     166:	0e 94 e4 01 	call	0x3c8	; 0x3c8 <_ZN10MCP_Output3SetEv>
     16a:	31 c0       	rjmp	.+98     	; 0x1ce <_Z26Handle_RotaryEncoderActionv+0xc6>
			}
			break;
		case ROT_RIGHT:
			if (rotCnt > 0)
     16c:	80 91 2a 01 	lds	r24, 0x012A	; 0x80012a <__data_end>
     170:	88 23       	and	r24, r24
     172:	69 f1       	breq	.+90     	; 0x1ce <_Z26Handle_RotaryEncoderActionv+0xc6>
			{
				LoopPreset_LEDs[rotCnt].Clear();
     174:	80 91 2a 01 	lds	r24, 0x012A	; 0x80012a <__data_end>
     178:	90 e0       	ldi	r25, 0x00	; 0
     17a:	88 0f       	add	r24, r24
     17c:	99 1f       	adc	r25, r25
     17e:	88 0f       	add	r24, r24
     180:	99 1f       	adc	r25, r25
     182:	8a 5a       	subi	r24, 0xAA	; 170
     184:	9d 4f       	sbci	r25, 0xFD	; 253
     186:	0e 94 21 02 	call	0x442	; 0x442 <_ZN10MCP_Output5ClearEv>
				rotCnt--;
     18a:	80 91 2a 01 	lds	r24, 0x012A	; 0x80012a <__data_end>
     18e:	81 50       	subi	r24, 0x01	; 1
     190:	80 93 2a 01 	sts	0x012A, r24	; 0x80012a <__data_end>
				LoopPreset_LEDs[rotCnt].Set();
     194:	80 91 2a 01 	lds	r24, 0x012A	; 0x80012a <__data_end>
     198:	90 e0       	ldi	r25, 0x00	; 0
     19a:	88 0f       	add	r24, r24
     19c:	99 1f       	adc	r25, r25
     19e:	88 0f       	add	r24, r24
     1a0:	99 1f       	adc	r25, r25
     1a2:	8a 5a       	subi	r24, 0xAA	; 170
     1a4:	9d 4f       	sbci	r25, 0xFD	; 253
     1a6:	0e 94 e4 01 	call	0x3c8	; 0x3c8 <_ZN10MCP_Output3SetEv>
     1aa:	11 c0       	rjmp	.+34     	; 0x1ce <_Z26Handle_RotaryEncoderActionv+0xc6>
			}
			break;
		case SHORT_PRESS:
			SP10281_WriteChar('s', 'h', 'r', 0, 0, 0);
     1ac:	e1 2c       	mov	r14, r1
     1ae:	00 e0       	ldi	r16, 0x00	; 0
     1b0:	20 e0       	ldi	r18, 0x00	; 0
     1b2:	42 e7       	ldi	r20, 0x72	; 114
     1b4:	68 e6       	ldi	r22, 0x68	; 104
     1b6:	83 e7       	ldi	r24, 0x73	; 115
     1b8:	0e 94 ea 05 	call	0xbd4	; 0xbd4 <_Z17SP10281_WriteCharccchhh>
			break;
     1bc:	08 c0       	rjmp	.+16     	; 0x1ce <_Z26Handle_RotaryEncoderActionv+0xc6>
		case LONG_PRESS:
			SP10281_WriteChar('l', 'o', 'n', 0, 0, 0);
     1be:	e1 2c       	mov	r14, r1
     1c0:	00 e0       	ldi	r16, 0x00	; 0
     1c2:	20 e0       	ldi	r18, 0x00	; 0
     1c4:	4e e6       	ldi	r20, 0x6E	; 110
     1c6:	6f e6       	ldi	r22, 0x6F	; 111
     1c8:	8c e6       	ldi	r24, 0x6C	; 108
     1ca:	0e 94 ea 05 	call	0xbd4	; 0xbd4 <_Z17SP10281_WriteCharccchhh>
			break;
		default:
			break;
	}
	
	RotEnc_State = IDLE;
     1ce:	10 92 b1 01 	sts	0x01B1, r1	; 0x8001b1 <RotEnc_State>
     1d2:	0e 94 4c 05 	call	0xa98	; 0xa98 <_Z29RotaryEncoder_EnableInterruptv>
     1d6:	0f 91       	pop	r16
     1d8:	ef 90       	pop	r14
     1da:	08 95       	ret

000001dc <_Z8i2c_initv>:
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWEA);
	while(!(TWCR & (1<<TWINT)));    

    return TWDR;

}/* i2c_readAck */
     1dc:	10 92 b9 00 	sts	0x00B9, r1	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
     1e0:	8c e5       	ldi	r24, 0x5C	; 92
     1e2:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7e00b8>
     1e6:	08 95       	ret

000001e8 <_Z9i2c_starth>:
     1e8:	94 ea       	ldi	r25, 0xA4	; 164
     1ea:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
     1ee:	ec eb       	ldi	r30, 0xBC	; 188
     1f0:	f0 e0       	ldi	r31, 0x00	; 0
     1f2:	90 81       	ld	r25, Z
     1f4:	99 23       	and	r25, r25
     1f6:	ec f7       	brge	.-6      	; 0x1f2 <_Z9i2c_starth+0xa>
     1f8:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
     1fc:	98 7f       	andi	r25, 0xF8	; 248
     1fe:	98 30       	cpi	r25, 0x08	; 8
     200:	11 f0       	breq	.+4      	; 0x206 <_Z9i2c_starth+0x1e>
     202:	90 31       	cpi	r25, 0x10	; 16
     204:	a1 f4       	brne	.+40     	; 0x22e <_Z9i2c_starth+0x46>
     206:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
     20a:	84 e8       	ldi	r24, 0x84	; 132
     20c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
     210:	ec eb       	ldi	r30, 0xBC	; 188
     212:	f0 e0       	ldi	r31, 0x00	; 0
     214:	80 81       	ld	r24, Z
     216:	88 23       	and	r24, r24
     218:	ec f7       	brge	.-6      	; 0x214 <_Z9i2c_starth+0x2c>
     21a:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
     21e:	98 7f       	andi	r25, 0xF8	; 248
     220:	98 31       	cpi	r25, 0x18	; 24
     222:	39 f0       	breq	.+14     	; 0x232 <_Z9i2c_starth+0x4a>
     224:	81 e0       	ldi	r24, 0x01	; 1
     226:	90 34       	cpi	r25, 0x40	; 64
     228:	29 f4       	brne	.+10     	; 0x234 <_Z9i2c_starth+0x4c>
     22a:	80 e0       	ldi	r24, 0x00	; 0
     22c:	08 95       	ret
     22e:	81 e0       	ldi	r24, 0x01	; 1
     230:	08 95       	ret
     232:	80 e0       	ldi	r24, 0x00	; 0
     234:	08 95       	ret

00000236 <_Z8i2c_stopv>:
     236:	84 e9       	ldi	r24, 0x94	; 148
     238:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
     23c:	ec eb       	ldi	r30, 0xBC	; 188
     23e:	f0 e0       	ldi	r31, 0x00	; 0
     240:	80 81       	ld	r24, Z
     242:	84 fd       	sbrc	r24, 4
     244:	fd cf       	rjmp	.-6      	; 0x240 <_Z8i2c_stopv+0xa>
     246:	08 95       	ret

00000248 <_Z9i2c_writeh>:
     248:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
     24c:	84 e8       	ldi	r24, 0x84	; 132
     24e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
     252:	ec eb       	ldi	r30, 0xBC	; 188
     254:	f0 e0       	ldi	r31, 0x00	; 0
     256:	80 81       	ld	r24, Z
     258:	88 23       	and	r24, r24
     25a:	ec f7       	brge	.-6      	; 0x256 <_Z9i2c_writeh+0xe>
     25c:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
     260:	98 7f       	andi	r25, 0xF8	; 248
     262:	81 e0       	ldi	r24, 0x01	; 1
     264:	98 32       	cpi	r25, 0x28	; 40
     266:	09 f4       	brne	.+2      	; 0x26a <_Z9i2c_writeh+0x22>
     268:	80 e0       	ldi	r24, 0x00	; 0
     26a:	08 95       	ret

0000026c <_Z11i2c_readNakv>:
 
 Return:  byte read from I2C device
*************************************************************************/
unsigned char i2c_readNak(void)
{
	TWCR = (1<<TWINT) | (1<<TWEN);
     26c:	84 e8       	ldi	r24, 0x84	; 132
     26e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	while(!(TWCR & (1<<TWINT)));
     272:	ec eb       	ldi	r30, 0xBC	; 188
     274:	f0 e0       	ldi	r31, 0x00	; 0
     276:	80 81       	ld	r24, Z
     278:	88 23       	and	r24, r24
     27a:	ec f7       	brge	.-6      	; 0x276 <_Z11i2c_readNakv+0xa>
	
    return TWDR;
     27c:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>

}/* i2c_readNak */
     280:	08 95       	ret

00000282 <main>:
#define MIDI_UART_BAUDRATE		31250

int main(void)
{
	/* Initialization */
	Timer0_Init();
     282:	0e 94 4c 06 	call	0xc98	; 0xc98 <_Z11Timer0_Initv>
	i2c_init();
     286:	0e 94 ee 00 	call	0x1dc	; 0x1dc <_Z8i2c_initv>
	UART0_Init(PEDAL_UART_BAUDRATE, UART_2_STOP_BITS, UART_NO_PARITY);
     28a:	40 e0       	ldi	r20, 0x00	; 0
     28c:	62 e0       	ldi	r22, 0x02	; 2
     28e:	80 e0       	ldi	r24, 0x00	; 0
     290:	9b e4       	ldi	r25, 0x4B	; 75
     292:	0e 94 09 07 	call	0xe12	; 0xe12 <_Z10UART0_Initjhh>
	UART1_Init(MIDI_UART_BAUDRATE, UART_1_STOP_BIT, UART_NO_PARITY);
     296:	40 e0       	ldi	r20, 0x00	; 0
     298:	61 e0       	ldi	r22, 0x01	; 1
     29a:	82 e1       	ldi	r24, 0x12	; 18
     29c:	9a e7       	ldi	r25, 0x7A	; 122
     29e:	0e 94 07 08 	call	0x100e	; 0x100e <_Z10UART1_Initjhh>
	
	RotaryEncoder_Init();
     2a2:	0e 94 38 05 	call	0xa70	; 0xa70 <_Z18RotaryEncoder_Initv>
	SP10281_Init();
     2a6:	0e 94 3f 06 	call	0xc7e	; 0xc7e <_Z12SP10281_Initv>
	UI_Init();
     2aa:	0e 94 e7 08 	call	0x11ce	; 0x11ce <_Z7UI_Initv>
	MIDI_Init();
     2ae:	0e 94 ab 02 	call	0x556	; 0x556 <_Z9MIDI_Initv>
	
	sei();	// Global Enable Interrupt
     2b2:	78 94       	sei
	
	/* Main loop */
    while (1) 
    {
		/* Handle incoming MIDI */
		if (UART1_Available())
     2b4:	0e 94 85 08 	call	0x110a	; 0x110a <_Z15UART1_Availablev>
     2b8:	89 2b       	or	r24, r25
     2ba:	11 f0       	breq	.+4      	; 0x2c0 <main+0x3e>
		{
			MIDI_ReceiveIncoming();
     2bc:	0e 94 be 02 	call	0x57c	; 0x57c <_Z20MIDI_ReceiveIncomingv>
		}
		
		if (MIDI_ProgramChangeFlag)
     2c0:	80 91 31 01 	lds	r24, 0x0131	; 0x800131 <MIDI_ProgramChangeFlag>
     2c4:	88 23       	and	r24, r24
     2c6:	21 f0       	breq	.+8      	; 0x2d0 <main+0x4e>
		{
			MIDI_ProgramChangeFlag = false;
     2c8:	10 92 31 01 	sts	0x0131, r1	; 0x800131 <MIDI_ProgramChangeFlag>
			Handle_MIDIProgramChange();
     2cc:	0e 94 69 00 	call	0xd2	; 0xd2 <_Z24Handle_MIDIProgramChangev>
		}
		
		/* Handle incoming data from Pedal */
		while (UART0_Available())
     2d0:	0e 94 8a 07 	call	0xf14	; 0xf14 <_Z15UART0_Availablev>
     2d4:	89 2b       	or	r24, r25
     2d6:	19 f0       	breq	.+6      	; 0x2de <main+0x5c>
		{
			PedalComm_Receive();
     2d8:	0e 94 1d 03 	call	0x63a	; 0x63a <_Z17PedalComm_Receivev>
			MIDI_ProgramChangeFlag = false;
			Handle_MIDIProgramChange();
		}
		
		/* Handle incoming data from Pedal */
		while (UART0_Available())
     2dc:	f9 cf       	rjmp	.-14     	; 0x2d0 <main+0x4e>
		{
			PedalComm_Receive();
		}
		
		/* Handle command received from pedal. (Only once per program loop) */
		if (PedalComm_RxAvailable())
     2de:	0e 94 f9 02 	call	0x5f2	; 0x5f2 <_Z21PedalComm_RxAvailablev>
     2e2:	81 11       	cpse	r24, r1
		{
			PedalComm_HandleReceived();
     2e4:	0e 94 df 03 	call	0x7be	; 0x7be <_Z24PedalComm_HandleReceivedv>
		}
		
		/* Transmit command to Pedal if any are queued up */
		if (PedalComm_TxAvailable())
     2e8:	0e 94 02 03 	call	0x604	; 0x604 <_Z21PedalComm_TxAvailablev>
     2ec:	81 11       	cpse	r24, r1
		{
			PedalComm_PutCommand();
     2ee:	0e 94 69 04 	call	0x8d2	; 0x8d2 <_Z20PedalComm_PutCommandv>
		}
		
		/* Transmit data to Pedal */
		if (PedalComm_DelayTxFlag)
     2f2:	80 91 3c 01 	lds	r24, 0x013C	; 0x80013c <PedalComm_DelayTxFlag>
     2f6:	88 23       	and	r24, r24
     2f8:	21 f0       	breq	.+8      	; 0x302 <main+0x80>
		{
			PedalComm_DelayTxFlag = false;
     2fa:	10 92 3c 01 	sts	0x013C, r1	; 0x80013c <PedalComm_DelayTxFlag>
			PedalComm_Transmit();
     2fe:	0e 94 0d 05 	call	0xa1a	; 0xa1a <_Z18PedalComm_Transmitv>
		}
		
		/* Pedal heartbeat */
		if (PedalComm_ResponseTimeoutFlag)
     302:	80 91 3a 01 	lds	r24, 0x013A	; 0x80013a <PedalComm_ResponseTimeoutFlag>
     306:	88 23       	and	r24, r24
     308:	89 f0       	breq	.+34     	; 0x32c <main+0xaa>
		{
			PedalComm_ResponseTimeoutFlag = false;
     30a:	10 92 3a 01 	sts	0x013A, r1	; 0x80013a <PedalComm_ResponseTimeoutFlag>
			
			if (PedalComm_ConnectionOpen)
     30e:	80 91 39 01 	lds	r24, 0x0139	; 0x800139 <PedalComm_ConnectionOpen>
     312:	88 23       	and	r24, r24
     314:	19 f0       	breq	.+6      	; 0x31c <main+0x9a>
			{
				PedalComm_ConnectionOpen = false;
     316:	10 92 39 01 	sts	0x0139, r1	; 0x800139 <PedalComm_ConnectionOpen>
     31a:	08 c0       	rjmp	.+16     	; 0x32c <main+0xaa>
			}
			else
			{
				PedalComm_FlushTxQueue();
     31c:	0e 94 0b 03 	call	0x616	; 0x616 <_Z22PedalComm_FlushTxQueuev>
				PedalComm_QueueCommand(Heartbeat, 0, (uint8_t*)0);
     320:	40 e0       	ldi	r20, 0x00	; 0
     322:	50 e0       	ldi	r21, 0x00	; 0
     324:	60 e0       	ldi	r22, 0x00	; 0
     326:	8b ee       	ldi	r24, 0xEB	; 235
     328:	0e 94 10 04 	call	0x820	; 0x820 <_Z22PedalComm_QueueCommand3CMDhPh>
			}
		}
		
		/* Handle Rotary Encoder input */
		if (RotEnc_State != IDLE && RotEnc_State != PRESSED && RotEnc_State != ABORTED)
     32c:	80 91 b1 01 	lds	r24, 0x01B1	; 0x8001b1 <RotEnc_State>
     330:	88 23       	and	r24, r24
     332:	41 f0       	breq	.+16     	; 0x344 <main+0xc2>
     334:	80 91 b1 01 	lds	r24, 0x01B1	; 0x8001b1 <RotEnc_State>
     338:	84 30       	cpi	r24, 0x04	; 4
     33a:	21 f0       	breq	.+8      	; 0x344 <main+0xc2>
     33c:	80 91 b1 01 	lds	r24, 0x01B1	; 0x8001b1 <RotEnc_State>
     340:	85 30       	cpi	r24, 0x05	; 5
     342:	a1 f4       	brne	.+40     	; 0x36c <main+0xea>
		{
			Handle_RotaryEncoderAction();
		}
		
		/* Service 7-segment display */
		if (SP10281_OvfFlag)
     344:	80 91 b5 01 	lds	r24, 0x01B5	; 0x8001b5 <SP10281_OvfFlag>
     348:	88 23       	and	r24, r24
     34a:	21 f0       	breq	.+8      	; 0x354 <main+0xd2>
		{
			SP10281_OvfFlag = 0;
     34c:	10 92 b5 01 	sts	0x01B5, r1	; 0x8001b5 <SP10281_OvfFlag>
			SP10281_Update();
     350:	0e 94 94 05 	call	0xb28	; 0xb28 <_Z14SP10281_Updatev>
		}
		
		/* Blink UI LEDs */
		if (MCP_Output::AutoToggle_Flag)
     354:	80 91 2d 01 	lds	r24, 0x012D	; 0x80012d <_ZN10MCP_Output15AutoToggle_FlagE>
     358:	88 23       	and	r24, r24
     35a:	29 f0       	breq	.+10     	; 0x366 <main+0xe4>
		{
			MCP_Output::AutoToggle_Flag = 0;
     35c:	10 92 2d 01 	sts	0x012D, r1	; 0x80012d <_ZN10MCP_Output15AutoToggle_FlagE>
			MCP_Output::PerformAutoToggle(MCP23017_UI_LEDS_ADDR);
     360:	80 e0       	ldi	r24, 0x00	; 0
     362:	0e 94 8c 02 	call	0x518	; 0x518 <_ZN10MCP_Output17PerformAutoToggleEh>
		}
		
		/* The grand state machine */
		System_Run();
     366:	0e 94 49 06 	call	0xc92	; 0xc92 <_Z10System_Runv>
	MIDI_Init();
	
	sei();	// Global Enable Interrupt
	
	/* Main loop */
    while (1) 
     36a:	a4 cf       	rjmp	.-184    	; 0x2b4 <main+0x32>
		}
		
		/* Handle Rotary Encoder input */
		if (RotEnc_State != IDLE && RotEnc_State != PRESSED && RotEnc_State != ABORTED)
		{
			Handle_RotaryEncoderAction();
     36c:	0e 94 84 00 	call	0x108	; 0x108 <_Z26Handle_RotaryEncoderActionv>
     370:	e9 cf       	rjmp	.-46     	; 0x344 <main+0xc2>

00000372 <_Z17MCP23017_WriteReghhh>:
	{
		MCP_Output::AutoToggle_PortA |= (1 << Pin);
	}
	else
	{
		MCP_Output::AutoToggle_PortB |= (1 << Pin);
     372:	cf 93       	push	r28
     374:	df 93       	push	r29
     376:	d6 2f       	mov	r29, r22
     378:	c4 2f       	mov	r28, r20
     37a:	80 62       	ori	r24, 0x20	; 32
     37c:	88 0f       	add	r24, r24
     37e:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <_Z9i2c_starth>
     382:	8d 2f       	mov	r24, r29
     384:	0e 94 24 01 	call	0x248	; 0x248 <_Z9i2c_writeh>
     388:	8c 2f       	mov	r24, r28
     38a:	0e 94 24 01 	call	0x248	; 0x248 <_Z9i2c_writeh>
     38e:	0e 94 1b 01 	call	0x236	; 0x236 <_Z8i2c_stopv>
     392:	df 91       	pop	r29
     394:	cf 91       	pop	r28
     396:	08 95       	ret

00000398 <_Z16MCP23017_ReadReghh>:
     398:	cf 93       	push	r28
     39a:	df 93       	push	r29
     39c:	d6 2f       	mov	r29, r22
     39e:	80 62       	ori	r24, 0x20	; 32
     3a0:	c8 2f       	mov	r28, r24
     3a2:	cc 0f       	add	r28, r28
     3a4:	8c 2f       	mov	r24, r28
     3a6:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <_Z9i2c_starth>
     3aa:	8d 2f       	mov	r24, r29
     3ac:	0e 94 24 01 	call	0x248	; 0x248 <_Z9i2c_writeh>
     3b0:	0e 94 1b 01 	call	0x236	; 0x236 <_Z8i2c_stopv>
     3b4:	8c 2f       	mov	r24, r28
     3b6:	81 60       	ori	r24, 0x01	; 1
     3b8:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <_Z9i2c_starth>
     3bc:	0e 94 36 01 	call	0x26c	; 0x26c <_Z11i2c_readNakv>
     3c0:	df 91       	pop	r29
     3c2:	cf 91       	pop	r28
     3c4:	08 95       	ret

000003c6 <_ZN10MCP_OutputC1Ev>:
     3c6:	08 95       	ret

000003c8 <_ZN10MCP_Output3SetEv>:
     3c8:	1f 93       	push	r17
     3ca:	cf 93       	push	r28
     3cc:	df 93       	push	r29
     3ce:	ec 01       	movw	r28, r24
     3d0:	89 81       	ldd	r24, Y+1	; 0x01
     3d2:	81 11       	cpse	r24, r1
     3d4:	10 c0       	rjmp	.+32     	; 0x3f6 <_ZN10MCP_Output3SetEv+0x2e>
     3d6:	20 91 2c 01 	lds	r18, 0x012C	; 0x80012c <_ZN10MCP_Output16AutoToggle_PortAE>
     3da:	81 e0       	ldi	r24, 0x01	; 1
     3dc:	90 e0       	ldi	r25, 0x00	; 0
     3de:	0a 80       	ldd	r0, Y+2	; 0x02
     3e0:	02 c0       	rjmp	.+4      	; 0x3e6 <_ZN10MCP_Output3SetEv+0x1e>
     3e2:	88 0f       	add	r24, r24
     3e4:	99 1f       	adc	r25, r25
     3e6:	0a 94       	dec	r0
     3e8:	e2 f7       	brpl	.-8      	; 0x3e2 <_ZN10MCP_Output3SetEv+0x1a>
     3ea:	80 95       	com	r24
     3ec:	82 23       	and	r24, r18
     3ee:	80 93 2c 01 	sts	0x012C, r24	; 0x80012c <_ZN10MCP_Output16AutoToggle_PortAE>
     3f2:	14 e1       	ldi	r17, 0x14	; 20
     3f4:	0f c0       	rjmp	.+30     	; 0x414 <__LOCK_REGION_LENGTH__+0x14>
     3f6:	20 91 2b 01 	lds	r18, 0x012B	; 0x80012b <_ZN10MCP_Output16AutoToggle_PortBE>
     3fa:	81 e0       	ldi	r24, 0x01	; 1
     3fc:	90 e0       	ldi	r25, 0x00	; 0
     3fe:	0a 80       	ldd	r0, Y+2	; 0x02
     400:	02 c0       	rjmp	.+4      	; 0x406 <__LOCK_REGION_LENGTH__+0x6>
     402:	88 0f       	add	r24, r24
     404:	99 1f       	adc	r25, r25
     406:	0a 94       	dec	r0
     408:	e2 f7       	brpl	.-8      	; 0x402 <__LOCK_REGION_LENGTH__+0x2>
     40a:	80 95       	com	r24
     40c:	82 23       	and	r24, r18
     40e:	80 93 2b 01 	sts	0x012B, r24	; 0x80012b <_ZN10MCP_Output16AutoToggle_PortBE>
     412:	15 e1       	ldi	r17, 0x15	; 21
     414:	61 2f       	mov	r22, r17
     416:	88 81       	ld	r24, Y
     418:	0e 94 cc 01 	call	0x398	; 0x398 <_Z16MCP23017_ReadReghh>
     41c:	41 e0       	ldi	r20, 0x01	; 1
     41e:	50 e0       	ldi	r21, 0x00	; 0
     420:	0a 80       	ldd	r0, Y+2	; 0x02
     422:	02 c0       	rjmp	.+4      	; 0x428 <__LOCK_REGION_LENGTH__+0x28>
     424:	44 0f       	add	r20, r20
     426:	55 1f       	adc	r21, r21
     428:	0a 94       	dec	r0
     42a:	e2 f7       	brpl	.-8      	; 0x424 <__LOCK_REGION_LENGTH__+0x24>
     42c:	48 2b       	or	r20, r24
     42e:	61 2f       	mov	r22, r17
     430:	88 81       	ld	r24, Y
     432:	0e 94 b9 01 	call	0x372	; 0x372 <_Z17MCP23017_WriteReghhh>
     436:	81 e0       	ldi	r24, 0x01	; 1
     438:	8b 83       	std	Y+3, r24	; 0x03
     43a:	df 91       	pop	r29
     43c:	cf 91       	pop	r28
     43e:	1f 91       	pop	r17
     440:	08 95       	ret

00000442 <_ZN10MCP_Output5ClearEv>:
     442:	1f 93       	push	r17
     444:	cf 93       	push	r28
     446:	df 93       	push	r29
     448:	ec 01       	movw	r28, r24
     44a:	89 81       	ldd	r24, Y+1	; 0x01
     44c:	81 11       	cpse	r24, r1
     44e:	10 c0       	rjmp	.+32     	; 0x470 <_ZN10MCP_Output5ClearEv+0x2e>
     450:	20 91 2c 01 	lds	r18, 0x012C	; 0x80012c <_ZN10MCP_Output16AutoToggle_PortAE>
     454:	81 e0       	ldi	r24, 0x01	; 1
     456:	90 e0       	ldi	r25, 0x00	; 0
     458:	0a 80       	ldd	r0, Y+2	; 0x02
     45a:	02 c0       	rjmp	.+4      	; 0x460 <_ZN10MCP_Output5ClearEv+0x1e>
     45c:	88 0f       	add	r24, r24
     45e:	99 1f       	adc	r25, r25
     460:	0a 94       	dec	r0
     462:	e2 f7       	brpl	.-8      	; 0x45c <_ZN10MCP_Output5ClearEv+0x1a>
     464:	80 95       	com	r24
     466:	82 23       	and	r24, r18
     468:	80 93 2c 01 	sts	0x012C, r24	; 0x80012c <_ZN10MCP_Output16AutoToggle_PortAE>
     46c:	14 e1       	ldi	r17, 0x14	; 20
     46e:	0f c0       	rjmp	.+30     	; 0x48e <_ZN10MCP_Output5ClearEv+0x4c>
     470:	20 91 2b 01 	lds	r18, 0x012B	; 0x80012b <_ZN10MCP_Output16AutoToggle_PortBE>
     474:	81 e0       	ldi	r24, 0x01	; 1
     476:	90 e0       	ldi	r25, 0x00	; 0
     478:	0a 80       	ldd	r0, Y+2	; 0x02
     47a:	02 c0       	rjmp	.+4      	; 0x480 <_ZN10MCP_Output5ClearEv+0x3e>
     47c:	88 0f       	add	r24, r24
     47e:	99 1f       	adc	r25, r25
     480:	0a 94       	dec	r0
     482:	e2 f7       	brpl	.-8      	; 0x47c <_ZN10MCP_Output5ClearEv+0x3a>
     484:	80 95       	com	r24
     486:	82 23       	and	r24, r18
     488:	80 93 2b 01 	sts	0x012B, r24	; 0x80012b <_ZN10MCP_Output16AutoToggle_PortBE>
     48c:	15 e1       	ldi	r17, 0x15	; 21
     48e:	61 2f       	mov	r22, r17
     490:	88 81       	ld	r24, Y
     492:	0e 94 cc 01 	call	0x398	; 0x398 <_Z16MCP23017_ReadReghh>
     496:	41 e0       	ldi	r20, 0x01	; 1
     498:	50 e0       	ldi	r21, 0x00	; 0
     49a:	0a 80       	ldd	r0, Y+2	; 0x02
     49c:	02 c0       	rjmp	.+4      	; 0x4a2 <_ZN10MCP_Output5ClearEv+0x60>
     49e:	44 0f       	add	r20, r20
     4a0:	55 1f       	adc	r21, r21
     4a2:	0a 94       	dec	r0
     4a4:	e2 f7       	brpl	.-8      	; 0x49e <_ZN10MCP_Output5ClearEv+0x5c>
     4a6:	40 95       	com	r20
     4a8:	48 23       	and	r20, r24
     4aa:	61 2f       	mov	r22, r17
     4ac:	88 81       	ld	r24, Y
     4ae:	0e 94 b9 01 	call	0x372	; 0x372 <_Z17MCP23017_WriteReghhh>
     4b2:	1b 82       	std	Y+3, r1	; 0x03
     4b4:	df 91       	pop	r29
     4b6:	cf 91       	pop	r28
     4b8:	1f 91       	pop	r17
     4ba:	08 95       	ret

000004bc <_ZN10MCP_OutputC1Eh13MCP23017_Port12MCP23017_Pin>:
     4bc:	1f 93       	push	r17
     4be:	cf 93       	push	r28
     4c0:	df 93       	push	r29
     4c2:	ec 01       	movw	r28, r24
     4c4:	86 2f       	mov	r24, r22
     4c6:	68 83       	st	Y, r22
     4c8:	49 83       	std	Y+1, r20	; 0x01
     4ca:	2a 83       	std	Y+2, r18	; 0x02
     4cc:	11 e0       	ldi	r17, 0x01	; 1
     4ce:	41 11       	cpse	r20, r1
     4d0:	01 c0       	rjmp	.+2      	; 0x4d4 <_ZN10MCP_OutputC1Eh13MCP23017_Port12MCP23017_Pin+0x18>
     4d2:	10 e0       	ldi	r17, 0x00	; 0
     4d4:	61 2f       	mov	r22, r17
     4d6:	0e 94 cc 01 	call	0x398	; 0x398 <_Z16MCP23017_ReadReghh>
     4da:	41 e0       	ldi	r20, 0x01	; 1
     4dc:	50 e0       	ldi	r21, 0x00	; 0
     4de:	0a 80       	ldd	r0, Y+2	; 0x02
     4e0:	02 c0       	rjmp	.+4      	; 0x4e6 <_ZN10MCP_OutputC1Eh13MCP23017_Port12MCP23017_Pin+0x2a>
     4e2:	44 0f       	add	r20, r20
     4e4:	55 1f       	adc	r21, r21
     4e6:	0a 94       	dec	r0
     4e8:	e2 f7       	brpl	.-8      	; 0x4e2 <_ZN10MCP_OutputC1Eh13MCP23017_Port12MCP23017_Pin+0x26>
     4ea:	40 95       	com	r20
     4ec:	48 23       	and	r20, r24
     4ee:	61 2f       	mov	r22, r17
     4f0:	88 81       	ld	r24, Y
     4f2:	0e 94 b9 01 	call	0x372	; 0x372 <_Z17MCP23017_WriteReghhh>
     4f6:	ce 01       	movw	r24, r28
     4f8:	0e 94 21 02 	call	0x442	; 0x442 <_ZN10MCP_Output5ClearEv>
     4fc:	df 91       	pop	r29
     4fe:	cf 91       	pop	r28
     500:	1f 91       	pop	r17
     502:	08 95       	ret

00000504 <_ZN10MCP_Output18SetAutoToggleSpeedEj>:
	}
}

void MCP_Output::SetAutoToggleSpeed(uint16_t ms)
{
	AutoToggle_Timeout = (uint16_t)Timer0_ms2cnt(ms);
     504:	bc 01       	movw	r22, r24
     506:	80 e0       	ldi	r24, 0x00	; 0
     508:	90 e0       	ldi	r25, 0x00	; 0
     50a:	0e 94 5b 06 	call	0xcb6	; 0xcb6 <_Z13Timer0_ms2cntm>
     50e:	70 93 01 01 	sts	0x0101, r23	; 0x800101 <_ZN10MCP_Output18AutoToggle_TimeoutE+0x1>
     512:	60 93 00 01 	sts	0x0100, r22	; 0x800100 <_ZN10MCP_Output18AutoToggle_TimeoutE>
     516:	08 95       	ret

00000518 <_ZN10MCP_Output17PerformAutoToggleEh>:
}

void MCP_Output::PerformAutoToggle(uint8_t addr)
{
     518:	1f 93       	push	r17
     51a:	cf 93       	push	r28
     51c:	df 93       	push	r29
     51e:	c8 2f       	mov	r28, r24
	uint8_t valA = MCP23017_ReadReg(addr, OLATA);
     520:	64 e1       	ldi	r22, 0x14	; 20
     522:	0e 94 cc 01 	call	0x398	; 0x398 <_Z16MCP23017_ReadReghh>
     526:	18 2f       	mov	r17, r24
	uint8_t valB = MCP23017_ReadReg(addr, OLATB);
     528:	65 e1       	ldi	r22, 0x15	; 21
     52a:	8c 2f       	mov	r24, r28
     52c:	0e 94 cc 01 	call	0x398	; 0x398 <_Z16MCP23017_ReadReghh>
	
	valA ^= MCP_Output::AutoToggle_PortA;
     530:	40 91 2c 01 	lds	r20, 0x012C	; 0x80012c <_ZN10MCP_Output16AutoToggle_PortAE>
	valB ^= MCP_Output::AutoToggle_PortB;
     534:	d0 91 2b 01 	lds	r29, 0x012B	; 0x80012b <_ZN10MCP_Output16AutoToggle_PortBE>
     538:	d8 27       	eor	r29, r24
	
	MCP23017_WriteReg(addr, OLATA, valA);
     53a:	41 27       	eor	r20, r17
     53c:	64 e1       	ldi	r22, 0x14	; 20
     53e:	8c 2f       	mov	r24, r28
     540:	0e 94 b9 01 	call	0x372	; 0x372 <_Z17MCP23017_WriteReghhh>
	MCP23017_WriteReg(addr, OLATB, valB);
     544:	4d 2f       	mov	r20, r29
     546:	65 e1       	ldi	r22, 0x15	; 21
     548:	8c 2f       	mov	r24, r28
     54a:	0e 94 b9 01 	call	0x372	; 0x372 <_Z17MCP23017_WriteReghhh>
}
     54e:	df 91       	pop	r29
     550:	cf 91       	pop	r28
     552:	1f 91       	pop	r17
     554:	08 95       	ret

00000556 <_Z9MIDI_Initv>:
volatile uint8_t MIDI_ReceivedProgram = 0;
volatile bool MIDI_ProgramChangeFlag = false;

void MIDI_Init()
{
	System_MIDI_Channel = eeprom_read_byte((uint8_t*)EEPROM_MIDI_CH_ADDR);
     556:	80 e0       	ldi	r24, 0x00	; 0
     558:	90 e0       	ldi	r25, 0x00	; 0
     55a:	0e 94 0d 0a 	call	0x141a	; 0x141a <eeprom_read_byte>
     55e:	80 93 36 01 	sts	0x0136, r24	; 0x800136 <System_MIDI_Channel>
	
	if (System_MIDI_Channel > MIDI_CH_MAX)
     562:	80 91 36 01 	lds	r24, 0x0136	; 0x800136 <System_MIDI_Channel>
     566:	81 31       	cpi	r24, 0x11	; 17
     568:	40 f0       	brcs	.+16     	; 0x57a <_Z9MIDI_Initv+0x24>
	{
		System_MIDI_Channel = MIDI_CH_OMNI;
     56a:	10 92 36 01 	sts	0x0136, r1	; 0x800136 <System_MIDI_Channel>
		eeprom_write_byte((uint8_t*)EEPROM_MIDI_CH_ADDR, System_MIDI_Channel);
     56e:	60 91 36 01 	lds	r22, 0x0136	; 0x800136 <System_MIDI_Channel>
     572:	80 e0       	ldi	r24, 0x00	; 0
     574:	90 e0       	ldi	r25, 0x00	; 0
     576:	0e 94 15 0a 	call	0x142a	; 0x142a <eeprom_write_byte>
     57a:	08 95       	ret

0000057c <_Z20MIDI_ReceiveIncomingv>:
	}
}


void MIDI_ReceiveIncoming()
{
     57c:	cf 93       	push	r28
     57e:	df 93       	push	r29
	static uint8_t RX_ByteCnt = 0;
	
	MIDI_RxBuffer[RX_ByteCnt] = UART1_GetChar();
     580:	c0 91 30 01 	lds	r28, 0x0130	; 0x800130 <_ZZ20MIDI_ReceiveIncomingvE10RX_ByteCnt>
     584:	d0 e0       	ldi	r29, 0x00	; 0
     586:	0e 94 6a 08 	call	0x10d4	; 0x10d4 <_Z13UART1_GetCharv>
     58a:	cd 5c       	subi	r28, 0xCD	; 205
     58c:	de 4f       	sbci	r29, 0xFE	; 254
     58e:	88 83       	st	Y, r24
	
	if (RX_ByteCnt == 0)
     590:	80 91 30 01 	lds	r24, 0x0130	; 0x800130 <_ZZ20MIDI_ReceiveIncomingvE10RX_ByteCnt>
     594:	81 11       	cpse	r24, r1
     596:	18 c0       	rjmp	.+48     	; 0x5c8 <_Z20MIDI_ReceiveIncomingv+0x4c>
	{
		/* Check if command is a Program Change */
		if ( (MIDI_RxBuffer[RX_ByteCnt] & 0xF0) == 0xC0 )
     598:	80 91 33 01 	lds	r24, 0x0133	; 0x800133 <MIDI_RxBuffer>
     59c:	80 7f       	andi	r24, 0xF0	; 240
     59e:	80 3c       	cpi	r24, 0xC0	; 192
     5a0:	29 f5       	brne	.+74     	; 0x5ec <_Z20MIDI_ReceiveIncomingv+0x70>
		{
			/* Check if command is relevant to this device */
			if ( (System_MIDI_Channel == MIDI_CH_OMNI) || ( (MIDI_RxBuffer[RX_ByteCnt] & 0x0F) != (System_MIDI_Channel-1) ) )
     5a2:	80 91 36 01 	lds	r24, 0x0136	; 0x800136 <System_MIDI_Channel>
     5a6:	88 23       	and	r24, r24
     5a8:	59 f0       	breq	.+22     	; 0x5c0 <_Z20MIDI_ReceiveIncomingv+0x44>
     5aa:	20 91 33 01 	lds	r18, 0x0133	; 0x800133 <MIDI_RxBuffer>
     5ae:	80 91 36 01 	lds	r24, 0x0136	; 0x800136 <System_MIDI_Channel>
     5b2:	2f 70       	andi	r18, 0x0F	; 15
     5b4:	30 e0       	ldi	r19, 0x00	; 0
     5b6:	90 e0       	ldi	r25, 0x00	; 0
     5b8:	01 97       	sbiw	r24, 0x01	; 1
     5ba:	28 17       	cp	r18, r24
     5bc:	39 07       	cpc	r19, r25
     5be:	b1 f0       	breq	.+44     	; 0x5ec <_Z20MIDI_ReceiveIncomingv+0x70>
			{
				RX_ByteCnt++;
     5c0:	81 e0       	ldi	r24, 0x01	; 1
     5c2:	80 93 30 01 	sts	0x0130, r24	; 0x800130 <_ZZ20MIDI_ReceiveIncomingvE10RX_ByteCnt>
     5c6:	12 c0       	rjmp	.+36     	; 0x5ec <_Z20MIDI_ReceiveIncomingv+0x70>
		}
	}
	else if (RX_ByteCnt > 0)
	{
		/* Check if data byte contains a valid MIDI program (is between 0 and 127) */
		if (MIDI_RxBuffer[RX_ByteCnt] <= MIDI_PC_MAX)
     5c8:	90 e0       	ldi	r25, 0x00	; 0
     5ca:	fc 01       	movw	r30, r24
     5cc:	ed 5c       	subi	r30, 0xCD	; 205
     5ce:	fe 4f       	sbci	r31, 0xFE	; 254
     5d0:	20 81       	ld	r18, Z
     5d2:	22 23       	and	r18, r18
     5d4:	4c f0       	brlt	.+18     	; 0x5e8 <_Z20MIDI_ReceiveIncomingv+0x6c>
		{
			MIDI_ReceivedProgram = MIDI_RxBuffer[RX_ByteCnt];
     5d6:	fc 01       	movw	r30, r24
     5d8:	ed 5c       	subi	r30, 0xCD	; 205
     5da:	fe 4f       	sbci	r31, 0xFE	; 254
     5dc:	80 81       	ld	r24, Z
     5de:	80 93 32 01 	sts	0x0132, r24	; 0x800132 <MIDI_ReceivedProgram>
			MIDI_ProgramChangeFlag = true;
     5e2:	81 e0       	ldi	r24, 0x01	; 1
     5e4:	80 93 31 01 	sts	0x0131, r24	; 0x800131 <MIDI_ProgramChangeFlag>
		}
		
		RX_ByteCnt = 0;
     5e8:	10 92 30 01 	sts	0x0130, r1	; 0x800130 <_ZZ20MIDI_ReceiveIncomingvE10RX_ByteCnt>
	}
}
     5ec:	df 91       	pop	r29
     5ee:	cf 91       	pop	r28
     5f0:	08 95       	ret

000005f2 <_Z21PedalComm_RxAvailablev>:
	
	/* Activate receive */
	Select_RX_TX(receive);
	
	/* Enable TX Complete Interrupt */
	UCSR0B |= (1 << TXCIE0);
     5f2:	20 91 40 01 	lds	r18, 0x0140	; 0x800140 <RxHead>
     5f6:	90 91 3f 01 	lds	r25, 0x013F	; 0x80013f <RxTail>
     5fa:	81 e0       	ldi	r24, 0x01	; 1
     5fc:	29 13       	cpse	r18, r25
     5fe:	01 c0       	rjmp	.+2      	; 0x602 <_Z21PedalComm_RxAvailablev+0x10>
     600:	80 e0       	ldi	r24, 0x00	; 0
     602:	08 95       	ret

00000604 <_Z21PedalComm_TxAvailablev>:
     604:	20 91 3e 01 	lds	r18, 0x013E	; 0x80013e <TxHead>
     608:	90 91 3d 01 	lds	r25, 0x013D	; 0x80013d <TxTail>
     60c:	81 e0       	ldi	r24, 0x01	; 1
     60e:	29 13       	cpse	r18, r25
     610:	01 c0       	rjmp	.+2      	; 0x614 <_Z21PedalComm_TxAvailablev+0x10>
     612:	80 e0       	ldi	r24, 0x00	; 0
     614:	08 95       	ret

00000616 <_Z22PedalComm_FlushTxQueuev>:
     616:	80 91 3e 01 	lds	r24, 0x013E	; 0x80013e <TxHead>
     61a:	80 93 3d 01 	sts	0x013D, r24	; 0x80013d <TxTail>
     61e:	e0 91 3e 01 	lds	r30, 0x013E	; 0x80013e <TxHead>
     622:	f0 e0       	ldi	r31, 0x00	; 0
     624:	ee 0f       	add	r30, r30
     626:	ff 1f       	adc	r31, r31
     628:	ee 0f       	add	r30, r30
     62a:	ff 1f       	adc	r31, r31
     62c:	ee 0f       	add	r30, r30
     62e:	ff 1f       	adc	r31, r31
     630:	ef 5b       	subi	r30, 0xBF	; 191
     632:	fe 4f       	sbci	r31, 0xFE	; 254
     634:	81 e0       	ldi	r24, 0x01	; 1
     636:	87 83       	std	Z+7, r24	; 0x07
     638:	08 95       	ret

0000063a <_Z17PedalComm_Receivev>:
     63a:	cf 93       	push	r28
     63c:	df 93       	push	r29
     63e:	81 e0       	ldi	r24, 0x01	; 1
     640:	80 93 3b 01 	sts	0x013B, r24	; 0x80013b <PedalComm_DelayTXOvfCnt>
     644:	c0 91 37 01 	lds	r28, 0x0137	; 0x800137 <_ZZ17PedalComm_ReceivevE10RX_ByteCnt>
     648:	d0 e0       	ldi	r29, 0x00	; 0
     64a:	0e 94 6f 07 	call	0xede	; 0xede <_Z13UART0_GetCharv>
     64e:	cf 55       	subi	r28, 0x5F	; 95
     650:	de 4f       	sbci	r29, 0xFE	; 254
     652:	88 83       	st	Y, r24
     654:	80 91 37 01 	lds	r24, 0x0137	; 0x800137 <_ZZ17PedalComm_ReceivevE10RX_ByteCnt>
     658:	8f 5f       	subi	r24, 0xFF	; 255
     65a:	80 93 37 01 	sts	0x0137, r24	; 0x800137 <_ZZ17PedalComm_ReceivevE10RX_ByteCnt>
     65e:	81 30       	cpi	r24, 0x01	; 1
     660:	09 f0       	breq	.+2      	; 0x664 <_Z17PedalComm_Receivev+0x2a>
     662:	47 c0       	rjmp	.+142    	; 0x6f2 <_Z17PedalComm_Receivev+0xb8>
     664:	80 91 a1 01 	lds	r24, 0x01A1	; 0x8001a1 <RX_Buffer>
     668:	8f 35       	cpi	r24, 0x5F	; 95
     66a:	09 f4       	brne	.+2      	; 0x66e <_Z17PedalComm_Receivev+0x34>
     66c:	a5 c0       	rjmp	.+330    	; 0x7b8 <_Z17PedalComm_Receivev+0x17e>
     66e:	10 92 37 01 	sts	0x0137, r1	; 0x800137 <_ZZ17PedalComm_ReceivevE10RX_ByteCnt>
     672:	80 91 a1 01 	lds	r24, 0x01A1	; 0x8001a1 <RX_Buffer>
     676:	8c 3a       	cpi	r24, 0xAC	; 172
     678:	f9 f4       	brne	.+62     	; 0x6b8 <_Z17PedalComm_Receivev+0x7e>
     67a:	81 e0       	ldi	r24, 0x01	; 1
     67c:	90 e0       	ldi	r25, 0x00	; 0
     67e:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <PedalComm_ResponseTimeoutOvfCnt+0x1>
     682:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <PedalComm_ResponseTimeoutOvfCnt>
     686:	10 92 38 01 	sts	0x0138, r1	; 0x800138 <NackCnt>
     68a:	e0 91 3d 01 	lds	r30, 0x013D	; 0x80013d <TxTail>
     68e:	f0 e0       	ldi	r31, 0x00	; 0
     690:	ee 0f       	add	r30, r30
     692:	ff 1f       	adc	r31, r31
     694:	ee 0f       	add	r30, r30
     696:	ff 1f       	adc	r31, r31
     698:	ee 0f       	add	r30, r30
     69a:	ff 1f       	adc	r31, r31
     69c:	ef 5b       	subi	r30, 0xBF	; 191
     69e:	fe 4f       	sbci	r31, 0xFE	; 254
     6a0:	87 83       	std	Z+7, r24	; 0x07
     6a2:	80 91 39 01 	lds	r24, 0x0139	; 0x800139 <PedalComm_ConnectionOpen>
     6a6:	81 11       	cpse	r24, r1
     6a8:	87 c0       	rjmp	.+270    	; 0x7b8 <_Z17PedalComm_Receivev+0x17e>
     6aa:	81 e0       	ldi	r24, 0x01	; 1
     6ac:	80 93 39 01 	sts	0x0139, r24	; 0x800139 <PedalComm_ConnectionOpen>
     6b0:	82 e0       	ldi	r24, 0x02	; 2
     6b2:	80 93 bb 01 	sts	0x01BB, r24	; 0x8001bb <SystemState>
     6b6:	80 c0       	rjmp	.+256    	; 0x7b8 <_Z17PedalComm_Receivev+0x17e>
     6b8:	80 91 a1 01 	lds	r24, 0x01A1	; 0x8001a1 <RX_Buffer>
     6bc:	8a 32       	cpi	r24, 0x2A	; 42
     6be:	09 f0       	breq	.+2      	; 0x6c2 <_Z17PedalComm_Receivev+0x88>
     6c0:	7b c0       	rjmp	.+246    	; 0x7b8 <_Z17PedalComm_Receivev+0x17e>
     6c2:	80 91 38 01 	lds	r24, 0x0138	; 0x800138 <NackCnt>
     6c6:	8f 5f       	subi	r24, 0xFF	; 255
     6c8:	80 93 38 01 	sts	0x0138, r24	; 0x800138 <NackCnt>
     6cc:	84 30       	cpi	r24, 0x04	; 4
     6ce:	08 f0       	brcs	.+2      	; 0x6d2 <_Z17PedalComm_Receivev+0x98>
     6d0:	73 c0       	rjmp	.+230    	; 0x7b8 <_Z17PedalComm_Receivev+0x17e>
     6d2:	e0 91 3d 01 	lds	r30, 0x013D	; 0x80013d <TxTail>
     6d6:	f0 e0       	ldi	r31, 0x00	; 0
     6d8:	ee 0f       	add	r30, r30
     6da:	ff 1f       	adc	r31, r31
     6dc:	ee 0f       	add	r30, r30
     6de:	ff 1f       	adc	r31, r31
     6e0:	ee 0f       	add	r30, r30
     6e2:	ff 1f       	adc	r31, r31
     6e4:	ef 5b       	subi	r30, 0xBF	; 191
     6e6:	fe 4f       	sbci	r31, 0xFE	; 254
     6e8:	16 82       	std	Z+6, r1	; 0x06
     6ea:	81 e0       	ldi	r24, 0x01	; 1
     6ec:	80 93 3b 01 	sts	0x013B, r24	; 0x80013b <PedalComm_DelayTXOvfCnt>
     6f0:	63 c0       	rjmp	.+198    	; 0x7b8 <_Z17PedalComm_Receivev+0x17e>
     6f2:	82 30       	cpi	r24, 0x02	; 2
     6f4:	79 f4       	brne	.+30     	; 0x714 <_Z17PedalComm_Receivev+0xda>
     6f6:	e0 91 40 01 	lds	r30, 0x0140	; 0x800140 <RxHead>
     6fa:	f0 e0       	ldi	r31, 0x00	; 0
     6fc:	80 91 a2 01 	lds	r24, 0x01A2	; 0x8001a2 <RX_Buffer+0x1>
     700:	ee 0f       	add	r30, r30
     702:	ff 1f       	adc	r31, r31
     704:	ee 0f       	add	r30, r30
     706:	ff 1f       	adc	r31, r31
     708:	ee 0f       	add	r30, r30
     70a:	ff 1f       	adc	r31, r31
     70c:	ef 57       	subi	r30, 0x7F	; 127
     70e:	fe 4f       	sbci	r31, 0xFE	; 254
     710:	81 83       	std	Z+1, r24	; 0x01
     712:	52 c0       	rjmp	.+164    	; 0x7b8 <_Z17PedalComm_Receivev+0x17e>
     714:	e0 91 40 01 	lds	r30, 0x0140	; 0x800140 <RxHead>
     718:	f0 e0       	ldi	r31, 0x00	; 0
     71a:	ee 0f       	add	r30, r30
     71c:	ff 1f       	adc	r31, r31
     71e:	ee 0f       	add	r30, r30
     720:	ff 1f       	adc	r31, r31
     722:	ee 0f       	add	r30, r30
     724:	ff 1f       	adc	r31, r31
     726:	ef 57       	subi	r30, 0x7F	; 127
     728:	fe 4f       	sbci	r31, 0xFE	; 254
     72a:	91 81       	ldd	r25, Z+1	; 0x01
     72c:	89 13       	cpse	r24, r25
     72e:	44 c0       	rjmp	.+136    	; 0x7b8 <_Z17PedalComm_Receivev+0x17e>
     730:	e0 91 40 01 	lds	r30, 0x0140	; 0x800140 <RxHead>
     734:	f0 e0       	ldi	r31, 0x00	; 0
     736:	ee 0f       	add	r30, r30
     738:	ff 1f       	adc	r31, r31
     73a:	ee 0f       	add	r30, r30
     73c:	ff 1f       	adc	r31, r31
     73e:	ee 0f       	add	r30, r30
     740:	ff 1f       	adc	r31, r31
     742:	ef 57       	subi	r30, 0x7F	; 127
     744:	fe 4f       	sbci	r31, 0xFE	; 254
     746:	e1 81       	ldd	r30, Z+1	; 0x01
     748:	f0 e0       	ldi	r31, 0x00	; 0
     74a:	e0 56       	subi	r30, 0x60	; 96
     74c:	fe 4f       	sbci	r31, 0xFE	; 254
     74e:	80 81       	ld	r24, Z
     750:	8f 3e       	cpi	r24, 0xEF	; 239
     752:	51 f5       	brne	.+84     	; 0x7a8 <_Z17PedalComm_Receivev+0x16e>
     754:	e0 91 40 01 	lds	r30, 0x0140	; 0x800140 <RxHead>
     758:	f0 e0       	ldi	r31, 0x00	; 0
     75a:	a1 ea       	ldi	r26, 0xA1	; 161
     75c:	b1 e0       	ldi	r27, 0x01	; 1
     75e:	12 96       	adiw	r26, 0x02	; 2
     760:	8c 91       	ld	r24, X
     762:	12 97       	sbiw	r26, 0x02	; 2
     764:	ee 0f       	add	r30, r30
     766:	ff 1f       	adc	r31, r31
     768:	ee 0f       	add	r30, r30
     76a:	ff 1f       	adc	r31, r31
     76c:	ee 0f       	add	r30, r30
     76e:	ff 1f       	adc	r31, r31
     770:	ef 57       	subi	r30, 0x7F	; 127
     772:	fe 4f       	sbci	r31, 0xFE	; 254
     774:	80 83       	st	Z, r24
     776:	e0 91 40 01 	lds	r30, 0x0140	; 0x800140 <RxHead>
     77a:	f0 e0       	ldi	r31, 0x00	; 0
     77c:	13 96       	adiw	r26, 0x03	; 3
     77e:	8c 91       	ld	r24, X
     780:	ee 0f       	add	r30, r30
     782:	ff 1f       	adc	r31, r31
     784:	ee 0f       	add	r30, r30
     786:	ff 1f       	adc	r31, r31
     788:	ee 0f       	add	r30, r30
     78a:	ff 1f       	adc	r31, r31
     78c:	ef 57       	subi	r30, 0x7F	; 127
     78e:	fe 4f       	sbci	r31, 0xFE	; 254
     790:	82 83       	std	Z+2, r24	; 0x02
     792:	80 91 40 01 	lds	r24, 0x0140	; 0x800140 <RxHead>
     796:	8f 5f       	subi	r24, 0xFF	; 255
     798:	83 70       	andi	r24, 0x03	; 3
     79a:	90 91 3f 01 	lds	r25, 0x013F	; 0x80013f <RxTail>
     79e:	89 17       	cp	r24, r25
     7a0:	49 f0       	breq	.+18     	; 0x7b4 <_Z17PedalComm_Receivev+0x17a>
     7a2:	80 93 40 01 	sts	0x0140, r24	; 0x800140 <RxHead>
     7a6:	06 c0       	rjmp	.+12     	; 0x7b4 <_Z17PedalComm_Receivev+0x17a>
     7a8:	8a e2       	ldi	r24, 0x2A	; 42
     7aa:	0e 94 97 07 	call	0xf2e	; 0xf2e <_Z15UART0_QueueCharh>
     7ae:	81 e0       	ldi	r24, 0x01	; 1
     7b0:	80 93 3b 01 	sts	0x013B, r24	; 0x80013b <PedalComm_DelayTXOvfCnt>
     7b4:	10 92 37 01 	sts	0x0137, r1	; 0x800137 <_ZZ17PedalComm_ReceivevE10RX_ByteCnt>
     7b8:	df 91       	pop	r29
     7ba:	cf 91       	pop	r28
     7bc:	08 95       	ret

000007be <_Z24PedalComm_HandleReceivedv>:
     7be:	40 91 3f 01 	lds	r20, 0x013F	; 0x80013f <RxTail>
     7c2:	e0 91 3f 01 	lds	r30, 0x013F	; 0x80013f <RxTail>
     7c6:	f0 e0       	ldi	r31, 0x00	; 0
     7c8:	ee 0f       	add	r30, r30
     7ca:	ff 1f       	adc	r31, r31
     7cc:	ee 0f       	add	r30, r30
     7ce:	ff 1f       	adc	r31, r31
     7d0:	ee 0f       	add	r30, r30
     7d2:	ff 1f       	adc	r31, r31
     7d4:	ef 57       	subi	r30, 0x7F	; 127
     7d6:	fe 4f       	sbci	r31, 0xFE	; 254
     7d8:	61 81       	ldd	r22, Z+1	; 0x01
     7da:	e0 91 3f 01 	lds	r30, 0x013F	; 0x80013f <RxTail>
     7de:	f0 e0       	ldi	r31, 0x00	; 0
     7e0:	ee 0f       	add	r30, r30
     7e2:	ff 1f       	adc	r31, r31
     7e4:	ee 0f       	add	r30, r30
     7e6:	ff 1f       	adc	r31, r31
     7e8:	ee 0f       	add	r30, r30
     7ea:	ff 1f       	adc	r31, r31
     7ec:	ef 57       	subi	r30, 0x7F	; 127
     7ee:	fe 4f       	sbci	r31, 0xFE	; 254
     7f0:	80 81       	ld	r24, Z
     7f2:	50 e0       	ldi	r21, 0x00	; 0
     7f4:	44 0f       	add	r20, r20
     7f6:	55 1f       	adc	r21, r21
     7f8:	44 0f       	add	r20, r20
     7fa:	55 1f       	adc	r21, r21
     7fc:	44 0f       	add	r20, r20
     7fe:	55 1f       	adc	r21, r21
     800:	4d 57       	subi	r20, 0x7D	; 125
     802:	5e 4f       	sbci	r21, 0xFE	; 254
     804:	0e 94 6a 00 	call	0xd4	; 0xd4 <_Z19Handle_PedalCommand3CMDhPh>
     808:	90 91 3f 01 	lds	r25, 0x013F	; 0x80013f <RxTail>
     80c:	9f 5f       	subi	r25, 0xFF	; 255
     80e:	93 70       	andi	r25, 0x03	; 3
     810:	90 93 3f 01 	sts	0x013F, r25	; 0x80013f <RxTail>
     814:	0e 94 97 07 	call	0xf2e	; 0xf2e <_Z15UART0_QueueCharh>
     818:	81 e0       	ldi	r24, 0x01	; 1
     81a:	80 93 3b 01 	sts	0x013B, r24	; 0x80013b <PedalComm_DelayTXOvfCnt>
     81e:	08 95       	ret

00000820 <_Z22PedalComm_QueueCommand3CMDhPh>:
     820:	20 91 3e 01 	lds	r18, 0x013E	; 0x80013e <TxHead>
     824:	2f 5f       	subi	r18, 0xFF	; 255
     826:	27 70       	andi	r18, 0x07	; 7
     828:	90 91 3d 01 	lds	r25, 0x013D	; 0x80013d <TxTail>
     82c:	29 17       	cp	r18, r25
     82e:	09 f4       	brne	.+2      	; 0x832 <_Z22PedalComm_QueueCommand3CMDhPh+0x12>
     830:	4e c0       	rjmp	.+156    	; 0x8ce <_Z22PedalComm_QueueCommand3CMDhPh+0xae>
     832:	e0 91 3e 01 	lds	r30, 0x013E	; 0x80013e <TxHead>
     836:	f0 e0       	ldi	r31, 0x00	; 0
     838:	ee 0f       	add	r30, r30
     83a:	ff 1f       	adc	r31, r31
     83c:	ee 0f       	add	r30, r30
     83e:	ff 1f       	adc	r31, r31
     840:	ee 0f       	add	r30, r30
     842:	ff 1f       	adc	r31, r31
     844:	ef 5b       	subi	r30, 0xBF	; 191
     846:	fe 4f       	sbci	r31, 0xFE	; 254
     848:	80 83       	st	Z, r24
     84a:	e0 91 3e 01 	lds	r30, 0x013E	; 0x80013e <TxHead>
     84e:	f0 e0       	ldi	r31, 0x00	; 0
     850:	ee 0f       	add	r30, r30
     852:	ff 1f       	adc	r31, r31
     854:	ee 0f       	add	r30, r30
     856:	ff 1f       	adc	r31, r31
     858:	ee 0f       	add	r30, r30
     85a:	ff 1f       	adc	r31, r31
     85c:	ef 5b       	subi	r30, 0xBF	; 191
     85e:	fe 4f       	sbci	r31, 0xFE	; 254
     860:	84 e0       	ldi	r24, 0x04	; 4
     862:	86 0f       	add	r24, r22
     864:	81 83       	std	Z+1, r24	; 0x01
     866:	e0 91 3e 01 	lds	r30, 0x013E	; 0x80013e <TxHead>
     86a:	f0 e0       	ldi	r31, 0x00	; 0
     86c:	ee 0f       	add	r30, r30
     86e:	ff 1f       	adc	r31, r31
     870:	ee 0f       	add	r30, r30
     872:	ff 1f       	adc	r31, r31
     874:	ee 0f       	add	r30, r30
     876:	ff 1f       	adc	r31, r31
     878:	ef 5b       	subi	r30, 0xBF	; 191
     87a:	fe 4f       	sbci	r31, 0xFE	; 254
     87c:	16 82       	std	Z+6, r1	; 0x06
     87e:	e0 91 3e 01 	lds	r30, 0x013E	; 0x80013e <TxHead>
     882:	f0 e0       	ldi	r31, 0x00	; 0
     884:	ee 0f       	add	r30, r30
     886:	ff 1f       	adc	r31, r31
     888:	ee 0f       	add	r30, r30
     88a:	ff 1f       	adc	r31, r31
     88c:	ee 0f       	add	r30, r30
     88e:	ff 1f       	adc	r31, r31
     890:	ef 5b       	subi	r30, 0xBF	; 191
     892:	fe 4f       	sbci	r31, 0xFE	; 254
     894:	17 82       	std	Z+7, r1	; 0x07
     896:	66 23       	and	r22, r22
     898:	b1 f0       	breq	.+44     	; 0x8c6 <_Z22PedalComm_QueueCommand3CMDhPh+0xa6>
     89a:	a4 2f       	mov	r26, r20
     89c:	b5 2f       	mov	r27, r21
     89e:	80 e0       	ldi	r24, 0x00	; 0
     8a0:	90 e0       	ldi	r25, 0x00	; 0
     8a2:	e0 91 3e 01 	lds	r30, 0x013E	; 0x80013e <TxHead>
     8a6:	f0 e0       	ldi	r31, 0x00	; 0
     8a8:	3d 91       	ld	r19, X+
     8aa:	ee 0f       	add	r30, r30
     8ac:	ff 1f       	adc	r31, r31
     8ae:	ee 0f       	add	r30, r30
     8b0:	ff 1f       	adc	r31, r31
     8b2:	ee 0f       	add	r30, r30
     8b4:	ff 1f       	adc	r31, r31
     8b6:	ef 5b       	subi	r30, 0xBF	; 191
     8b8:	fe 4f       	sbci	r31, 0xFE	; 254
     8ba:	e8 0f       	add	r30, r24
     8bc:	f9 1f       	adc	r31, r25
     8be:	32 83       	std	Z+2, r19	; 0x02
     8c0:	01 96       	adiw	r24, 0x01	; 1
     8c2:	86 17       	cp	r24, r22
     8c4:	70 f3       	brcs	.-36     	; 0x8a2 <_Z22PedalComm_QueueCommand3CMDhPh+0x82>
     8c6:	20 93 3e 01 	sts	0x013E, r18	; 0x80013e <TxHead>
     8ca:	81 e0       	ldi	r24, 0x01	; 1
     8cc:	08 95       	ret
     8ce:	80 e0       	ldi	r24, 0x00	; 0
     8d0:	08 95       	ret

000008d2 <_Z20PedalComm_PutCommandv>:
     8d2:	cf 93       	push	r28
     8d4:	e0 91 3d 01 	lds	r30, 0x013D	; 0x80013d <TxTail>
     8d8:	f0 e0       	ldi	r31, 0x00	; 0
     8da:	ee 0f       	add	r30, r30
     8dc:	ff 1f       	adc	r31, r31
     8de:	ee 0f       	add	r30, r30
     8e0:	ff 1f       	adc	r31, r31
     8e2:	ee 0f       	add	r30, r30
     8e4:	ff 1f       	adc	r31, r31
     8e6:	ef 5b       	subi	r30, 0xBF	; 191
     8e8:	fe 4f       	sbci	r31, 0xFE	; 254
     8ea:	87 81       	ldd	r24, Z+7	; 0x07
     8ec:	88 23       	and	r24, r24
     8ee:	39 f0       	breq	.+14     	; 0x8fe <_Z20PedalComm_PutCommandv+0x2c>
     8f0:	80 91 3d 01 	lds	r24, 0x013D	; 0x80013d <TxTail>
     8f4:	8f 5f       	subi	r24, 0xFF	; 255
     8f6:	87 70       	andi	r24, 0x07	; 7
     8f8:	80 93 3d 01 	sts	0x013D, r24	; 0x80013d <TxTail>
     8fc:	84 c0       	rjmp	.+264    	; 0xa06 <__stack+0x107>
     8fe:	e0 91 3d 01 	lds	r30, 0x013D	; 0x80013d <TxTail>
     902:	f0 e0       	ldi	r31, 0x00	; 0
     904:	ee 0f       	add	r30, r30
     906:	ff 1f       	adc	r31, r31
     908:	ee 0f       	add	r30, r30
     90a:	ff 1f       	adc	r31, r31
     90c:	ee 0f       	add	r30, r30
     90e:	ff 1f       	adc	r31, r31
     910:	ef 5b       	subi	r30, 0xBF	; 191
     912:	fe 4f       	sbci	r31, 0xFE	; 254
     914:	86 81       	ldd	r24, Z+6	; 0x06
     916:	81 11       	cpse	r24, r1
     918:	76 c0       	rjmp	.+236    	; 0xa06 <__stack+0x107>
     91a:	8f e5       	ldi	r24, 0x5F	; 95
     91c:	0e 94 97 07 	call	0xf2e	; 0xf2e <_Z15UART0_QueueCharh>
     920:	e0 91 3d 01 	lds	r30, 0x013D	; 0x80013d <TxTail>
     924:	f0 e0       	ldi	r31, 0x00	; 0
     926:	ee 0f       	add	r30, r30
     928:	ff 1f       	adc	r31, r31
     92a:	ee 0f       	add	r30, r30
     92c:	ff 1f       	adc	r31, r31
     92e:	ee 0f       	add	r30, r30
     930:	ff 1f       	adc	r31, r31
     932:	ef 5b       	subi	r30, 0xBF	; 191
     934:	fe 4f       	sbci	r31, 0xFE	; 254
     936:	81 81       	ldd	r24, Z+1	; 0x01
     938:	0e 94 97 07 	call	0xf2e	; 0xf2e <_Z15UART0_QueueCharh>
     93c:	e0 91 3d 01 	lds	r30, 0x013D	; 0x80013d <TxTail>
     940:	f0 e0       	ldi	r31, 0x00	; 0
     942:	ee 0f       	add	r30, r30
     944:	ff 1f       	adc	r31, r31
     946:	ee 0f       	add	r30, r30
     948:	ff 1f       	adc	r31, r31
     94a:	ee 0f       	add	r30, r30
     94c:	ff 1f       	adc	r31, r31
     94e:	ef 5b       	subi	r30, 0xBF	; 191
     950:	fe 4f       	sbci	r31, 0xFE	; 254
     952:	80 81       	ld	r24, Z
     954:	0e 94 97 07 	call	0xf2e	; 0xf2e <_Z15UART0_QueueCharh>
     958:	e0 91 3d 01 	lds	r30, 0x013D	; 0x80013d <TxTail>
     95c:	f0 e0       	ldi	r31, 0x00	; 0
     95e:	ee 0f       	add	r30, r30
     960:	ff 1f       	adc	r31, r31
     962:	ee 0f       	add	r30, r30
     964:	ff 1f       	adc	r31, r31
     966:	ee 0f       	add	r30, r30
     968:	ff 1f       	adc	r31, r31
     96a:	ef 5b       	subi	r30, 0xBF	; 191
     96c:	fe 4f       	sbci	r31, 0xFE	; 254
     96e:	81 81       	ldd	r24, Z+1	; 0x01
     970:	90 e0       	ldi	r25, 0x00	; 0
     972:	04 97       	sbiw	r24, 0x04	; 4
     974:	18 16       	cp	r1, r24
     976:	19 06       	cpc	r1, r25
     978:	4c f5       	brge	.+82     	; 0x9cc <__stack+0xcd>
     97a:	20 e0       	ldi	r18, 0x00	; 0
     97c:	30 e0       	ldi	r19, 0x00	; 0
     97e:	c0 e0       	ldi	r28, 0x00	; 0
     980:	80 91 3d 01 	lds	r24, 0x013D	; 0x80013d <TxTail>
     984:	e8 2f       	mov	r30, r24
     986:	f0 e0       	ldi	r31, 0x00	; 0
     988:	ee 0f       	add	r30, r30
     98a:	ff 1f       	adc	r31, r31
     98c:	ee 0f       	add	r30, r30
     98e:	ff 1f       	adc	r31, r31
     990:	ee 0f       	add	r30, r30
     992:	ff 1f       	adc	r31, r31
     994:	ef 5b       	subi	r30, 0xBF	; 191
     996:	fe 4f       	sbci	r31, 0xFE	; 254
     998:	e2 0f       	add	r30, r18
     99a:	f3 1f       	adc	r31, r19
     99c:	82 81       	ldd	r24, Z+2	; 0x02
     99e:	0e 94 97 07 	call	0xf2e	; 0xf2e <_Z15UART0_QueueCharh>
     9a2:	cf 5f       	subi	r28, 0xFF	; 255
     9a4:	2c 2f       	mov	r18, r28
     9a6:	30 e0       	ldi	r19, 0x00	; 0
     9a8:	a0 91 3d 01 	lds	r26, 0x013D	; 0x80013d <TxTail>
     9ac:	b0 e0       	ldi	r27, 0x00	; 0
     9ae:	aa 0f       	add	r26, r26
     9b0:	bb 1f       	adc	r27, r27
     9b2:	aa 0f       	add	r26, r26
     9b4:	bb 1f       	adc	r27, r27
     9b6:	aa 0f       	add	r26, r26
     9b8:	bb 1f       	adc	r27, r27
     9ba:	af 5b       	subi	r26, 0xBF	; 191
     9bc:	be 4f       	sbci	r27, 0xFE	; 254
     9be:	11 96       	adiw	r26, 0x01	; 1
     9c0:	8c 91       	ld	r24, X
     9c2:	90 e0       	ldi	r25, 0x00	; 0
     9c4:	04 97       	sbiw	r24, 0x04	; 4
     9c6:	28 17       	cp	r18, r24
     9c8:	39 07       	cpc	r19, r25
     9ca:	d4 f2       	brlt	.-76     	; 0x980 <__stack+0x81>
     9cc:	8f ee       	ldi	r24, 0xEF	; 239
     9ce:	0e 94 97 07 	call	0xf2e	; 0xf2e <_Z15UART0_QueueCharh>
     9d2:	80 91 3b 01 	lds	r24, 0x013B	; 0x80013b <PedalComm_DelayTXOvfCnt>
     9d6:	81 11       	cpse	r24, r1
     9d8:	03 c0       	rjmp	.+6      	; 0x9e0 <__stack+0xe1>
     9da:	81 e0       	ldi	r24, 0x01	; 1
     9dc:	80 93 3c 01 	sts	0x013C, r24	; 0x80013c <PedalComm_DelayTxFlag>
     9e0:	e0 91 3d 01 	lds	r30, 0x013D	; 0x80013d <TxTail>
     9e4:	f0 e0       	ldi	r31, 0x00	; 0
     9e6:	ee 0f       	add	r30, r30
     9e8:	ff 1f       	adc	r31, r31
     9ea:	ee 0f       	add	r30, r30
     9ec:	ff 1f       	adc	r31, r31
     9ee:	ee 0f       	add	r30, r30
     9f0:	ff 1f       	adc	r31, r31
     9f2:	ef 5b       	subi	r30, 0xBF	; 191
     9f4:	fe 4f       	sbci	r31, 0xFE	; 254
     9f6:	81 e0       	ldi	r24, 0x01	; 1
     9f8:	86 83       	std	Z+6, r24	; 0x06
     9fa:	81 e0       	ldi	r24, 0x01	; 1
     9fc:	90 e0       	ldi	r25, 0x00	; 0
     9fe:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <PedalComm_ResponseTimeoutOvfCnt+0x1>
     a02:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <PedalComm_ResponseTimeoutOvfCnt>
     a06:	cf 91       	pop	r28
     a08:	08 95       	ret

00000a0a <_Z12Select_RX_TX13CommDirection>:
     a0a:	81 30       	cpi	r24, 0x01	; 1
     a0c:	19 f4       	brne	.+6      	; 0xa14 <_Z12Select_RX_TX13CommDirection+0xa>
     a0e:	2b 98       	cbi	0x05, 3	; 5
     a10:	2c 9a       	sbi	0x05, 4	; 5
     a12:	08 95       	ret
     a14:	2c 98       	cbi	0x05, 4	; 5
     a16:	2b 9a       	sbi	0x05, 3	; 5
     a18:	08 95       	ret

00000a1a <_Z18PedalComm_Transmitv>:


void PedalComm_Transmit()
{
	/* Activate Transmit */
	Select_RX_TX(transmit);
     a1a:	81 e0       	ldi	r24, 0x01	; 1
     a1c:	0e 94 05 05 	call	0xa0a	; 0xa0a <_Z12Select_RX_TX13CommDirection>
	
	/* Start transmit */
	UART0_PutQueue();
     a20:	0e 94 ac 07 	call	0xf58	; 0xf58 <_Z14UART0_PutQueuev>
     a24:	08 95       	ret

00000a26 <__vector_22>:
	}
}

/* TX Complete Interrupt ISR */
ISR(USART0_TX_vect)
{
     a26:	1f 92       	push	r1
     a28:	0f 92       	push	r0
     a2a:	0f b6       	in	r0, 0x3f	; 63
     a2c:	0f 92       	push	r0
     a2e:	11 24       	eor	r1, r1
     a30:	2f 93       	push	r18
     a32:	3f 93       	push	r19
     a34:	4f 93       	push	r20
     a36:	5f 93       	push	r21
     a38:	6f 93       	push	r22
     a3a:	7f 93       	push	r23
     a3c:	8f 93       	push	r24
     a3e:	9f 93       	push	r25
     a40:	af 93       	push	r26
     a42:	bf 93       	push	r27
     a44:	ef 93       	push	r30
     a46:	ff 93       	push	r31
	/* Deactivate Transmit */
	Select_RX_TX(receive);
     a48:	80 e0       	ldi	r24, 0x00	; 0
     a4a:	0e 94 05 05 	call	0xa0a	; 0xa0a <_Z12Select_RX_TX13CommDirection>
     a4e:	ff 91       	pop	r31
     a50:	ef 91       	pop	r30
     a52:	bf 91       	pop	r27
     a54:	af 91       	pop	r26
     a56:	9f 91       	pop	r25
     a58:	8f 91       	pop	r24
     a5a:	7f 91       	pop	r23
     a5c:	6f 91       	pop	r22
     a5e:	5f 91       	pop	r21
     a60:	4f 91       	pop	r20
     a62:	3f 91       	pop	r19
     a64:	2f 91       	pop	r18
     a66:	0f 90       	pop	r0
     a68:	0f be       	out	0x3f, r0	; 63
     a6a:	0f 90       	pop	r0
     a6c:	1f 90       	pop	r1
     a6e:	18 95       	reti

00000a70 <_Z18RotaryEncoder_Initv>:
}

bool RotaryEncoder_IsPressed()
{
	return GPIO_ROT_ENC_PIN & GPIO_ROT_ENC_PRESS_MASK;
}
     a70:	84 b1       	in	r24, 0x04	; 4
     a72:	88 7f       	andi	r24, 0xF8	; 248
     a74:	84 b9       	out	0x04, r24	; 4
     a76:	ec e6       	ldi	r30, 0x6C	; 108
     a78:	f0 e0       	ldi	r31, 0x00	; 0
     a7a:	80 81       	ld	r24, Z
     a7c:	81 60       	ori	r24, 0x01	; 1
     a7e:	80 83       	st	Z, r24
     a80:	e8 e6       	ldi	r30, 0x68	; 104
     a82:	f0 e0       	ldi	r31, 0x00	; 0
     a84:	80 81       	ld	r24, Z
     a86:	82 60       	ori	r24, 0x02	; 2
     a88:	80 83       	st	Z, r24
     a8a:	e9 e6       	ldi	r30, 0x69	; 105
     a8c:	f0 e0       	ldi	r31, 0x00	; 0
     a8e:	80 81       	ld	r24, Z
     a90:	80 63       	ori	r24, 0x30	; 48
     a92:	80 83       	st	Z, r24
     a94:	ea 9a       	sbi	0x1d, 2	; 29
     a96:	08 95       	ret

00000a98 <_Z29RotaryEncoder_EnableInterruptv>:

void RotaryEncoder_EnableInterrupt()
{
	/* Clear and reenable interrupt */
	EIFR |= (1 << INTF2);		// Clear External interrupt (INT2) Flag
     a98:	e2 9a       	sbi	0x1c, 2	; 28
	PCIFR |= (1 << PCIF1);		// Clear Pin Change interrupt Flag
     a9a:	d9 9a       	sbi	0x1b, 1	; 27
	EIMSK |= (1 << INT2);		// Enable External Interrupt Request (INT2)
     a9c:	ea 9a       	sbi	0x1d, 2	; 29
	PCICR |= (1 << PCIE1);		// Enable Pin Change interrupt (PCI1) PCINT[15:8]
     a9e:	e8 e6       	ldi	r30, 0x68	; 104
     aa0:	f0 e0       	ldi	r31, 0x00	; 0
     aa2:	80 81       	ld	r24, Z
     aa4:	82 60       	ori	r24, 0x02	; 2
     aa6:	80 83       	st	Z, r24
     aa8:	08 95       	ret

00000aaa <__vector_5>:


/* Pin Change Interrupt Request 1 Service Routine */
/* To handle Rotary Encoder Rotation */
ISR(PCINT1_vect)
{
     aaa:	1f 92       	push	r1
     aac:	0f 92       	push	r0
     aae:	0f b6       	in	r0, 0x3f	; 63
     ab0:	0f 92       	push	r0
     ab2:	11 24       	eor	r1, r1
     ab4:	8f 93       	push	r24
     ab6:	ef 93       	push	r30
     ab8:	ff 93       	push	r31
	if (GPIO_ROT_ENC_PIN & GPIO_ROT_ENC_TRIGGER_MASK)	// Only react on rising edge
     aba:	18 9b       	sbis	0x03, 0	; 3
     abc:	0f c0       	rjmp	.+30     	; 0xadc <__vector_5+0x32>
	{
		/* Disable External interrupts */
		EIMSK &= ~(1 << INT2);		// Disable External Interrupt Request (INT2)
     abe:	ea 98       	cbi	0x1d, 2	; 29
		PCICR &= ~(1 << PCIE1);		// Disable Pin Change interrupt (PCI1) PCINT[15:8]
     ac0:	e8 e6       	ldi	r30, 0x68	; 104
     ac2:	f0 e0       	ldi	r31, 0x00	; 0
     ac4:	80 81       	ld	r24, Z
     ac6:	8d 7f       	andi	r24, 0xFD	; 253
     ac8:	80 83       	st	Z, r24
		
		/* Determine Left/Right turn */
		if (GPIO_ROT_ENC_PIN & GPIO_ROT_ENC_INDICATOR_MASK)
     aca:	19 9b       	sbis	0x03, 1	; 3
     acc:	04 c0       	rjmp	.+8      	; 0xad6 <__vector_5+0x2c>
			RotEnc_State = ROT_RIGHT;
     ace:	81 e0       	ldi	r24, 0x01	; 1
     ad0:	80 93 b1 01 	sts	0x01B1, r24	; 0x8001b1 <RotEnc_State>
     ad4:	03 c0       	rjmp	.+6      	; 0xadc <__vector_5+0x32>
		else
			RotEnc_State = ROT_LEFT;
     ad6:	82 e0       	ldi	r24, 0x02	; 2
     ad8:	80 93 b1 01 	sts	0x01B1, r24	; 0x8001b1 <RotEnc_State>
	}
}
     adc:	ff 91       	pop	r31
     ade:	ef 91       	pop	r30
     ae0:	8f 91       	pop	r24
     ae2:	0f 90       	pop	r0
     ae4:	0f be       	out	0x3f, r0	; 63
     ae6:	0f 90       	pop	r0
     ae8:	1f 90       	pop	r1
     aea:	18 95       	reti

00000aec <__vector_3>:

/* External Interrupt Request 2 Service routine */
/* To handle Rotary Encoder Press */
ISR(INT2_vect)
{
     aec:	1f 92       	push	r1
     aee:	0f 92       	push	r0
     af0:	0f b6       	in	r0, 0x3f	; 63
     af2:	0f 92       	push	r0
     af4:	11 24       	eor	r1, r1
     af6:	8f 93       	push	r24
     af8:	9f 93       	push	r25
     afa:	ef 93       	push	r30
     afc:	ff 93       	push	r31
	RotaryEncoder_OvfCnt = 1;		// Start overflow counter
     afe:	81 e0       	ldi	r24, 0x01	; 1
     b00:	90 e0       	ldi	r25, 0x00	; 0
     b02:	90 93 b3 01 	sts	0x01B3, r25	; 0x8001b3 <RotaryEncoder_OvfCnt+0x1>
     b06:	80 93 b2 01 	sts	0x01B2, r24	; 0x8001b2 <RotaryEncoder_OvfCnt>
	
	/* Disable External interrupts */
	EIMSK &= ~(1 << INT2);		// Disable External Interrupt Request (INT2)
     b0a:	ea 98       	cbi	0x1d, 2	; 29
	PCICR &= ~(1 << PCIE1);		// Disable Pin Change interrupt (PCI1) PCINT[15:8]
     b0c:	e8 e6       	ldi	r30, 0x68	; 104
     b0e:	f0 e0       	ldi	r31, 0x00	; 0
     b10:	80 81       	ld	r24, Z
     b12:	8d 7f       	andi	r24, 0xFD	; 253
     b14:	80 83       	st	Z, r24
     b16:	ff 91       	pop	r31
     b18:	ef 91       	pop	r30
     b1a:	9f 91       	pop	r25
     b1c:	8f 91       	pop	r24
     b1e:	0f 90       	pop	r0
     b20:	0f be       	out	0x3f, r0	; 63
     b22:	0f 90       	pop	r0
     b24:	1f 90       	pop	r1
     b26:	18 95       	reti

00000b28 <_Z14SP10281_Updatev>:
void SP10281_Update()
{
	static unsigned char tmp = 0;

	/* Increment digit counter */
	if (++SP10281_DigitCnt >= SP10281_NUMBER_OF_DIGITS)
     b28:	80 91 b7 01 	lds	r24, 0x01B7	; 0x8001b7 <SP10281_DigitCnt>
     b2c:	8f 5f       	subi	r24, 0xFF	; 255
     b2e:	80 93 b7 01 	sts	0x01B7, r24	; 0x8001b7 <SP10281_DigitCnt>
     b32:	83 30       	cpi	r24, 0x03	; 3
     b34:	10 f0       	brcs	.+4      	; 0xb3a <_Z14SP10281_Updatev+0x12>
		SP10281_DigitCnt = 0;
     b36:	10 92 b7 01 	sts	0x01B7, r1	; 0x8001b7 <SP10281_DigitCnt>

	/* Activate next digit */
	tmp = (1 << (SP10281_DigitCnt + GPIO_SP10281_DIGIT0_PIN));
     b3a:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <SP10281_DigitCnt>
     b3e:	9b 5f       	subi	r25, 0xFB	; 251
     b40:	81 e0       	ldi	r24, 0x01	; 1
     b42:	01 c0       	rjmp	.+2      	; 0xb46 <_Z14SP10281_Updatev+0x1e>
     b44:	88 0f       	add	r24, r24
     b46:	9a 95       	dec	r25
     b48:	ea f7       	brpl	.-6      	; 0xb44 <_Z14SP10281_Updatev+0x1c>
     b4a:	80 93 b4 01 	sts	0x01B4, r24	; 0x8001b4 <_ZZ14SP10281_UpdatevE3tmp>
	GPIO_SP10281_DIGIT_PORT |= GPIO_SP10281_DIGIT_MASK;
     b4e:	85 b1       	in	r24, 0x05	; 5
     b50:	80 6e       	ori	r24, 0xE0	; 224
     b52:	85 b9       	out	0x05, r24	; 5
	GPIO_SP10281_DIGIT_PORT &= ~tmp;
     b54:	95 b1       	in	r25, 0x05	; 5
     b56:	80 91 b4 01 	lds	r24, 0x01B4	; 0x8001b4 <_ZZ14SP10281_UpdatevE3tmp>
     b5a:	80 95       	com	r24
     b5c:	89 23       	and	r24, r25
     b5e:	85 b9       	out	0x05, r24	; 5

	/* Update segments */
	GPIO_SP10281_SEGMENT_PORT = SP10281_DigitData[SP10281_DigitCnt];
     b60:	e0 91 b7 01 	lds	r30, 0x01B7	; 0x8001b7 <SP10281_DigitCnt>
     b64:	f0 e0       	ldi	r31, 0x00	; 0
     b66:	e8 54       	subi	r30, 0x48	; 72
     b68:	fe 4f       	sbci	r31, 0xFE	; 254
     b6a:	80 81       	ld	r24, Z
     b6c:	82 b9       	out	0x02, r24	; 2
     b6e:	08 95       	ret

00000b70 <_Z18SP10281_WriteDigithch>:
}

void SP10281_WriteDigit(unsigned char dig, char data, unsigned char dot)
{
	if (data >= '0' && data <= '9')
     b70:	e0 ed       	ldi	r30, 0xD0	; 208
     b72:	e6 0f       	add	r30, r22
     b74:	ea 30       	cpi	r30, 0x0A	; 10
     b76:	a8 f0       	brcs	.+42     	; 0xba2 <_Z18SP10281_WriteDigithch+0x32>
	{
		data -= '0';
	}
	else if (data >= 'A' && data <= 'Z')
     b78:	9f eb       	ldi	r25, 0xBF	; 191
     b7a:	96 0f       	add	r25, r22
     b7c:	9a 31       	cpi	r25, 0x1A	; 26
     b7e:	18 f4       	brcc	.+6      	; 0xb86 <_Z18SP10281_WriteDigithch+0x16>
	{
		data -= 'A';
		data += 10;
     b80:	e9 ec       	ldi	r30, 0xC9	; 201
     b82:	e6 0f       	add	r30, r22
     b84:	0e c0       	rjmp	.+28     	; 0xba2 <_Z18SP10281_WriteDigithch+0x32>
	}
	else if (data >= 'a' && data <= 'z')
     b86:	9f e9       	ldi	r25, 0x9F	; 159
     b88:	96 0f       	add	r25, r22
     b8a:	9a 31       	cpi	r25, 0x1A	; 26
     b8c:	18 f4       	brcc	.+6      	; 0xb94 <_Z18SP10281_WriteDigithch+0x24>
	{
		data -= 'a';
		data += 10;
     b8e:	e9 ea       	ldi	r30, 0xA9	; 169
     b90:	e6 0f       	add	r30, r22
     b92:	07 c0       	rjmp	.+14     	; 0xba2 <_Z18SP10281_WriteDigithch+0x32>
	}
	else if (data == '-')
     b94:	6d 32       	cpi	r22, 0x2D	; 45
     b96:	21 f0       	breq	.+8      	; 0xba0 <_Z18SP10281_WriteDigithch+0x30>
	{
		data = 36;
	}
	else if (data == ' ')
     b98:	60 32       	cpi	r22, 0x20	; 32
     b9a:	d9 f4       	brne	.+54     	; 0xbd2 <_Z18SP10281_WriteDigithch+0x62>
	{
		data = 37;
     b9c:	e5 e2       	ldi	r30, 0x25	; 37
     b9e:	01 c0       	rjmp	.+2      	; 0xba2 <_Z18SP10281_WriteDigithch+0x32>
		data -= 'a';
		data += 10;
	}
	else if (data == '-')
	{
		data = 36;
     ba0:	e4 e2       	ldi	r30, 0x24	; 36
	else
	{
		return;
	}
	
	SP10281_DigitData[dig] = SP10281_DigitTable[(unsigned char)data];
     ba2:	90 e0       	ldi	r25, 0x00	; 0
     ba4:	f0 e0       	ldi	r31, 0x00	; 0
     ba6:	ec 5f       	subi	r30, 0xFC	; 252
     ba8:	fe 4f       	sbci	r31, 0xFE	; 254
     baa:	20 81       	ld	r18, Z
     bac:	fc 01       	movw	r30, r24
     bae:	e8 54       	subi	r30, 0x48	; 72
     bb0:	fe 4f       	sbci	r31, 0xFE	; 254
     bb2:	20 83       	st	Z, r18
	
	/* Set or clear dot */
	if (dot)
     bb4:	44 23       	and	r20, r20
     bb6:	39 f0       	breq	.+14     	; 0xbc6 <_Z18SP10281_WriteDigithch+0x56>
	SP10281_DigitData[dig] &= 0b01111111;
     bb8:	fc 01       	movw	r30, r24
     bba:	e8 54       	subi	r30, 0x48	; 72
     bbc:	fe 4f       	sbci	r31, 0xFE	; 254
     bbe:	80 81       	ld	r24, Z
     bc0:	8f 77       	andi	r24, 0x7F	; 127
     bc2:	80 83       	st	Z, r24
     bc4:	08 95       	ret
	else
	SP10281_DigitData[dig] |= 0b10000000;
     bc6:	fc 01       	movw	r30, r24
     bc8:	e8 54       	subi	r30, 0x48	; 72
     bca:	fe 4f       	sbci	r31, 0xFE	; 254
     bcc:	80 81       	ld	r24, Z
     bce:	80 68       	ori	r24, 0x80	; 128
     bd0:	80 83       	st	Z, r24
     bd2:	08 95       	ret

00000bd4 <_Z17SP10281_WriteCharccchhh>:
}

void SP10281_WriteChar(char d2, char d1, char d0, unsigned char dot2, unsigned char dot1, unsigned char dot0)
{
     bd4:	ef 92       	push	r14
     bd6:	0f 93       	push	r16
     bd8:	1f 93       	push	r17
     bda:	cf 93       	push	r28
     bdc:	df 93       	push	r29
     bde:	c8 2f       	mov	r28, r24
     be0:	16 2f       	mov	r17, r22
     be2:	64 2f       	mov	r22, r20
     be4:	d2 2f       	mov	r29, r18
     be6:	4e 2d       	mov	r20, r14
	SP10281_WriteDigit(SP10281_DIGIT_0, d0, dot0);
     be8:	80 e0       	ldi	r24, 0x00	; 0
     bea:	0e 94 b8 05 	call	0xb70	; 0xb70 <_Z18SP10281_WriteDigithch>
	SP10281_WriteDigit(SP10281_DIGIT_1, d1, dot1);
     bee:	40 2f       	mov	r20, r16
     bf0:	61 2f       	mov	r22, r17
     bf2:	81 e0       	ldi	r24, 0x01	; 1
     bf4:	0e 94 b8 05 	call	0xb70	; 0xb70 <_Z18SP10281_WriteDigithch>
	SP10281_WriteDigit(SP10281_DIGIT_2, d2, dot2);
     bf8:	4d 2f       	mov	r20, r29
     bfa:	6c 2f       	mov	r22, r28
     bfc:	82 e0       	ldi	r24, 0x02	; 2
     bfe:	0e 94 b8 05 	call	0xb70	; 0xb70 <_Z18SP10281_WriteDigithch>
}
     c02:	df 91       	pop	r29
     c04:	cf 91       	pop	r28
     c06:	1f 91       	pop	r17
     c08:	0f 91       	pop	r16
     c0a:	ef 90       	pop	r14
     c0c:	08 95       	ret

00000c0e <_Z19SP10281_WriteNumbers>:

/* Writes a number between -99 and 999 to the display */
void SP10281_WriteNumber(short num)
{
     c0e:	cf 93       	push	r28
     c10:	df 93       	push	r29
	short tmp = 0;
	
	if (num >= -99 && num <= 999)
     c12:	9c 01       	movw	r18, r24
     c14:	2d 59       	subi	r18, 0x9D	; 157
     c16:	3f 4f       	sbci	r19, 0xFF	; 255
     c18:	2b 34       	cpi	r18, 0x4B	; 75
     c1a:	34 40       	sbci	r19, 0x04	; 4
     c1c:	68 f5       	brcc	.+90     	; 0xc78 <_Z19SP10281_WriteNumbers+0x6a>
     c1e:	ec 01       	movw	r28, r24
	{
		if (num < 0)
     c20:	99 23       	and	r25, r25
     c22:	54 f4       	brge	.+20     	; 0xc38 <_Z19SP10281_WriteNumbers+0x2a>
		{
			SP10281_WriteDigit(SP10281_DIGIT_2, '-', 0);
     c24:	40 e0       	ldi	r20, 0x00	; 0
     c26:	6d e2       	ldi	r22, 0x2D	; 45
     c28:	82 e0       	ldi	r24, 0x02	; 2
     c2a:	0e 94 b8 05 	call	0xb70	; 0xb70 <_Z18SP10281_WriteDigithch>
			num = -num;
     c2e:	88 27       	eor	r24, r24
     c30:	99 27       	eor	r25, r25
     c32:	8c 1b       	sub	r24, r28
     c34:	9d 0b       	sbc	r25, r29
     c36:	0e c0       	rjmp	.+28     	; 0xc54 <_Z19SP10281_WriteNumbers+0x46>
		}
		else
		{
			tmp = num / 100;
     c38:	64 e6       	ldi	r22, 0x64	; 100
     c3a:	70 e0       	ldi	r23, 0x00	; 0
     c3c:	0e 94 a3 09 	call	0x1346	; 0x1346 <__divmodhi4>
     c40:	d8 2f       	mov	r29, r24
     c42:	c9 2f       	mov	r28, r25
			tmp += '0';
			SP10281_WriteDigit(SP10281_DIGIT_2, tmp, 0);
     c44:	60 5d       	subi	r22, 0xD0	; 208
     c46:	7f 4f       	sbci	r23, 0xFF	; 255
     c48:	40 e0       	ldi	r20, 0x00	; 0
     c4a:	82 e0       	ldi	r24, 0x02	; 2
     c4c:	0e 94 b8 05 	call	0xb70	; 0xb70 <_Z18SP10281_WriteDigithch>
			num %= 100;
     c50:	8d 2f       	mov	r24, r29
     c52:	9c 2f       	mov	r25, r28
		}
		
		tmp = num / 10;
     c54:	6a e0       	ldi	r22, 0x0A	; 10
     c56:	70 e0       	ldi	r23, 0x00	; 0
     c58:	0e 94 a3 09 	call	0x1346	; 0x1346 <__divmodhi4>
     c5c:	ec 01       	movw	r28, r24
		tmp += '0';
		SP10281_WriteDigit(SP10281_DIGIT_1, tmp, 0);
     c5e:	60 5d       	subi	r22, 0xD0	; 208
     c60:	7f 4f       	sbci	r23, 0xFF	; 255
     c62:	40 e0       	ldi	r20, 0x00	; 0
     c64:	81 e0       	ldi	r24, 0x01	; 1
     c66:	0e 94 b8 05 	call	0xb70	; 0xb70 <_Z18SP10281_WriteDigithch>
		num %= 10;
		
		tmp = num + '0';
		SP10281_WriteDigit(SP10281_DIGIT_0, tmp, 0);
     c6a:	be 01       	movw	r22, r28
     c6c:	60 5d       	subi	r22, 0xD0	; 208
     c6e:	7f 4f       	sbci	r23, 0xFF	; 255
     c70:	40 e0       	ldi	r20, 0x00	; 0
     c72:	80 e0       	ldi	r24, 0x00	; 0
     c74:	0e 94 b8 05 	call	0xb70	; 0xb70 <_Z18SP10281_WriteDigithch>
	}
}
     c78:	df 91       	pop	r29
     c7a:	cf 91       	pop	r28
     c7c:	08 95       	ret

00000c7e <_Z12SP10281_Initv>:
};

void SP10281_Init()
{
	/* Setup GPIOs */
	GPIO_SP10281_DIGIT_DDR |= GPIO_SP10281_DIGIT_MASK;	// Set GPIO output pins for digit control
     c7e:	84 b1       	in	r24, 0x04	; 4
     c80:	80 6e       	ori	r24, 0xE0	; 224
     c82:	84 b9       	out	0x04, r24	; 4
	GPIO_SP10281_SEGMENT_DDR = 0xFF;					// Set GPIO output pins for individual segments
     c84:	8f ef       	ldi	r24, 0xFF	; 255
     c86:	81 b9       	out	0x01, r24	; 1
	
	SP10281_WriteNumber(123);
     c88:	8b e7       	ldi	r24, 0x7B	; 123
     c8a:	90 e0       	ldi	r25, 0x00	; 0
     c8c:	0e 94 07 06 	call	0xc0e	; 0xc0e <_Z19SP10281_WriteNumbers>
     c90:	08 95       	ret

00000c92 <_Z10System_Runv>:
	
}

void System_Run()
{
	switch (SystemState)
     c92:	80 91 bb 01 	lds	r24, 0x01BB	; 0x8001bb <SystemState>
     c96:	08 95       	ret

00000c98 <_Z11Timer0_Initv>:
#include "PedalComm.h"

void Timer0_Init()
{
	/* Setup Timer */
	TCCR0A |= (1 << WGM01);		// Set Timer to CTC mode (Clear Timer on Compare match)
     c98:	84 b5       	in	r24, 0x24	; 36
     c9a:	82 60       	ori	r24, 0x02	; 2
     c9c:	84 bd       	out	0x24, r24	; 36
	TCNT0 = 0;					// Clear counter register
     c9e:	16 bc       	out	0x26, r1	; 38
	OCR0A = 155;				// Set Output Compare value (78125Hz / 156 = 500,8Hz (1,997ms))
     ca0:	8b e9       	ldi	r24, 0x9B	; 155
     ca2:	87 bd       	out	0x27, r24	; 39
	TIMSK0 |= (1 << OCIE0A);	// Output Compare A Match Interrupt Enable
     ca4:	ee e6       	ldi	r30, 0x6E	; 110
     ca6:	f0 e0       	ldi	r31, 0x00	; 0
     ca8:	80 81       	ld	r24, Z
     caa:	82 60       	ori	r24, 0x02	; 2
     cac:	80 83       	st	Z, r24
	
	/* Start Timer */
	TCCR0B |= (1 << CS02);		// Set clock prescaler to 256 (20MHz / 256 = 78125Hz)
     cae:	85 b5       	in	r24, 0x25	; 37
     cb0:	84 60       	ori	r24, 0x04	; 4
     cb2:	85 bd       	out	0x25, r24	; 37
     cb4:	08 95       	ret

00000cb6 <_Z13Timer0_ms2cntm>:
}

uint32_t Timer0_ms2cnt(uint32_t ms)
{
     cb6:	9b 01       	movw	r18, r22
     cb8:	ac 01       	movw	r20, r24
	ms *= 1000;
	return (uint32_t)(ms / TIMER0_PERIOD_US);
     cba:	a8 ee       	ldi	r26, 0xE8	; 232
     cbc:	b3 e0       	ldi	r27, 0x03	; 3
     cbe:	0e 94 d9 09 	call	0x13b2	; 0x13b2 <__muluhisi3>
     cc2:	2d ec       	ldi	r18, 0xCD	; 205
     cc4:	37 e0       	ldi	r19, 0x07	; 7
     cc6:	40 e0       	ldi	r20, 0x00	; 0
     cc8:	50 e0       	ldi	r21, 0x00	; 0
     cca:	0e 94 b7 09 	call	0x136e	; 0x136e <__udivmodsi4>
}
     cce:	ca 01       	movw	r24, r20
     cd0:	b9 01       	movw	r22, r18
     cd2:	08 95       	ret

00000cd4 <__vector_16>:

/* Timer0 Compare A Match Interrupt Service Routine */
ISR(TIMER0_COMPA_vect)
{
     cd4:	1f 92       	push	r1
     cd6:	0f 92       	push	r0
     cd8:	0f b6       	in	r0, 0x3f	; 63
     cda:	0f 92       	push	r0
     cdc:	11 24       	eor	r1, r1
     cde:	2f 93       	push	r18
     ce0:	3f 93       	push	r19
     ce2:	8f 93       	push	r24
     ce4:	9f 93       	push	r25
	/* Overflow counter for delaying transmit to pedal */
	if (PedalComm_DelayTXOvfCnt)
     ce6:	80 91 3b 01 	lds	r24, 0x013B	; 0x80013b <PedalComm_DelayTXOvfCnt>
     cea:	88 23       	and	r24, r24
     cec:	61 f0       	breq	.+24     	; 0xd06 <__vector_16+0x32>
	{
		if (++PedalComm_DelayTXOvfCnt > PEDALCOMM_DELAY_TX_TIMEOUT)
     cee:	80 91 3b 01 	lds	r24, 0x013B	; 0x80013b <PedalComm_DelayTXOvfCnt>
     cf2:	8f 5f       	subi	r24, 0xFF	; 255
     cf4:	80 93 3b 01 	sts	0x013B, r24	; 0x80013b <PedalComm_DelayTXOvfCnt>
     cf8:	84 30       	cpi	r24, 0x04	; 4
     cfa:	28 f0       	brcs	.+10     	; 0xd06 <__vector_16+0x32>
		{
			PedalComm_DelayTXOvfCnt = 0;	// Stop overflow counter
     cfc:	10 92 3b 01 	sts	0x013B, r1	; 0x80013b <PedalComm_DelayTXOvfCnt>
			PedalComm_DelayTxFlag = true;
     d00:	81 e0       	ldi	r24, 0x01	; 1
     d02:	80 93 3c 01 	sts	0x013C, r24	; 0x80013c <PedalComm_DelayTxFlag>
		}
	}

	/* Overflow counter for Pedal response timeout and heartbeat */
	if (++PedalComm_ResponseTimeoutOvfCnt > PEDALCOMM_RESPONSE_TIMEOUT)
     d06:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <PedalComm_ResponseTimeoutOvfCnt>
     d0a:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <PedalComm_ResponseTimeoutOvfCnt+0x1>
     d0e:	01 96       	adiw	r24, 0x01	; 1
     d10:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <PedalComm_ResponseTimeoutOvfCnt+0x1>
     d14:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <PedalComm_ResponseTimeoutOvfCnt>
     d18:	89 3e       	cpi	r24, 0xE9	; 233
     d1a:	93 40       	sbci	r25, 0x03	; 3
     d1c:	40 f0       	brcs	.+16     	; 0xd2e <__vector_16+0x5a>
	{
		PedalComm_ResponseTimeoutOvfCnt = 1;	// Reset overflow counter
     d1e:	81 e0       	ldi	r24, 0x01	; 1
     d20:	90 e0       	ldi	r25, 0x00	; 0
     d22:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <PedalComm_ResponseTimeoutOvfCnt+0x1>
     d26:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <PedalComm_ResponseTimeoutOvfCnt>
		PedalComm_ResponseTimeoutFlag = true;
     d2a:	80 93 3a 01 	sts	0x013A, r24	; 0x80013a <PedalComm_ResponseTimeoutFlag>
	}
	
	/* Overflow counter for multiplexing 3x7-segment display */
	if (++SP10281_OvfCnt >= SP10281_OVF_RESET)
     d2e:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <SP10281_OvfCnt>
     d32:	8f 5f       	subi	r24, 0xFF	; 255
     d34:	80 93 b6 01 	sts	0x01B6, r24	; 0x8001b6 <SP10281_OvfCnt>
     d38:	83 30       	cpi	r24, 0x03	; 3
     d3a:	28 f0       	brcs	.+10     	; 0xd46 <__vector_16+0x72>
	{
		SP10281_OvfCnt = 0;		// Stop overflow counter
     d3c:	10 92 b6 01 	sts	0x01B6, r1	; 0x8001b6 <SP10281_OvfCnt>
		SP10281_OvfFlag = 1;
     d40:	81 e0       	ldi	r24, 0x01	; 1
     d42:	80 93 b5 01 	sts	0x01B5, r24	; 0x8001b5 <SP10281_OvfFlag>
	}
	
	/* Overflow counter for blinking UI LEDs */
	if (++(MCP_Output::AutoToggle_OvfCnt) > MCP_Output::AutoToggle_Timeout)
     d46:	80 91 2e 01 	lds	r24, 0x012E	; 0x80012e <_ZN10MCP_Output17AutoToggle_OvfCntE>
     d4a:	90 91 2f 01 	lds	r25, 0x012F	; 0x80012f <_ZN10MCP_Output17AutoToggle_OvfCntE+0x1>
     d4e:	01 96       	adiw	r24, 0x01	; 1
     d50:	90 93 2f 01 	sts	0x012F, r25	; 0x80012f <_ZN10MCP_Output17AutoToggle_OvfCntE+0x1>
     d54:	80 93 2e 01 	sts	0x012E, r24	; 0x80012e <_ZN10MCP_Output17AutoToggle_OvfCntE>
     d58:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <_ZN10MCP_Output18AutoToggle_TimeoutE>
     d5c:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <_ZN10MCP_Output18AutoToggle_TimeoutE+0x1>
     d60:	28 17       	cp	r18, r24
     d62:	39 07       	cpc	r19, r25
     d64:	78 f4       	brcc	.+30     	; 0xd84 <__vector_16+0xb0>
	{
		MCP_Output::AutoToggle_OvfCnt = 0;		// Reset overflow counter
     d66:	10 92 2f 01 	sts	0x012F, r1	; 0x80012f <_ZN10MCP_Output17AutoToggle_OvfCntE+0x1>
     d6a:	10 92 2e 01 	sts	0x012E, r1	; 0x80012e <_ZN10MCP_Output17AutoToggle_OvfCntE>
		
		if (MCP_Output::AutoToggle_PortA || MCP_Output::AutoToggle_PortB)
     d6e:	80 91 2c 01 	lds	r24, 0x012C	; 0x80012c <_ZN10MCP_Output16AutoToggle_PortAE>
     d72:	81 11       	cpse	r24, r1
     d74:	04 c0       	rjmp	.+8      	; 0xd7e <__vector_16+0xaa>
     d76:	80 91 2b 01 	lds	r24, 0x012B	; 0x80012b <_ZN10MCP_Output16AutoToggle_PortBE>
     d7a:	88 23       	and	r24, r24
     d7c:	19 f0       	breq	.+6      	; 0xd84 <__vector_16+0xb0>
		{
			MCP_Output::AutoToggle_Flag = 1;
     d7e:	81 e0       	ldi	r24, 0x01	; 1
     d80:	80 93 2d 01 	sts	0x012D, r24	; 0x80012d <_ZN10MCP_Output15AutoToggle_FlagE>
		}
	}
	
	/* Overflow counter for rotary encoder handling */
	if (RotaryEncoder_OvfCnt)
     d84:	80 91 b2 01 	lds	r24, 0x01B2	; 0x8001b2 <RotaryEncoder_OvfCnt>
     d88:	90 91 b3 01 	lds	r25, 0x01B3	; 0x8001b3 <RotaryEncoder_OvfCnt+0x1>
     d8c:	89 2b       	or	r24, r25
     d8e:	c1 f1       	breq	.+112    	; 0xe00 <__vector_16+0x12c>
	{
		RotaryEncoder_OvfCnt++;
     d90:	80 91 b2 01 	lds	r24, 0x01B2	; 0x8001b2 <RotaryEncoder_OvfCnt>
     d94:	90 91 b3 01 	lds	r25, 0x01B3	; 0x8001b3 <RotaryEncoder_OvfCnt+0x1>
     d98:	01 96       	adiw	r24, 0x01	; 1
     d9a:	90 93 b3 01 	sts	0x01B3, r25	; 0x8001b3 <RotaryEncoder_OvfCnt+0x1>
     d9e:	80 93 b2 01 	sts	0x01B2, r24	; 0x8001b2 <RotaryEncoder_OvfCnt>
		
		if (RotaryEncoder_OvfCnt > ROT_ENC_LONG_PRESS_OVF)
     da2:	80 91 b2 01 	lds	r24, 0x01B2	; 0x8001b2 <RotaryEncoder_OvfCnt>
     da6:	90 91 b3 01 	lds	r25, 0x01B3	; 0x8001b3 <RotaryEncoder_OvfCnt+0x1>
     daa:	89 35       	cpi	r24, 0x59	; 89
     dac:	92 40       	sbci	r25, 0x02	; 2
     dae:	70 f0       	brcs	.+28     	; 0xdcc <__vector_16+0xf8>
		{
			/* If button is still pressed */
			if ( GPIO_ROT_ENC_PIN & GPIO_ROT_ENC_PRESS_MASK )
     db0:	1a 9b       	sbis	0x03, 2	; 3
     db2:	04 c0       	rjmp	.+8      	; 0xdbc <__vector_16+0xe8>
			{
				RotEnc_State = LONG_PRESS;
     db4:	86 e0       	ldi	r24, 0x06	; 6
     db6:	80 93 b1 01 	sts	0x01B1, r24	; 0x8001b1 <RotEnc_State>
     dba:	03 c0       	rjmp	.+6      	; 0xdc2 <__vector_16+0xee>
			}
			else
			{
				RotEnc_State = ABORTED;
     dbc:	85 e0       	ldi	r24, 0x05	; 5
     dbe:	80 93 b1 01 	sts	0x01B1, r24	; 0x8001b1 <RotEnc_State>
			}
			
			RotaryEncoder_OvfCnt = 0;		// Stop overflow counter
     dc2:	10 92 b3 01 	sts	0x01B3, r1	; 0x8001b3 <RotaryEncoder_OvfCnt+0x1>
     dc6:	10 92 b2 01 	sts	0x01B2, r1	; 0x8001b2 <RotaryEncoder_OvfCnt>
     dca:	1a c0       	rjmp	.+52     	; 0xe00 <__vector_16+0x12c>
		}
		else if (RotaryEncoder_OvfCnt > ROT_ENC_PRESS_OVF && RotEnc_State == IDLE)
     dcc:	80 91 b2 01 	lds	r24, 0x01B2	; 0x8001b2 <RotaryEncoder_OvfCnt>
     dd0:	90 91 b3 01 	lds	r25, 0x01B3	; 0x8001b3 <RotaryEncoder_OvfCnt+0x1>
     dd4:	cd 97       	sbiw	r24, 0x3d	; 61
     dd6:	a0 f0       	brcs	.+40     	; 0xe00 <__vector_16+0x12c>
     dd8:	80 91 b1 01 	lds	r24, 0x01B1	; 0x8001b1 <RotEnc_State>
     ddc:	88 23       	and	r24, r24
     dde:	69 f0       	breq	.+26     	; 0xdfa <__vector_16+0x126>
     de0:	0f c0       	rjmp	.+30     	; 0xe00 <__vector_16+0x12c>
		{
			/* If button is no longer pressed */
			if ( !(GPIO_ROT_ENC_PIN & GPIO_ROT_ENC_PRESS_MASK) )
			{
				RotEnc_State = SHORT_PRESS;
     de2:	83 e0       	ldi	r24, 0x03	; 3
     de4:	80 93 b1 01 	sts	0x01B1, r24	; 0x8001b1 <RotEnc_State>
				RotaryEncoder_OvfCnt = 0;	// Stop overflow counter
     de8:	10 92 b3 01 	sts	0x01B3, r1	; 0x8001b3 <RotaryEncoder_OvfCnt+0x1>
     dec:	10 92 b2 01 	sts	0x01B2, r1	; 0x8001b2 <RotaryEncoder_OvfCnt>
     df0:	07 c0       	rjmp	.+14     	; 0xe00 <__vector_16+0x12c>
			}
			else
			RotEnc_State = PRESSED;
     df2:	84 e0       	ldi	r24, 0x04	; 4
     df4:	80 93 b1 01 	sts	0x01B1, r24	; 0x8001b1 <RotEnc_State>

		}
	}
     df8:	03 c0       	rjmp	.+6      	; 0xe00 <__vector_16+0x12c>
			RotaryEncoder_OvfCnt = 0;		// Stop overflow counter
		}
		else if (RotaryEncoder_OvfCnt > ROT_ENC_PRESS_OVF && RotEnc_State == IDLE)
		{
			/* If button is no longer pressed */
			if ( !(GPIO_ROT_ENC_PIN & GPIO_ROT_ENC_PRESS_MASK) )
     dfa:	1a 99       	sbic	0x03, 2	; 3
     dfc:	fa cf       	rjmp	.-12     	; 0xdf2 <__vector_16+0x11e>
     dfe:	f1 cf       	rjmp	.-30     	; 0xde2 <__vector_16+0x10e>
			else
			RotEnc_State = PRESSED;

		}
	}
     e00:	9f 91       	pop	r25
     e02:	8f 91       	pop	r24
     e04:	3f 91       	pop	r19
     e06:	2f 91       	pop	r18
     e08:	0f 90       	pop	r0
     e0a:	0f be       	out	0x3f, r0	; 63
     e0c:	0f 90       	pop	r0
     e0e:	1f 90       	pop	r1
     e10:	18 95       	reti

00000e12 <_Z10UART0_Initjhh>:
Input:    None
Returns:  None
**************************************************************************/
void UART1_Flush(void)
{
	UART1_RxHead = UART1_RxTail;
     e12:	cf 93       	push	r28
     e14:	df 93       	push	r29
     e16:	d6 2f       	mov	r29, r22
     e18:	c4 2f       	mov	r28, r20
     e1a:	51 9a       	sbi	0x0a, 1	; 10
     e1c:	59 9a       	sbi	0x0b, 1	; 11
     e1e:	10 92 05 02 	sts	0x0205, r1	; 0x800205 <_ZL12UART0_TxHead>
     e22:	10 92 04 02 	sts	0x0204, r1	; 0x800204 <_ZL12UART0_TxTail>
     e26:	10 92 03 02 	sts	0x0203, r1	; 0x800203 <_ZL12UART0_RxHead>
     e2a:	10 92 02 02 	sts	0x0202, r1	; 0x800202 <_ZL12UART0_RxTail>
     e2e:	a0 e0       	ldi	r26, 0x00	; 0
     e30:	b0 e0       	ldi	r27, 0x00	; 0
     e32:	88 0f       	add	r24, r24
     e34:	99 1f       	adc	r25, r25
     e36:	aa 1f       	adc	r26, r26
     e38:	bb 1f       	adc	r27, r27
     e3a:	88 0f       	add	r24, r24
     e3c:	99 1f       	adc	r25, r25
     e3e:	aa 1f       	adc	r26, r26
     e40:	bb 1f       	adc	r27, r27
     e42:	9c 01       	movw	r18, r24
     e44:	ad 01       	movw	r20, r26
     e46:	22 0f       	add	r18, r18
     e48:	33 1f       	adc	r19, r19
     e4a:	44 1f       	adc	r20, r20
     e4c:	55 1f       	adc	r21, r21
     e4e:	22 0f       	add	r18, r18
     e50:	33 1f       	adc	r19, r19
     e52:	44 1f       	adc	r20, r20
     e54:	55 1f       	adc	r21, r21
     e56:	60 e0       	ldi	r22, 0x00	; 0
     e58:	7d e2       	ldi	r23, 0x2D	; 45
     e5a:	81 e3       	ldi	r24, 0x31	; 49
     e5c:	91 e0       	ldi	r25, 0x01	; 1
     e5e:	0e 94 b7 09 	call	0x136e	; 0x136e <__udivmodsi4>
     e62:	21 50       	subi	r18, 0x01	; 1
     e64:	31 09       	sbc	r19, r1
     e66:	30 93 c5 00 	sts	0x00C5, r19	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
     e6a:	20 93 c4 00 	sts	0x00C4, r18	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
     e6e:	e2 ec       	ldi	r30, 0xC2	; 194
     e70:	f0 e0       	ldi	r31, 0x00	; 0
     e72:	80 81       	ld	r24, Z
     e74:	8f 73       	andi	r24, 0x3F	; 63
     e76:	80 83       	st	Z, r24
     e78:	d2 30       	cpi	r29, 0x02	; 2
     e7a:	21 f4       	brne	.+8      	; 0xe84 <_Z10UART0_Initjhh+0x72>
     e7c:	80 81       	ld	r24, Z
     e7e:	88 60       	ori	r24, 0x08	; 8
     e80:	80 83       	st	Z, r24
     e82:	05 c0       	rjmp	.+10     	; 0xe8e <_Z10UART0_Initjhh+0x7c>
     e84:	e2 ec       	ldi	r30, 0xC2	; 194
     e86:	f0 e0       	ldi	r31, 0x00	; 0
     e88:	80 81       	ld	r24, Z
     e8a:	87 7f       	andi	r24, 0xF7	; 247
     e8c:	80 83       	st	Z, r24
     e8e:	c2 30       	cpi	r28, 0x02	; 2
     e90:	49 f4       	brne	.+18     	; 0xea4 <_Z10UART0_Initjhh+0x92>
     e92:	e2 ec       	ldi	r30, 0xC2	; 194
     e94:	f0 e0       	ldi	r31, 0x00	; 0
     e96:	80 81       	ld	r24, Z
     e98:	8f 7e       	andi	r24, 0xEF	; 239
     e9a:	80 83       	st	Z, r24
     e9c:	80 81       	ld	r24, Z
     e9e:	80 62       	ori	r24, 0x20	; 32
     ea0:	80 83       	st	Z, r24
     ea2:	0d c0       	rjmp	.+26     	; 0xebe <_Z10UART0_Initjhh+0xac>
     ea4:	c3 30       	cpi	r28, 0x03	; 3
     ea6:	31 f4       	brne	.+12     	; 0xeb4 <_Z10UART0_Initjhh+0xa2>
     ea8:	e2 ec       	ldi	r30, 0xC2	; 194
     eaa:	f0 e0       	ldi	r31, 0x00	; 0
     eac:	80 81       	ld	r24, Z
     eae:	80 63       	ori	r24, 0x30	; 48
     eb0:	80 83       	st	Z, r24
     eb2:	05 c0       	rjmp	.+10     	; 0xebe <_Z10UART0_Initjhh+0xac>
     eb4:	e2 ec       	ldi	r30, 0xC2	; 194
     eb6:	f0 e0       	ldi	r31, 0x00	; 0
     eb8:	80 81       	ld	r24, Z
     eba:	8f 7c       	andi	r24, 0xCF	; 207
     ebc:	80 83       	st	Z, r24
     ebe:	e2 ec       	ldi	r30, 0xC2	; 194
     ec0:	f0 e0       	ldi	r31, 0x00	; 0
     ec2:	80 81       	ld	r24, Z
     ec4:	86 60       	ori	r24, 0x06	; 6
     ec6:	80 83       	st	Z, r24
     ec8:	e1 ec       	ldi	r30, 0xC1	; 193
     eca:	f0 e0       	ldi	r31, 0x00	; 0
     ecc:	80 81       	ld	r24, Z
     ece:	80 6a       	ori	r24, 0xA0	; 160
     ed0:	80 83       	st	Z, r24
     ed2:	80 81       	ld	r24, Z
     ed4:	88 61       	ori	r24, 0x18	; 24
     ed6:	80 83       	st	Z, r24
     ed8:	df 91       	pop	r29
     eda:	cf 91       	pop	r28
     edc:	08 95       	ret

00000ede <_Z13UART0_GetCharv>:
     ede:	90 91 03 02 	lds	r25, 0x0203	; 0x800203 <_ZL12UART0_RxHead>
     ee2:	80 91 02 02 	lds	r24, 0x0202	; 0x800202 <_ZL12UART0_RxTail>
     ee6:	98 17       	cp	r25, r24
     ee8:	91 f0       	breq	.+36     	; 0xf0e <_Z13UART0_GetCharv+0x30>
     eea:	e0 91 02 02 	lds	r30, 0x0202	; 0x800202 <_ZL12UART0_RxTail>
     eee:	ef 5f       	subi	r30, 0xFF	; 255
     ef0:	ef 71       	andi	r30, 0x1F	; 31
     ef2:	e0 93 02 02 	sts	0x0202, r30	; 0x800202 <_ZL12UART0_RxTail>
     ef6:	f0 e0       	ldi	r31, 0x00	; 0
     ef8:	ea 5f       	subi	r30, 0xFA	; 250
     efa:	fd 4f       	sbci	r31, 0xFD	; 253
     efc:	20 81       	ld	r18, Z
     efe:	80 91 01 02 	lds	r24, 0x0201	; 0x800201 <_ZL17UART0_LastRxError>
     f02:	90 e0       	ldi	r25, 0x00	; 0
     f04:	98 2f       	mov	r25, r24
     f06:	88 27       	eor	r24, r24
     f08:	82 0f       	add	r24, r18
     f0a:	91 1d       	adc	r25, r1
     f0c:	08 95       	ret
     f0e:	80 e0       	ldi	r24, 0x00	; 0
     f10:	91 e0       	ldi	r25, 0x01	; 1
     f12:	08 95       	ret

00000f14 <_Z15UART0_Availablev>:
     f14:	80 91 03 02 	lds	r24, 0x0203	; 0x800203 <_ZL12UART0_RxHead>
     f18:	20 91 02 02 	lds	r18, 0x0202	; 0x800202 <_ZL12UART0_RxTail>
     f1c:	90 e0       	ldi	r25, 0x00	; 0
     f1e:	4f 96       	adiw	r24, 0x1f	; 31
     f20:	82 1b       	sub	r24, r18
     f22:	91 09       	sbc	r25, r1
     f24:	6f e1       	ldi	r22, 0x1F	; 31
     f26:	70 e0       	ldi	r23, 0x00	; 0
     f28:	0e 94 a3 09 	call	0x1346	; 0x1346 <__divmodhi4>
     f2c:	08 95       	ret

00000f2e <_Z15UART0_QueueCharh>:
     f2e:	90 91 05 02 	lds	r25, 0x0205	; 0x800205 <_ZL12UART0_TxHead>
     f32:	9f 5f       	subi	r25, 0xFF	; 255
     f34:	9f 71       	andi	r25, 0x1F	; 31
     f36:	20 91 04 02 	lds	r18, 0x0204	; 0x800204 <_ZL12UART0_TxTail>
     f3a:	92 17       	cp	r25, r18
     f3c:	51 f0       	breq	.+20     	; 0xf52 <_Z15UART0_QueueCharh+0x24>
     f3e:	e9 2f       	mov	r30, r25
     f40:	f0 e0       	ldi	r31, 0x00	; 0
     f42:	ea 5d       	subi	r30, 0xDA	; 218
     f44:	fd 4f       	sbci	r31, 0xFD	; 253
     f46:	80 83       	st	Z, r24
     f48:	90 93 05 02 	sts	0x0205, r25	; 0x800205 <_ZL12UART0_TxHead>
     f4c:	81 e0       	ldi	r24, 0x01	; 1
     f4e:	90 e0       	ldi	r25, 0x00	; 0
     f50:	08 95       	ret
     f52:	80 e0       	ldi	r24, 0x00	; 0
     f54:	90 e0       	ldi	r25, 0x00	; 0
     f56:	08 95       	ret

00000f58 <_Z14UART0_PutQueuev>:
     f58:	e1 ec       	ldi	r30, 0xC1	; 193
     f5a:	f0 e0       	ldi	r31, 0x00	; 0
     f5c:	80 81       	ld	r24, Z
     f5e:	80 62       	ori	r24, 0x20	; 32
     f60:	80 83       	st	Z, r24
     f62:	08 95       	ret

00000f64 <__vector_20>:
     f64:	1f 92       	push	r1
     f66:	0f 92       	push	r0
     f68:	0f b6       	in	r0, 0x3f	; 63
     f6a:	0f 92       	push	r0
     f6c:	11 24       	eor	r1, r1
     f6e:	2f 93       	push	r18
     f70:	8f 93       	push	r24
     f72:	9f 93       	push	r25
     f74:	ef 93       	push	r30
     f76:	ff 93       	push	r31
     f78:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
     f7c:	20 91 c6 00 	lds	r18, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
     f80:	87 70       	andi	r24, 0x07	; 7
     f82:	e0 91 03 02 	lds	r30, 0x0203	; 0x800203 <_ZL12UART0_RxHead>
     f86:	ef 5f       	subi	r30, 0xFF	; 255
     f88:	ef 71       	andi	r30, 0x1F	; 31
     f8a:	90 91 02 02 	lds	r25, 0x0202	; 0x800202 <_ZL12UART0_RxTail>
     f8e:	e9 17       	cp	r30, r25
     f90:	39 f0       	breq	.+14     	; 0xfa0 <__vector_20+0x3c>
     f92:	e0 93 03 02 	sts	0x0203, r30	; 0x800203 <_ZL12UART0_RxHead>
     f96:	f0 e0       	ldi	r31, 0x00	; 0
     f98:	ea 5f       	subi	r30, 0xFA	; 250
     f9a:	fd 4f       	sbci	r31, 0xFD	; 253
     f9c:	20 83       	st	Z, r18
     f9e:	01 c0       	rjmp	.+2      	; 0xfa2 <__vector_20+0x3e>
     fa0:	82 e0       	ldi	r24, 0x02	; 2
     fa2:	80 93 01 02 	sts	0x0201, r24	; 0x800201 <_ZL17UART0_LastRxError>
     fa6:	ff 91       	pop	r31
     fa8:	ef 91       	pop	r30
     faa:	9f 91       	pop	r25
     fac:	8f 91       	pop	r24
     fae:	2f 91       	pop	r18
     fb0:	0f 90       	pop	r0
     fb2:	0f be       	out	0x3f, r0	; 63
     fb4:	0f 90       	pop	r0
     fb6:	1f 90       	pop	r1
     fb8:	18 95       	reti

00000fba <__vector_21>:
     fba:	1f 92       	push	r1
     fbc:	0f 92       	push	r0
     fbe:	0f b6       	in	r0, 0x3f	; 63
     fc0:	0f 92       	push	r0
     fc2:	11 24       	eor	r1, r1
     fc4:	8f 93       	push	r24
     fc6:	9f 93       	push	r25
     fc8:	ef 93       	push	r30
     fca:	ff 93       	push	r31
     fcc:	90 91 05 02 	lds	r25, 0x0205	; 0x800205 <_ZL12UART0_TxHead>
     fd0:	80 91 04 02 	lds	r24, 0x0204	; 0x800204 <_ZL12UART0_TxTail>
     fd4:	98 17       	cp	r25, r24
     fd6:	69 f0       	breq	.+26     	; 0xff2 <__vector_21+0x38>
     fd8:	e0 91 04 02 	lds	r30, 0x0204	; 0x800204 <_ZL12UART0_TxTail>
     fdc:	ef 5f       	subi	r30, 0xFF	; 255
     fde:	ef 71       	andi	r30, 0x1F	; 31
     fe0:	e0 93 04 02 	sts	0x0204, r30	; 0x800204 <_ZL12UART0_TxTail>
     fe4:	f0 e0       	ldi	r31, 0x00	; 0
     fe6:	ea 5d       	subi	r30, 0xDA	; 218
     fe8:	fd 4f       	sbci	r31, 0xFD	; 253
     fea:	80 81       	ld	r24, Z
     fec:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
     ff0:	05 c0       	rjmp	.+10     	; 0xffc <__vector_21+0x42>
     ff2:	e1 ec       	ldi	r30, 0xC1	; 193
     ff4:	f0 e0       	ldi	r31, 0x00	; 0
     ff6:	80 81       	ld	r24, Z
     ff8:	8f 7d       	andi	r24, 0xDF	; 223
     ffa:	80 83       	st	Z, r24
     ffc:	ff 91       	pop	r31
     ffe:	ef 91       	pop	r30
    1000:	9f 91       	pop	r25
    1002:	8f 91       	pop	r24
    1004:	0f 90       	pop	r0
    1006:	0f be       	out	0x3f, r0	; 63
    1008:	0f 90       	pop	r0
    100a:	1f 90       	pop	r1
    100c:	18 95       	reti

0000100e <_Z10UART1_Initjhh>:
    100e:	cf 93       	push	r28
    1010:	df 93       	push	r29
    1012:	d6 2f       	mov	r29, r22
    1014:	c4 2f       	mov	r28, r20
    1016:	53 9a       	sbi	0x0a, 3	; 10
    1018:	5b 9a       	sbi	0x0b, 3	; 11
    101a:	10 92 c0 01 	sts	0x01C0, r1	; 0x8001c0 <_ZL12UART1_TxHead>
    101e:	10 92 bf 01 	sts	0x01BF, r1	; 0x8001bf <_ZL12UART1_TxTail>
    1022:	10 92 be 01 	sts	0x01BE, r1	; 0x8001be <_ZL12UART1_RxHead>
    1026:	10 92 bd 01 	sts	0x01BD, r1	; 0x8001bd <_ZL12UART1_RxTail>
    102a:	a0 e0       	ldi	r26, 0x00	; 0
    102c:	b0 e0       	ldi	r27, 0x00	; 0
    102e:	88 0f       	add	r24, r24
    1030:	99 1f       	adc	r25, r25
    1032:	aa 1f       	adc	r26, r26
    1034:	bb 1f       	adc	r27, r27
    1036:	88 0f       	add	r24, r24
    1038:	99 1f       	adc	r25, r25
    103a:	aa 1f       	adc	r26, r26
    103c:	bb 1f       	adc	r27, r27
    103e:	9c 01       	movw	r18, r24
    1040:	ad 01       	movw	r20, r26
    1042:	22 0f       	add	r18, r18
    1044:	33 1f       	adc	r19, r19
    1046:	44 1f       	adc	r20, r20
    1048:	55 1f       	adc	r21, r21
    104a:	22 0f       	add	r18, r18
    104c:	33 1f       	adc	r19, r19
    104e:	44 1f       	adc	r20, r20
    1050:	55 1f       	adc	r21, r21
    1052:	60 e0       	ldi	r22, 0x00	; 0
    1054:	7d e2       	ldi	r23, 0x2D	; 45
    1056:	81 e3       	ldi	r24, 0x31	; 49
    1058:	91 e0       	ldi	r25, 0x01	; 1
    105a:	0e 94 b7 09 	call	0x136e	; 0x136e <__udivmodsi4>
    105e:	21 50       	subi	r18, 0x01	; 1
    1060:	31 09       	sbc	r19, r1
    1062:	30 93 cd 00 	sts	0x00CD, r19	; 0x8000cd <__TEXT_REGION_LENGTH__+0x7e00cd>
    1066:	20 93 cc 00 	sts	0x00CC, r18	; 0x8000cc <__TEXT_REGION_LENGTH__+0x7e00cc>
    106a:	ea ec       	ldi	r30, 0xCA	; 202
    106c:	f0 e0       	ldi	r31, 0x00	; 0
    106e:	80 81       	ld	r24, Z
    1070:	8f 73       	andi	r24, 0x3F	; 63
    1072:	80 83       	st	Z, r24
    1074:	d2 30       	cpi	r29, 0x02	; 2
    1076:	21 f4       	brne	.+8      	; 0x1080 <_Z10UART1_Initjhh+0x72>
    1078:	80 81       	ld	r24, Z
    107a:	88 60       	ori	r24, 0x08	; 8
    107c:	80 83       	st	Z, r24
    107e:	05 c0       	rjmp	.+10     	; 0x108a <_Z10UART1_Initjhh+0x7c>
    1080:	ea ec       	ldi	r30, 0xCA	; 202
    1082:	f0 e0       	ldi	r31, 0x00	; 0
    1084:	80 81       	ld	r24, Z
    1086:	87 7f       	andi	r24, 0xF7	; 247
    1088:	80 83       	st	Z, r24
    108a:	c2 30       	cpi	r28, 0x02	; 2
    108c:	31 f4       	brne	.+12     	; 0x109a <_Z10UART1_Initjhh+0x8c>
    108e:	ea ec       	ldi	r30, 0xCA	; 202
    1090:	f0 e0       	ldi	r31, 0x00	; 0
    1092:	80 81       	ld	r24, Z
    1094:	80 62       	ori	r24, 0x20	; 32
    1096:	80 83       	st	Z, r24
    1098:	0d c0       	rjmp	.+26     	; 0x10b4 <_Z10UART1_Initjhh+0xa6>
    109a:	c3 30       	cpi	r28, 0x03	; 3
    109c:	31 f4       	brne	.+12     	; 0x10aa <_Z10UART1_Initjhh+0x9c>
    109e:	ea ec       	ldi	r30, 0xCA	; 202
    10a0:	f0 e0       	ldi	r31, 0x00	; 0
    10a2:	80 81       	ld	r24, Z
    10a4:	80 63       	ori	r24, 0x30	; 48
    10a6:	80 83       	st	Z, r24
    10a8:	05 c0       	rjmp	.+10     	; 0x10b4 <_Z10UART1_Initjhh+0xa6>
    10aa:	ea ec       	ldi	r30, 0xCA	; 202
    10ac:	f0 e0       	ldi	r31, 0x00	; 0
    10ae:	80 81       	ld	r24, Z
    10b0:	8f 7c       	andi	r24, 0xCF	; 207
    10b2:	80 83       	st	Z, r24
    10b4:	ea ec       	ldi	r30, 0xCA	; 202
    10b6:	f0 e0       	ldi	r31, 0x00	; 0
    10b8:	80 81       	ld	r24, Z
    10ba:	86 60       	ori	r24, 0x06	; 6
    10bc:	80 83       	st	Z, r24
    10be:	e9 ec       	ldi	r30, 0xC9	; 201
    10c0:	f0 e0       	ldi	r31, 0x00	; 0
    10c2:	80 81       	ld	r24, Z
    10c4:	80 6a       	ori	r24, 0xA0	; 160
    10c6:	80 83       	st	Z, r24
    10c8:	80 81       	ld	r24, Z
    10ca:	88 61       	ori	r24, 0x18	; 24
    10cc:	80 83       	st	Z, r24
    10ce:	df 91       	pop	r29
    10d0:	cf 91       	pop	r28
    10d2:	08 95       	ret

000010d4 <_Z13UART1_GetCharv>:
    10d4:	90 91 be 01 	lds	r25, 0x01BE	; 0x8001be <_ZL12UART1_RxHead>
    10d8:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <_ZL12UART1_RxTail>
    10dc:	98 17       	cp	r25, r24
    10de:	91 f0       	breq	.+36     	; 0x1104 <_Z13UART1_GetCharv+0x30>
    10e0:	e0 91 bd 01 	lds	r30, 0x01BD	; 0x8001bd <_ZL12UART1_RxTail>
    10e4:	ef 5f       	subi	r30, 0xFF	; 255
    10e6:	ef 71       	andi	r30, 0x1F	; 31
    10e8:	e0 93 bd 01 	sts	0x01BD, r30	; 0x8001bd <_ZL12UART1_RxTail>
    10ec:	f0 e0       	ldi	r31, 0x00	; 0
    10ee:	ef 53       	subi	r30, 0x3F	; 63
    10f0:	fe 4f       	sbci	r31, 0xFE	; 254
    10f2:	20 81       	ld	r18, Z
    10f4:	80 91 bc 01 	lds	r24, 0x01BC	; 0x8001bc <_ZL17UART1_LastRxError>
    10f8:	90 e0       	ldi	r25, 0x00	; 0
    10fa:	98 2f       	mov	r25, r24
    10fc:	88 27       	eor	r24, r24
    10fe:	82 0f       	add	r24, r18
    1100:	91 1d       	adc	r25, r1
    1102:	08 95       	ret
    1104:	80 e0       	ldi	r24, 0x00	; 0
    1106:	91 e0       	ldi	r25, 0x01	; 1
    1108:	08 95       	ret

0000110a <_Z15UART1_Availablev>:
    110a:	80 91 be 01 	lds	r24, 0x01BE	; 0x8001be <_ZL12UART1_RxHead>
    110e:	20 91 bd 01 	lds	r18, 0x01BD	; 0x8001bd <_ZL12UART1_RxTail>
    1112:	90 e0       	ldi	r25, 0x00	; 0
    1114:	4f 96       	adiw	r24, 0x1f	; 31
    1116:	82 1b       	sub	r24, r18
    1118:	91 09       	sbc	r25, r1
    111a:	6f e1       	ldi	r22, 0x1F	; 31
    111c:	70 e0       	ldi	r23, 0x00	; 0
    111e:	0e 94 a3 09 	call	0x1346	; 0x1346 <__divmodhi4>
    1122:	08 95       	ret

00001124 <__vector_28>:
/*************************************************************************
Function: UART1 Receive Complete interrupt
Purpose:  called when the UART has received a character
**************************************************************************/
ISR(USART1_RX_vect)
{
    1124:	1f 92       	push	r1
    1126:	0f 92       	push	r0
    1128:	0f b6       	in	r0, 0x3f	; 63
    112a:	0f 92       	push	r0
    112c:	11 24       	eor	r1, r1
    112e:	2f 93       	push	r18
    1130:	8f 93       	push	r24
    1132:	9f 93       	push	r25
    1134:	ef 93       	push	r30
    1136:	ff 93       	push	r31
	unsigned char usr;
	unsigned char lastRxError;
	
	
	/* read UART status register and UART data register */
	usr  = UCSR1A;
    1138:	80 91 c8 00 	lds	r24, 0x00C8	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7e00c8>
	data = UDR1;
    113c:	20 91 ce 00 	lds	r18, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7e00ce>
	
	/* */
	lastRxError = (usr & (FE1 | DOR1));
    1140:	87 70       	andi	r24, 0x07	; 7
	
	/* calculate buffer index */
	tmphead = ( UART1_RxHead + 1) & UART1_RX_BUFFER_MASK;
    1142:	e0 91 be 01 	lds	r30, 0x01BE	; 0x8001be <_ZL12UART1_RxHead>
    1146:	ef 5f       	subi	r30, 0xFF	; 255
    1148:	ef 71       	andi	r30, 0x1F	; 31
	
	if ( tmphead == UART1_RxTail )
    114a:	90 91 bd 01 	lds	r25, 0x01BD	; 0x8001bd <_ZL12UART1_RxTail>
    114e:	e9 17       	cp	r30, r25
    1150:	39 f0       	breq	.+14     	; 0x1160 <__vector_28+0x3c>
		lastRxError = UART_BUFFER_OVERFLOW >> 8;
	}
	else
	{
		/* store new index */
		UART1_RxHead = tmphead;
    1152:	e0 93 be 01 	sts	0x01BE, r30	; 0x8001be <_ZL12UART1_RxHead>
		/* store received data in buffer */
		UART1_RxBuf[tmphead] = data;
    1156:	f0 e0       	ldi	r31, 0x00	; 0
    1158:	ef 53       	subi	r30, 0x3F	; 63
    115a:	fe 4f       	sbci	r31, 0xFE	; 254
    115c:	20 83       	st	Z, r18
    115e:	01 c0       	rjmp	.+2      	; 0x1162 <__vector_28+0x3e>
	tmphead = ( UART1_RxHead + 1) & UART1_RX_BUFFER_MASK;
	
	if ( tmphead == UART1_RxTail )
	{
		/* error: receive buffer overflow */
		lastRxError = UART_BUFFER_OVERFLOW >> 8;
    1160:	82 e0       	ldi	r24, 0x02	; 2
		UART1_RxHead = tmphead;
		/* store received data in buffer */
		UART1_RxBuf[tmphead] = data;
	}

	UART1_LastRxError = lastRxError;
    1162:	80 93 bc 01 	sts	0x01BC, r24	; 0x8001bc <_ZL17UART1_LastRxError>
}
    1166:	ff 91       	pop	r31
    1168:	ef 91       	pop	r30
    116a:	9f 91       	pop	r25
    116c:	8f 91       	pop	r24
    116e:	2f 91       	pop	r18
    1170:	0f 90       	pop	r0
    1172:	0f be       	out	0x3f, r0	; 63
    1174:	0f 90       	pop	r0
    1176:	1f 90       	pop	r1
    1178:	18 95       	reti

0000117a <__vector_29>:
/*************************************************************************
Function: UART1 Data Register Empty interrupt
Purpose:  called when the UART is ready to transmit the next byte
**************************************************************************/
ISR(USART1_UDRE_vect)
{
    117a:	1f 92       	push	r1
    117c:	0f 92       	push	r0
    117e:	0f b6       	in	r0, 0x3f	; 63
    1180:	0f 92       	push	r0
    1182:	11 24       	eor	r1, r1
    1184:	8f 93       	push	r24
    1186:	9f 93       	push	r25
    1188:	ef 93       	push	r30
    118a:	ff 93       	push	r31
	unsigned char tmptail;
	
	if ( UART1_TxHead != UART1_TxTail)
    118c:	90 91 c0 01 	lds	r25, 0x01C0	; 0x8001c0 <_ZL12UART1_TxHead>
    1190:	80 91 bf 01 	lds	r24, 0x01BF	; 0x8001bf <_ZL12UART1_TxTail>
    1194:	98 17       	cp	r25, r24
    1196:	69 f0       	breq	.+26     	; 0x11b2 <__vector_29+0x38>
	{
		/* calculate and store new buffer index */
		tmptail = (UART1_TxTail + 1) & UART1_TX_BUFFER_MASK;
    1198:	e0 91 bf 01 	lds	r30, 0x01BF	; 0x8001bf <_ZL12UART1_TxTail>
    119c:	ef 5f       	subi	r30, 0xFF	; 255
    119e:	ef 71       	andi	r30, 0x1F	; 31
		UART1_TxTail = tmptail;
    11a0:	e0 93 bf 01 	sts	0x01BF, r30	; 0x8001bf <_ZL12UART1_TxTail>

		/* get one byte from buffer and write it to UART */
		UDR1 = UART1_TxBuf[tmptail];  /* start transmission */
    11a4:	f0 e0       	ldi	r31, 0x00	; 0
    11a6:	ef 51       	subi	r30, 0x1F	; 31
    11a8:	fe 4f       	sbci	r31, 0xFE	; 254
    11aa:	80 81       	ld	r24, Z
    11ac:	80 93 ce 00 	sts	0x00CE, r24	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7e00ce>
    11b0:	05 c0       	rjmp	.+10     	; 0x11bc <__vector_29+0x42>
	}
	else
	{
		/* tx buffer empty, disable UDRE interrupt */
		UCSR1B &= ~(1 << UDRIE1);
    11b2:	e9 ec       	ldi	r30, 0xC9	; 201
    11b4:	f0 e0       	ldi	r31, 0x00	; 0
    11b6:	80 81       	ld	r24, Z
    11b8:	8f 7d       	andi	r24, 0xDF	; 223
    11ba:	80 83       	st	Z, r24
	}
    11bc:	ff 91       	pop	r31
    11be:	ef 91       	pop	r30
    11c0:	9f 91       	pop	r25
    11c2:	8f 91       	pop	r24
    11c4:	0f 90       	pop	r0
    11c6:	0f be       	out	0x3f, r0	; 63
    11c8:	0f 90       	pop	r0
    11ca:	1f 90       	pop	r1
    11cc:	18 95       	reti

000011ce <_Z7UI_Initv>:
MCP_Output ModeMIDI_LED;
MCP_Output LoopPreset_LEDs[8];
MCP_Output SW_Ctrl_LEDs[4];

void UI_Init()
{
    11ce:	ef 92       	push	r14
    11d0:	ff 92       	push	r15
    11d2:	1f 93       	push	r17
    11d4:	cf 93       	push	r28
    11d6:	df 93       	push	r29
    11d8:	cd b7       	in	r28, 0x3d	; 61
    11da:	de b7       	in	r29, 0x3e	; 62
    11dc:	64 97       	sbiw	r28, 0x14	; 20
    11de:	0f b6       	in	r0, 0x3f	; 63
    11e0:	f8 94       	cli
    11e2:	de bf       	out	0x3e, r29	; 62
    11e4:	0f be       	out	0x3f, r0	; 63
    11e6:	cd bf       	out	0x3d, r28	; 61
	ModeRun_LED = MCP_Output(MCP23017_UI_LEDS_ADDR, PortB, (MCP23017_Pin)UI_MODE_RUN_LED_PIN);
    11e8:	25 e0       	ldi	r18, 0x05	; 5
    11ea:	41 e0       	ldi	r20, 0x01	; 1
    11ec:	60 e0       	ldi	r22, 0x00	; 0
    11ee:	ce 01       	movw	r24, r28
    11f0:	41 96       	adiw	r24, 0x11	; 17
    11f2:	0e 94 5e 02 	call	0x4bc	; 0x4bc <_ZN10MCP_OutputC1Eh13MCP23017_Port12MCP23017_Pin>
    11f6:	89 89       	ldd	r24, Y+17	; 0x11
    11f8:	9a 89       	ldd	r25, Y+18	; 0x12
    11fa:	ab 89       	ldd	r26, Y+19	; 0x13
    11fc:	bc 89       	ldd	r27, Y+20	; 0x14
    11fe:	80 93 7e 02 	sts	0x027E, r24	; 0x80027e <ModeRun_LED>
    1202:	90 93 7f 02 	sts	0x027F, r25	; 0x80027f <ModeRun_LED+0x1>
    1206:	a0 93 80 02 	sts	0x0280, r26	; 0x800280 <ModeRun_LED+0x2>
    120a:	b0 93 81 02 	sts	0x0281, r27	; 0x800281 <ModeRun_LED+0x3>
	ModePreset_LED = MCP_Output(MCP23017_UI_LEDS_ADDR, PortB, (MCP23017_Pin)UI_MODE_PRESET_LED_PIN);
    120e:	26 e0       	ldi	r18, 0x06	; 6
    1210:	41 e0       	ldi	r20, 0x01	; 1
    1212:	60 e0       	ldi	r22, 0x00	; 0
    1214:	ce 01       	movw	r24, r28
    1216:	0d 96       	adiw	r24, 0x0d	; 13
    1218:	0e 94 5e 02 	call	0x4bc	; 0x4bc <_ZN10MCP_OutputC1Eh13MCP23017_Port12MCP23017_Pin>
    121c:	8d 85       	ldd	r24, Y+13	; 0x0d
    121e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1220:	af 85       	ldd	r26, Y+15	; 0x0f
    1222:	b8 89       	ldd	r27, Y+16	; 0x10
    1224:	80 93 7a 02 	sts	0x027A, r24	; 0x80027a <ModePreset_LED>
    1228:	90 93 7b 02 	sts	0x027B, r25	; 0x80027b <ModePreset_LED+0x1>
    122c:	a0 93 7c 02 	sts	0x027C, r26	; 0x80027c <ModePreset_LED+0x2>
    1230:	b0 93 7d 02 	sts	0x027D, r27	; 0x80027d <ModePreset_LED+0x3>
	ModeMIDI_LED = MCP_Output(MCP23017_UI_LEDS_ADDR, PortB, (MCP23017_Pin)UI_MODE_MIDI_LED_PIN);
    1234:	27 e0       	ldi	r18, 0x07	; 7
    1236:	41 e0       	ldi	r20, 0x01	; 1
    1238:	60 e0       	ldi	r22, 0x00	; 0
    123a:	ce 01       	movw	r24, r28
    123c:	09 96       	adiw	r24, 0x09	; 9
    123e:	0e 94 5e 02 	call	0x4bc	; 0x4bc <_ZN10MCP_OutputC1Eh13MCP23017_Port12MCP23017_Pin>
    1242:	89 85       	ldd	r24, Y+9	; 0x09
    1244:	9a 85       	ldd	r25, Y+10	; 0x0a
    1246:	ab 85       	ldd	r26, Y+11	; 0x0b
    1248:	bc 85       	ldd	r27, Y+12	; 0x0c
    124a:	80 93 76 02 	sts	0x0276, r24	; 0x800276 <ModeMIDI_LED>
    124e:	90 93 77 02 	sts	0x0277, r25	; 0x800277 <ModeMIDI_LED+0x1>
    1252:	a0 93 78 02 	sts	0x0278, r26	; 0x800278 <ModeMIDI_LED+0x2>
    1256:	b0 93 79 02 	sts	0x0279, r27	; 0x800279 <ModeMIDI_LED+0x3>
    125a:	0f 2e       	mov	r0, r31
    125c:	f6 e5       	ldi	r31, 0x56	; 86
    125e:	ef 2e       	mov	r14, r31
    1260:	f2 e0       	ldi	r31, 0x02	; 2
    1262:	ff 2e       	mov	r15, r31
    1264:	f0 2d       	mov	r31, r0
	
	for (uint8_t i = 0; i < NELEMS(LoopPreset_LEDs); i++)
    1266:	10 e0       	ldi	r17, 0x00	; 0
		LoopPreset_LEDs[i] = MCP_Output(MCP23017_UI_LEDS_ADDR, PortA, (MCP23017_Pin)i);
    1268:	21 2f       	mov	r18, r17
    126a:	40 e0       	ldi	r20, 0x00	; 0
    126c:	60 e0       	ldi	r22, 0x00	; 0
    126e:	ce 01       	movw	r24, r28
    1270:	05 96       	adiw	r24, 0x05	; 5
    1272:	0e 94 5e 02 	call	0x4bc	; 0x4bc <_ZN10MCP_OutputC1Eh13MCP23017_Port12MCP23017_Pin>
    1276:	8d 81       	ldd	r24, Y+5	; 0x05
    1278:	9e 81       	ldd	r25, Y+6	; 0x06
    127a:	af 81       	ldd	r26, Y+7	; 0x07
    127c:	b8 85       	ldd	r27, Y+8	; 0x08
    127e:	f7 01       	movw	r30, r14
    1280:	81 93       	st	Z+, r24
    1282:	91 93       	st	Z+, r25
    1284:	a1 93       	st	Z+, r26
    1286:	b1 93       	st	Z+, r27
    1288:	7f 01       	movw	r14, r30
{
	ModeRun_LED = MCP_Output(MCP23017_UI_LEDS_ADDR, PortB, (MCP23017_Pin)UI_MODE_RUN_LED_PIN);
	ModePreset_LED = MCP_Output(MCP23017_UI_LEDS_ADDR, PortB, (MCP23017_Pin)UI_MODE_PRESET_LED_PIN);
	ModeMIDI_LED = MCP_Output(MCP23017_UI_LEDS_ADDR, PortB, (MCP23017_Pin)UI_MODE_MIDI_LED_PIN);
	
	for (uint8_t i = 0; i < NELEMS(LoopPreset_LEDs); i++)
    128a:	1f 5f       	subi	r17, 0xFF	; 255
    128c:	18 30       	cpi	r17, 0x08	; 8
    128e:	61 f7       	brne	.-40     	; 0x1268 <_Z7UI_Initv+0x9a>
    1290:	0f 2e       	mov	r0, r31
    1292:	f6 e4       	ldi	r31, 0x46	; 70
    1294:	ef 2e       	mov	r14, r31
    1296:	f2 e0       	ldi	r31, 0x02	; 2
    1298:	ff 2e       	mov	r15, r31
    129a:	f0 2d       	mov	r31, r0
    129c:	10 e0       	ldi	r17, 0x00	; 0
		LoopPreset_LEDs[i] = MCP_Output(MCP23017_UI_LEDS_ADDR, PortA, (MCP23017_Pin)i);
		
	for (uint8_t i = 0; i < NELEMS(SW_Ctrl_LEDs); i++)
		SW_Ctrl_LEDs[i] = MCP_Output(MCP23017_UI_LEDS_ADDR, PortB, (MCP23017_Pin)(i));
    129e:	21 2f       	mov	r18, r17
    12a0:	41 e0       	ldi	r20, 0x01	; 1
    12a2:	60 e0       	ldi	r22, 0x00	; 0
    12a4:	ce 01       	movw	r24, r28
    12a6:	01 96       	adiw	r24, 0x01	; 1
    12a8:	0e 94 5e 02 	call	0x4bc	; 0x4bc <_ZN10MCP_OutputC1Eh13MCP23017_Port12MCP23017_Pin>
    12ac:	89 81       	ldd	r24, Y+1	; 0x01
    12ae:	9a 81       	ldd	r25, Y+2	; 0x02
    12b0:	ab 81       	ldd	r26, Y+3	; 0x03
    12b2:	bc 81       	ldd	r27, Y+4	; 0x04
    12b4:	f7 01       	movw	r30, r14
    12b6:	81 93       	st	Z+, r24
    12b8:	91 93       	st	Z+, r25
    12ba:	a1 93       	st	Z+, r26
    12bc:	b1 93       	st	Z+, r27
    12be:	7f 01       	movw	r14, r30
	ModeMIDI_LED = MCP_Output(MCP23017_UI_LEDS_ADDR, PortB, (MCP23017_Pin)UI_MODE_MIDI_LED_PIN);
	
	for (uint8_t i = 0; i < NELEMS(LoopPreset_LEDs); i++)
		LoopPreset_LEDs[i] = MCP_Output(MCP23017_UI_LEDS_ADDR, PortA, (MCP23017_Pin)i);
		
	for (uint8_t i = 0; i < NELEMS(SW_Ctrl_LEDs); i++)
    12c0:	1f 5f       	subi	r17, 0xFF	; 255
    12c2:	14 30       	cpi	r17, 0x04	; 4
    12c4:	61 f7       	brne	.-40     	; 0x129e <_Z7UI_Initv+0xd0>
		SW_Ctrl_LEDs[i] = MCP_Output(MCP23017_UI_LEDS_ADDR, PortB, (MCP23017_Pin)(i));
		
	MCP_Output::SetAutoToggleSpeed(400);
    12c6:	80 e9       	ldi	r24, 0x90	; 144
    12c8:	91 e0       	ldi	r25, 0x01	; 1
    12ca:	0e 94 82 02 	call	0x504	; 0x504 <_ZN10MCP_Output18SetAutoToggleSpeedEj>
}
    12ce:	64 96       	adiw	r28, 0x14	; 20
    12d0:	0f b6       	in	r0, 0x3f	; 63
    12d2:	f8 94       	cli
    12d4:	de bf       	out	0x3e, r29	; 62
    12d6:	0f be       	out	0x3f, r0	; 63
    12d8:	cd bf       	out	0x3d, r28	; 61
    12da:	df 91       	pop	r29
    12dc:	cf 91       	pop	r28
    12de:	1f 91       	pop	r17
    12e0:	ff 90       	pop	r15
    12e2:	ef 90       	pop	r14
    12e4:	08 95       	ret

000012e6 <_GLOBAL__sub_I_ModeRun_LED>:
    12e6:	0f 93       	push	r16
    12e8:	1f 93       	push	r17
    12ea:	cf 93       	push	r28
    12ec:	df 93       	push	r29

#define UI_MODE_RUN_LED_PIN			5
#define UI_MODE_PRESET_LED_PIN		6
#define UI_MODE_MIDI_LED_PIN		7

MCP_Output ModeRun_LED;
    12ee:	8e e7       	ldi	r24, 0x7E	; 126
    12f0:	92 e0       	ldi	r25, 0x02	; 2
    12f2:	0e 94 e3 01 	call	0x3c6	; 0x3c6 <_ZN10MCP_OutputC1Ev>
MCP_Output ModePreset_LED;
    12f6:	8a e7       	ldi	r24, 0x7A	; 122
    12f8:	92 e0       	ldi	r25, 0x02	; 2
    12fa:	0e 94 e3 01 	call	0x3c6	; 0x3c6 <_ZN10MCP_OutputC1Ev>
MCP_Output ModeMIDI_LED;
    12fe:	86 e7       	ldi	r24, 0x76	; 118
    1300:	92 e0       	ldi	r25, 0x02	; 2
    1302:	0e 94 e3 01 	call	0x3c6	; 0x3c6 <_ZN10MCP_OutputC1Ev>
    1306:	c6 e5       	ldi	r28, 0x56	; 86
    1308:	d2 e0       	ldi	r29, 0x02	; 2
    130a:	06 e7       	ldi	r16, 0x76	; 118
    130c:	12 e0       	ldi	r17, 0x02	; 2
MCP_Output LoopPreset_LEDs[8];
    130e:	ce 01       	movw	r24, r28
    1310:	0e 94 e3 01 	call	0x3c6	; 0x3c6 <_ZN10MCP_OutputC1Ev>
    1314:	24 96       	adiw	r28, 0x04	; 4
    1316:	c0 17       	cp	r28, r16
    1318:	d1 07       	cpc	r29, r17
    131a:	c9 f7       	brne	.-14     	; 0x130e <_GLOBAL__sub_I_ModeRun_LED+0x28>
MCP_Output SW_Ctrl_LEDs[4];
    131c:	86 e4       	ldi	r24, 0x46	; 70
    131e:	92 e0       	ldi	r25, 0x02	; 2
    1320:	0e 94 e3 01 	call	0x3c6	; 0x3c6 <_ZN10MCP_OutputC1Ev>
    1324:	8a e4       	ldi	r24, 0x4A	; 74
    1326:	92 e0       	ldi	r25, 0x02	; 2
    1328:	0e 94 e3 01 	call	0x3c6	; 0x3c6 <_ZN10MCP_OutputC1Ev>
    132c:	8e e4       	ldi	r24, 0x4E	; 78
    132e:	92 e0       	ldi	r25, 0x02	; 2
    1330:	0e 94 e3 01 	call	0x3c6	; 0x3c6 <_ZN10MCP_OutputC1Ev>
    1334:	82 e5       	ldi	r24, 0x52	; 82
    1336:	92 e0       	ldi	r25, 0x02	; 2
    1338:	0e 94 e3 01 	call	0x3c6	; 0x3c6 <_ZN10MCP_OutputC1Ev>
		
	for (uint8_t i = 0; i < NELEMS(SW_Ctrl_LEDs); i++)
		SW_Ctrl_LEDs[i] = MCP_Output(MCP23017_UI_LEDS_ADDR, PortB, (MCP23017_Pin)(i));
		
	MCP_Output::SetAutoToggleSpeed(400);
}
    133c:	df 91       	pop	r29
    133e:	cf 91       	pop	r28
    1340:	1f 91       	pop	r17
    1342:	0f 91       	pop	r16
    1344:	08 95       	ret

00001346 <__divmodhi4>:
    1346:	97 fb       	bst	r25, 7
    1348:	07 2e       	mov	r0, r23
    134a:	16 f4       	brtc	.+4      	; 0x1350 <__divmodhi4+0xa>
    134c:	00 94       	com	r0
    134e:	07 d0       	rcall	.+14     	; 0x135e <__divmodhi4_neg1>
    1350:	77 fd       	sbrc	r23, 7
    1352:	09 d0       	rcall	.+18     	; 0x1366 <__divmodhi4_neg2>
    1354:	0e 94 e4 09 	call	0x13c8	; 0x13c8 <__udivmodhi4>
    1358:	07 fc       	sbrc	r0, 7
    135a:	05 d0       	rcall	.+10     	; 0x1366 <__divmodhi4_neg2>
    135c:	3e f4       	brtc	.+14     	; 0x136c <__divmodhi4_exit>

0000135e <__divmodhi4_neg1>:
    135e:	90 95       	com	r25
    1360:	81 95       	neg	r24
    1362:	9f 4f       	sbci	r25, 0xFF	; 255
    1364:	08 95       	ret

00001366 <__divmodhi4_neg2>:
    1366:	70 95       	com	r23
    1368:	61 95       	neg	r22
    136a:	7f 4f       	sbci	r23, 0xFF	; 255

0000136c <__divmodhi4_exit>:
    136c:	08 95       	ret

0000136e <__udivmodsi4>:
    136e:	a1 e2       	ldi	r26, 0x21	; 33
    1370:	1a 2e       	mov	r1, r26
    1372:	aa 1b       	sub	r26, r26
    1374:	bb 1b       	sub	r27, r27
    1376:	fd 01       	movw	r30, r26
    1378:	0d c0       	rjmp	.+26     	; 0x1394 <__udivmodsi4_ep>

0000137a <__udivmodsi4_loop>:
    137a:	aa 1f       	adc	r26, r26
    137c:	bb 1f       	adc	r27, r27
    137e:	ee 1f       	adc	r30, r30
    1380:	ff 1f       	adc	r31, r31
    1382:	a2 17       	cp	r26, r18
    1384:	b3 07       	cpc	r27, r19
    1386:	e4 07       	cpc	r30, r20
    1388:	f5 07       	cpc	r31, r21
    138a:	20 f0       	brcs	.+8      	; 0x1394 <__udivmodsi4_ep>
    138c:	a2 1b       	sub	r26, r18
    138e:	b3 0b       	sbc	r27, r19
    1390:	e4 0b       	sbc	r30, r20
    1392:	f5 0b       	sbc	r31, r21

00001394 <__udivmodsi4_ep>:
    1394:	66 1f       	adc	r22, r22
    1396:	77 1f       	adc	r23, r23
    1398:	88 1f       	adc	r24, r24
    139a:	99 1f       	adc	r25, r25
    139c:	1a 94       	dec	r1
    139e:	69 f7       	brne	.-38     	; 0x137a <__udivmodsi4_loop>
    13a0:	60 95       	com	r22
    13a2:	70 95       	com	r23
    13a4:	80 95       	com	r24
    13a6:	90 95       	com	r25
    13a8:	9b 01       	movw	r18, r22
    13aa:	ac 01       	movw	r20, r24
    13ac:	bd 01       	movw	r22, r26
    13ae:	cf 01       	movw	r24, r30
    13b0:	08 95       	ret

000013b2 <__muluhisi3>:
    13b2:	0e 94 fe 09 	call	0x13fc	; 0x13fc <__umulhisi3>
    13b6:	a5 9f       	mul	r26, r21
    13b8:	90 0d       	add	r25, r0
    13ba:	b4 9f       	mul	r27, r20
    13bc:	90 0d       	add	r25, r0
    13be:	a4 9f       	mul	r26, r20
    13c0:	80 0d       	add	r24, r0
    13c2:	91 1d       	adc	r25, r1
    13c4:	11 24       	eor	r1, r1
    13c6:	08 95       	ret

000013c8 <__udivmodhi4>:
    13c8:	aa 1b       	sub	r26, r26
    13ca:	bb 1b       	sub	r27, r27
    13cc:	51 e1       	ldi	r21, 0x11	; 17
    13ce:	07 c0       	rjmp	.+14     	; 0x13de <__udivmodhi4_ep>

000013d0 <__udivmodhi4_loop>:
    13d0:	aa 1f       	adc	r26, r26
    13d2:	bb 1f       	adc	r27, r27
    13d4:	a6 17       	cp	r26, r22
    13d6:	b7 07       	cpc	r27, r23
    13d8:	10 f0       	brcs	.+4      	; 0x13de <__udivmodhi4_ep>
    13da:	a6 1b       	sub	r26, r22
    13dc:	b7 0b       	sbc	r27, r23

000013de <__udivmodhi4_ep>:
    13de:	88 1f       	adc	r24, r24
    13e0:	99 1f       	adc	r25, r25
    13e2:	5a 95       	dec	r21
    13e4:	a9 f7       	brne	.-22     	; 0x13d0 <__udivmodhi4_loop>
    13e6:	80 95       	com	r24
    13e8:	90 95       	com	r25
    13ea:	bc 01       	movw	r22, r24
    13ec:	cd 01       	movw	r24, r26
    13ee:	08 95       	ret

000013f0 <__tablejump2__>:
    13f0:	ee 0f       	add	r30, r30
    13f2:	ff 1f       	adc	r31, r31
    13f4:	05 90       	lpm	r0, Z+
    13f6:	f4 91       	lpm	r31, Z
    13f8:	e0 2d       	mov	r30, r0
    13fa:	09 94       	ijmp

000013fc <__umulhisi3>:
    13fc:	a2 9f       	mul	r26, r18
    13fe:	b0 01       	movw	r22, r0
    1400:	b3 9f       	mul	r27, r19
    1402:	c0 01       	movw	r24, r0
    1404:	a3 9f       	mul	r26, r19
    1406:	70 0d       	add	r23, r0
    1408:	81 1d       	adc	r24, r1
    140a:	11 24       	eor	r1, r1
    140c:	91 1d       	adc	r25, r1
    140e:	b2 9f       	mul	r27, r18
    1410:	70 0d       	add	r23, r0
    1412:	81 1d       	adc	r24, r1
    1414:	11 24       	eor	r1, r1
    1416:	91 1d       	adc	r25, r1
    1418:	08 95       	ret

0000141a <eeprom_read_byte>:
    141a:	f9 99       	sbic	0x1f, 1	; 31
    141c:	fe cf       	rjmp	.-4      	; 0x141a <eeprom_read_byte>
    141e:	92 bd       	out	0x22, r25	; 34
    1420:	81 bd       	out	0x21, r24	; 33
    1422:	f8 9a       	sbi	0x1f, 0	; 31
    1424:	99 27       	eor	r25, r25
    1426:	80 b5       	in	r24, 0x20	; 32
    1428:	08 95       	ret

0000142a <eeprom_write_byte>:
    142a:	26 2f       	mov	r18, r22

0000142c <eeprom_write_r18>:
    142c:	f9 99       	sbic	0x1f, 1	; 31
    142e:	fe cf       	rjmp	.-4      	; 0x142c <eeprom_write_r18>
    1430:	1f ba       	out	0x1f, r1	; 31
    1432:	92 bd       	out	0x22, r25	; 34
    1434:	81 bd       	out	0x21, r24	; 33
    1436:	20 bd       	out	0x20, r18	; 32
    1438:	0f b6       	in	r0, 0x3f	; 63
    143a:	f8 94       	cli
    143c:	fa 9a       	sbi	0x1f, 2	; 31
    143e:	f9 9a       	sbi	0x1f, 1	; 31
    1440:	0f be       	out	0x3f, r0	; 63
    1442:	01 96       	adiw	r24, 0x01	; 1
    1444:	08 95       	ret

00001446 <_exit>:
    1446:	f8 94       	cli

00001448 <__stop_program>:
    1448:	ff cf       	rjmp	.-2      	; 0x1448 <__stop_program>
