
Rack_LoopController_PEDAL.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000082  00800100  00000e0e  00000ea2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000e0e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000d2  00800182  00800182  00000f24  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000f24  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000f54  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000002b8  00000000  00000000  00000f94  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000029c7  00000000  00000000  0000124c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000125f  00000000  00000000  00003c13  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001681  00000000  00000000  00004e72  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000638  00000000  00000000  000064f4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000124e  00000000  00000000  00006b2c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001576  00000000  00000000  00007d7a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000240  00000000  00000000  000092f0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 f1 00 	jmp	0x1e2	; 0x1e2 <__vector_4>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 3f 05 	jmp	0xa7e	; 0xa7e <__vector_14>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 66 06 	jmp	0xccc	; 0xccc <__vector_18>
  4c:	0c 94 91 06 	jmp	0xd22	; 0xd22 <__vector_19>
  50:	0c 94 1f 04 	jmp	0x83e	; 0x83e <__vector_20>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ee e0       	ldi	r30, 0x0E	; 14
  7c:	fe e0       	ldi	r31, 0x0E	; 14
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a2 38       	cpi	r26, 0x82	; 130
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	22 e0       	ldi	r18, 0x02	; 2
  8c:	a2 e8       	ldi	r26, 0x82	; 130
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a4 35       	cpi	r26, 0x54	; 84
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 95 01 	call	0x32a	; 0x32a <main>
  9e:	0c 94 05 07 	jmp	0xe0a	; 0xe0a <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <_Z22Footswitch_HandleTimerv>:
	}	
}

void Footswitch_HandleTimer()
{
	Footswitch_PortState = MCP23017_ReadReg(MCP23017_ADDR_SWITCH_INDICATOR, GPIOB);		// Read current state of Port
  a6:	63 e1       	ldi	r22, 0x13	; 19
  a8:	80 e0       	ldi	r24, 0x00	; 0
  aa:	0e 94 57 04 	call	0x8ae	; 0x8ae <_Z16MCP23017_ReadReghh>
  ae:	80 93 86 01 	sts	0x0186, r24	; 0x800186 <Footswitch_PortState>
	
	if (Footswitch_PressState == WAITING)
  b2:	80 91 88 01 	lds	r24, 0x0188	; 0x800188 <Footswitch_PressState>
  b6:	82 30       	cpi	r24, 0x02	; 2
  b8:	79 f4       	brne	.+30     	; 0xd8 <_Z22Footswitch_HandleTimerv+0x32>
	{
		/* Check if switch is no longer pressed */
		if (Footswitch_PortState != Footswitch_InterruptMask)
  ba:	90 91 86 01 	lds	r25, 0x0186	; 0x800186 <Footswitch_PortState>
  be:	80 91 85 01 	lds	r24, 0x0185	; 0x800185 <Footswitch_InterruptMask>
  c2:	98 17       	cp	r25, r24
  c4:	09 f4       	brne	.+2      	; 0xc8 <_Z22Footswitch_HandleTimerv+0x22>
  c6:	50 c0       	rjmp	.+160    	; 0x168 <_Z22Footswitch_HandleTimerv+0xc2>
		{
			Footswitch_PressState = SHORT_PRESS;
  c8:	83 e0       	ldi	r24, 0x03	; 3
  ca:	80 93 88 01 	sts	0x0188, r24	; 0x800188 <Footswitch_PressState>
			Footswitch_TimerOvfCnt = 0;	// Stop timer
  ce:	10 92 84 01 	sts	0x0184, r1	; 0x800184 <Footswitch_TimerOvfCnt+0x1>
  d2:	10 92 83 01 	sts	0x0183, r1	; 0x800183 <Footswitch_TimerOvfCnt>
  d6:	08 95       	ret
		}
	}
	else if (Footswitch_PressState == PRESSED)
  d8:	80 91 88 01 	lds	r24, 0x0188	; 0x800188 <Footswitch_PressState>
  dc:	84 30       	cpi	r24, 0x04	; 4
  de:	79 f5       	brne	.+94     	; 0x13e <_Z22Footswitch_HandleTimerv+0x98>
	{
		/* Check if switch is no longer pressed */
		if (Footswitch_PortState != Footswitch_InterruptMask)
  e0:	90 91 86 01 	lds	r25, 0x0186	; 0x800186 <Footswitch_PortState>
  e4:	80 91 85 01 	lds	r24, 0x0185	; 0x800185 <Footswitch_InterruptMask>
  e8:	98 17       	cp	r25, r24
  ea:	41 f0       	breq	.+16     	; 0xfc <_Z22Footswitch_HandleTimerv+0x56>
		{
			Footswitch_TimerOvfCnt = 0;	// Stop timer
  ec:	10 92 84 01 	sts	0x0184, r1	; 0x800184 <Footswitch_TimerOvfCnt+0x1>
  f0:	10 92 83 01 	sts	0x0183, r1	; 0x800183 <Footswitch_TimerOvfCnt>
			Footswitch_PressState = SHORT_PRESS;
  f4:	83 e0       	ldi	r24, 0x03	; 3
  f6:	80 93 88 01 	sts	0x0188, r24	; 0x800188 <Footswitch_PressState>
  fa:	08 95       	ret
		}
		else
		{
			/* Write appropriate message in 7-segment display based on system state */
			if (SystemState == EDITING)
  fc:	80 91 0e 02 	lds	r24, 0x020E	; 0x80020e <SystemState>
 100:	88 23       	and	r24, r24
 102:	91 f1       	breq	.+100    	; 0x168 <_Z22Footswitch_HandleTimerv+0xc2>
			{
			}
			else if (SystemState == RUN_PRESET_CTRL)
 104:	80 91 0e 02 	lds	r24, 0x020E	; 0x80020e <SystemState>
 108:	81 30       	cpi	r24, 0x01	; 1
 10a:	39 f4       	brne	.+14     	; 0x11a <_Z22Footswitch_HandleTimerv+0x74>
			{
				Segment7_WriteAll('L', 'o', 'o', 'P');
 10c:	20 e5       	ldi	r18, 0x50	; 80
 10e:	4f e6       	ldi	r20, 0x6F	; 111
 110:	6f e6       	ldi	r22, 0x6F	; 111
 112:	8c e4       	ldi	r24, 0x4C	; 76
 114:	0e 94 9c 04 	call	0x938	; 0x938 <_Z17Segment7_WriteAllcccc>
 118:	08 95       	ret
			}
			else if (SystemState == RUN_LOOP_CTRL)
 11a:	80 91 0e 02 	lds	r24, 0x020E	; 0x80020e <SystemState>
 11e:	82 30       	cpi	r24, 0x02	; 2
 120:	59 f4       	brne	.+22     	; 0x138 <_Z22Footswitch_HandleTimerv+0x92>
			{
				if (Footswitch_InterruptMask & 0xF0)
 122:	80 91 85 01 	lds	r24, 0x0185	; 0x800185 <Footswitch_InterruptMask>
 126:	80 7f       	andi	r24, 0xF0	; 240
 128:	f9 f0       	breq	.+62     	; 0x168 <_Z22Footswitch_HandleTimerv+0xc2>
				{
					Segment7_WriteAll('P', 'r', 'e', ' ');
 12a:	20 e2       	ldi	r18, 0x20	; 32
 12c:	45 e6       	ldi	r20, 0x65	; 101
 12e:	62 e7       	ldi	r22, 0x72	; 114
 130:	80 e5       	ldi	r24, 0x50	; 80
 132:	0e 94 9c 04 	call	0x938	; 0x938 <_Z17Segment7_WriteAllcccc>
 136:	08 95       	ret
				}
			}
			else if (SystemState == TUNER)
 138:	80 91 0e 02 	lds	r24, 0x020E	; 0x80020e <SystemState>
 13c:	08 95       	ret
			{
			}
		}
	}
	else if (Footswitch_PressState == STILL_PRESSED)
 13e:	80 91 88 01 	lds	r24, 0x0188	; 0x800188 <Footswitch_PressState>
 142:	85 30       	cpi	r24, 0x05	; 5
 144:	89 f4       	brne	.+34     	; 0x168 <_Z22Footswitch_HandleTimerv+0xc2>
	{
		/* Check if switch is no longer pressed */
		if (Footswitch_PortState != Footswitch_InterruptMask)
 146:	90 91 86 01 	lds	r25, 0x0186	; 0x800186 <Footswitch_PortState>
 14a:	80 91 85 01 	lds	r24, 0x0185	; 0x800185 <Footswitch_InterruptMask>
 14e:	98 17       	cp	r25, r24
 150:	21 f0       	breq	.+8      	; 0x15a <_Z22Footswitch_HandleTimerv+0xb4>
		{
			Footswitch_PressState = LONG_PRESS;
 152:	86 e0       	ldi	r24, 0x06	; 6
 154:	80 93 88 01 	sts	0x0188, r24	; 0x800188 <Footswitch_PressState>
 158:	03 c0       	rjmp	.+6      	; 0x160 <_Z22Footswitch_HandleTimerv+0xba>
		}
		else
		{
			Footswitch_PressState = LONG_LONG_PRESS;
 15a:	87 e0       	ldi	r24, 0x07	; 7
 15c:	80 93 88 01 	sts	0x0188, r24	; 0x800188 <Footswitch_PressState>
		}
		
		Footswitch_TimerOvfCnt = 0;	// Stop timer
 160:	10 92 84 01 	sts	0x0184, r1	; 0x800184 <Footswitch_TimerOvfCnt+0x1>
 164:	10 92 83 01 	sts	0x0183, r1	; 0x800183 <Footswitch_TimerOvfCnt>
 168:	08 95       	ret

0000016a <_Z22Footswitch_HandlePressv>:
	}
}

void Footswitch_HandlePress()
{	
	System_HandleFootswitchInput(Footswitch_PressState, Footswitch_InterruptMask);
 16a:	60 91 85 01 	lds	r22, 0x0185	; 0x800185 <Footswitch_InterruptMask>
 16e:	80 91 88 01 	lds	r24, 0x0188	; 0x800188 <Footswitch_PressState>
 172:	0e 94 b6 04 	call	0x96c	; 0x96c <_Z28System_HandleFootswitchInput16Footswitch_Stateh>
 176:	08 95       	ret

00000178 <_Z26Footswitch_EnableInterruptv>:
}

void Footswitch_EnableInterrupt()
{
	PCIFR |= (1 << PCIF1);		// Clear Pin Change Interrupt Flag 1
 178:	d9 9a       	sbi	0x1b, 1	; 27
	PCICR |= (1 << PCIE1);		// Enable Pin Change Interrupt 1 (PCINT[14:8])
 17a:	e8 e6       	ldi	r30, 0x68	; 104
 17c:	f0 e0       	ldi	r31, 0x00	; 0
 17e:	80 81       	ld	r24, Z
 180:	82 60       	ori	r24, 0x02	; 2
 182:	80 83       	st	Z, r24
 184:	08 95       	ret

00000186 <_Z15Footswitch_Initv>:
volatile bool Footswitch_TimerFlag = false;

/* Function implementations */
void Footswitch_Init()
{	
	DDRC &= ~(1 << PORTC1);		// Set PortC 1 as input
 186:	39 98       	cbi	0x07, 1	; 7
	PCMSK1 |= (1 << PCINT9);	// Enable PCINT[9] PortC1 for interrupt
 188:	ec e6       	ldi	r30, 0x6C	; 108
 18a:	f0 e0       	ldi	r31, 0x00	; 0
 18c:	80 81       	ld	r24, Z
 18e:	82 60       	ori	r24, 0x02	; 2
 190:	80 83       	st	Z, r24
	PCICR |= (1 << PCIE1);		// Enable Pin Change Interrupt 1 (PCINT[14:8])
 192:	e8 e6       	ldi	r30, 0x68	; 104
 194:	f0 e0       	ldi	r31, 0x00	; 0
 196:	80 81       	ld	r24, Z
 198:	82 60       	ori	r24, 0x02	; 2
 19a:	80 83       	st	Z, r24
	
	Footswitch_EnableInterrupt();
 19c:	0e 94 bc 00 	call	0x178	; 0x178 <_Z26Footswitch_EnableInterruptv>
 1a0:	08 95       	ret

000001a2 <_Z24Footswitch_PressDetectedv>:
}

void Footswitch_PressDetected()
{
 1a2:	cf 93       	push	r28
	uint8_t tmp = 0;
	
	tmp = MCP23017_ReadReg(MCP23017_ADDR_SWITCH_INDICATOR, INTFB);		// Read what pin caused the interrupt
 1a4:	6f e0       	ldi	r22, 0x0F	; 15
 1a6:	80 e0       	ldi	r24, 0x00	; 0
 1a8:	0e 94 57 04 	call	0x8ae	; 0x8ae <_Z16MCP23017_ReadReghh>
 1ac:	c8 2f       	mov	r28, r24
	
	Footswitch_PortState = MCP23017_ReadReg(MCP23017_ADDR_SWITCH_INDICATOR, INTCAPB);	// Read state of Port when interrupt occurred (Clear interrupt B)
 1ae:	61 e1       	ldi	r22, 0x11	; 17
 1b0:	80 e0       	ldi	r24, 0x00	; 0
 1b2:	0e 94 57 04 	call	0x8ae	; 0x8ae <_Z16MCP23017_ReadReghh>
 1b6:	80 93 86 01 	sts	0x0186, r24	; 0x800186 <Footswitch_PortState>
	
	if (Footswitch_PortState != 0x00)		// Only react on rising-edge
 1ba:	80 91 86 01 	lds	r24, 0x0186	; 0x800186 <Footswitch_PortState>
 1be:	88 23       	and	r24, r24
 1c0:	61 f0       	breq	.+24     	; 0x1da <_Z24Footswitch_PressDetectedv+0x38>
	{
		Footswitch_InterruptMask = tmp;
 1c2:	c0 93 85 01 	sts	0x0185, r28	; 0x800185 <Footswitch_InterruptMask>
		Footswitch_PressState = PRESS_SENSED;
 1c6:	81 e0       	ldi	r24, 0x01	; 1
 1c8:	80 93 88 01 	sts	0x0188, r24	; 0x800188 <Footswitch_PressState>
		Footswitch_TimerOvfCnt = 1;		// Start Timer
 1cc:	81 e0       	ldi	r24, 0x01	; 1
 1ce:	90 e0       	ldi	r25, 0x00	; 0
 1d0:	90 93 84 01 	sts	0x0184, r25	; 0x800184 <Footswitch_TimerOvfCnt+0x1>
 1d4:	80 93 83 01 	sts	0x0183, r24	; 0x800183 <Footswitch_TimerOvfCnt>
 1d8:	02 c0       	rjmp	.+4      	; 0x1de <_Z24Footswitch_PressDetectedv+0x3c>
	}
	else
	{
		Footswitch_EnableInterrupt();
 1da:	0e 94 bc 00 	call	0x178	; 0x178 <_Z26Footswitch_EnableInterruptv>
	}	
}
 1de:	cf 91       	pop	r28
 1e0:	08 95       	ret

000001e2 <__vector_4>:
	PCICR |= (1 << PCIE1);		// Enable Pin Change Interrupt 1 (PCINT[14:8])
}

/* Pin Change Interrupt 1 (PCINT1) Service Routine */
ISR (PCINT1_vect)
{
 1e2:	1f 92       	push	r1
 1e4:	0f 92       	push	r0
 1e6:	0f b6       	in	r0, 0x3f	; 63
 1e8:	0f 92       	push	r0
 1ea:	11 24       	eor	r1, r1
 1ec:	8f 93       	push	r24
 1ee:	ef 93       	push	r30
 1f0:	ff 93       	push	r31
	if (!(PINC & (1 << PINC1)))		// Only react on falling-edge
 1f2:	31 99       	sbic	0x06, 1	; 6
 1f4:	08 c0       	rjmp	.+16     	; 0x206 <__vector_4+0x24>
	{
		PCICR &= ~(1 << PCIE1);		// Disable Pin Change Interrupt 1 (PCINT[14:8])
 1f6:	e8 e6       	ldi	r30, 0x68	; 104
 1f8:	f0 e0       	ldi	r31, 0x00	; 0
 1fa:	80 81       	ld	r24, Z
 1fc:	8d 7f       	andi	r24, 0xFD	; 253
 1fe:	80 83       	st	Z, r24
		Footswitch_PressFlag = true;
 200:	81 e0       	ldi	r24, 0x01	; 1
 202:	80 93 87 01 	sts	0x0187, r24	; 0x800187 <Footswitch_PressFlag>
	}
 206:	ff 91       	pop	r31
 208:	ef 91       	pop	r30
 20a:	8f 91       	pop	r24
 20c:	0f 90       	pop	r0
 20e:	0f be       	out	0x3f, r0	; 63
 210:	0f 90       	pop	r0
 212:	1f 90       	pop	r1
 214:	18 95       	reti

00000216 <_Z8i2c_initv>:
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWEA);
	while(!(TWCR & (1<<TWINT)));    

    return TWDR;

}/* i2c_readAck */
 216:	10 92 b9 00 	sts	0x00B9, r1	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
 21a:	88 e4       	ldi	r24, 0x48	; 72
 21c:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7e00b8>
 220:	08 95       	ret

00000222 <_Z9i2c_starth>:
 222:	94 ea       	ldi	r25, 0xA4	; 164
 224:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
 228:	ec eb       	ldi	r30, 0xBC	; 188
 22a:	f0 e0       	ldi	r31, 0x00	; 0
 22c:	90 81       	ld	r25, Z
 22e:	99 23       	and	r25, r25
 230:	ec f7       	brge	.-6      	; 0x22c <_Z9i2c_starth+0xa>
 232:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
 236:	98 7f       	andi	r25, 0xF8	; 248
 238:	98 30       	cpi	r25, 0x08	; 8
 23a:	11 f0       	breq	.+4      	; 0x240 <_Z9i2c_starth+0x1e>
 23c:	90 31       	cpi	r25, 0x10	; 16
 23e:	a1 f4       	brne	.+40     	; 0x268 <_Z9i2c_starth+0x46>
 240:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
 244:	84 e8       	ldi	r24, 0x84	; 132
 246:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
 24a:	ec eb       	ldi	r30, 0xBC	; 188
 24c:	f0 e0       	ldi	r31, 0x00	; 0
 24e:	80 81       	ld	r24, Z
 250:	88 23       	and	r24, r24
 252:	ec f7       	brge	.-6      	; 0x24e <_Z9i2c_starth+0x2c>
 254:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
 258:	98 7f       	andi	r25, 0xF8	; 248
 25a:	98 31       	cpi	r25, 0x18	; 24
 25c:	39 f0       	breq	.+14     	; 0x26c <_Z9i2c_starth+0x4a>
 25e:	81 e0       	ldi	r24, 0x01	; 1
 260:	90 34       	cpi	r25, 0x40	; 64
 262:	29 f4       	brne	.+10     	; 0x26e <_Z9i2c_starth+0x4c>
 264:	80 e0       	ldi	r24, 0x00	; 0
 266:	08 95       	ret
 268:	81 e0       	ldi	r24, 0x01	; 1
 26a:	08 95       	ret
 26c:	80 e0       	ldi	r24, 0x00	; 0
 26e:	08 95       	ret

00000270 <_Z8i2c_stopv>:
 270:	84 e9       	ldi	r24, 0x94	; 148
 272:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
 276:	ec eb       	ldi	r30, 0xBC	; 188
 278:	f0 e0       	ldi	r31, 0x00	; 0
 27a:	80 81       	ld	r24, Z
 27c:	84 fd       	sbrc	r24, 4
 27e:	fd cf       	rjmp	.-6      	; 0x27a <_Z8i2c_stopv+0xa>
 280:	08 95       	ret

00000282 <_Z9i2c_writeh>:
 282:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
 286:	84 e8       	ldi	r24, 0x84	; 132
 288:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
 28c:	ec eb       	ldi	r30, 0xBC	; 188
 28e:	f0 e0       	ldi	r31, 0x00	; 0
 290:	80 81       	ld	r24, Z
 292:	88 23       	and	r24, r24
 294:	ec f7       	brge	.-6      	; 0x290 <_Z9i2c_writeh+0xe>
 296:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
 29a:	98 7f       	andi	r25, 0xF8	; 248
 29c:	81 e0       	ldi	r24, 0x01	; 1
 29e:	98 32       	cpi	r25, 0x28	; 40
 2a0:	09 f4       	brne	.+2      	; 0x2a4 <_Z9i2c_writeh+0x22>
 2a2:	80 e0       	ldi	r24, 0x00	; 0
 2a4:	08 95       	ret

000002a6 <_Z11i2c_readNakv>:
 
 Return:  byte read from I2C device
*************************************************************************/
unsigned char i2c_readNak(void)
{
	TWCR = (1<<TWINT) | (1<<TWEN);
 2a6:	84 e8       	ldi	r24, 0x84	; 132
 2a8:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	while(!(TWCR & (1<<TWINT)));
 2ac:	ec eb       	ldi	r30, 0xBC	; 188
 2ae:	f0 e0       	ldi	r31, 0x00	; 0
 2b0:	80 81       	ld	r24, Z
 2b2:	88 23       	and	r24, r24
 2b4:	ec f7       	brge	.-6      	; 0x2b0 <_Z11i2c_readNakv+0xa>
	
    return TWDR;
 2b6:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>

}/* i2c_readNak */
 2ba:	08 95       	ret

000002bc <_Z16Init_ioExpandersv>:
void Init_ioExpanders()
{
	/* Footswitch and Indicator		- Addr: 000
		- Port A: Indicator lights	- Outputs
		- Port B: Footswitches		- Inputs */
	MCP23017_WriteReg(MCP23017_ADDR_SWITCH_INDICATOR, IODIRA, 0x00);	// Set Port A to output
 2bc:	40 e0       	ldi	r20, 0x00	; 0
 2be:	60 e0       	ldi	r22, 0x00	; 0
 2c0:	80 e0       	ldi	r24, 0x00	; 0
 2c2:	0e 94 44 04 	call	0x888	; 0x888 <_Z17MCP23017_WriteReghhh>
	
	MCP23017_WriteReg(MCP23017_ADDR_SWITCH_INDICATOR, IODIRB, 0xFF);	// Set Port B to input
 2c6:	4f ef       	ldi	r20, 0xFF	; 255
 2c8:	61 e0       	ldi	r22, 0x01	; 1
 2ca:	80 e0       	ldi	r24, 0x00	; 0
 2cc:	0e 94 44 04 	call	0x888	; 0x888 <_Z17MCP23017_WriteReghhh>
	MCP23017_WriteReg(MCP23017_ADDR_SWITCH_INDICATOR, GPINTENB, 0xFF);	// Enables all pins on Port B for interrupt-on-change event
 2d0:	4f ef       	ldi	r20, 0xFF	; 255
 2d2:	65 e0       	ldi	r22, 0x05	; 5
 2d4:	80 e0       	ldi	r24, 0x00	; 0
 2d6:	0e 94 44 04 	call	0x888	; 0x888 <_Z17MCP23017_WriteReghhh>
	MCP23017_WriteReg(MCP23017_ADDR_SWITCH_INDICATOR, INTCONB, 0x00);	// Set Port B to compare to previous value for interrupts
 2da:	40 e0       	ldi	r20, 0x00	; 0
 2dc:	69 e0       	ldi	r22, 0x09	; 9
 2de:	80 e0       	ldi	r24, 0x00	; 0
 2e0:	0e 94 44 04 	call	0x888	; 0x888 <_Z17MCP23017_WriteReghhh>
	MCP23017_WriteReg(MCP23017_ADDR_SWITCH_INDICATOR, GPPUB, 0xFF);		// Enable pull up resistors for Port B
 2e4:	4f ef       	ldi	r20, 0xFF	; 255
 2e6:	6d e0       	ldi	r22, 0x0D	; 13
 2e8:	80 e0       	ldi	r24, 0x00	; 0
 2ea:	0e 94 44 04 	call	0x888	; 0x888 <_Z17MCP23017_WriteReghhh>
	MCP23017_ReadReg(MCP23017_ADDR_SWITCH_INDICATOR, INTCAPB);			// Clear interrupt B
 2ee:	61 e1       	ldi	r22, 0x11	; 17
 2f0:	80 e0       	ldi	r24, 0x00	; 0
 2f2:	0e 94 57 04 	call	0x8ae	; 0x8ae <_Z16MCP23017_ReadReghh>
	
	/* 7-segment digit 0 & 1		- Addr: 010
		- Port A: Digit 0			- Outputs
		- Port B: Digit 1			- Outputs */
	MCP23017_WriteReg(MCP23017_ADDR_7SEG_DIGIT_0_1, IODIRA, 0x00);		// Set Port A to output
 2f6:	40 e0       	ldi	r20, 0x00	; 0
 2f8:	60 e0       	ldi	r22, 0x00	; 0
 2fa:	81 e0       	ldi	r24, 0x01	; 1
 2fc:	0e 94 44 04 	call	0x888	; 0x888 <_Z17MCP23017_WriteReghhh>
	MCP23017_WriteReg(MCP23017_ADDR_7SEG_DIGIT_0_1, IODIRB, 0x00);		// Set Port B to output
 300:	40 e0       	ldi	r20, 0x00	; 0
 302:	61 e0       	ldi	r22, 0x01	; 1
 304:	81 e0       	ldi	r24, 0x01	; 1
 306:	0e 94 44 04 	call	0x888	; 0x888 <_Z17MCP23017_WriteReghhh>
	
	/* 7-segment digit 2 & 3		- Addr: 001
		- Port A: Digit 2			- Outputs
		- Port B: Digit 3			- Inputs */
	MCP23017_WriteReg(MCP23017_ADDR_7SEG_DIGIT_2_3, IODIRA, 0x00);		// Set Port A to output
 30a:	40 e0       	ldi	r20, 0x00	; 0
 30c:	60 e0       	ldi	r22, 0x00	; 0
 30e:	82 e0       	ldi	r24, 0x02	; 2
 310:	0e 94 44 04 	call	0x888	; 0x888 <_Z17MCP23017_WriteReghhh>
	MCP23017_WriteReg(MCP23017_ADDR_7SEG_DIGIT_2_3, IODIRB, 0x00);		// Set Port B to output
 314:	40 e0       	ldi	r20, 0x00	; 0
 316:	61 e0       	ldi	r22, 0x01	; 1
 318:	82 e0       	ldi	r24, 0x02	; 2
 31a:	0e 94 44 04 	call	0x888	; 0x888 <_Z17MCP23017_WriteReghhh>
	
	/* Tuner display				- Addr: 100
		- Port A: Red lights		- Outputs
		- Port B: Unused			- --- */
	MCP23017_WriteReg(MCP23017_ADDR_TUNER_DISPLAY, IODIRA, 0x00);    // Set Port A to output
 31e:	40 e0       	ldi	r20, 0x00	; 0
 320:	60 e0       	ldi	r22, 0x00	; 0
 322:	84 e0       	ldi	r24, 0x04	; 4
 324:	0e 94 44 04 	call	0x888	; 0x888 <_Z17MCP23017_WriteReghhh>
 328:	08 95       	ret

0000032a <main>:

/* Main application */
int main(void)
{
	/* Initialization */
	TUNER_GREEN_LED_DDR |= TUNER_GREEN_LED_MASK;	// Setup output pin for Tuner display green LED (PortB 0)
 32a:	20 9a       	sbi	0x04, 0	; 4
	Timer0_Init();
 32c:	0e 94 30 05 	call	0xa60	; 0xa60 <_Z11Timer0_Initv>
	i2c_init();
 330:	0e 94 0b 01 	call	0x216	; 0x216 <_Z8i2c_initv>
	UART_Init(MASTER_UART_BAUDRATE, UART_2_STOP_BITS, UART_NO_PARITY);
 334:	40 e0       	ldi	r20, 0x00	; 0
 336:	62 e0       	ldi	r22, 0x02	; 2
 338:	80 e0       	ldi	r24, 0x00	; 0
 33a:	9b e4       	ldi	r25, 0x4B	; 75
 33c:	0e 94 bd 05 	call	0xb7a	; 0xb7a <_Z9UART_Initjhh>
	MasterCom_Init();
 340:	0e 94 0d 04 	call	0x81a	; 0x81a <_Z14MasterCom_Initv>
	
	Init_ioExpanders();
 344:	0e 94 5e 01 	call	0x2bc	; 0x2bc <_Z16Init_ioExpandersv>
	Footswitch_Init();	// Should come after initialization of io-expanders
 348:	0e 94 c3 00 	call	0x186	; 0x186 <_Z15Footswitch_Initv>
	
	/* Global Enable Interrupt */
	sei();
 34c:	78 94       	sei
	
	Segment7_WriteAll('r', 'i', 'f', 'f');
 34e:	26 e6       	ldi	r18, 0x66	; 102
 350:	46 e6       	ldi	r20, 0x66	; 102
 352:	69 e6       	ldi	r22, 0x69	; 105
 354:	82 e7       	ldi	r24, 0x72	; 114
 356:	0e 94 9c 04 	call	0x938	; 0x938 <_Z17Segment7_WriteAllcccc>
	
    /* Main loop */
    while (1) 
    {
		/* Handle incoming data from Master */
		while (UART_Available())
 35a:	0e 94 3e 06 	call	0xc7c	; 0xc7c <_Z14UART_Availablev>
 35e:	89 2b       	or	r24, r25
 360:	19 f0       	breq	.+6      	; 0x368 <main+0x3e>
		{
			MasterCom_Receive();
 362:	0e 94 fb 01 	call	0x3f6	; 0x3f6 <_Z17MasterCom_Receivev>
	
    /* Main loop */
    while (1) 
    {
		/* Handle incoming data from Master */
		while (UART_Available())
 366:	f9 cf       	rjmp	.-14     	; 0x35a <main+0x30>
		{
			MasterCom_Receive();
		}
				
		/* Handle command received from Master. (Only once per program loop) */
		if (MasterCom_RxAvailable())
 368:	0e 94 e9 01 	call	0x3d2	; 0x3d2 <_Z21MasterCom_RxAvailablev>
 36c:	81 11       	cpse	r24, r1
		{
			MasterCom_HandleReceived();
 36e:	0e 94 de 02 	call	0x5bc	; 0x5bc <_Z24MasterCom_HandleReceivedv>
		}
				
		/* Handle TX Command queue */
		if (MasterCom_TxAvailable())
 372:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <_Z21MasterCom_TxAvailablev>
 376:	81 11       	cpse	r24, r1
		{
			MasterCom_PutCommand();
 378:	0e 94 69 03 	call	0x6d2	; 0x6d2 <_Z20MasterCom_PutCommandv>
		}
				
		/* Transmit data to Master */
		if (MasterCom_DelayTxFlag)
 37c:	80 91 0d 02 	lds	r24, 0x020D	; 0x80020d <MasterCom_DelayTxFlag>
 380:	88 23       	and	r24, r24
 382:	21 f0       	breq	.+8      	; 0x38c <main+0x62>
		{
			MasterCom_DelayTxFlag = false;
 384:	10 92 0d 02 	sts	0x020D, r1	; 0x80020d <MasterCom_DelayTxFlag>
			MasterCom_Transmit();
 388:	0e 94 19 04 	call	0x832	; 0x832 <_Z18MasterCom_Transmitv>
		}
		
		/* Footswitch press detected */
		if (Footswitch_PressFlag)
 38c:	80 91 87 01 	lds	r24, 0x0187	; 0x800187 <Footswitch_PressFlag>
 390:	88 23       	and	r24, r24
 392:	21 f0       	breq	.+8      	; 0x39c <main+0x72>
		{
			Footswitch_PressFlag = 0;
 394:	10 92 87 01 	sts	0x0187, r1	; 0x800187 <Footswitch_PressFlag>
			Footswitch_PressDetected();
 398:	0e 94 d1 00 	call	0x1a2	; 0x1a2 <_Z24Footswitch_PressDetectedv>
		}
				
		/* Handle Footswitch timing */
		if (Footswitch_TimerFlag)
 39c:	80 91 82 01 	lds	r24, 0x0182	; 0x800182 <__data_end>
 3a0:	88 23       	and	r24, r24
 3a2:	21 f0       	breq	.+8      	; 0x3ac <main+0x82>
		{
			Footswitch_TimerFlag = false;
 3a4:	10 92 82 01 	sts	0x0182, r1	; 0x800182 <__data_end>
			Footswitch_HandleTimer();
 3a8:	0e 94 53 00 	call	0xa6	; 0xa6 <_Z22Footswitch_HandleTimerv>
		}
		
		/* Handle Footswitch user input (press) */
		if (Footswitch_PressState == SHORT_PRESS ||
 3ac:	80 91 88 01 	lds	r24, 0x0188	; 0x800188 <Footswitch_PressState>
			Footswitch_PressState == LONG_PRESS ||
 3b0:	83 30       	cpi	r24, 0x03	; 3
 3b2:	41 f0       	breq	.+16     	; 0x3c4 <main+0x9a>
 3b4:	80 91 88 01 	lds	r24, 0x0188	; 0x800188 <Footswitch_PressState>
			Footswitch_TimerFlag = false;
			Footswitch_HandleTimer();
		}
		
		/* Handle Footswitch user input (press) */
		if (Footswitch_PressState == SHORT_PRESS ||
 3b8:	86 30       	cpi	r24, 0x06	; 6
 3ba:	21 f0       	breq	.+8      	; 0x3c4 <main+0x9a>
			Footswitch_PressState == LONG_PRESS ||
			Footswitch_PressState == LONG_LONG_PRESS)
 3bc:	80 91 88 01 	lds	r24, 0x0188	; 0x800188 <Footswitch_PressState>
			Footswitch_TimerFlag = false;
			Footswitch_HandleTimer();
		}
		
		/* Handle Footswitch user input (press) */
		if (Footswitch_PressState == SHORT_PRESS ||
 3c0:	87 30       	cpi	r24, 0x07	; 7
 3c2:	59 f6       	brne	.-106    	; 0x35a <main+0x30>
			Footswitch_PressState == LONG_PRESS ||
			Footswitch_PressState == LONG_LONG_PRESS)
		{			
			Footswitch_HandlePress();
 3c4:	0e 94 b5 00 	call	0x16a	; 0x16a <_Z22Footswitch_HandlePressv>
			
			/* Clear and reload for new user input */
			Footswitch_PressState = IDLE;
 3c8:	10 92 88 01 	sts	0x0188, r1	; 0x800188 <Footswitch_PressState>
			Footswitch_EnableInterrupt();
 3cc:	0e 94 bc 00 	call	0x178	; 0x178 <_Z26Footswitch_EnableInterruptv>
 3d0:	c4 cf       	rjmp	.-120    	; 0x35a <main+0x30>

000003d2 <_Z21MasterCom_RxAvailablev>:


void MasterCom_FlushTxQueue()
{
	TxTail = TxHead;
	TX_CommandQueue[TxHead].acked = true;
 3d2:	20 91 8e 01 	lds	r18, 0x018E	; 0x80018e <RxHead>
 3d6:	90 91 8d 01 	lds	r25, 0x018D	; 0x80018d <RxTail>
 3da:	81 e0       	ldi	r24, 0x01	; 1
 3dc:	29 13       	cpse	r18, r25
 3de:	01 c0       	rjmp	.+2      	; 0x3e2 <_Z21MasterCom_RxAvailablev+0x10>
 3e0:	80 e0       	ldi	r24, 0x00	; 0
 3e2:	08 95       	ret

000003e4 <_Z21MasterCom_TxAvailablev>:
 3e4:	20 91 8c 01 	lds	r18, 0x018C	; 0x80018c <TxHead>
 3e8:	90 91 8b 01 	lds	r25, 0x018B	; 0x80018b <TxTail>
 3ec:	81 e0       	ldi	r24, 0x01	; 1
 3ee:	29 13       	cpse	r18, r25
 3f0:	01 c0       	rjmp	.+2      	; 0x3f4 <_Z21MasterCom_TxAvailablev+0x10>
 3f2:	80 e0       	ldi	r24, 0x00	; 0
 3f4:	08 95       	ret

000003f6 <_Z17MasterCom_Receivev>:
}


void MasterCom_Receive()
{
 3f6:	cf 93       	push	r28
 3f8:	df 93       	push	r29
	static uint8_t RX_ByteCnt = 0;
	
	/* Start/reset Delay TX timer. Both in case a NACK needs to be sent, and also to
	   prevent response to previous command being sent while still receiving new data. */
	MasterCom_DelayTXOvfCnt = 1;
 3fa:	81 e0       	ldi	r24, 0x01	; 1
 3fc:	80 93 0c 02 	sts	0x020C, r24	; 0x80020c <MasterCom_DelayTXOvfCnt>
	
	/* Fetch new byte from UART buffer */
	RX_Buffer[RX_ByteCnt] = UART_GetChar();
 400:	c0 91 89 01 	lds	r28, 0x0189	; 0x800189 <_ZZ17MasterCom_ReceivevE10RX_ByteCnt>
 404:	d0 e0       	ldi	r29, 0x00	; 0
 406:	0e 94 23 06 	call	0xc46	; 0xc46 <_Z12UART_GetCharv>
 40a:	c1 51       	subi	r28, 0x11	; 17
 40c:	de 4f       	sbci	r29, 0xFE	; 254
 40e:	88 83       	st	Y, r24
	RX_ByteCnt++;
 410:	80 91 89 01 	lds	r24, 0x0189	; 0x800189 <_ZZ17MasterCom_ReceivevE10RX_ByteCnt>
 414:	8f 5f       	subi	r24, 0xFF	; 255
 416:	80 93 89 01 	sts	0x0189, r24	; 0x800189 <_ZZ17MasterCom_ReceivevE10RX_ByteCnt>
	
	/* Handle new byte */
	if ((RX_ByteCnt - 1) == SOF_BYTE_IDX)
 41a:	81 30       	cpi	r24, 0x01	; 1
 41c:	e9 f5       	brne	.+122    	; 0x498 <__LOCK_REGION_LENGTH__+0x98>
	{
		if (RX_Buffer[SOF_BYTE_IDX] != SOF_BYTE)
 41e:	80 91 ef 01 	lds	r24, 0x01EF	; 0x8001ef <RX_Buffer>
 422:	8f 35       	cpi	r24, 0x5F	; 95
 424:	09 f4       	brne	.+2      	; 0x428 <__LOCK_REGION_LENGTH__+0x28>
 426:	c7 c0       	rjmp	.+398    	; 0x5b6 <__LOCK_REGION_LENGTH__+0x1b6>
		{
			RX_ByteCnt = 0;
 428:	10 92 89 01 	sts	0x0189, r1	; 0x800189 <_ZZ17MasterCom_ReceivevE10RX_ByteCnt>
				
			if (RX_Buffer[SOF_BYTE_IDX] == ACK_BYTE)
 42c:	80 91 ef 01 	lds	r24, 0x01EF	; 0x8001ef <RX_Buffer>
 430:	8c 3a       	cpi	r24, 0xAC	; 172
 432:	a9 f4       	brne	.+42     	; 0x45e <__LOCK_REGION_LENGTH__+0x5e>
			{
				MasterCom_ResponseTimeoutOvfCnt = 1;		// Reset timeout timer
 434:	81 e0       	ldi	r24, 0x01	; 1
 436:	90 e0       	ldi	r25, 0x00	; 0
 438:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <MasterCom_ResponseTimeoutOvfCnt+0x1>
 43c:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <MasterCom_ResponseTimeoutOvfCnt>
				NackCnt = 0;
 440:	10 92 8a 01 	sts	0x018A, r1	; 0x80018a <NackCnt>
				
				TX_CommandQueue[TxTail].acked = true;
 444:	e0 91 8b 01 	lds	r30, 0x018B	; 0x80018b <TxTail>
 448:	f0 e0       	ldi	r31, 0x00	; 0
 44a:	ee 0f       	add	r30, r30
 44c:	ff 1f       	adc	r31, r31
 44e:	ee 0f       	add	r30, r30
 450:	ff 1f       	adc	r31, r31
 452:	ee 0f       	add	r30, r30
 454:	ff 1f       	adc	r31, r31
 456:	e1 57       	subi	r30, 0x71	; 113
 458:	fe 4f       	sbci	r31, 0xFE	; 254
 45a:	87 83       	std	Z+7, r24	; 0x07
 45c:	ac c0       	rjmp	.+344    	; 0x5b6 <__LOCK_REGION_LENGTH__+0x1b6>
			}
			else if (RX_Buffer[SOF_BYTE_IDX] == NACK_BYTE)
 45e:	80 91 ef 01 	lds	r24, 0x01EF	; 0x8001ef <RX_Buffer>
 462:	8a 32       	cpi	r24, 0x2A	; 42
 464:	09 f0       	breq	.+2      	; 0x468 <__LOCK_REGION_LENGTH__+0x68>
 466:	a7 c0       	rjmp	.+334    	; 0x5b6 <__LOCK_REGION_LENGTH__+0x1b6>
			{
				/* Stop retransmitting command if Pedal keeps responding with NACK. */
				if (++NackCnt <= 3)
 468:	80 91 8a 01 	lds	r24, 0x018A	; 0x80018a <NackCnt>
 46c:	8f 5f       	subi	r24, 0xFF	; 255
 46e:	80 93 8a 01 	sts	0x018A, r24	; 0x80018a <NackCnt>
 472:	84 30       	cpi	r24, 0x04	; 4
 474:	08 f0       	brcs	.+2      	; 0x478 <__LOCK_REGION_LENGTH__+0x78>
 476:	9f c0       	rjmp	.+318    	; 0x5b6 <__LOCK_REGION_LENGTH__+0x1b6>
				{
					/* Prepare retransmit latest command */
					TX_CommandQueue[TxTail].sent = false;
 478:	e0 91 8b 01 	lds	r30, 0x018B	; 0x80018b <TxTail>
 47c:	f0 e0       	ldi	r31, 0x00	; 0
 47e:	ee 0f       	add	r30, r30
 480:	ff 1f       	adc	r31, r31
 482:	ee 0f       	add	r30, r30
 484:	ff 1f       	adc	r31, r31
 486:	ee 0f       	add	r30, r30
 488:	ff 1f       	adc	r31, r31
 48a:	e1 57       	subi	r30, 0x71	; 113
 48c:	fe 4f       	sbci	r31, 0xFE	; 254
 48e:	16 82       	std	Z+6, r1	; 0x06
					MasterCom_DelayTXOvfCnt = 1;	// Start/reset Delay TX timer
 490:	81 e0       	ldi	r24, 0x01	; 1
 492:	80 93 0c 02 	sts	0x020C, r24	; 0x80020c <MasterCom_DelayTXOvfCnt>
 496:	8f c0       	rjmp	.+286    	; 0x5b6 <__LOCK_REGION_LENGTH__+0x1b6>
				}
			}
		}
	}
	else if ((RX_ByteCnt - 1) == LENGTH_BYTE_IDX)
 498:	82 30       	cpi	r24, 0x02	; 2
 49a:	79 f4       	brne	.+30     	; 0x4ba <__LOCK_REGION_LENGTH__+0xba>
	{
		RX_CommandQueue[RxHead].length = RX_Buffer[LENGTH_BYTE_IDX];
 49c:	e0 91 8e 01 	lds	r30, 0x018E	; 0x80018e <RxHead>
 4a0:	f0 e0       	ldi	r31, 0x00	; 0
 4a2:	80 91 f0 01 	lds	r24, 0x01F0	; 0x8001f0 <RX_Buffer+0x1>
 4a6:	ee 0f       	add	r30, r30
 4a8:	ff 1f       	adc	r31, r31
 4aa:	ee 0f       	add	r30, r30
 4ac:	ff 1f       	adc	r31, r31
 4ae:	ee 0f       	add	r30, r30
 4b0:	ff 1f       	adc	r31, r31
 4b2:	e1 55       	subi	r30, 0x51	; 81
 4b4:	fe 4f       	sbci	r31, 0xFE	; 254
 4b6:	81 83       	std	Z+1, r24	; 0x01
 4b8:	7e c0       	rjmp	.+252    	; 0x5b6 <__LOCK_REGION_LENGTH__+0x1b6>
	}
	else if (RX_ByteCnt == RX_CommandQueue[RxHead].length)
 4ba:	e0 91 8e 01 	lds	r30, 0x018E	; 0x80018e <RxHead>
 4be:	f0 e0       	ldi	r31, 0x00	; 0
 4c0:	ee 0f       	add	r30, r30
 4c2:	ff 1f       	adc	r31, r31
 4c4:	ee 0f       	add	r30, r30
 4c6:	ff 1f       	adc	r31, r31
 4c8:	ee 0f       	add	r30, r30
 4ca:	ff 1f       	adc	r31, r31
 4cc:	e1 55       	subi	r30, 0x51	; 81
 4ce:	fe 4f       	sbci	r31, 0xFE	; 254
 4d0:	91 81       	ldd	r25, Z+1	; 0x01
 4d2:	89 13       	cpse	r24, r25
 4d4:	70 c0       	rjmp	.+224    	; 0x5b6 <__LOCK_REGION_LENGTH__+0x1b6>
	{
		/* If full frame received */
		if (RX_Buffer[RX_CommandQueue[RxHead].length - 1] == EOF_BYTE)
 4d6:	e0 91 8e 01 	lds	r30, 0x018E	; 0x80018e <RxHead>
 4da:	f0 e0       	ldi	r31, 0x00	; 0
 4dc:	ee 0f       	add	r30, r30
 4de:	ff 1f       	adc	r31, r31
 4e0:	ee 0f       	add	r30, r30
 4e2:	ff 1f       	adc	r31, r31
 4e4:	ee 0f       	add	r30, r30
 4e6:	ff 1f       	adc	r31, r31
 4e8:	e1 55       	subi	r30, 0x51	; 81
 4ea:	fe 4f       	sbci	r31, 0xFE	; 254
 4ec:	e1 81       	ldd	r30, Z+1	; 0x01
 4ee:	f0 e0       	ldi	r31, 0x00	; 0
 4f0:	e2 51       	subi	r30, 0x12	; 18
 4f2:	fe 4f       	sbci	r31, 0xFE	; 254
 4f4:	80 81       	ld	r24, Z
 4f6:	8f 3e       	cpi	r24, 0xEF	; 239
 4f8:	09 f0       	breq	.+2      	; 0x4fc <__LOCK_REGION_LENGTH__+0xfc>
 4fa:	55 c0       	rjmp	.+170    	; 0x5a6 <__LOCK_REGION_LENGTH__+0x1a6>
		{
			RX_CommandQueue[RxHead].command = (CMD)RX_Buffer[CMD_BYTE_IDX];
 4fc:	e0 91 8e 01 	lds	r30, 0x018E	; 0x80018e <RxHead>
 500:	f0 e0       	ldi	r31, 0x00	; 0
 502:	80 91 f1 01 	lds	r24, 0x01F1	; 0x8001f1 <RX_Buffer+0x2>
 506:	ee 0f       	add	r30, r30
 508:	ff 1f       	adc	r31, r31
 50a:	ee 0f       	add	r30, r30
 50c:	ff 1f       	adc	r31, r31
 50e:	ee 0f       	add	r30, r30
 510:	ff 1f       	adc	r31, r31
 512:	e1 55       	subi	r30, 0x51	; 81
 514:	fe 4f       	sbci	r31, 0xFE	; 254
 516:	80 83       	st	Z, r24
			
			for (uint8_t i = 0; i < (RX_CommandQueue[RxHead].length - 4); i++)
 518:	e0 91 8e 01 	lds	r30, 0x018E	; 0x80018e <RxHead>
 51c:	f0 e0       	ldi	r31, 0x00	; 0
 51e:	ee 0f       	add	r30, r30
 520:	ff 1f       	adc	r31, r31
 522:	ee 0f       	add	r30, r30
 524:	ff 1f       	adc	r31, r31
 526:	ee 0f       	add	r30, r30
 528:	ff 1f       	adc	r31, r31
 52a:	e1 55       	subi	r30, 0x51	; 81
 52c:	fe 4f       	sbci	r31, 0xFE	; 254
 52e:	81 81       	ldd	r24, Z+1	; 0x01
 530:	90 e0       	ldi	r25, 0x00	; 0
 532:	04 97       	sbiw	r24, 0x04	; 4
 534:	18 16       	cp	r1, r24
 536:	19 06       	cpc	r1, r25
 538:	5c f5       	brge	.+86     	; 0x590 <__LOCK_REGION_LENGTH__+0x190>
 53a:	20 e0       	ldi	r18, 0x00	; 0
 53c:	30 e0       	ldi	r19, 0x00	; 0
 53e:	40 e0       	ldi	r20, 0x00	; 0
			{
				RX_CommandQueue[RxHead].data[i] = RX_Buffer[DATA_BYTE_IDX + i];
 540:	80 91 8e 01 	lds	r24, 0x018E	; 0x80018e <RxHead>
 544:	e8 2f       	mov	r30, r24
 546:	f0 e0       	ldi	r31, 0x00	; 0
 548:	d9 01       	movw	r26, r18
 54a:	ae 50       	subi	r26, 0x0E	; 14
 54c:	be 4f       	sbci	r27, 0xFE	; 254
 54e:	8c 91       	ld	r24, X
 550:	ee 0f       	add	r30, r30
 552:	ff 1f       	adc	r31, r31
 554:	ee 0f       	add	r30, r30
 556:	ff 1f       	adc	r31, r31
 558:	ee 0f       	add	r30, r30
 55a:	ff 1f       	adc	r31, r31
 55c:	e1 55       	subi	r30, 0x51	; 81
 55e:	fe 4f       	sbci	r31, 0xFE	; 254
 560:	e2 0f       	add	r30, r18
 562:	f3 1f       	adc	r31, r19
 564:	82 83       	std	Z+2, r24	; 0x02
		/* If full frame received */
		if (RX_Buffer[RX_CommandQueue[RxHead].length - 1] == EOF_BYTE)
		{
			RX_CommandQueue[RxHead].command = (CMD)RX_Buffer[CMD_BYTE_IDX];
			
			for (uint8_t i = 0; i < (RX_CommandQueue[RxHead].length - 4); i++)
 566:	4f 5f       	subi	r20, 0xFF	; 255
 568:	24 2f       	mov	r18, r20
 56a:	30 e0       	ldi	r19, 0x00	; 0
 56c:	a0 91 8e 01 	lds	r26, 0x018E	; 0x80018e <RxHead>
 570:	b0 e0       	ldi	r27, 0x00	; 0
 572:	aa 0f       	add	r26, r26
 574:	bb 1f       	adc	r27, r27
 576:	aa 0f       	add	r26, r26
 578:	bb 1f       	adc	r27, r27
 57a:	aa 0f       	add	r26, r26
 57c:	bb 1f       	adc	r27, r27
 57e:	a1 55       	subi	r26, 0x51	; 81
 580:	be 4f       	sbci	r27, 0xFE	; 254
 582:	11 96       	adiw	r26, 0x01	; 1
 584:	8c 91       	ld	r24, X
 586:	90 e0       	ldi	r25, 0x00	; 0
 588:	04 97       	sbiw	r24, 0x04	; 4
 58a:	28 17       	cp	r18, r24
 58c:	39 07       	cpc	r19, r25
 58e:	c4 f2       	brlt	.-80     	; 0x540 <__LOCK_REGION_LENGTH__+0x140>
			{
				RX_CommandQueue[RxHead].data[i] = RX_Buffer[DATA_BYTE_IDX + i];
			}
			
			/* calculate new RX head index */
			uint8_t tmpHead = (RxHead + 1) & RX_QUEUE_MASK;
 590:	80 91 8e 01 	lds	r24, 0x018E	; 0x80018e <RxHead>
 594:	8f 5f       	subi	r24, 0xFF	; 255
 596:	87 70       	andi	r24, 0x07	; 7
				
			if ( tmpHead == RxTail )
 598:	90 91 8d 01 	lds	r25, 0x018D	; 0x80018d <RxTail>
 59c:	89 17       	cp	r24, r25
 59e:	49 f0       	breq	.+18     	; 0x5b2 <__LOCK_REGION_LENGTH__+0x1b2>
				/* error: RX command queue overflow */
			}
			else
			{
				/* store new index */
				RxHead = tmpHead;
 5a0:	80 93 8e 01 	sts	0x018E, r24	; 0x80018e <RxHead>
 5a4:	06 c0       	rjmp	.+12     	; 0x5b2 <__LOCK_REGION_LENGTH__+0x1b2>
			}
		}
		else
		{
			/* Prepare Transmit NACK */
			UART_QueueChar(NACK_BYTE);
 5a6:	8a e2       	ldi	r24, 0x2A	; 42
 5a8:	0e 94 4b 06 	call	0xc96	; 0xc96 <_Z14UART_QueueCharh>
			MasterCom_DelayTXOvfCnt = 1;	// Start/reset Delay TX timer
 5ac:	81 e0       	ldi	r24, 0x01	; 1
 5ae:	80 93 0c 02 	sts	0x020C, r24	; 0x80020c <MasterCom_DelayTXOvfCnt>
		}
			
		RX_ByteCnt = 0;
 5b2:	10 92 89 01 	sts	0x0189, r1	; 0x800189 <_ZZ17MasterCom_ReceivevE10RX_ByteCnt>
	}	
}
 5b6:	df 91       	pop	r29
 5b8:	cf 91       	pop	r28
 5ba:	08 95       	ret

000005bc <_Z24MasterCom_HandleReceivedv>:


void MasterCom_HandleReceived()
{
	unsigned char response;
	response = System_HandleMasterCommand(RX_CommandQueue[RxTail].command, RX_CommandQueue[RxTail].length - 4, (uint8_t *)RX_CommandQueue[RxTail].data);
 5bc:	40 91 8d 01 	lds	r20, 0x018D	; 0x80018d <RxTail>
 5c0:	e0 91 8d 01 	lds	r30, 0x018D	; 0x80018d <RxTail>
 5c4:	f0 e0       	ldi	r31, 0x00	; 0
 5c6:	ee 0f       	add	r30, r30
 5c8:	ff 1f       	adc	r31, r31
 5ca:	ee 0f       	add	r30, r30
 5cc:	ff 1f       	adc	r31, r31
 5ce:	ee 0f       	add	r30, r30
 5d0:	ff 1f       	adc	r31, r31
 5d2:	e1 55       	subi	r30, 0x51	; 81
 5d4:	fe 4f       	sbci	r31, 0xFE	; 254
 5d6:	61 81       	ldd	r22, Z+1	; 0x01
 5d8:	e0 91 8d 01 	lds	r30, 0x018D	; 0x80018d <RxTail>
 5dc:	f0 e0       	ldi	r31, 0x00	; 0
 5de:	ee 0f       	add	r30, r30
 5e0:	ff 1f       	adc	r31, r31
 5e2:	ee 0f       	add	r30, r30
 5e4:	ff 1f       	adc	r31, r31
 5e6:	ee 0f       	add	r30, r30
 5e8:	ff 1f       	adc	r31, r31
 5ea:	e1 55       	subi	r30, 0x51	; 81
 5ec:	fe 4f       	sbci	r31, 0xFE	; 254
 5ee:	80 81       	ld	r24, Z
 5f0:	50 e0       	ldi	r21, 0x00	; 0
 5f2:	44 0f       	add	r20, r20
 5f4:	55 1f       	adc	r21, r21
 5f6:	44 0f       	add	r20, r20
 5f8:	55 1f       	adc	r21, r21
 5fa:	44 0f       	add	r20, r20
 5fc:	55 1f       	adc	r21, r21
 5fe:	4f 54       	subi	r20, 0x4F	; 79
 600:	5e 4f       	sbci	r21, 0xFE	; 254
 602:	64 50       	subi	r22, 0x04	; 4
 604:	0e 94 ee 04 	call	0x9dc	; 0x9dc <_Z26System_HandleMasterCommand3CMDhPh>
	
	/* Calculate and store new queue index */
	RxTail = (RxTail + 1) & RX_QUEUE_MASK;
 608:	90 91 8d 01 	lds	r25, 0x018D	; 0x80018d <RxTail>
 60c:	9f 5f       	subi	r25, 0xFF	; 255
 60e:	97 70       	andi	r25, 0x07	; 7
 610:	90 93 8d 01 	sts	0x018D, r25	; 0x80018d <RxTail>

	/* Prepare Transmit response */
	UART_QueueChar(response);
 614:	0e 94 4b 06 	call	0xc96	; 0xc96 <_Z14UART_QueueCharh>
	
	/* Start/reset Delay TX timer */
	MasterCom_DelayTXOvfCnt = 1;
 618:	81 e0       	ldi	r24, 0x01	; 1
 61a:	80 93 0c 02 	sts	0x020C, r24	; 0x80020c <MasterCom_DelayTXOvfCnt>
 61e:	08 95       	ret

00000620 <_Z22MasterCom_QueueCommand3CMDhPh>:


bool MasterCom_QueueCommand(CMD cmd, uint8_t datLen, uint8_t *dat)
{
	/* Calculate new queue head index */
	uint8_t tmpHead = (TxHead + 1) & TX_QUEUE_MASK;
 620:	20 91 8c 01 	lds	r18, 0x018C	; 0x80018c <TxHead>
 624:	2f 5f       	subi	r18, 0xFF	; 255
 626:	23 70       	andi	r18, 0x03	; 3
	
	/* Check for free space in queue */
	if ( tmpHead == TxTail )
 628:	90 91 8b 01 	lds	r25, 0x018B	; 0x80018b <TxTail>
 62c:	29 17       	cp	r18, r25
 62e:	09 f4       	brne	.+2      	; 0x632 <_Z22MasterCom_QueueCommand3CMDhPh+0x12>
 630:	4e c0       	rjmp	.+156    	; 0x6ce <_Z22MasterCom_QueueCommand3CMDhPh+0xae>
		return false;
	
	/* Copy command to queue */
	TX_CommandQueue[TxHead].command = cmd;
 632:	e0 91 8c 01 	lds	r30, 0x018C	; 0x80018c <TxHead>
 636:	f0 e0       	ldi	r31, 0x00	; 0
 638:	ee 0f       	add	r30, r30
 63a:	ff 1f       	adc	r31, r31
 63c:	ee 0f       	add	r30, r30
 63e:	ff 1f       	adc	r31, r31
 640:	ee 0f       	add	r30, r30
 642:	ff 1f       	adc	r31, r31
 644:	e1 57       	subi	r30, 0x71	; 113
 646:	fe 4f       	sbci	r31, 0xFE	; 254
 648:	80 83       	st	Z, r24
	TX_CommandQueue[TxHead].length = datLen + 4;
 64a:	e0 91 8c 01 	lds	r30, 0x018C	; 0x80018c <TxHead>
 64e:	f0 e0       	ldi	r31, 0x00	; 0
 650:	ee 0f       	add	r30, r30
 652:	ff 1f       	adc	r31, r31
 654:	ee 0f       	add	r30, r30
 656:	ff 1f       	adc	r31, r31
 658:	ee 0f       	add	r30, r30
 65a:	ff 1f       	adc	r31, r31
 65c:	e1 57       	subi	r30, 0x71	; 113
 65e:	fe 4f       	sbci	r31, 0xFE	; 254
 660:	84 e0       	ldi	r24, 0x04	; 4
 662:	86 0f       	add	r24, r22
 664:	81 83       	std	Z+1, r24	; 0x01
	TX_CommandQueue[TxHead].sent = false;
 666:	e0 91 8c 01 	lds	r30, 0x018C	; 0x80018c <TxHead>
 66a:	f0 e0       	ldi	r31, 0x00	; 0
 66c:	ee 0f       	add	r30, r30
 66e:	ff 1f       	adc	r31, r31
 670:	ee 0f       	add	r30, r30
 672:	ff 1f       	adc	r31, r31
 674:	ee 0f       	add	r30, r30
 676:	ff 1f       	adc	r31, r31
 678:	e1 57       	subi	r30, 0x71	; 113
 67a:	fe 4f       	sbci	r31, 0xFE	; 254
 67c:	16 82       	std	Z+6, r1	; 0x06
	TX_CommandQueue[TxHead].acked = false;
 67e:	e0 91 8c 01 	lds	r30, 0x018C	; 0x80018c <TxHead>
 682:	f0 e0       	ldi	r31, 0x00	; 0
 684:	ee 0f       	add	r30, r30
 686:	ff 1f       	adc	r31, r31
 688:	ee 0f       	add	r30, r30
 68a:	ff 1f       	adc	r31, r31
 68c:	ee 0f       	add	r30, r30
 68e:	ff 1f       	adc	r31, r31
 690:	e1 57       	subi	r30, 0x71	; 113
 692:	fe 4f       	sbci	r31, 0xFE	; 254
 694:	17 82       	std	Z+7, r1	; 0x07
	
	for (uint8_t i = 0; i < datLen; i++)
 696:	66 23       	and	r22, r22
 698:	b1 f0       	breq	.+44     	; 0x6c6 <_Z22MasterCom_QueueCommand3CMDhPh+0xa6>
 69a:	a4 2f       	mov	r26, r20
 69c:	b5 2f       	mov	r27, r21
 69e:	80 e0       	ldi	r24, 0x00	; 0
 6a0:	90 e0       	ldi	r25, 0x00	; 0
	{
		TX_CommandQueue[TxHead].data[i] = dat[i];
 6a2:	e0 91 8c 01 	lds	r30, 0x018C	; 0x80018c <TxHead>
 6a6:	f0 e0       	ldi	r31, 0x00	; 0
 6a8:	3d 91       	ld	r19, X+
 6aa:	ee 0f       	add	r30, r30
 6ac:	ff 1f       	adc	r31, r31
 6ae:	ee 0f       	add	r30, r30
 6b0:	ff 1f       	adc	r31, r31
 6b2:	ee 0f       	add	r30, r30
 6b4:	ff 1f       	adc	r31, r31
 6b6:	e1 57       	subi	r30, 0x71	; 113
 6b8:	fe 4f       	sbci	r31, 0xFE	; 254
 6ba:	e8 0f       	add	r30, r24
 6bc:	f9 1f       	adc	r31, r25
 6be:	32 83       	std	Z+2, r19	; 0x02
 6c0:	01 96       	adiw	r24, 0x01	; 1
	TX_CommandQueue[TxHead].command = cmd;
	TX_CommandQueue[TxHead].length = datLen + 4;
	TX_CommandQueue[TxHead].sent = false;
	TX_CommandQueue[TxHead].acked = false;
	
	for (uint8_t i = 0; i < datLen; i++)
 6c2:	86 17       	cp	r24, r22
 6c4:	70 f3       	brcs	.-36     	; 0x6a2 <_Z22MasterCom_QueueCommand3CMDhPh+0x82>
	{
		TX_CommandQueue[TxHead].data[i] = dat[i];
	}
	
	/* Update queue head */
	TxHead = tmpHead;
 6c6:	20 93 8c 01 	sts	0x018C, r18	; 0x80018c <TxHead>
	
	return true;
 6ca:	81 e0       	ldi	r24, 0x01	; 1
 6cc:	08 95       	ret
	/* Calculate new queue head index */
	uint8_t tmpHead = (TxHead + 1) & TX_QUEUE_MASK;
	
	/* Check for free space in queue */
	if ( tmpHead == TxTail )
		return false;
 6ce:	80 e0       	ldi	r24, 0x00	; 0
	
	/* Update queue head */
	TxHead = tmpHead;
	
	return true;
}
 6d0:	08 95       	ret

000006d2 <_Z20MasterCom_PutCommandv>:

void MasterCom_PutCommand()
{
 6d2:	cf 93       	push	r28
	/* Only transmit new command if previous one got an ACK */
	if (TX_CommandQueue[TxTail].acked)
 6d4:	e0 91 8b 01 	lds	r30, 0x018B	; 0x80018b <TxTail>
 6d8:	f0 e0       	ldi	r31, 0x00	; 0
 6da:	ee 0f       	add	r30, r30
 6dc:	ff 1f       	adc	r31, r31
 6de:	ee 0f       	add	r30, r30
 6e0:	ff 1f       	adc	r31, r31
 6e2:	ee 0f       	add	r30, r30
 6e4:	ff 1f       	adc	r31, r31
 6e6:	e1 57       	subi	r30, 0x71	; 113
 6e8:	fe 4f       	sbci	r31, 0xFE	; 254
 6ea:	87 81       	ldd	r24, Z+7	; 0x07
 6ec:	88 23       	and	r24, r24
 6ee:	39 f0       	breq	.+14     	; 0x6fe <_Z20MasterCom_PutCommandv+0x2c>
	{
		/* Calculate and store new queue tail index */
		TxTail = (TxTail + 1) & TX_QUEUE_MASK;
 6f0:	80 91 8b 01 	lds	r24, 0x018B	; 0x80018b <TxTail>
 6f4:	8f 5f       	subi	r24, 0xFF	; 255
 6f6:	83 70       	andi	r24, 0x03	; 3
 6f8:	80 93 8b 01 	sts	0x018B, r24	; 0x80018b <TxTail>
 6fc:	84 c0       	rjmp	.+264    	; 0x806 <_Z20MasterCom_PutCommandv+0x134>
	}
	else if (!(TX_CommandQueue[TxTail].sent))
 6fe:	e0 91 8b 01 	lds	r30, 0x018B	; 0x80018b <TxTail>
 702:	f0 e0       	ldi	r31, 0x00	; 0
 704:	ee 0f       	add	r30, r30
 706:	ff 1f       	adc	r31, r31
 708:	ee 0f       	add	r30, r30
 70a:	ff 1f       	adc	r31, r31
 70c:	ee 0f       	add	r30, r30
 70e:	ff 1f       	adc	r31, r31
 710:	e1 57       	subi	r30, 0x71	; 113
 712:	fe 4f       	sbci	r31, 0xFE	; 254
 714:	86 81       	ldd	r24, Z+6	; 0x06
 716:	81 11       	cpse	r24, r1
 718:	76 c0       	rjmp	.+236    	; 0x806 <_Z20MasterCom_PutCommandv+0x134>
	{
		/* Send command frame to UART TX buffer */
		UART_QueueChar(SOF_BYTE);
 71a:	8f e5       	ldi	r24, 0x5F	; 95
 71c:	0e 94 4b 06 	call	0xc96	; 0xc96 <_Z14UART_QueueCharh>
		UART_QueueChar((unsigned char)TX_CommandQueue[TxTail].length);
 720:	e0 91 8b 01 	lds	r30, 0x018B	; 0x80018b <TxTail>
 724:	f0 e0       	ldi	r31, 0x00	; 0
 726:	ee 0f       	add	r30, r30
 728:	ff 1f       	adc	r31, r31
 72a:	ee 0f       	add	r30, r30
 72c:	ff 1f       	adc	r31, r31
 72e:	ee 0f       	add	r30, r30
 730:	ff 1f       	adc	r31, r31
 732:	e1 57       	subi	r30, 0x71	; 113
 734:	fe 4f       	sbci	r31, 0xFE	; 254
 736:	81 81       	ldd	r24, Z+1	; 0x01
 738:	0e 94 4b 06 	call	0xc96	; 0xc96 <_Z14UART_QueueCharh>
		UART_QueueChar((unsigned char)TX_CommandQueue[TxTail].command);
 73c:	e0 91 8b 01 	lds	r30, 0x018B	; 0x80018b <TxTail>
 740:	f0 e0       	ldi	r31, 0x00	; 0
 742:	ee 0f       	add	r30, r30
 744:	ff 1f       	adc	r31, r31
 746:	ee 0f       	add	r30, r30
 748:	ff 1f       	adc	r31, r31
 74a:	ee 0f       	add	r30, r30
 74c:	ff 1f       	adc	r31, r31
 74e:	e1 57       	subi	r30, 0x71	; 113
 750:	fe 4f       	sbci	r31, 0xFE	; 254
 752:	80 81       	ld	r24, Z
 754:	0e 94 4b 06 	call	0xc96	; 0xc96 <_Z14UART_QueueCharh>
		
		for (uint8_t i = 0; i < (TX_CommandQueue[TxTail].length - 4); i++)
 758:	e0 91 8b 01 	lds	r30, 0x018B	; 0x80018b <TxTail>
 75c:	f0 e0       	ldi	r31, 0x00	; 0
 75e:	ee 0f       	add	r30, r30
 760:	ff 1f       	adc	r31, r31
 762:	ee 0f       	add	r30, r30
 764:	ff 1f       	adc	r31, r31
 766:	ee 0f       	add	r30, r30
 768:	ff 1f       	adc	r31, r31
 76a:	e1 57       	subi	r30, 0x71	; 113
 76c:	fe 4f       	sbci	r31, 0xFE	; 254
 76e:	81 81       	ldd	r24, Z+1	; 0x01
 770:	90 e0       	ldi	r25, 0x00	; 0
 772:	04 97       	sbiw	r24, 0x04	; 4
 774:	18 16       	cp	r1, r24
 776:	19 06       	cpc	r1, r25
 778:	4c f5       	brge	.+82     	; 0x7cc <_Z20MasterCom_PutCommandv+0xfa>
 77a:	20 e0       	ldi	r18, 0x00	; 0
 77c:	30 e0       	ldi	r19, 0x00	; 0
 77e:	c0 e0       	ldi	r28, 0x00	; 0
		{
			UART_QueueChar((unsigned char)TX_CommandQueue[TxTail].data[i]);
 780:	80 91 8b 01 	lds	r24, 0x018B	; 0x80018b <TxTail>
 784:	e8 2f       	mov	r30, r24
 786:	f0 e0       	ldi	r31, 0x00	; 0
 788:	ee 0f       	add	r30, r30
 78a:	ff 1f       	adc	r31, r31
 78c:	ee 0f       	add	r30, r30
 78e:	ff 1f       	adc	r31, r31
 790:	ee 0f       	add	r30, r30
 792:	ff 1f       	adc	r31, r31
 794:	e1 57       	subi	r30, 0x71	; 113
 796:	fe 4f       	sbci	r31, 0xFE	; 254
 798:	e2 0f       	add	r30, r18
 79a:	f3 1f       	adc	r31, r19
 79c:	82 81       	ldd	r24, Z+2	; 0x02
 79e:	0e 94 4b 06 	call	0xc96	; 0xc96 <_Z14UART_QueueCharh>
		/* Send command frame to UART TX buffer */
		UART_QueueChar(SOF_BYTE);
		UART_QueueChar((unsigned char)TX_CommandQueue[TxTail].length);
		UART_QueueChar((unsigned char)TX_CommandQueue[TxTail].command);
		
		for (uint8_t i = 0; i < (TX_CommandQueue[TxTail].length - 4); i++)
 7a2:	cf 5f       	subi	r28, 0xFF	; 255
 7a4:	2c 2f       	mov	r18, r28
 7a6:	30 e0       	ldi	r19, 0x00	; 0
 7a8:	a0 91 8b 01 	lds	r26, 0x018B	; 0x80018b <TxTail>
 7ac:	b0 e0       	ldi	r27, 0x00	; 0
 7ae:	aa 0f       	add	r26, r26
 7b0:	bb 1f       	adc	r27, r27
 7b2:	aa 0f       	add	r26, r26
 7b4:	bb 1f       	adc	r27, r27
 7b6:	aa 0f       	add	r26, r26
 7b8:	bb 1f       	adc	r27, r27
 7ba:	a1 57       	subi	r26, 0x71	; 113
 7bc:	be 4f       	sbci	r27, 0xFE	; 254
 7be:	11 96       	adiw	r26, 0x01	; 1
 7c0:	8c 91       	ld	r24, X
 7c2:	90 e0       	ldi	r25, 0x00	; 0
 7c4:	04 97       	sbiw	r24, 0x04	; 4
 7c6:	28 17       	cp	r18, r24
 7c8:	39 07       	cpc	r19, r25
 7ca:	d4 f2       	brlt	.-76     	; 0x780 <_Z20MasterCom_PutCommandv+0xae>
		{
			UART_QueueChar((unsigned char)TX_CommandQueue[TxTail].data[i]);
		}
		
		UART_QueueChar(EOF_BYTE);
 7cc:	8f ee       	ldi	r24, 0xEF	; 239
 7ce:	0e 94 4b 06 	call	0xc96	; 0xc96 <_Z14UART_QueueCharh>
		
		/* If no data is waiting to be transmitted */
		if (MasterCom_DelayTXOvfCnt == 0)
 7d2:	80 91 0c 02 	lds	r24, 0x020C	; 0x80020c <MasterCom_DelayTXOvfCnt>
 7d6:	81 11       	cpse	r24, r1
 7d8:	03 c0       	rjmp	.+6      	; 0x7e0 <_Z20MasterCom_PutCommandv+0x10e>
		{
			/* Signal that data is waiting to be transmitted without delay */
			MasterCom_DelayTxFlag = true;
 7da:	81 e0       	ldi	r24, 0x01	; 1
 7dc:	80 93 0d 02 	sts	0x020D, r24	; 0x80020d <MasterCom_DelayTxFlag>
		}
		
		TX_CommandQueue[TxTail].sent = true;
 7e0:	e0 91 8b 01 	lds	r30, 0x018B	; 0x80018b <TxTail>
 7e4:	f0 e0       	ldi	r31, 0x00	; 0
 7e6:	ee 0f       	add	r30, r30
 7e8:	ff 1f       	adc	r31, r31
 7ea:	ee 0f       	add	r30, r30
 7ec:	ff 1f       	adc	r31, r31
 7ee:	ee 0f       	add	r30, r30
 7f0:	ff 1f       	adc	r31, r31
 7f2:	e1 57       	subi	r30, 0x71	; 113
 7f4:	fe 4f       	sbci	r31, 0xFE	; 254
 7f6:	81 e0       	ldi	r24, 0x01	; 1
 7f8:	86 83       	std	Z+6, r24	; 0x06
		
		/* Start response timeout timer */
		MasterCom_ResponseTimeoutOvfCnt = 1;
 7fa:	81 e0       	ldi	r24, 0x01	; 1
 7fc:	90 e0       	ldi	r25, 0x00	; 0
 7fe:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <MasterCom_ResponseTimeoutOvfCnt+0x1>
 802:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <MasterCom_ResponseTimeoutOvfCnt>
	}
}
 806:	cf 91       	pop	r28
 808:	08 95       	ret

0000080a <_Z12Select_RX_TXh>:
}


void Select_RX_TX(uint8_t dir)
{
	if (dir == DIR_TRANSMIT)
 80a:	81 11       	cpse	r24, r1
 80c:	03 c0       	rjmp	.+6      	; 0x814 <_Z12Select_RX_TXh+0xa>
	{
		SELECT_RX_TX_PORT &= ~(SELECT_RX_MASK);
 80e:	5d 98       	cbi	0x0b, 5	; 11
		SELECT_RX_TX_PORT |= SELECT_TX_MASK;
 810:	5e 9a       	sbi	0x0b, 6	; 11
 812:	08 95       	ret
	}
	else
	{
		SELECT_RX_TX_PORT |= SELECT_RX_MASK;
 814:	5d 9a       	sbi	0x0b, 5	; 11
		SELECT_RX_TX_PORT &= ~(SELECT_TX_MASK);
 816:	5e 98       	cbi	0x0b, 6	; 11
 818:	08 95       	ret

0000081a <_Z14MasterCom_Initv>:

/* Function implementations */
void MasterCom_Init()
{
	/* Set RX/TX Select GPIOs to output */
	SELECT_RX_TX_DDR |= (SELECT_RX_MASK | SELECT_TX_MASK);
 81a:	8a b1       	in	r24, 0x0a	; 10
 81c:	80 66       	ori	r24, 0x60	; 96
 81e:	8a b9       	out	0x0a, r24	; 10
	
	/* Activate receive */
	Select_RX_TX(DIR_RECEIVE);
 820:	81 e0       	ldi	r24, 0x01	; 1
 822:	0e 94 05 04 	call	0x80a	; 0x80a <_Z12Select_RX_TXh>
	
	/* Enable TX Complete Interrupt */
	UCSR0B |= (1 << TXCIE0);
 826:	e1 ec       	ldi	r30, 0xC1	; 193
 828:	f0 e0       	ldi	r31, 0x00	; 0
 82a:	80 81       	ld	r24, Z
 82c:	80 64       	ori	r24, 0x40	; 64
 82e:	80 83       	st	Z, r24
 830:	08 95       	ret

00000832 <_Z18MasterCom_Transmitv>:


void MasterCom_Transmit()
{
	/* Activate Transmit */
	Select_RX_TX(DIR_TRANSMIT);
 832:	80 e0       	ldi	r24, 0x00	; 0
 834:	0e 94 05 04 	call	0x80a	; 0x80a <_Z12Select_RX_TXh>
	
	/* Start transmit */
	UART_PutQueue();
 838:	0e 94 60 06 	call	0xcc0	; 0xcc0 <_Z13UART_PutQueuev>
 83c:	08 95       	ret

0000083e <__vector_20>:
}


/* TX Complete Interrupt ISR */
ISR(USART_TX_vect)
{
 83e:	1f 92       	push	r1
 840:	0f 92       	push	r0
 842:	0f b6       	in	r0, 0x3f	; 63
 844:	0f 92       	push	r0
 846:	11 24       	eor	r1, r1
 848:	2f 93       	push	r18
 84a:	3f 93       	push	r19
 84c:	4f 93       	push	r20
 84e:	5f 93       	push	r21
 850:	6f 93       	push	r22
 852:	7f 93       	push	r23
 854:	8f 93       	push	r24
 856:	9f 93       	push	r25
 858:	af 93       	push	r26
 85a:	bf 93       	push	r27
 85c:	ef 93       	push	r30
 85e:	ff 93       	push	r31
	/* Deactivate Transmit */
	Select_RX_TX(DIR_RECEIVE);
 860:	81 e0       	ldi	r24, 0x01	; 1
 862:	0e 94 05 04 	call	0x80a	; 0x80a <_Z12Select_RX_TXh>
 866:	ff 91       	pop	r31
 868:	ef 91       	pop	r30
 86a:	bf 91       	pop	r27
 86c:	af 91       	pop	r26
 86e:	9f 91       	pop	r25
 870:	8f 91       	pop	r24
 872:	7f 91       	pop	r23
 874:	6f 91       	pop	r22
 876:	5f 91       	pop	r21
 878:	4f 91       	pop	r20
 87a:	3f 91       	pop	r19
 87c:	2f 91       	pop	r18
 87e:	0f 90       	pop	r0
 880:	0f be       	out	0x3f, r0	; 63
 882:	0f 90       	pop	r0
 884:	1f 90       	pop	r1
 886:	18 95       	reti

00000888 <_Z17MCP23017_WriteReghhh>:
volatile uint8_t MCP_Output::AutoToggle_Flag = 0;
volatile uint8_t MCP_Output::AutoToggle_PortA = 0;
volatile uint8_t MCP_Output::AutoToggle_PortB = 0;

void MCP23017_WriteReg(unsigned char chip_addr, unsigned char reg, unsigned char val)
{
 888:	cf 93       	push	r28
 88a:	df 93       	push	r29
 88c:	d6 2f       	mov	r29, r22
 88e:	c4 2f       	mov	r28, r20
	unsigned char start_byte = (((START_BYTE_MASK | chip_addr) << 1) + I2C_WRITE);
	
	i2c_start(start_byte);		// Set device address and write mode
 890:	80 62       	ori	r24, 0x20	; 32
 892:	88 0f       	add	r24, r24
 894:	0e 94 11 01 	call	0x222	; 0x222 <_Z9i2c_starth>
	i2c_write(reg);             // Set MCP23017 memory pointer
 898:	8d 2f       	mov	r24, r29
 89a:	0e 94 41 01 	call	0x282	; 0x282 <_Z9i2c_writeh>
	i2c_write(val);             // Write value to register
 89e:	8c 2f       	mov	r24, r28
 8a0:	0e 94 41 01 	call	0x282	; 0x282 <_Z9i2c_writeh>
	i2c_stop();                 // Set stop condition = release bus
 8a4:	0e 94 38 01 	call	0x270	; 0x270 <_Z8i2c_stopv>
}
 8a8:	df 91       	pop	r29
 8aa:	cf 91       	pop	r28
 8ac:	08 95       	ret

000008ae <_Z16MCP23017_ReadReghh>:

unsigned char MCP23017_ReadReg(unsigned char chip_addr, unsigned char reg)
{
 8ae:	cf 93       	push	r28
 8b0:	df 93       	push	r29
 8b2:	d6 2f       	mov	r29, r22
	unsigned char start_byte = (((START_BYTE_MASK | chip_addr) << 1) + I2C_WRITE);
 8b4:	80 62       	ori	r24, 0x20	; 32
 8b6:	c8 2f       	mov	r28, r24
 8b8:	cc 0f       	add	r28, r28

	i2c_start(start_byte);		// Set device address and write mode
 8ba:	8c 2f       	mov	r24, r28
 8bc:	0e 94 11 01 	call	0x222	; 0x222 <_Z9i2c_starth>
	i2c_write(reg);             // Set MCP23017 memory pointer
 8c0:	8d 2f       	mov	r24, r29
 8c2:	0e 94 41 01 	call	0x282	; 0x282 <_Z9i2c_writeh>
	i2c_stop();                 // Set stop condition = release bus
 8c6:	0e 94 38 01 	call	0x270	; 0x270 <_Z8i2c_stopv>

	start_byte |= I2C_READ;

	i2c_start(start_byte);		// Set device address and write mode
 8ca:	8c 2f       	mov	r24, r28
 8cc:	81 60       	ori	r24, 0x01	; 1
 8ce:	0e 94 11 01 	call	0x222	; 0x222 <_Z9i2c_starth>
	return i2c_readNak();       // Read byte and send stop condition
 8d2:	0e 94 53 01 	call	0x2a6	; 0x2a6 <_Z11i2c_readNakv>
}
 8d6:	df 91       	pop	r29
 8d8:	cf 91       	pop	r28
 8da:	08 95       	ret

000008dc <_Z20Segment7_WriteSinglehc>:
};


void Segment7_WriteSingle(uint8_t dig, char chr)
{			
	if (dig == 0)
 8dc:	81 11       	cpse	r24, r1
 8de:	0a c0       	rjmp	.+20     	; 0x8f4 <_Z20Segment7_WriteSinglehc+0x18>
	{
		MCP23017_WriteReg(MCP23017_ADDR_7SEG_DIGIT_0_1, OLATB, Segment7_DigitTable[(uint8_t)chr]);
 8e0:	e6 2f       	mov	r30, r22
 8e2:	f0 e0       	ldi	r31, 0x00	; 0
 8e4:	ee 5f       	subi	r30, 0xFE	; 254
 8e6:	fe 4f       	sbci	r31, 0xFE	; 254
 8e8:	40 81       	ld	r20, Z
 8ea:	65 e1       	ldi	r22, 0x15	; 21
 8ec:	81 e0       	ldi	r24, 0x01	; 1
 8ee:	0e 94 44 04 	call	0x888	; 0x888 <_Z17MCP23017_WriteReghhh>
 8f2:	08 95       	ret
	}
	else if (dig == 1)
 8f4:	81 30       	cpi	r24, 0x01	; 1
 8f6:	49 f4       	brne	.+18     	; 0x90a <__stack+0xb>
	{
		MCP23017_WriteReg(MCP23017_ADDR_7SEG_DIGIT_0_1, OLATA, Segment7_DigitTable[(uint8_t)chr]);
 8f8:	e6 2f       	mov	r30, r22
 8fa:	f0 e0       	ldi	r31, 0x00	; 0
 8fc:	ee 5f       	subi	r30, 0xFE	; 254
 8fe:	fe 4f       	sbci	r31, 0xFE	; 254
 900:	40 81       	ld	r20, Z
 902:	64 e1       	ldi	r22, 0x14	; 20
 904:	0e 94 44 04 	call	0x888	; 0x888 <_Z17MCP23017_WriteReghhh>
 908:	08 95       	ret
	}
	else if (dig == 2)
 90a:	82 30       	cpi	r24, 0x02	; 2
 90c:	49 f4       	brne	.+18     	; 0x920 <__stack+0x21>
	{
		MCP23017_WriteReg(MCP23017_ADDR_7SEG_DIGIT_2_3, OLATB, Segment7_DigitTable[(uint8_t)chr]);
 90e:	e6 2f       	mov	r30, r22
 910:	f0 e0       	ldi	r31, 0x00	; 0
 912:	ee 5f       	subi	r30, 0xFE	; 254
 914:	fe 4f       	sbci	r31, 0xFE	; 254
 916:	40 81       	ld	r20, Z
 918:	65 e1       	ldi	r22, 0x15	; 21
 91a:	0e 94 44 04 	call	0x888	; 0x888 <_Z17MCP23017_WriteReghhh>
 91e:	08 95       	ret
	}
	else if (dig == 3)
 920:	83 30       	cpi	r24, 0x03	; 3
 922:	49 f4       	brne	.+18     	; 0x936 <__stack+0x37>
	{
		MCP23017_WriteReg(MCP23017_ADDR_7SEG_DIGIT_2_3, OLATA, Segment7_DigitTable[(uint8_t)chr]);
 924:	e6 2f       	mov	r30, r22
 926:	f0 e0       	ldi	r31, 0x00	; 0
 928:	ee 5f       	subi	r30, 0xFE	; 254
 92a:	fe 4f       	sbci	r31, 0xFE	; 254
 92c:	40 81       	ld	r20, Z
 92e:	64 e1       	ldi	r22, 0x14	; 20
 930:	82 e0       	ldi	r24, 0x02	; 2
 932:	0e 94 44 04 	call	0x888	; 0x888 <_Z17MCP23017_WriteReghhh>
 936:	08 95       	ret

00000938 <_Z17Segment7_WriteAllcccc>:
	}
}

void Segment7_WriteAll(char c3, char c2, char c1, char c0)
{
 938:	1f 93       	push	r17
 93a:	cf 93       	push	r28
 93c:	df 93       	push	r29
 93e:	c8 2f       	mov	r28, r24
 940:	d6 2f       	mov	r29, r22
 942:	14 2f       	mov	r17, r20
	Segment7_WriteSingle(0, c0);
 944:	62 2f       	mov	r22, r18
 946:	80 e0       	ldi	r24, 0x00	; 0
 948:	0e 94 6e 04 	call	0x8dc	; 0x8dc <_Z20Segment7_WriteSinglehc>
	Segment7_WriteSingle(1, c1);
 94c:	61 2f       	mov	r22, r17
 94e:	81 e0       	ldi	r24, 0x01	; 1
 950:	0e 94 6e 04 	call	0x8dc	; 0x8dc <_Z20Segment7_WriteSinglehc>
	Segment7_WriteSingle(2, c2);
 954:	6d 2f       	mov	r22, r29
 956:	82 e0       	ldi	r24, 0x02	; 2
 958:	0e 94 6e 04 	call	0x8dc	; 0x8dc <_Z20Segment7_WriteSinglehc>
	Segment7_WriteSingle(3, c3);
 95c:	6c 2f       	mov	r22, r28
 95e:	83 e0       	ldi	r24, 0x03	; 3
 960:	0e 94 6e 04 	call	0x8dc	; 0x8dc <_Z20Segment7_WriteSinglehc>
}
 964:	df 91       	pop	r29
 966:	cf 91       	pop	r28
 968:	1f 91       	pop	r17
 96a:	08 95       	ret

0000096c <_Z28System_HandleFootswitchInput16Footswitch_Stateh>:
#include "MCP23017.h"

volatile System_State SystemState = EDITING;

void System_HandleFootswitchInput(Footswitch_State state, uint8_t sw)
{
 96c:	cf 93       	push	r28
 96e:	df 93       	push	r29
 970:	1f 92       	push	r1
 972:	cd b7       	in	r28, 0x3d	; 61
 974:	de b7       	in	r29, 0x3e	; 62
 976:	69 83       	std	Y+1, r22	; 0x01
	if (state == SHORT_PRESS)
 978:	83 30       	cpi	r24, 0x03	; 3
 97a:	41 f4       	brne	.+16     	; 0x98c <_Z28System_HandleFootswitchInput16Footswitch_Stateh+0x20>
	{
		MasterCom_QueueCommand(FootswitchShortPress, 1, (uint8_t *)&sw);
 97c:	ae 01       	movw	r20, r28
 97e:	4f 5f       	subi	r20, 0xFF	; 255
 980:	5f 4f       	sbci	r21, 0xFF	; 255
 982:	61 e0       	ldi	r22, 0x01	; 1
 984:	81 eb       	ldi	r24, 0xB1	; 177
 986:	0e 94 10 03 	call	0x620	; 0x620 <_Z22MasterCom_QueueCommand3CMDhPh>
 98a:	24 c0       	rjmp	.+72     	; 0x9d4 <_Z28System_HandleFootswitchInput16Footswitch_Stateh+0x68>
	}
	else if (state == LONG_PRESS)
 98c:	86 30       	cpi	r24, 0x06	; 6
 98e:	41 f4       	brne	.+16     	; 0x9a0 <_Z28System_HandleFootswitchInput16Footswitch_Stateh+0x34>
	{
		MasterCom_QueueCommand(FootswitchLongPress, 1, (uint8_t *)&sw);
 990:	ae 01       	movw	r20, r28
 992:	4f 5f       	subi	r20, 0xFF	; 255
 994:	5f 4f       	sbci	r21, 0xFF	; 255
 996:	61 e0       	ldi	r22, 0x01	; 1
 998:	82 eb       	ldi	r24, 0xB2	; 178
 99a:	0e 94 10 03 	call	0x620	; 0x620 <_Z22MasterCom_QueueCommand3CMDhPh>
 99e:	1a c0       	rjmp	.+52     	; 0x9d4 <_Z28System_HandleFootswitchInput16Footswitch_Stateh+0x68>
	}
	else if (state == LONG_LONG_PRESS)
 9a0:	87 30       	cpi	r24, 0x07	; 7
 9a2:	c1 f4       	brne	.+48     	; 0x9d4 <_Z28System_HandleFootswitchInput16Footswitch_Stateh+0x68>
	{
		MasterCom_QueueCommand(FootswitchLongLongPress, 1, (uint8_t *)&sw);
 9a4:	ae 01       	movw	r20, r28
 9a6:	4f 5f       	subi	r20, 0xFF	; 255
 9a8:	5f 4f       	sbci	r21, 0xFF	; 255
 9aa:	61 e0       	ldi	r22, 0x01	; 1
 9ac:	84 eb       	ldi	r24, 0xB4	; 180
 9ae:	0e 94 10 03 	call	0x620	; 0x620 <_Z22MasterCom_QueueCommand3CMDhPh>
		
		/* Only write Tuner in 7-segment display if Not in tuner mode AND if not Loop Ctrl bottom row footswitch was pressed */
		if ((SystemState != TUNER) && !(SystemState == RUN_LOOP_CTRL && (sw & 0x0F)))
 9b2:	80 91 0e 02 	lds	r24, 0x020E	; 0x80020e <SystemState>
 9b6:	83 30       	cpi	r24, 0x03	; 3
 9b8:	69 f0       	breq	.+26     	; 0x9d4 <_Z28System_HandleFootswitchInput16Footswitch_Stateh+0x68>
 9ba:	80 91 0e 02 	lds	r24, 0x020E	; 0x80020e <SystemState>
 9be:	82 30       	cpi	r24, 0x02	; 2
 9c0:	19 f4       	brne	.+6      	; 0x9c8 <_Z28System_HandleFootswitchInput16Footswitch_Stateh+0x5c>
 9c2:	89 81       	ldd	r24, Y+1	; 0x01
 9c4:	8f 70       	andi	r24, 0x0F	; 15
 9c6:	31 f4       	brne	.+12     	; 0x9d4 <_Z28System_HandleFootswitchInput16Footswitch_Stateh+0x68>
		{
			Segment7_WriteAll('T', 'u', 'n', 'r');
 9c8:	22 e7       	ldi	r18, 0x72	; 114
 9ca:	4e e6       	ldi	r20, 0x6E	; 110
 9cc:	65 e7       	ldi	r22, 0x75	; 117
 9ce:	84 e5       	ldi	r24, 0x54	; 84
 9d0:	0e 94 9c 04 	call	0x938	; 0x938 <_Z17Segment7_WriteAllcccc>
		}
	}
}
 9d4:	0f 90       	pop	r0
 9d6:	df 91       	pop	r29
 9d8:	cf 91       	pop	r28
 9da:	08 95       	ret

000009dc <_Z26System_HandleMasterCommand3CMDhPh>:

unsigned char System_HandleMasterCommand(CMD cmd, uint8_t length, uint8_t *dat)
{
 9dc:	cf 93       	push	r28
 9de:	df 93       	push	r29
	unsigned char response = ACK_BYTE;
	
	if (cmd == UpdateSystemState && length == 1)
 9e0:	85 3d       	cpi	r24, 0xD5	; 213
 9e2:	41 f4       	brne	.+16     	; 0x9f4 <_Z26System_HandleMasterCommand3CMDhPh+0x18>
 9e4:	61 30       	cpi	r22, 0x01	; 1
 9e6:	81 f5       	brne	.+96     	; 0xa48 <_Z26System_HandleMasterCommand3CMDhPh+0x6c>
	{
		SystemState = (System_State)dat[0];
 9e8:	fa 01       	movw	r30, r20
 9ea:	80 81       	ld	r24, Z
 9ec:	80 93 0e 02 	sts	0x020E, r24	; 0x80020e <SystemState>
	}
}

unsigned char System_HandleMasterCommand(CMD cmd, uint8_t length, uint8_t *dat)
{
	unsigned char response = ACK_BYTE;
 9f0:	8c ea       	ldi	r24, 0xAC	; 172
	
	if (cmd == UpdateSystemState && length == 1)
	{
		SystemState = (System_State)dat[0];
 9f2:	33 c0       	rjmp	.+102    	; 0xa5a <_Z26System_HandleMasterCommand3CMDhPh+0x7e>
 9f4:	ea 01       	movw	r28, r20
	}
	else if (cmd == Update7segments && length == 4)
 9f6:	87 3d       	cpi	r24, 0xD7	; 215
 9f8:	51 f4       	brne	.+20     	; 0xa0e <_Z26System_HandleMasterCommand3CMDhPh+0x32>
 9fa:	64 30       	cpi	r22, 0x04	; 4
 9fc:	39 f5       	brne	.+78     	; 0xa4c <_Z26System_HandleMasterCommand3CMDhPh+0x70>
	{
		Segment7_WriteAll((char)dat[0], (char)dat[1], (char)dat[2], (char)dat[3]);
 9fe:	2b 81       	ldd	r18, Y+3	; 0x03
 a00:	4a 81       	ldd	r20, Y+2	; 0x02
 a02:	69 81       	ldd	r22, Y+1	; 0x01
 a04:	88 81       	ld	r24, Y
 a06:	0e 94 9c 04 	call	0x938	; 0x938 <_Z17Segment7_WriteAllcccc>
	}
}

unsigned char System_HandleMasterCommand(CMD cmd, uint8_t length, uint8_t *dat)
{
	unsigned char response = ACK_BYTE;
 a0a:	8c ea       	ldi	r24, 0xAC	; 172
	{
		SystemState = (System_State)dat[0];
	}
	else if (cmd == Update7segments && length == 4)
	{
		Segment7_WriteAll((char)dat[0], (char)dat[1], (char)dat[2], (char)dat[3]);
 a0c:	26 c0       	rjmp	.+76     	; 0xa5a <_Z26System_HandleMasterCommand3CMDhPh+0x7e>
	}
	else if (cmd == UpdatePresetLoopLEDs && length == 1)
 a0e:	80 3d       	cpi	r24, 0xD0	; 208
 a10:	49 f4       	brne	.+18     	; 0xa24 <_Z26System_HandleMasterCommand3CMDhPh+0x48>
 a12:	61 30       	cpi	r22, 0x01	; 1
 a14:	e9 f4       	brne	.+58     	; 0xa50 <_Z26System_HandleMasterCommand3CMDhPh+0x74>
	{
		MCP23017_WriteReg(MCP23017_ADDR_SWITCH_INDICATOR, OLATA, dat[0]);
 a16:	48 81       	ld	r20, Y
 a18:	64 e1       	ldi	r22, 0x14	; 20
 a1a:	80 e0       	ldi	r24, 0x00	; 0
 a1c:	0e 94 44 04 	call	0x888	; 0x888 <_Z17MCP23017_WriteReghhh>
	}
}

unsigned char System_HandleMasterCommand(CMD cmd, uint8_t length, uint8_t *dat)
{
	unsigned char response = ACK_BYTE;
 a20:	8c ea       	ldi	r24, 0xAC	; 172
	{
		Segment7_WriteAll((char)dat[0], (char)dat[1], (char)dat[2], (char)dat[3]);
	}
	else if (cmd == UpdatePresetLoopLEDs && length == 1)
	{
		MCP23017_WriteReg(MCP23017_ADDR_SWITCH_INDICATOR, OLATA, dat[0]);
 a22:	1b c0       	rjmp	.+54     	; 0xa5a <_Z26System_HandleMasterCommand3CMDhPh+0x7e>
	}
	else if (cmd == UpdateTunerLEDs && length == 2)
 a24:	83 3d       	cpi	r24, 0xD3	; 211
 a26:	b1 f4       	brne	.+44     	; 0xa54 <_Z26System_HandleMasterCommand3CMDhPh+0x78>
 a28:	62 30       	cpi	r22, 0x02	; 2
 a2a:	b1 f4       	brne	.+44     	; 0xa58 <_Z26System_HandleMasterCommand3CMDhPh+0x7c>
	{
		MCP23017_WriteReg(MCP23017_ADDR_TUNER_DISPLAY, OLATA, dat[0]);
 a2c:	48 81       	ld	r20, Y
 a2e:	64 e1       	ldi	r22, 0x14	; 20
 a30:	84 e0       	ldi	r24, 0x04	; 4
 a32:	0e 94 44 04 	call	0x888	; 0x888 <_Z17MCP23017_WriteReghhh>
				
		if (dat[1])
 a36:	89 81       	ldd	r24, Y+1	; 0x01
 a38:	88 23       	and	r24, r24
 a3a:	19 f0       	breq	.+6      	; 0xa42 <_Z26System_HandleMasterCommand3CMDhPh+0x66>
		{
			TUNER_GREEN_LED_PORT |= TUNER_GREEN_LED_MASK;
 a3c:	28 9a       	sbi	0x05, 0	; 5
	}
}

unsigned char System_HandleMasterCommand(CMD cmd, uint8_t length, uint8_t *dat)
{
	unsigned char response = ACK_BYTE;
 a3e:	8c ea       	ldi	r24, 0xAC	; 172
 a40:	0c c0       	rjmp	.+24     	; 0xa5a <_Z26System_HandleMasterCommand3CMDhPh+0x7e>
		{
			TUNER_GREEN_LED_PORT |= TUNER_GREEN_LED_MASK;
		}
		else
		{
			TUNER_GREEN_LED_PORT &= ~TUNER_GREEN_LED_MASK;
 a42:	28 98       	cbi	0x05, 0	; 5
	}
}

unsigned char System_HandleMasterCommand(CMD cmd, uint8_t length, uint8_t *dat)
{
	unsigned char response = ACK_BYTE;
 a44:	8c ea       	ldi	r24, 0xAC	; 172
 a46:	09 c0       	rjmp	.+18     	; 0xa5a <_Z26System_HandleMasterCommand3CMDhPh+0x7e>
			TUNER_GREEN_LED_PORT &= ~TUNER_GREEN_LED_MASK;
		}
	}
	else
	{
		response = NACK_BYTE;
 a48:	8a e2       	ldi	r24, 0x2A	; 42
 a4a:	07 c0       	rjmp	.+14     	; 0xa5a <_Z26System_HandleMasterCommand3CMDhPh+0x7e>
 a4c:	8a e2       	ldi	r24, 0x2A	; 42
 a4e:	05 c0       	rjmp	.+10     	; 0xa5a <_Z26System_HandleMasterCommand3CMDhPh+0x7e>
 a50:	8a e2       	ldi	r24, 0x2A	; 42
 a52:	03 c0       	rjmp	.+6      	; 0xa5a <_Z26System_HandleMasterCommand3CMDhPh+0x7e>
 a54:	8a e2       	ldi	r24, 0x2A	; 42
 a56:	01 c0       	rjmp	.+2      	; 0xa5a <_Z26System_HandleMasterCommand3CMDhPh+0x7e>
 a58:	8a e2       	ldi	r24, 0x2A	; 42
	}
	
	return response;
}
 a5a:	df 91       	pop	r29
 a5c:	cf 91       	pop	r28
 a5e:	08 95       	ret

00000a60 <_Z11Timer0_Initv>:

uint32_t Timer0_ms2cnt(uint32_t ms)
{
	ms *= 1000;
	return (uint32_t)(ms / TIMER0_PERIOD_US);
}
 a60:	84 b5       	in	r24, 0x24	; 36
 a62:	82 60       	ori	r24, 0x02	; 2
 a64:	84 bd       	out	0x24, r24	; 36
 a66:	16 bc       	out	0x26, r1	; 38
 a68:	8c e7       	ldi	r24, 0x7C	; 124
 a6a:	87 bd       	out	0x27, r24	; 39
 a6c:	ee e6       	ldi	r30, 0x6E	; 110
 a6e:	f0 e0       	ldi	r31, 0x00	; 0
 a70:	80 81       	ld	r24, Z
 a72:	82 60       	ori	r24, 0x02	; 2
 a74:	80 83       	st	Z, r24
 a76:	85 b5       	in	r24, 0x25	; 37
 a78:	84 60       	ori	r24, 0x04	; 4
 a7a:	85 bd       	out	0x25, r24	; 37
 a7c:	08 95       	ret

00000a7e <__vector_14>:

/* Timer0 Compare A Match Interrupt Service Routine */
ISR(TIMER0_COMPA_vect)
{
 a7e:	1f 92       	push	r1
 a80:	0f 92       	push	r0
 a82:	0f b6       	in	r0, 0x3f	; 63
 a84:	0f 92       	push	r0
 a86:	11 24       	eor	r1, r1
 a88:	2f 93       	push	r18
 a8a:	8f 93       	push	r24
 a8c:	9f 93       	push	r25
	/* Overflow counter for delaying transmit to Master */
	if (MasterCom_DelayTXOvfCnt)
 a8e:	80 91 0c 02 	lds	r24, 0x020C	; 0x80020c <MasterCom_DelayTXOvfCnt>
 a92:	88 23       	and	r24, r24
 a94:	61 f0       	breq	.+24     	; 0xaae <__vector_14+0x30>
	{
		if (++MasterCom_DelayTXOvfCnt > MASTERCOM_DELAY_TX_TIMEOUT)
 a96:	80 91 0c 02 	lds	r24, 0x020C	; 0x80020c <MasterCom_DelayTXOvfCnt>
 a9a:	8f 5f       	subi	r24, 0xFF	; 255
 a9c:	80 93 0c 02 	sts	0x020C, r24	; 0x80020c <MasterCom_DelayTXOvfCnt>
 aa0:	84 30       	cpi	r24, 0x04	; 4
 aa2:	28 f0       	brcs	.+10     	; 0xaae <__vector_14+0x30>
		{
			MasterCom_DelayTXOvfCnt = 0;	// Stop overflow counter
 aa4:	10 92 0c 02 	sts	0x020C, r1	; 0x80020c <MasterCom_DelayTXOvfCnt>
			MasterCom_DelayTxFlag = true;
 aa8:	81 e0       	ldi	r24, 0x01	; 1
 aaa:	80 93 0d 02 	sts	0x020D, r24	; 0x80020d <MasterCom_DelayTxFlag>
		}
	}

	/* Overflow counter for Master response timeout and heartbeat */
	if (++MasterCom_ResponseTimeoutOvfCnt > MASTERCOM_RESPONSE_TIMEOUT)
 aae:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <MasterCom_ResponseTimeoutOvfCnt>
 ab2:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <MasterCom_ResponseTimeoutOvfCnt+0x1>
 ab6:	01 96       	adiw	r24, 0x01	; 1
 ab8:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <MasterCom_ResponseTimeoutOvfCnt+0x1>
 abc:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <MasterCom_ResponseTimeoutOvfCnt>
 ac0:	89 3e       	cpi	r24, 0xE9	; 233
 ac2:	93 40       	sbci	r25, 0x03	; 3
 ac4:	40 f0       	brcs	.+16     	; 0xad6 <__vector_14+0x58>
	{
		MasterCom_ResponseTimeoutOvfCnt = 1;	// Reset overflow counter
 ac6:	81 e0       	ldi	r24, 0x01	; 1
 ac8:	90 e0       	ldi	r25, 0x00	; 0
 aca:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <MasterCom_ResponseTimeoutOvfCnt+0x1>
 ace:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <MasterCom_ResponseTimeoutOvfCnt>
		MasterCom_ResponseTimeoutFlag = true;
 ad2:	80 93 0b 02 	sts	0x020B, r24	; 0x80020b <MasterCom_ResponseTimeoutFlag>
	}
	
	/* Overflow counter for handling Footswitch press timing */
	if (Footswitch_TimerOvfCnt)
 ad6:	80 91 83 01 	lds	r24, 0x0183	; 0x800183 <Footswitch_TimerOvfCnt>
 ada:	90 91 84 01 	lds	r25, 0x0184	; 0x800184 <Footswitch_TimerOvfCnt+0x1>
 ade:	89 2b       	or	r24, r25
 ae0:	09 f4       	brne	.+2      	; 0xae4 <__vector_14+0x66>
 ae2:	43 c0       	rjmp	.+134    	; 0xb6a <__vector_14+0xec>
	{
		Footswitch_TimerOvfCnt++;
 ae4:	80 91 83 01 	lds	r24, 0x0183	; 0x800183 <Footswitch_TimerOvfCnt>
 ae8:	90 91 84 01 	lds	r25, 0x0184	; 0x800184 <Footswitch_TimerOvfCnt+0x1>
 aec:	01 96       	adiw	r24, 0x01	; 1
 aee:	90 93 84 01 	sts	0x0184, r25	; 0x800184 <Footswitch_TimerOvfCnt+0x1>
 af2:	80 93 83 01 	sts	0x0183, r24	; 0x800183 <Footswitch_TimerOvfCnt>
			
		if (Footswitch_TimerOvfCnt > FOOTSWITCH_LONG_LONG_PRESS_TIMEOUT && Footswitch_PressState == PRESSED)
 af6:	80 91 83 01 	lds	r24, 0x0183	; 0x800183 <Footswitch_TimerOvfCnt>
 afa:	90 91 84 01 	lds	r25, 0x0184	; 0x800184 <Footswitch_TimerOvfCnt+0x1>
 afe:	81 3b       	cpi	r24, 0xB1	; 177
 b00:	94 40       	sbci	r25, 0x04	; 4
 b02:	b0 f0       	brcs	.+44     	; 0xb30 <__vector_14+0xb2>
 b04:	80 91 88 01 	lds	r24, 0x0188	; 0x800188 <Footswitch_PressState>
 b08:	84 30       	cpi	r24, 0x04	; 4
 b0a:	91 f4       	brne	.+36     	; 0xb30 <__vector_14+0xb2>
 b0c:	0a c0       	rjmp	.+20     	; 0xb22 <__vector_14+0xa4>
		{
			Footswitch_TimerFlag = true;
			Footswitch_PressState = STILL_PRESSED;
		}
		else if (Footswitch_TimerOvfCnt > FOOTSWITCH_LONG_PRESS_TIMEOUT  && Footswitch_PressState == WAITING)
 b0e:	80 91 88 01 	lds	r24, 0x0188	; 0x800188 <Footswitch_PressState>
 b12:	82 30       	cpi	r24, 0x02	; 2
 b14:	e1 f4       	brne	.+56     	; 0xb4e <__vector_14+0xd0>
 b16:	14 c0       	rjmp	.+40     	; 0xb40 <__vector_14+0xc2>
		{
			Footswitch_PressState = PRESSED;
			Footswitch_TimerFlag = true;
		}
		else if (Footswitch_TimerOvfCnt > FOOTSWITCH_SHORT_PRESS_TIMEOUT && Footswitch_PressState == PRESS_SENSED)
 b18:	80 91 88 01 	lds	r24, 0x0188	; 0x800188 <Footswitch_PressState>
 b1c:	81 30       	cpi	r24, 0x01	; 1
 b1e:	29 f5       	brne	.+74     	; 0xb6a <__vector_14+0xec>
 b20:	1e c0       	rjmp	.+60     	; 0xb5e <__vector_14+0xe0>
	{
		Footswitch_TimerOvfCnt++;
			
		if (Footswitch_TimerOvfCnt > FOOTSWITCH_LONG_LONG_PRESS_TIMEOUT && Footswitch_PressState == PRESSED)
		{
			Footswitch_TimerFlag = true;
 b22:	81 e0       	ldi	r24, 0x01	; 1
 b24:	80 93 82 01 	sts	0x0182, r24	; 0x800182 <__data_end>
			Footswitch_PressState = STILL_PRESSED;
 b28:	85 e0       	ldi	r24, 0x05	; 5
 b2a:	80 93 88 01 	sts	0x0188, r24	; 0x800188 <Footswitch_PressState>
 b2e:	1d c0       	rjmp	.+58     	; 0xb6a <__vector_14+0xec>
		}
		else if (Footswitch_TimerOvfCnt > FOOTSWITCH_LONG_PRESS_TIMEOUT  && Footswitch_PressState == WAITING)
 b30:	80 91 83 01 	lds	r24, 0x0183	; 0x800183 <Footswitch_TimerOvfCnt>
 b34:	90 91 84 01 	lds	r25, 0x0184	; 0x800184 <Footswitch_TimerOvfCnt+0x1>
 b38:	89 35       	cpi	r24, 0x59	; 89
 b3a:	92 40       	sbci	r25, 0x02	; 2
 b3c:	40 f7       	brcc	.-48     	; 0xb0e <__vector_14+0x90>
 b3e:	07 c0       	rjmp	.+14     	; 0xb4e <__vector_14+0xd0>
		{
			Footswitch_PressState = PRESSED;
 b40:	84 e0       	ldi	r24, 0x04	; 4
 b42:	80 93 88 01 	sts	0x0188, r24	; 0x800188 <Footswitch_PressState>
			Footswitch_TimerFlag = true;
 b46:	81 e0       	ldi	r24, 0x01	; 1
 b48:	80 93 82 01 	sts	0x0182, r24	; 0x800182 <__data_end>
 b4c:	0e c0       	rjmp	.+28     	; 0xb6a <__vector_14+0xec>
		}
		else if (Footswitch_TimerOvfCnt > FOOTSWITCH_SHORT_PRESS_TIMEOUT && Footswitch_PressState == PRESS_SENSED)
 b4e:	80 91 83 01 	lds	r24, 0x0183	; 0x800183 <Footswitch_TimerOvfCnt>
 b52:	90 91 84 01 	lds	r25, 0x0184	; 0x800184 <Footswitch_TimerOvfCnt+0x1>
 b56:	8d 38       	cpi	r24, 0x8D	; 141
 b58:	91 05       	cpc	r25, r1
 b5a:	f0 f6       	brcc	.-68     	; 0xb18 <__vector_14+0x9a>
 b5c:	06 c0       	rjmp	.+12     	; 0xb6a <__vector_14+0xec>
		{
			Footswitch_PressState = WAITING;
 b5e:	82 e0       	ldi	r24, 0x02	; 2
 b60:	80 93 88 01 	sts	0x0188, r24	; 0x800188 <Footswitch_PressState>
			Footswitch_TimerFlag = true;
 b64:	81 e0       	ldi	r24, 0x01	; 1
 b66:	80 93 82 01 	sts	0x0182, r24	; 0x800182 <__data_end>
		}
	}
 b6a:	9f 91       	pop	r25
 b6c:	8f 91       	pop	r24
 b6e:	2f 91       	pop	r18
 b70:	0f 90       	pop	r0
 b72:	0f be       	out	0x3f, r0	; 63
 b74:	0f 90       	pop	r0
 b76:	1f 90       	pop	r1
 b78:	18 95       	reti

00000b7a <_Z9UART_Initjhh>:
	
	for (i = 0; i < length; i++)
	{
		UART_QueueChar(array[i]);
	}
}
 b7a:	cf 93       	push	r28
 b7c:	df 93       	push	r29
 b7e:	d6 2f       	mov	r29, r22
 b80:	c4 2f       	mov	r28, r20
 b82:	51 9a       	sbi	0x0a, 1	; 10
 b84:	59 9a       	sbi	0x0b, 1	; 11
 b86:	10 92 13 02 	sts	0x0213, r1	; 0x800213 <_ZL11UART_TxHead>
 b8a:	10 92 12 02 	sts	0x0212, r1	; 0x800212 <_ZL11UART_TxTail>
 b8e:	10 92 11 02 	sts	0x0211, r1	; 0x800211 <_ZL11UART_RxHead>
 b92:	10 92 10 02 	sts	0x0210, r1	; 0x800210 <_ZL11UART_RxTail>
 b96:	a0 e0       	ldi	r26, 0x00	; 0
 b98:	b0 e0       	ldi	r27, 0x00	; 0
 b9a:	88 0f       	add	r24, r24
 b9c:	99 1f       	adc	r25, r25
 b9e:	aa 1f       	adc	r26, r26
 ba0:	bb 1f       	adc	r27, r27
 ba2:	88 0f       	add	r24, r24
 ba4:	99 1f       	adc	r25, r25
 ba6:	aa 1f       	adc	r26, r26
 ba8:	bb 1f       	adc	r27, r27
 baa:	9c 01       	movw	r18, r24
 bac:	ad 01       	movw	r20, r26
 bae:	22 0f       	add	r18, r18
 bb0:	33 1f       	adc	r19, r19
 bb2:	44 1f       	adc	r20, r20
 bb4:	55 1f       	adc	r21, r21
 bb6:	22 0f       	add	r18, r18
 bb8:	33 1f       	adc	r19, r19
 bba:	44 1f       	adc	r20, r20
 bbc:	55 1f       	adc	r21, r21
 bbe:	60 e0       	ldi	r22, 0x00	; 0
 bc0:	74 e2       	ldi	r23, 0x24	; 36
 bc2:	84 ef       	ldi	r24, 0xF4	; 244
 bc4:	90 e0       	ldi	r25, 0x00	; 0
 bc6:	0e 94 cf 06 	call	0xd9e	; 0xd9e <__udivmodsi4>
 bca:	21 50       	subi	r18, 0x01	; 1
 bcc:	31 09       	sbc	r19, r1
 bce:	30 93 c5 00 	sts	0x00C5, r19	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
 bd2:	20 93 c4 00 	sts	0x00C4, r18	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
 bd6:	e2 ec       	ldi	r30, 0xC2	; 194
 bd8:	f0 e0       	ldi	r31, 0x00	; 0
 bda:	80 81       	ld	r24, Z
 bdc:	8f 73       	andi	r24, 0x3F	; 63
 bde:	80 83       	st	Z, r24
 be0:	d2 30       	cpi	r29, 0x02	; 2
 be2:	21 f4       	brne	.+8      	; 0xbec <_Z9UART_Initjhh+0x72>
 be4:	80 81       	ld	r24, Z
 be6:	88 60       	ori	r24, 0x08	; 8
 be8:	80 83       	st	Z, r24
 bea:	05 c0       	rjmp	.+10     	; 0xbf6 <_Z9UART_Initjhh+0x7c>
 bec:	e2 ec       	ldi	r30, 0xC2	; 194
 bee:	f0 e0       	ldi	r31, 0x00	; 0
 bf0:	80 81       	ld	r24, Z
 bf2:	87 7f       	andi	r24, 0xF7	; 247
 bf4:	80 83       	st	Z, r24
 bf6:	c2 30       	cpi	r28, 0x02	; 2
 bf8:	49 f4       	brne	.+18     	; 0xc0c <_Z9UART_Initjhh+0x92>
 bfa:	e2 ec       	ldi	r30, 0xC2	; 194
 bfc:	f0 e0       	ldi	r31, 0x00	; 0
 bfe:	80 81       	ld	r24, Z
 c00:	8f 7e       	andi	r24, 0xEF	; 239
 c02:	80 83       	st	Z, r24
 c04:	80 81       	ld	r24, Z
 c06:	80 62       	ori	r24, 0x20	; 32
 c08:	80 83       	st	Z, r24
 c0a:	0d c0       	rjmp	.+26     	; 0xc26 <_Z9UART_Initjhh+0xac>
 c0c:	c3 30       	cpi	r28, 0x03	; 3
 c0e:	31 f4       	brne	.+12     	; 0xc1c <_Z9UART_Initjhh+0xa2>
 c10:	e2 ec       	ldi	r30, 0xC2	; 194
 c12:	f0 e0       	ldi	r31, 0x00	; 0
 c14:	80 81       	ld	r24, Z
 c16:	80 63       	ori	r24, 0x30	; 48
 c18:	80 83       	st	Z, r24
 c1a:	05 c0       	rjmp	.+10     	; 0xc26 <_Z9UART_Initjhh+0xac>
 c1c:	e2 ec       	ldi	r30, 0xC2	; 194
 c1e:	f0 e0       	ldi	r31, 0x00	; 0
 c20:	80 81       	ld	r24, Z
 c22:	8f 7c       	andi	r24, 0xCF	; 207
 c24:	80 83       	st	Z, r24
 c26:	e2 ec       	ldi	r30, 0xC2	; 194
 c28:	f0 e0       	ldi	r31, 0x00	; 0
 c2a:	80 81       	ld	r24, Z
 c2c:	86 60       	ori	r24, 0x06	; 6
 c2e:	80 83       	st	Z, r24
 c30:	e1 ec       	ldi	r30, 0xC1	; 193
 c32:	f0 e0       	ldi	r31, 0x00	; 0
 c34:	80 81       	ld	r24, Z
 c36:	80 6a       	ori	r24, 0xA0	; 160
 c38:	80 83       	st	Z, r24
 c3a:	80 81       	ld	r24, Z
 c3c:	88 61       	ori	r24, 0x18	; 24
 c3e:	80 83       	st	Z, r24
 c40:	df 91       	pop	r29
 c42:	cf 91       	pop	r28
 c44:	08 95       	ret

00000c46 <_Z12UART_GetCharv>:
 c46:	90 91 11 02 	lds	r25, 0x0211	; 0x800211 <_ZL11UART_RxHead>
 c4a:	80 91 10 02 	lds	r24, 0x0210	; 0x800210 <_ZL11UART_RxTail>
 c4e:	98 17       	cp	r25, r24
 c50:	91 f0       	breq	.+36     	; 0xc76 <_Z12UART_GetCharv+0x30>
 c52:	e0 91 10 02 	lds	r30, 0x0210	; 0x800210 <_ZL11UART_RxTail>
 c56:	ef 5f       	subi	r30, 0xFF	; 255
 c58:	ef 71       	andi	r30, 0x1F	; 31
 c5a:	e0 93 10 02 	sts	0x0210, r30	; 0x800210 <_ZL11UART_RxTail>
 c5e:	f0 e0       	ldi	r31, 0x00	; 0
 c60:	ec 5e       	subi	r30, 0xEC	; 236
 c62:	fd 4f       	sbci	r31, 0xFD	; 253
 c64:	20 81       	ld	r18, Z
 c66:	80 91 0f 02 	lds	r24, 0x020F	; 0x80020f <_ZL16UART_LastRxError>
 c6a:	90 e0       	ldi	r25, 0x00	; 0
 c6c:	98 2f       	mov	r25, r24
 c6e:	88 27       	eor	r24, r24
 c70:	82 0f       	add	r24, r18
 c72:	91 1d       	adc	r25, r1
 c74:	08 95       	ret
 c76:	80 e0       	ldi	r24, 0x00	; 0
 c78:	91 e0       	ldi	r25, 0x01	; 1
 c7a:	08 95       	ret

00000c7c <_Z14UART_Availablev>:
 c7c:	80 91 11 02 	lds	r24, 0x0211	; 0x800211 <_ZL11UART_RxHead>
 c80:	20 91 10 02 	lds	r18, 0x0210	; 0x800210 <_ZL11UART_RxTail>
 c84:	90 e0       	ldi	r25, 0x00	; 0
 c86:	4f 96       	adiw	r24, 0x1f	; 31
 c88:	82 1b       	sub	r24, r18
 c8a:	91 09       	sbc	r25, r1
 c8c:	6f e1       	ldi	r22, 0x1F	; 31
 c8e:	70 e0       	ldi	r23, 0x00	; 0
 c90:	0e 94 bb 06 	call	0xd76	; 0xd76 <__divmodhi4>
 c94:	08 95       	ret

00000c96 <_Z14UART_QueueCharh>:
 c96:	90 91 13 02 	lds	r25, 0x0213	; 0x800213 <_ZL11UART_TxHead>
 c9a:	9f 5f       	subi	r25, 0xFF	; 255
 c9c:	9f 71       	andi	r25, 0x1F	; 31
 c9e:	20 91 12 02 	lds	r18, 0x0212	; 0x800212 <_ZL11UART_TxTail>
 ca2:	92 17       	cp	r25, r18
 ca4:	51 f0       	breq	.+20     	; 0xcba <_Z14UART_QueueCharh+0x24>
 ca6:	e9 2f       	mov	r30, r25
 ca8:	f0 e0       	ldi	r31, 0x00	; 0
 caa:	ec 5c       	subi	r30, 0xCC	; 204
 cac:	fd 4f       	sbci	r31, 0xFD	; 253
 cae:	80 83       	st	Z, r24
 cb0:	90 93 13 02 	sts	0x0213, r25	; 0x800213 <_ZL11UART_TxHead>
 cb4:	81 e0       	ldi	r24, 0x01	; 1
 cb6:	90 e0       	ldi	r25, 0x00	; 0
 cb8:	08 95       	ret
 cba:	80 e0       	ldi	r24, 0x00	; 0
 cbc:	90 e0       	ldi	r25, 0x00	; 0
 cbe:	08 95       	ret

00000cc0 <_Z13UART_PutQueuev>:


void UART_PutQueue(void)
{
	/* enable UDRE interrupt */
	UCSR0B |= (1 << UDRIE0);
 cc0:	e1 ec       	ldi	r30, 0xC1	; 193
 cc2:	f0 e0       	ldi	r31, 0x00	; 0
 cc4:	80 81       	ld	r24, Z
 cc6:	80 62       	ori	r24, 0x20	; 32
 cc8:	80 83       	st	Z, r24
 cca:	08 95       	ret

00000ccc <__vector_18>:
/*************************************************************************
Function: UART0 Receive Complete interrupt
Purpose:  called when the UART has received a character
**************************************************************************/
ISR(USART_RX_vect)
{
 ccc:	1f 92       	push	r1
 cce:	0f 92       	push	r0
 cd0:	0f b6       	in	r0, 0x3f	; 63
 cd2:	0f 92       	push	r0
 cd4:	11 24       	eor	r1, r1
 cd6:	2f 93       	push	r18
 cd8:	8f 93       	push	r24
 cda:	9f 93       	push	r25
 cdc:	ef 93       	push	r30
 cde:	ff 93       	push	r31
	unsigned char usr;
	unsigned char lastRxError;
    
    
	/* read UART status register and UART data register */
	usr  = UCSR0A;
 ce0:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
	data = UDR0;
 ce4:	20 91 c6 00 	lds	r18, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
    
	/* */
	lastRxError = (usr & (FE0 | DOR0));
 ce8:	87 70       	andi	r24, 0x07	; 7
    
	/* calculate buffer index */
	tmphead = ( UART_RxHead + 1) & UART_RX_BUFFER_MASK;
 cea:	e0 91 11 02 	lds	r30, 0x0211	; 0x800211 <_ZL11UART_RxHead>
 cee:	ef 5f       	subi	r30, 0xFF	; 255
 cf0:	ef 71       	andi	r30, 0x1F	; 31
    
	if ( tmphead == UART_RxTail )
 cf2:	90 91 10 02 	lds	r25, 0x0210	; 0x800210 <_ZL11UART_RxTail>
 cf6:	e9 17       	cp	r30, r25
 cf8:	39 f0       	breq	.+14     	; 0xd08 <__vector_18+0x3c>
		lastRxError = UART_BUFFER_OVERFLOW >> 8;
	}
	else
	{
		/* store new index */
		UART_RxHead = tmphead;
 cfa:	e0 93 11 02 	sts	0x0211, r30	; 0x800211 <_ZL11UART_RxHead>
		/* store received data in buffer */
		UART_RxBuf[tmphead] = data;
 cfe:	f0 e0       	ldi	r31, 0x00	; 0
 d00:	ec 5e       	subi	r30, 0xEC	; 236
 d02:	fd 4f       	sbci	r31, 0xFD	; 253
 d04:	20 83       	st	Z, r18
 d06:	01 c0       	rjmp	.+2      	; 0xd0a <__vector_18+0x3e>
	tmphead = ( UART_RxHead + 1) & UART_RX_BUFFER_MASK;
    
	if ( tmphead == UART_RxTail )
	{
		/* error: receive buffer overflow */
		lastRxError = UART_BUFFER_OVERFLOW >> 8;
 d08:	82 e0       	ldi	r24, 0x02	; 2
		UART_RxHead = tmphead;
		/* store received data in buffer */
		UART_RxBuf[tmphead] = data;
	}

	UART_LastRxError = lastRxError;
 d0a:	80 93 0f 02 	sts	0x020F, r24	; 0x80020f <_ZL16UART_LastRxError>
}
 d0e:	ff 91       	pop	r31
 d10:	ef 91       	pop	r30
 d12:	9f 91       	pop	r25
 d14:	8f 91       	pop	r24
 d16:	2f 91       	pop	r18
 d18:	0f 90       	pop	r0
 d1a:	0f be       	out	0x3f, r0	; 63
 d1c:	0f 90       	pop	r0
 d1e:	1f 90       	pop	r1
 d20:	18 95       	reti

00000d22 <__vector_19>:
/*************************************************************************
Function: UART Data Register Empty interrupt
Purpose:  called when the UART is ready to transmit the next byte
**************************************************************************/
ISR(USART_UDRE_vect)
{
 d22:	1f 92       	push	r1
 d24:	0f 92       	push	r0
 d26:	0f b6       	in	r0, 0x3f	; 63
 d28:	0f 92       	push	r0
 d2a:	11 24       	eor	r1, r1
 d2c:	8f 93       	push	r24
 d2e:	9f 93       	push	r25
 d30:	ef 93       	push	r30
 d32:	ff 93       	push	r31
	unsigned char tmptail;
    
	if ( UART_TxHead != UART_TxTail)
 d34:	90 91 13 02 	lds	r25, 0x0213	; 0x800213 <_ZL11UART_TxHead>
 d38:	80 91 12 02 	lds	r24, 0x0212	; 0x800212 <_ZL11UART_TxTail>
 d3c:	98 17       	cp	r25, r24
 d3e:	69 f0       	breq	.+26     	; 0xd5a <__vector_19+0x38>
	{
		/* calculate and store new buffer index */
		tmptail = (UART_TxTail + 1) & UART_TX_BUFFER_MASK;
 d40:	e0 91 12 02 	lds	r30, 0x0212	; 0x800212 <_ZL11UART_TxTail>
 d44:	ef 5f       	subi	r30, 0xFF	; 255
 d46:	ef 71       	andi	r30, 0x1F	; 31
		UART_TxTail = tmptail;
 d48:	e0 93 12 02 	sts	0x0212, r30	; 0x800212 <_ZL11UART_TxTail>

		/* get one byte from buffer and write it to UART */
		UDR0 = UART_TxBuf[tmptail];  /* start transmission */
 d4c:	f0 e0       	ldi	r31, 0x00	; 0
 d4e:	ec 5c       	subi	r30, 0xCC	; 204
 d50:	fd 4f       	sbci	r31, 0xFD	; 253
 d52:	80 81       	ld	r24, Z
 d54:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
 d58:	05 c0       	rjmp	.+10     	; 0xd64 <__vector_19+0x42>
	}
	else
	{
		/* tx buffer empty, disable UDRE interrupt */
		UCSR0B &= ~(1 << UDRIE0);
 d5a:	e1 ec       	ldi	r30, 0xC1	; 193
 d5c:	f0 e0       	ldi	r31, 0x00	; 0
 d5e:	80 81       	ld	r24, Z
 d60:	8f 7d       	andi	r24, 0xDF	; 223
 d62:	80 83       	st	Z, r24
	}
}
 d64:	ff 91       	pop	r31
 d66:	ef 91       	pop	r30
 d68:	9f 91       	pop	r25
 d6a:	8f 91       	pop	r24
 d6c:	0f 90       	pop	r0
 d6e:	0f be       	out	0x3f, r0	; 63
 d70:	0f 90       	pop	r0
 d72:	1f 90       	pop	r1
 d74:	18 95       	reti

00000d76 <__divmodhi4>:
 d76:	97 fb       	bst	r25, 7
 d78:	07 2e       	mov	r0, r23
 d7a:	16 f4       	brtc	.+4      	; 0xd80 <__divmodhi4+0xa>
 d7c:	00 94       	com	r0
 d7e:	07 d0       	rcall	.+14     	; 0xd8e <__divmodhi4_neg1>
 d80:	77 fd       	sbrc	r23, 7
 d82:	09 d0       	rcall	.+18     	; 0xd96 <__divmodhi4_neg2>
 d84:	0e 94 f1 06 	call	0xde2	; 0xde2 <__udivmodhi4>
 d88:	07 fc       	sbrc	r0, 7
 d8a:	05 d0       	rcall	.+10     	; 0xd96 <__divmodhi4_neg2>
 d8c:	3e f4       	brtc	.+14     	; 0xd9c <__divmodhi4_exit>

00000d8e <__divmodhi4_neg1>:
 d8e:	90 95       	com	r25
 d90:	81 95       	neg	r24
 d92:	9f 4f       	sbci	r25, 0xFF	; 255
 d94:	08 95       	ret

00000d96 <__divmodhi4_neg2>:
 d96:	70 95       	com	r23
 d98:	61 95       	neg	r22
 d9a:	7f 4f       	sbci	r23, 0xFF	; 255

00000d9c <__divmodhi4_exit>:
 d9c:	08 95       	ret

00000d9e <__udivmodsi4>:
 d9e:	a1 e2       	ldi	r26, 0x21	; 33
 da0:	1a 2e       	mov	r1, r26
 da2:	aa 1b       	sub	r26, r26
 da4:	bb 1b       	sub	r27, r27
 da6:	fd 01       	movw	r30, r26
 da8:	0d c0       	rjmp	.+26     	; 0xdc4 <__udivmodsi4_ep>

00000daa <__udivmodsi4_loop>:
 daa:	aa 1f       	adc	r26, r26
 dac:	bb 1f       	adc	r27, r27
 dae:	ee 1f       	adc	r30, r30
 db0:	ff 1f       	adc	r31, r31
 db2:	a2 17       	cp	r26, r18
 db4:	b3 07       	cpc	r27, r19
 db6:	e4 07       	cpc	r30, r20
 db8:	f5 07       	cpc	r31, r21
 dba:	20 f0       	brcs	.+8      	; 0xdc4 <__udivmodsi4_ep>
 dbc:	a2 1b       	sub	r26, r18
 dbe:	b3 0b       	sbc	r27, r19
 dc0:	e4 0b       	sbc	r30, r20
 dc2:	f5 0b       	sbc	r31, r21

00000dc4 <__udivmodsi4_ep>:
 dc4:	66 1f       	adc	r22, r22
 dc6:	77 1f       	adc	r23, r23
 dc8:	88 1f       	adc	r24, r24
 dca:	99 1f       	adc	r25, r25
 dcc:	1a 94       	dec	r1
 dce:	69 f7       	brne	.-38     	; 0xdaa <__udivmodsi4_loop>
 dd0:	60 95       	com	r22
 dd2:	70 95       	com	r23
 dd4:	80 95       	com	r24
 dd6:	90 95       	com	r25
 dd8:	9b 01       	movw	r18, r22
 dda:	ac 01       	movw	r20, r24
 ddc:	bd 01       	movw	r22, r26
 dde:	cf 01       	movw	r24, r30
 de0:	08 95       	ret

00000de2 <__udivmodhi4>:
 de2:	aa 1b       	sub	r26, r26
 de4:	bb 1b       	sub	r27, r27
 de6:	51 e1       	ldi	r21, 0x11	; 17
 de8:	07 c0       	rjmp	.+14     	; 0xdf8 <__udivmodhi4_ep>

00000dea <__udivmodhi4_loop>:
 dea:	aa 1f       	adc	r26, r26
 dec:	bb 1f       	adc	r27, r27
 dee:	a6 17       	cp	r26, r22
 df0:	b7 07       	cpc	r27, r23
 df2:	10 f0       	brcs	.+4      	; 0xdf8 <__udivmodhi4_ep>
 df4:	a6 1b       	sub	r26, r22
 df6:	b7 0b       	sbc	r27, r23

00000df8 <__udivmodhi4_ep>:
 df8:	88 1f       	adc	r24, r24
 dfa:	99 1f       	adc	r25, r25
 dfc:	5a 95       	dec	r21
 dfe:	a9 f7       	brne	.-22     	; 0xdea <__udivmodhi4_loop>
 e00:	80 95       	com	r24
 e02:	90 95       	com	r25
 e04:	bc 01       	movw	r22, r24
 e06:	cd 01       	movw	r24, r26
 e08:	08 95       	ret

00000e0a <_exit>:
 e0a:	f8 94       	cli

00000e0c <__stop_program>:
 e0c:	ff cf       	rjmp	.-2      	; 0xe0c <__stop_program>
