
Rack_LoopController_PEDAL.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000082  00800100  00000ecc  00000f60  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000ecc  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000d2  00800182  00800182  00000fe2  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000fe2  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001014  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000002b8  00000000  00000000  00001054  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002afe  00000000  00000000  0000130c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001272  00000000  00000000  00003e0a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000016e7  00000000  00000000  0000507c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000688  00000000  00000000  00006764  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00001267  00000000  00000000  00006dec  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000017b3  00000000  00000000  00008053  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000240  00000000  00000000  00009806  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 17 01 	jmp	0x22e	; 0x22e <__vector_4>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 9e 05 	jmp	0xb3c	; 0xb3c <__vector_14>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 c5 06 	jmp	0xd8a	; 0xd8a <__vector_18>
  4c:	0c 94 f0 06 	jmp	0xde0	; 0xde0 <__vector_19>
  50:	0c 94 4d 04 	jmp	0x89a	; 0x89a <__vector_20>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ec ec       	ldi	r30, 0xCC	; 204
  7c:	fe e0       	ldi	r31, 0x0E	; 14
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a2 38       	cpi	r26, 0x82	; 130
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	22 e0       	ldi	r18, 0x02	; 2
  8c:	a2 e8       	ldi	r26, 0x82	; 130
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a4 35       	cpi	r26, 0x54	; 84
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 bb 01 	call	0x376	; 0x376 <main>
  9e:	0c 94 64 07 	jmp	0xec8	; 0xec8 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <_Z22Footswitch_HandlePressv>:
	}
}

void Footswitch_HandlePress()
{	
	System_HandleFootswitchInput(Footswitch_PressState, Footswitch_InterruptMask);
  a6:	60 91 85 01 	lds	r22, 0x0185	; 0x800185 <Footswitch_InterruptMask>
  aa:	80 91 88 01 	lds	r24, 0x0188	; 0x800188 <Footswitch_PressState>
  ae:	0e 94 e7 04 	call	0x9ce	; 0x9ce <_Z28System_HandleFootswitchInput16Footswitch_Stateh>
  b2:	08 95       	ret

000000b4 <_Z26Footswitch_EnableInterruptv>:
}

void Footswitch_EnableInterrupt()
{
	PCIFR |= (1 << PCIF1);		// Clear Pin Change Interrupt Flag 1
  b4:	d9 9a       	sbi	0x1b, 1	; 27
	PCICR |= (1 << PCIE1);		// Enable Pin Change Interrupt 1 (PCINT[14:8])
  b6:	e8 e6       	ldi	r30, 0x68	; 104
  b8:	f0 e0       	ldi	r31, 0x00	; 0
  ba:	80 81       	ld	r24, Z
  bc:	82 60       	ori	r24, 0x02	; 2
  be:	80 83       	st	Z, r24
  c0:	08 95       	ret

000000c2 <_Z15Footswitch_Initv>:
volatile bool Footswitch_TimerFlag = false;

/* Function implementations */
void Footswitch_Init()
{	
	DDRC &= ~(1 << PORTC1);		// Set PortC 1 as input
  c2:	39 98       	cbi	0x07, 1	; 7
	PCMSK1 |= (1 << PCINT9);	// Enable PCINT[9] PortC1 for interrupt
  c4:	ec e6       	ldi	r30, 0x6C	; 108
  c6:	f0 e0       	ldi	r31, 0x00	; 0
  c8:	80 81       	ld	r24, Z
  ca:	82 60       	ori	r24, 0x02	; 2
  cc:	80 83       	st	Z, r24
	PCICR |= (1 << PCIE1);		// Enable Pin Change Interrupt 1 (PCINT[14:8])
  ce:	e8 e6       	ldi	r30, 0x68	; 104
  d0:	f0 e0       	ldi	r31, 0x00	; 0
  d2:	80 81       	ld	r24, Z
  d4:	82 60       	ori	r24, 0x02	; 2
  d6:	80 83       	st	Z, r24
	
	Footswitch_EnableInterrupt();
  d8:	0e 94 5a 00 	call	0xb4	; 0xb4 <_Z26Footswitch_EnableInterruptv>
  dc:	08 95       	ret

000000de <_Z24Footswitch_PressDetectedv>:
}

void Footswitch_PressDetected()
{
  de:	cf 93       	push	r28
	uint8_t tmp = 0;
	
	tmp = MCP23017_ReadReg(MCP23017_ADDR_SWITCH_INDICATOR, INTFB);		// Read what pin caused the interrupt
  e0:	6f e0       	ldi	r22, 0x0F	; 15
  e2:	80 e0       	ldi	r24, 0x00	; 0
  e4:	0e 94 85 04 	call	0x90a	; 0x90a <_Z16MCP23017_ReadReghh>
  e8:	c8 2f       	mov	r28, r24
	
	Footswitch_PortState = MCP23017_ReadReg(MCP23017_ADDR_SWITCH_INDICATOR, INTCAPB);	// Read state of Port when interrupt occurred (Clear interrupt B)
  ea:	61 e1       	ldi	r22, 0x11	; 17
  ec:	80 e0       	ldi	r24, 0x00	; 0
  ee:	0e 94 85 04 	call	0x90a	; 0x90a <_Z16MCP23017_ReadReghh>
  f2:	80 93 86 01 	sts	0x0186, r24	; 0x800186 <Footswitch_PortState>
	
	if (Footswitch_PortState != 0x00)		// Only react on rising-edge
  f6:	80 91 86 01 	lds	r24, 0x0186	; 0x800186 <Footswitch_PortState>
  fa:	88 23       	and	r24, r24
  fc:	61 f0       	breq	.+24     	; 0x116 <_Z24Footswitch_PressDetectedv+0x38>
	{
		Footswitch_InterruptMask = tmp;
  fe:	c0 93 85 01 	sts	0x0185, r28	; 0x800185 <Footswitch_InterruptMask>
		Footswitch_PressState = PRESS_SENSED;
 102:	81 e0       	ldi	r24, 0x01	; 1
 104:	80 93 88 01 	sts	0x0188, r24	; 0x800188 <Footswitch_PressState>
		Footswitch_TimerOvfCnt = 1;		// Start Timer
 108:	81 e0       	ldi	r24, 0x01	; 1
 10a:	90 e0       	ldi	r25, 0x00	; 0
 10c:	90 93 84 01 	sts	0x0184, r25	; 0x800184 <Footswitch_TimerOvfCnt+0x1>
 110:	80 93 83 01 	sts	0x0183, r24	; 0x800183 <Footswitch_TimerOvfCnt>
 114:	09 c0       	rjmp	.+18     	; 0x128 <_Z24Footswitch_PressDetectedv+0x4a>
	}
	else
	{
		if (Footswitch_PressState == PRESSED)
 116:	80 91 88 01 	lds	r24, 0x0188	; 0x800188 <Footswitch_PressState>
 11a:	84 30       	cpi	r24, 0x04	; 4
 11c:	19 f4       	brne	.+6      	; 0x124 <_Z24Footswitch_PressDetectedv+0x46>
		{
			Footswitch_PressState = LONG_PRESS;
 11e:	86 e0       	ldi	r24, 0x06	; 6
 120:	80 93 88 01 	sts	0x0188, r24	; 0x800188 <Footswitch_PressState>
		}
		
		Footswitch_EnableInterrupt();
 124:	0e 94 5a 00 	call	0xb4	; 0xb4 <_Z26Footswitch_EnableInterruptv>
	}	
}
 128:	cf 91       	pop	r28
 12a:	08 95       	ret

0000012c <_Z22Footswitch_HandleTimerv>:

void Footswitch_HandleTimer()
{
 12c:	af 92       	push	r10
 12e:	cf 92       	push	r12
 130:	ef 92       	push	r14
 132:	0f 93       	push	r16
	Footswitch_PortState = MCP23017_ReadReg(MCP23017_ADDR_SWITCH_INDICATOR, GPIOB);		// Read current state of Port
 134:	63 e1       	ldi	r22, 0x13	; 19
 136:	80 e0       	ldi	r24, 0x00	; 0
 138:	0e 94 85 04 	call	0x90a	; 0x90a <_Z16MCP23017_ReadReghh>
 13c:	80 93 86 01 	sts	0x0186, r24	; 0x800186 <Footswitch_PortState>
	
	if (Footswitch_PressState == WAITING)
 140:	80 91 88 01 	lds	r24, 0x0188	; 0x800188 <Footswitch_PressState>
 144:	82 30       	cpi	r24, 0x02	; 2
 146:	79 f4       	brne	.+30     	; 0x166 <_Z22Footswitch_HandleTimerv+0x3a>
	{
		/* Check if switch is no longer pressed */
		if (Footswitch_PortState != Footswitch_InterruptMask)
 148:	90 91 86 01 	lds	r25, 0x0186	; 0x800186 <Footswitch_PortState>
 14c:	80 91 85 01 	lds	r24, 0x0185	; 0x800185 <Footswitch_InterruptMask>
 150:	98 17       	cp	r25, r24
 152:	09 f4       	brne	.+2      	; 0x156 <_Z22Footswitch_HandleTimerv+0x2a>
 154:	67 c0       	rjmp	.+206    	; 0x224 <_Z22Footswitch_HandleTimerv+0xf8>
		{
			Footswitch_PressState = SHORT_PRESS;
 156:	83 e0       	ldi	r24, 0x03	; 3
 158:	80 93 88 01 	sts	0x0188, r24	; 0x800188 <Footswitch_PressState>
			Footswitch_TimerOvfCnt = 0;	// Stop timer
 15c:	10 92 84 01 	sts	0x0184, r1	; 0x800184 <Footswitch_TimerOvfCnt+0x1>
 160:	10 92 83 01 	sts	0x0183, r1	; 0x800183 <Footswitch_TimerOvfCnt>
 164:	5f c0       	rjmp	.+190    	; 0x224 <_Z22Footswitch_HandleTimerv+0xf8>
		}
	}
	else if (Footswitch_PressState == PRESSED)
 166:	80 91 88 01 	lds	r24, 0x0188	; 0x800188 <Footswitch_PressState>
 16a:	84 30       	cpi	r24, 0x04	; 4
 16c:	09 f0       	breq	.+2      	; 0x170 <_Z22Footswitch_HandleTimerv+0x44>
 16e:	45 c0       	rjmp	.+138    	; 0x1fa <_Z22Footswitch_HandleTimerv+0xce>
	{
		/* Check if switch is no longer pressed */
		if (Footswitch_PortState != Footswitch_InterruptMask)
 170:	90 91 86 01 	lds	r25, 0x0186	; 0x800186 <Footswitch_PortState>
 174:	80 91 85 01 	lds	r24, 0x0185	; 0x800185 <Footswitch_InterruptMask>
 178:	98 17       	cp	r25, r24
 17a:	41 f0       	breq	.+16     	; 0x18c <_Z22Footswitch_HandleTimerv+0x60>
		{
			Footswitch_TimerOvfCnt = 0;	// Stop timer
 17c:	10 92 84 01 	sts	0x0184, r1	; 0x800184 <Footswitch_TimerOvfCnt+0x1>
 180:	10 92 83 01 	sts	0x0183, r1	; 0x800183 <Footswitch_TimerOvfCnt>
			Footswitch_PressState = SHORT_PRESS;
 184:	83 e0       	ldi	r24, 0x03	; 3
 186:	80 93 88 01 	sts	0x0188, r24	; 0x800188 <Footswitch_PressState>
 18a:	4c c0       	rjmp	.+152    	; 0x224 <_Z22Footswitch_HandleTimerv+0xf8>
		}
		else
		{
			/* Enable interrupt so Long Press will be trigged as soon as the user lifts his/her foot from the switch */
			Footswitch_EnableInterrupt();
 18c:	0e 94 5a 00 	call	0xb4	; 0xb4 <_Z26Footswitch_EnableInterruptv>
			
			/* Write appropriate message in 7-segment display based on system state */
			if (SystemState == EDITING)
 190:	80 91 0e 02 	lds	r24, 0x020E	; 0x80020e <SystemState>
 194:	88 23       	and	r24, r24
 196:	09 f4       	brne	.+2      	; 0x19a <_Z22Footswitch_HandleTimerv+0x6e>
 198:	45 c0       	rjmp	.+138    	; 0x224 <_Z22Footswitch_HandleTimerv+0xf8>
			{
			}
			else if (SystemState == RUN_PRESET_CTRL)
 19a:	80 91 0e 02 	lds	r24, 0x020E	; 0x80020e <SystemState>
 19e:	81 30       	cpi	r24, 0x01	; 1
 1a0:	59 f4       	brne	.+22     	; 0x1b8 <_Z22Footswitch_HandleTimerv+0x8c>
			{
				Segment7_WriteAll('L', 'o', 'o', 'P', 0, 0, 0, 0);
 1a2:	a1 2c       	mov	r10, r1
 1a4:	c1 2c       	mov	r12, r1
 1a6:	e1 2c       	mov	r14, r1
 1a8:	00 e0       	ldi	r16, 0x00	; 0
 1aa:	20 e5       	ldi	r18, 0x50	; 80
 1ac:	4f e6       	ldi	r20, 0x6F	; 111
 1ae:	6f e6       	ldi	r22, 0x6F	; 111
 1b0:	8c e4       	ldi	r24, 0x4C	; 76
 1b2:	0e 94 c1 04 	call	0x982	; 0x982 <_Z17Segment7_WriteAllcccchhhh>
 1b6:	36 c0       	rjmp	.+108    	; 0x224 <_Z22Footswitch_HandleTimerv+0xf8>
			}
			else if (SystemState == RUN_LOOP_CTRL)
 1b8:	80 91 0e 02 	lds	r24, 0x020E	; 0x80020e <SystemState>
 1bc:	82 30       	cpi	r24, 0x02	; 2
 1be:	d1 f4       	brne	.+52     	; 0x1f4 <_Z22Footswitch_HandleTimerv+0xc8>
			{
				if (Footswitch_InterruptMask & 0xF0)
 1c0:	80 91 85 01 	lds	r24, 0x0185	; 0x800185 <Footswitch_InterruptMask>
 1c4:	80 7f       	andi	r24, 0xF0	; 240
 1c6:	59 f0       	breq	.+22     	; 0x1de <_Z22Footswitch_HandleTimerv+0xb2>
				{
					Segment7_WriteAll('P', 'r', 'e', ' ', 0, 0, 0, 0);
 1c8:	a1 2c       	mov	r10, r1
 1ca:	c1 2c       	mov	r12, r1
 1cc:	e1 2c       	mov	r14, r1
 1ce:	00 e0       	ldi	r16, 0x00	; 0
 1d0:	20 e2       	ldi	r18, 0x20	; 32
 1d2:	45 e6       	ldi	r20, 0x65	; 101
 1d4:	62 e7       	ldi	r22, 0x72	; 114
 1d6:	80 e5       	ldi	r24, 0x50	; 80
 1d8:	0e 94 c1 04 	call	0x982	; 0x982 <_Z17Segment7_WriteAllcccchhhh>
 1dc:	23 c0       	rjmp	.+70     	; 0x224 <_Z22Footswitch_HandleTimerv+0xf8>
				}
				else
				{
					Segment7_WriteAll('^', '^', '^', '^', 0, 0, 0, 0);
 1de:	a1 2c       	mov	r10, r1
 1e0:	c1 2c       	mov	r12, r1
 1e2:	e1 2c       	mov	r14, r1
 1e4:	00 e0       	ldi	r16, 0x00	; 0
 1e6:	2e e5       	ldi	r18, 0x5E	; 94
 1e8:	4e e5       	ldi	r20, 0x5E	; 94
 1ea:	6e e5       	ldi	r22, 0x5E	; 94
 1ec:	8e e5       	ldi	r24, 0x5E	; 94
 1ee:	0e 94 c1 04 	call	0x982	; 0x982 <_Z17Segment7_WriteAllcccchhhh>
 1f2:	18 c0       	rjmp	.+48     	; 0x224 <_Z22Footswitch_HandleTimerv+0xf8>
				}
			}
			else if (SystemState == TUNER)
 1f4:	80 91 0e 02 	lds	r24, 0x020E	; 0x80020e <SystemState>
 1f8:	15 c0       	rjmp	.+42     	; 0x224 <_Z22Footswitch_HandleTimerv+0xf8>
			{
			}
		}
	}
	else if (Footswitch_PressState == STILL_PRESSED)
 1fa:	80 91 88 01 	lds	r24, 0x0188	; 0x800188 <Footswitch_PressState>
 1fe:	85 30       	cpi	r24, 0x05	; 5
 200:	89 f4       	brne	.+34     	; 0x224 <_Z22Footswitch_HandleTimerv+0xf8>
	{
		/* Check if switch is no longer pressed */
		if (Footswitch_PortState != Footswitch_InterruptMask)
 202:	90 91 86 01 	lds	r25, 0x0186	; 0x800186 <Footswitch_PortState>
 206:	80 91 85 01 	lds	r24, 0x0185	; 0x800185 <Footswitch_InterruptMask>
 20a:	98 17       	cp	r25, r24
 20c:	21 f0       	breq	.+8      	; 0x216 <_Z22Footswitch_HandleTimerv+0xea>
		{
			Footswitch_PressState = LONG_PRESS;
 20e:	86 e0       	ldi	r24, 0x06	; 6
 210:	80 93 88 01 	sts	0x0188, r24	; 0x800188 <Footswitch_PressState>
 214:	03 c0       	rjmp	.+6      	; 0x21c <_Z22Footswitch_HandleTimerv+0xf0>
		}
		else
		{
			Footswitch_PressState = LONG_LONG_PRESS;
 216:	87 e0       	ldi	r24, 0x07	; 7
 218:	80 93 88 01 	sts	0x0188, r24	; 0x800188 <Footswitch_PressState>
		}
		
		Footswitch_TimerOvfCnt = 0;	// Stop timer
 21c:	10 92 84 01 	sts	0x0184, r1	; 0x800184 <Footswitch_TimerOvfCnt+0x1>
 220:	10 92 83 01 	sts	0x0183, r1	; 0x800183 <Footswitch_TimerOvfCnt>
	}
}
 224:	0f 91       	pop	r16
 226:	ef 90       	pop	r14
 228:	cf 90       	pop	r12
 22a:	af 90       	pop	r10
 22c:	08 95       	ret

0000022e <__vector_4>:
	PCICR |= (1 << PCIE1);		// Enable Pin Change Interrupt 1 (PCINT[14:8])
}

/* Pin Change Interrupt 1 (PCINT1) Service Routine */
ISR (PCINT1_vect)
{
 22e:	1f 92       	push	r1
 230:	0f 92       	push	r0
 232:	0f b6       	in	r0, 0x3f	; 63
 234:	0f 92       	push	r0
 236:	11 24       	eor	r1, r1
 238:	8f 93       	push	r24
 23a:	ef 93       	push	r30
 23c:	ff 93       	push	r31
	if (!(PINC & (1 << PINC1)))		// Only react on falling-edge
 23e:	31 99       	sbic	0x06, 1	; 6
 240:	08 c0       	rjmp	.+16     	; 0x252 <__vector_4+0x24>
	{
		PCICR &= ~(1 << PCIE1);		// Disable Pin Change Interrupt 1 (PCINT[14:8])
 242:	e8 e6       	ldi	r30, 0x68	; 104
 244:	f0 e0       	ldi	r31, 0x00	; 0
 246:	80 81       	ld	r24, Z
 248:	8d 7f       	andi	r24, 0xFD	; 253
 24a:	80 83       	st	Z, r24
		Footswitch_PressFlag = true;
 24c:	81 e0       	ldi	r24, 0x01	; 1
 24e:	80 93 87 01 	sts	0x0187, r24	; 0x800187 <Footswitch_PressFlag>
	}
 252:	ff 91       	pop	r31
 254:	ef 91       	pop	r30
 256:	8f 91       	pop	r24
 258:	0f 90       	pop	r0
 25a:	0f be       	out	0x3f, r0	; 63
 25c:	0f 90       	pop	r0
 25e:	1f 90       	pop	r1
 260:	18 95       	reti

00000262 <_Z8i2c_initv>:
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWEA);
	while(!(TWCR & (1<<TWINT)));    

    return TWDR;

}/* i2c_readAck */
 262:	10 92 b9 00 	sts	0x00B9, r1	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
 266:	88 e4       	ldi	r24, 0x48	; 72
 268:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7e00b8>
 26c:	08 95       	ret

0000026e <_Z9i2c_starth>:
 26e:	94 ea       	ldi	r25, 0xA4	; 164
 270:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
 274:	ec eb       	ldi	r30, 0xBC	; 188
 276:	f0 e0       	ldi	r31, 0x00	; 0
 278:	90 81       	ld	r25, Z
 27a:	99 23       	and	r25, r25
 27c:	ec f7       	brge	.-6      	; 0x278 <_Z9i2c_starth+0xa>
 27e:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
 282:	98 7f       	andi	r25, 0xF8	; 248
 284:	98 30       	cpi	r25, 0x08	; 8
 286:	11 f0       	breq	.+4      	; 0x28c <_Z9i2c_starth+0x1e>
 288:	90 31       	cpi	r25, 0x10	; 16
 28a:	a1 f4       	brne	.+40     	; 0x2b4 <_Z9i2c_starth+0x46>
 28c:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
 290:	84 e8       	ldi	r24, 0x84	; 132
 292:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
 296:	ec eb       	ldi	r30, 0xBC	; 188
 298:	f0 e0       	ldi	r31, 0x00	; 0
 29a:	80 81       	ld	r24, Z
 29c:	88 23       	and	r24, r24
 29e:	ec f7       	brge	.-6      	; 0x29a <_Z9i2c_starth+0x2c>
 2a0:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
 2a4:	98 7f       	andi	r25, 0xF8	; 248
 2a6:	98 31       	cpi	r25, 0x18	; 24
 2a8:	39 f0       	breq	.+14     	; 0x2b8 <_Z9i2c_starth+0x4a>
 2aa:	81 e0       	ldi	r24, 0x01	; 1
 2ac:	90 34       	cpi	r25, 0x40	; 64
 2ae:	29 f4       	brne	.+10     	; 0x2ba <_Z9i2c_starth+0x4c>
 2b0:	80 e0       	ldi	r24, 0x00	; 0
 2b2:	08 95       	ret
 2b4:	81 e0       	ldi	r24, 0x01	; 1
 2b6:	08 95       	ret
 2b8:	80 e0       	ldi	r24, 0x00	; 0
 2ba:	08 95       	ret

000002bc <_Z8i2c_stopv>:
 2bc:	84 e9       	ldi	r24, 0x94	; 148
 2be:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
 2c2:	ec eb       	ldi	r30, 0xBC	; 188
 2c4:	f0 e0       	ldi	r31, 0x00	; 0
 2c6:	80 81       	ld	r24, Z
 2c8:	84 fd       	sbrc	r24, 4
 2ca:	fd cf       	rjmp	.-6      	; 0x2c6 <_Z8i2c_stopv+0xa>
 2cc:	08 95       	ret

000002ce <_Z9i2c_writeh>:
 2ce:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
 2d2:	84 e8       	ldi	r24, 0x84	; 132
 2d4:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
 2d8:	ec eb       	ldi	r30, 0xBC	; 188
 2da:	f0 e0       	ldi	r31, 0x00	; 0
 2dc:	80 81       	ld	r24, Z
 2de:	88 23       	and	r24, r24
 2e0:	ec f7       	brge	.-6      	; 0x2dc <_Z9i2c_writeh+0xe>
 2e2:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
 2e6:	98 7f       	andi	r25, 0xF8	; 248
 2e8:	81 e0       	ldi	r24, 0x01	; 1
 2ea:	98 32       	cpi	r25, 0x28	; 40
 2ec:	09 f4       	brne	.+2      	; 0x2f0 <_Z9i2c_writeh+0x22>
 2ee:	80 e0       	ldi	r24, 0x00	; 0
 2f0:	08 95       	ret

000002f2 <_Z11i2c_readNakv>:
 
 Return:  byte read from I2C device
*************************************************************************/
unsigned char i2c_readNak(void)
{
	TWCR = (1<<TWINT) | (1<<TWEN);
 2f2:	84 e8       	ldi	r24, 0x84	; 132
 2f4:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	while(!(TWCR & (1<<TWINT)));
 2f8:	ec eb       	ldi	r30, 0xBC	; 188
 2fa:	f0 e0       	ldi	r31, 0x00	; 0
 2fc:	80 81       	ld	r24, Z
 2fe:	88 23       	and	r24, r24
 300:	ec f7       	brge	.-6      	; 0x2fc <_Z11i2c_readNakv+0xa>
	
    return TWDR;
 302:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>

}/* i2c_readNak */
 306:	08 95       	ret

00000308 <_Z16Init_ioExpandersv>:
void Init_ioExpanders()
{
	/* Footswitch and Indicator		- Addr: 000
		- Port A: Indicator lights	- Outputs
		- Port B: Footswitches		- Inputs */
	MCP23017_WriteReg(MCP23017_ADDR_SWITCH_INDICATOR, IODIRA, 0x00);	// Set Port A to output
 308:	40 e0       	ldi	r20, 0x00	; 0
 30a:	60 e0       	ldi	r22, 0x00	; 0
 30c:	80 e0       	ldi	r24, 0x00	; 0
 30e:	0e 94 72 04 	call	0x8e4	; 0x8e4 <_Z17MCP23017_WriteReghhh>
	
	MCP23017_WriteReg(MCP23017_ADDR_SWITCH_INDICATOR, IODIRB, 0xFF);	// Set Port B to input
 312:	4f ef       	ldi	r20, 0xFF	; 255
 314:	61 e0       	ldi	r22, 0x01	; 1
 316:	80 e0       	ldi	r24, 0x00	; 0
 318:	0e 94 72 04 	call	0x8e4	; 0x8e4 <_Z17MCP23017_WriteReghhh>
	MCP23017_WriteReg(MCP23017_ADDR_SWITCH_INDICATOR, GPINTENB, 0xFF);	// Enables all pins on Port B for interrupt-on-change event
 31c:	4f ef       	ldi	r20, 0xFF	; 255
 31e:	65 e0       	ldi	r22, 0x05	; 5
 320:	80 e0       	ldi	r24, 0x00	; 0
 322:	0e 94 72 04 	call	0x8e4	; 0x8e4 <_Z17MCP23017_WriteReghhh>
	MCP23017_WriteReg(MCP23017_ADDR_SWITCH_INDICATOR, INTCONB, 0x00);	// Set Port B to compare to previous value for interrupts
 326:	40 e0       	ldi	r20, 0x00	; 0
 328:	69 e0       	ldi	r22, 0x09	; 9
 32a:	80 e0       	ldi	r24, 0x00	; 0
 32c:	0e 94 72 04 	call	0x8e4	; 0x8e4 <_Z17MCP23017_WriteReghhh>
	MCP23017_WriteReg(MCP23017_ADDR_SWITCH_INDICATOR, GPPUB, 0xFF);		// Enable pull up resistors for Port B
 330:	4f ef       	ldi	r20, 0xFF	; 255
 332:	6d e0       	ldi	r22, 0x0D	; 13
 334:	80 e0       	ldi	r24, 0x00	; 0
 336:	0e 94 72 04 	call	0x8e4	; 0x8e4 <_Z17MCP23017_WriteReghhh>
	MCP23017_ReadReg(MCP23017_ADDR_SWITCH_INDICATOR, INTCAPB);			// Clear interrupt B
 33a:	61 e1       	ldi	r22, 0x11	; 17
 33c:	80 e0       	ldi	r24, 0x00	; 0
 33e:	0e 94 85 04 	call	0x90a	; 0x90a <_Z16MCP23017_ReadReghh>
	
	/* 7-segment digit 0 & 1		- Addr: 010
		- Port A: Digit 0			- Outputs
		- Port B: Digit 1			- Outputs */
	MCP23017_WriteReg(MCP23017_ADDR_7SEG_DIGIT_0_1, IODIRA, 0x00);		// Set Port A to output
 342:	40 e0       	ldi	r20, 0x00	; 0
 344:	60 e0       	ldi	r22, 0x00	; 0
 346:	81 e0       	ldi	r24, 0x01	; 1
 348:	0e 94 72 04 	call	0x8e4	; 0x8e4 <_Z17MCP23017_WriteReghhh>
	MCP23017_WriteReg(MCP23017_ADDR_7SEG_DIGIT_0_1, IODIRB, 0x00);		// Set Port B to output
 34c:	40 e0       	ldi	r20, 0x00	; 0
 34e:	61 e0       	ldi	r22, 0x01	; 1
 350:	81 e0       	ldi	r24, 0x01	; 1
 352:	0e 94 72 04 	call	0x8e4	; 0x8e4 <_Z17MCP23017_WriteReghhh>
	
	/* 7-segment digit 2 & 3		- Addr: 001
		- Port A: Digit 2			- Outputs
		- Port B: Digit 3			- Inputs */
	MCP23017_WriteReg(MCP23017_ADDR_7SEG_DIGIT_2_3, IODIRA, 0x00);		// Set Port A to output
 356:	40 e0       	ldi	r20, 0x00	; 0
 358:	60 e0       	ldi	r22, 0x00	; 0
 35a:	82 e0       	ldi	r24, 0x02	; 2
 35c:	0e 94 72 04 	call	0x8e4	; 0x8e4 <_Z17MCP23017_WriteReghhh>
	MCP23017_WriteReg(MCP23017_ADDR_7SEG_DIGIT_2_3, IODIRB, 0x00);		// Set Port B to output
 360:	40 e0       	ldi	r20, 0x00	; 0
 362:	61 e0       	ldi	r22, 0x01	; 1
 364:	82 e0       	ldi	r24, 0x02	; 2
 366:	0e 94 72 04 	call	0x8e4	; 0x8e4 <_Z17MCP23017_WriteReghhh>
	
	/* Tuner display				- Addr: 100
		- Port A: Red lights		- Outputs
		- Port B: Unused			- --- */
	MCP23017_WriteReg(MCP23017_ADDR_TUNER_DISPLAY, IODIRA, 0x00);    // Set Port A to output
 36a:	40 e0       	ldi	r20, 0x00	; 0
 36c:	60 e0       	ldi	r22, 0x00	; 0
 36e:	84 e0       	ldi	r24, 0x04	; 4
 370:	0e 94 72 04 	call	0x8e4	; 0x8e4 <_Z17MCP23017_WriteReghhh>
 374:	08 95       	ret

00000376 <main>:

/* Main application */
int main(void)
{
	/* Initialization */
	TUNER_GREEN_LED_DDR |= TUNER_GREEN_LED_MASK;	// Setup output pin for Tuner display green LED (PortB 0)
 376:	20 9a       	sbi	0x04, 0	; 4
	Timer0_Init();
 378:	0e 94 8f 05 	call	0xb1e	; 0xb1e <_Z11Timer0_Initv>
	i2c_init();
 37c:	0e 94 31 01 	call	0x262	; 0x262 <_Z8i2c_initv>
	UART_Init(MASTER_UART_BAUDRATE, UART_2_STOP_BITS, UART_NO_PARITY);
 380:	40 e0       	ldi	r20, 0x00	; 0
 382:	62 e0       	ldi	r22, 0x02	; 2
 384:	80 e0       	ldi	r24, 0x00	; 0
 386:	9b e4       	ldi	r25, 0x4B	; 75
 388:	0e 94 1c 06 	call	0xc38	; 0xc38 <_Z9UART_Initjhh>
	MasterCom_Init();
 38c:	0e 94 3b 04 	call	0x876	; 0x876 <_Z14MasterCom_Initv>
	
	Init_ioExpanders();
 390:	0e 94 84 01 	call	0x308	; 0x308 <_Z16Init_ioExpandersv>
	Footswitch_Init();	// Should come after initialization of io-expanders
 394:	0e 94 61 00 	call	0xc2	; 0xc2 <_Z15Footswitch_Initv>
	
	/* Global Enable Interrupt */
	sei();
 398:	78 94       	sei
	
	Segment7_WriteAll('r', 'i', 'f', 'f', 0, 0, 0, 0);
 39a:	a1 2c       	mov	r10, r1
 39c:	c1 2c       	mov	r12, r1
 39e:	e1 2c       	mov	r14, r1
 3a0:	00 e0       	ldi	r16, 0x00	; 0
 3a2:	26 e6       	ldi	r18, 0x66	; 102
 3a4:	46 e6       	ldi	r20, 0x66	; 102
 3a6:	69 e6       	ldi	r22, 0x69	; 105
 3a8:	82 e7       	ldi	r24, 0x72	; 114
 3aa:	0e 94 c1 04 	call	0x982	; 0x982 <_Z17Segment7_WriteAllcccchhhh>
	
    /* Main loop */
    while (1) 
    {
		/* Handle incoming data from Master */
		while (UART_Available())
 3ae:	0e 94 9d 06 	call	0xd3a	; 0xd3a <_Z14UART_Availablev>
 3b2:	89 2b       	or	r24, r25
 3b4:	19 f0       	breq	.+6      	; 0x3bc <main+0x46>
		{
			MasterCom_Receive();
 3b6:	0e 94 25 02 	call	0x44a	; 0x44a <_Z17MasterCom_Receivev>
	
    /* Main loop */
    while (1) 
    {
		/* Handle incoming data from Master */
		while (UART_Available())
 3ba:	f9 cf       	rjmp	.-14     	; 0x3ae <main+0x38>
		{
			MasterCom_Receive();
		}
				
		/* Handle command received from Master. (Only once per program loop) */
		if (MasterCom_RxAvailable())
 3bc:	0e 94 13 02 	call	0x426	; 0x426 <_Z21MasterCom_RxAvailablev>
 3c0:	81 11       	cpse	r24, r1
		{
			MasterCom_HandleReceived();
 3c2:	0e 94 0c 03 	call	0x618	; 0x618 <_Z24MasterCom_HandleReceivedv>
		}
				
		/* Handle TX Command queue */
		if (MasterCom_TxAvailable())
 3c6:	0e 94 1c 02 	call	0x438	; 0x438 <_Z21MasterCom_TxAvailablev>
 3ca:	81 11       	cpse	r24, r1
		{
			MasterCom_PutCommand();
 3cc:	0e 94 97 03 	call	0x72e	; 0x72e <_Z20MasterCom_PutCommandv>
		}
				
		/* Transmit data to Master */
		if (MasterCom_DelayTxFlag)
 3d0:	80 91 0d 02 	lds	r24, 0x020D	; 0x80020d <MasterCom_DelayTxFlag>
 3d4:	88 23       	and	r24, r24
 3d6:	21 f0       	breq	.+8      	; 0x3e0 <main+0x6a>
		{
			MasterCom_DelayTxFlag = false;
 3d8:	10 92 0d 02 	sts	0x020D, r1	; 0x80020d <MasterCom_DelayTxFlag>
			MasterCom_Transmit();
 3dc:	0e 94 47 04 	call	0x88e	; 0x88e <_Z18MasterCom_Transmitv>
		}
		
		/* Footswitch press detected */
		if (Footswitch_PressFlag)
 3e0:	80 91 87 01 	lds	r24, 0x0187	; 0x800187 <Footswitch_PressFlag>
 3e4:	88 23       	and	r24, r24
 3e6:	21 f0       	breq	.+8      	; 0x3f0 <main+0x7a>
		{
			Footswitch_PressFlag = 0;
 3e8:	10 92 87 01 	sts	0x0187, r1	; 0x800187 <Footswitch_PressFlag>
			Footswitch_PressDetected();
 3ec:	0e 94 6f 00 	call	0xde	; 0xde <_Z24Footswitch_PressDetectedv>
		}
				
		/* Handle Footswitch timing */
		if (Footswitch_TimerFlag)
 3f0:	80 91 82 01 	lds	r24, 0x0182	; 0x800182 <__data_end>
 3f4:	88 23       	and	r24, r24
 3f6:	21 f0       	breq	.+8      	; 0x400 <__LOCK_REGION_LENGTH__>
		{
			Footswitch_TimerFlag = false;
 3f8:	10 92 82 01 	sts	0x0182, r1	; 0x800182 <__data_end>
			Footswitch_HandleTimer();
 3fc:	0e 94 96 00 	call	0x12c	; 0x12c <_Z22Footswitch_HandleTimerv>
		}
		
		/* Handle Footswitch user input (press) */
		if (Footswitch_PressState == SHORT_PRESS ||
 400:	80 91 88 01 	lds	r24, 0x0188	; 0x800188 <Footswitch_PressState>
			Footswitch_PressState == LONG_PRESS ||
 404:	83 30       	cpi	r24, 0x03	; 3
 406:	41 f0       	breq	.+16     	; 0x418 <__LOCK_REGION_LENGTH__+0x18>
 408:	80 91 88 01 	lds	r24, 0x0188	; 0x800188 <Footswitch_PressState>
			Footswitch_TimerFlag = false;
			Footswitch_HandleTimer();
		}
		
		/* Handle Footswitch user input (press) */
		if (Footswitch_PressState == SHORT_PRESS ||
 40c:	86 30       	cpi	r24, 0x06	; 6
 40e:	21 f0       	breq	.+8      	; 0x418 <__LOCK_REGION_LENGTH__+0x18>
			Footswitch_PressState == LONG_PRESS ||
			Footswitch_PressState == LONG_LONG_PRESS)
 410:	80 91 88 01 	lds	r24, 0x0188	; 0x800188 <Footswitch_PressState>
			Footswitch_TimerFlag = false;
			Footswitch_HandleTimer();
		}
		
		/* Handle Footswitch user input (press) */
		if (Footswitch_PressState == SHORT_PRESS ||
 414:	87 30       	cpi	r24, 0x07	; 7
 416:	59 f6       	brne	.-106    	; 0x3ae <main+0x38>
			Footswitch_PressState == LONG_PRESS ||
			Footswitch_PressState == LONG_LONG_PRESS)
		{			
			Footswitch_HandlePress();
 418:	0e 94 53 00 	call	0xa6	; 0xa6 <_Z22Footswitch_HandlePressv>
			
			/* Clear and reload for new user input */
			Footswitch_PressState = IDLE;
 41c:	10 92 88 01 	sts	0x0188, r1	; 0x800188 <Footswitch_PressState>
			Footswitch_EnableInterrupt();
 420:	0e 94 5a 00 	call	0xb4	; 0xb4 <_Z26Footswitch_EnableInterruptv>
 424:	c4 cf       	rjmp	.-120    	; 0x3ae <main+0x38>

00000426 <_Z21MasterCom_RxAvailablev>:


void MasterCom_FlushTxQueue()
{
	TxTail = TxHead;
	TX_CommandQueue[TxHead].acked = true;
 426:	20 91 8e 01 	lds	r18, 0x018E	; 0x80018e <RxHead>
 42a:	90 91 8d 01 	lds	r25, 0x018D	; 0x80018d <RxTail>
 42e:	81 e0       	ldi	r24, 0x01	; 1
 430:	29 13       	cpse	r18, r25
 432:	01 c0       	rjmp	.+2      	; 0x436 <_Z21MasterCom_RxAvailablev+0x10>
 434:	80 e0       	ldi	r24, 0x00	; 0
 436:	08 95       	ret

00000438 <_Z21MasterCom_TxAvailablev>:
 438:	20 91 8c 01 	lds	r18, 0x018C	; 0x80018c <TxHead>
 43c:	90 91 8b 01 	lds	r25, 0x018B	; 0x80018b <TxTail>
 440:	81 e0       	ldi	r24, 0x01	; 1
 442:	29 13       	cpse	r18, r25
 444:	01 c0       	rjmp	.+2      	; 0x448 <_Z21MasterCom_TxAvailablev+0x10>
 446:	80 e0       	ldi	r24, 0x00	; 0
 448:	08 95       	ret

0000044a <_Z17MasterCom_Receivev>:
}


void MasterCom_Receive()
{
 44a:	cf 93       	push	r28
 44c:	df 93       	push	r29
	static uint8_t RX_ByteCnt = 0;
	
	/* Start/reset Delay TX timer. Both in case a NACK needs to be sent, and also to
	   prevent response to previous command being sent while still receiving new data. */
	if (MasterCom_DelayTXOvfCnt != 0)
 44e:	80 91 0c 02 	lds	r24, 0x020C	; 0x80020c <MasterCom_DelayTXOvfCnt>
 452:	88 23       	and	r24, r24
 454:	19 f0       	breq	.+6      	; 0x45c <_Z17MasterCom_Receivev+0x12>
	{
		MasterCom_DelayTXOvfCnt = 1;
 456:	81 e0       	ldi	r24, 0x01	; 1
 458:	80 93 0c 02 	sts	0x020C, r24	; 0x80020c <MasterCom_DelayTXOvfCnt>
	}
	
	/* Fetch new byte from UART buffer */
	RX_Buffer[RX_ByteCnt] = UART_GetChar();
 45c:	c0 91 89 01 	lds	r28, 0x0189	; 0x800189 <_ZZ17MasterCom_ReceivevE10RX_ByteCnt>
 460:	d0 e0       	ldi	r29, 0x00	; 0
 462:	0e 94 82 06 	call	0xd04	; 0xd04 <_Z12UART_GetCharv>
 466:	c1 51       	subi	r28, 0x11	; 17
 468:	de 4f       	sbci	r29, 0xFE	; 254
 46a:	88 83       	st	Y, r24
	RX_ByteCnt++;
 46c:	80 91 89 01 	lds	r24, 0x0189	; 0x800189 <_ZZ17MasterCom_ReceivevE10RX_ByteCnt>
 470:	8f 5f       	subi	r24, 0xFF	; 255
 472:	80 93 89 01 	sts	0x0189, r24	; 0x800189 <_ZZ17MasterCom_ReceivevE10RX_ByteCnt>
	
	/* Handle new byte */
	if ((RX_ByteCnt - 1) == SOF_BYTE_IDX)
 476:	81 30       	cpi	r24, 0x01	; 1
 478:	e9 f5       	brne	.+122    	; 0x4f4 <_Z17MasterCom_Receivev+0xaa>
	{
		if (RX_Buffer[SOF_BYTE_IDX] != SOF_BYTE)
 47a:	80 91 ef 01 	lds	r24, 0x01EF	; 0x8001ef <RX_Buffer>
 47e:	8f 35       	cpi	r24, 0x5F	; 95
 480:	09 f4       	brne	.+2      	; 0x484 <_Z17MasterCom_Receivev+0x3a>
 482:	c7 c0       	rjmp	.+398    	; 0x612 <_Z17MasterCom_Receivev+0x1c8>
		{
			RX_ByteCnt = 0;
 484:	10 92 89 01 	sts	0x0189, r1	; 0x800189 <_ZZ17MasterCom_ReceivevE10RX_ByteCnt>
				
			if (RX_Buffer[SOF_BYTE_IDX] == ACK_BYTE)
 488:	80 91 ef 01 	lds	r24, 0x01EF	; 0x8001ef <RX_Buffer>
 48c:	8c 3a       	cpi	r24, 0xAC	; 172
 48e:	a9 f4       	brne	.+42     	; 0x4ba <_Z17MasterCom_Receivev+0x70>
			{
				MasterCom_ResponseTimeoutOvfCnt = 1;		// Reset timeout timer
 490:	81 e0       	ldi	r24, 0x01	; 1
 492:	90 e0       	ldi	r25, 0x00	; 0
 494:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <MasterCom_ResponseTimeoutOvfCnt+0x1>
 498:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <MasterCom_ResponseTimeoutOvfCnt>
				NackCnt = 0;
 49c:	10 92 8a 01 	sts	0x018A, r1	; 0x80018a <NackCnt>
				
				TX_CommandQueue[TxTail].acked = true;
 4a0:	e0 91 8b 01 	lds	r30, 0x018B	; 0x80018b <TxTail>
 4a4:	f0 e0       	ldi	r31, 0x00	; 0
 4a6:	ee 0f       	add	r30, r30
 4a8:	ff 1f       	adc	r31, r31
 4aa:	ee 0f       	add	r30, r30
 4ac:	ff 1f       	adc	r31, r31
 4ae:	ee 0f       	add	r30, r30
 4b0:	ff 1f       	adc	r31, r31
 4b2:	e1 57       	subi	r30, 0x71	; 113
 4b4:	fe 4f       	sbci	r31, 0xFE	; 254
 4b6:	87 83       	std	Z+7, r24	; 0x07
 4b8:	ac c0       	rjmp	.+344    	; 0x612 <_Z17MasterCom_Receivev+0x1c8>
			}
			else if (RX_Buffer[SOF_BYTE_IDX] == NACK_BYTE)
 4ba:	80 91 ef 01 	lds	r24, 0x01EF	; 0x8001ef <RX_Buffer>
 4be:	8a 32       	cpi	r24, 0x2A	; 42
 4c0:	09 f0       	breq	.+2      	; 0x4c4 <_Z17MasterCom_Receivev+0x7a>
 4c2:	a7 c0       	rjmp	.+334    	; 0x612 <_Z17MasterCom_Receivev+0x1c8>
			{
				/* Stop retransmitting command if Pedal keeps responding with NACK. */
				if (++NackCnt <= 3)
 4c4:	80 91 8a 01 	lds	r24, 0x018A	; 0x80018a <NackCnt>
 4c8:	8f 5f       	subi	r24, 0xFF	; 255
 4ca:	80 93 8a 01 	sts	0x018A, r24	; 0x80018a <NackCnt>
 4ce:	84 30       	cpi	r24, 0x04	; 4
 4d0:	08 f0       	brcs	.+2      	; 0x4d4 <_Z17MasterCom_Receivev+0x8a>
 4d2:	9f c0       	rjmp	.+318    	; 0x612 <_Z17MasterCom_Receivev+0x1c8>
				{
					/* Prepare retransmit latest command */
					TX_CommandQueue[TxTail].sent = false;
 4d4:	e0 91 8b 01 	lds	r30, 0x018B	; 0x80018b <TxTail>
 4d8:	f0 e0       	ldi	r31, 0x00	; 0
 4da:	ee 0f       	add	r30, r30
 4dc:	ff 1f       	adc	r31, r31
 4de:	ee 0f       	add	r30, r30
 4e0:	ff 1f       	adc	r31, r31
 4e2:	ee 0f       	add	r30, r30
 4e4:	ff 1f       	adc	r31, r31
 4e6:	e1 57       	subi	r30, 0x71	; 113
 4e8:	fe 4f       	sbci	r31, 0xFE	; 254
 4ea:	16 82       	std	Z+6, r1	; 0x06
					MasterCom_DelayTXOvfCnt = 1;	// Start/reset Delay TX timer
 4ec:	81 e0       	ldi	r24, 0x01	; 1
 4ee:	80 93 0c 02 	sts	0x020C, r24	; 0x80020c <MasterCom_DelayTXOvfCnt>
 4f2:	8f c0       	rjmp	.+286    	; 0x612 <_Z17MasterCom_Receivev+0x1c8>
				}
			}
		}
	}
	else if ((RX_ByteCnt - 1) == LENGTH_BYTE_IDX)
 4f4:	82 30       	cpi	r24, 0x02	; 2
 4f6:	79 f4       	brne	.+30     	; 0x516 <_Z17MasterCom_Receivev+0xcc>
	{
		RX_CommandQueue[RxHead].length = RX_Buffer[LENGTH_BYTE_IDX];
 4f8:	e0 91 8e 01 	lds	r30, 0x018E	; 0x80018e <RxHead>
 4fc:	f0 e0       	ldi	r31, 0x00	; 0
 4fe:	80 91 f0 01 	lds	r24, 0x01F0	; 0x8001f0 <RX_Buffer+0x1>
 502:	ee 0f       	add	r30, r30
 504:	ff 1f       	adc	r31, r31
 506:	ee 0f       	add	r30, r30
 508:	ff 1f       	adc	r31, r31
 50a:	ee 0f       	add	r30, r30
 50c:	ff 1f       	adc	r31, r31
 50e:	e1 55       	subi	r30, 0x51	; 81
 510:	fe 4f       	sbci	r31, 0xFE	; 254
 512:	81 83       	std	Z+1, r24	; 0x01
 514:	7e c0       	rjmp	.+252    	; 0x612 <_Z17MasterCom_Receivev+0x1c8>
	}
	else if (RX_ByteCnt == RX_CommandQueue[RxHead].length)
 516:	e0 91 8e 01 	lds	r30, 0x018E	; 0x80018e <RxHead>
 51a:	f0 e0       	ldi	r31, 0x00	; 0
 51c:	ee 0f       	add	r30, r30
 51e:	ff 1f       	adc	r31, r31
 520:	ee 0f       	add	r30, r30
 522:	ff 1f       	adc	r31, r31
 524:	ee 0f       	add	r30, r30
 526:	ff 1f       	adc	r31, r31
 528:	e1 55       	subi	r30, 0x51	; 81
 52a:	fe 4f       	sbci	r31, 0xFE	; 254
 52c:	91 81       	ldd	r25, Z+1	; 0x01
 52e:	89 13       	cpse	r24, r25
 530:	70 c0       	rjmp	.+224    	; 0x612 <_Z17MasterCom_Receivev+0x1c8>
	{
		/* If full frame received */
		if (RX_Buffer[RX_CommandQueue[RxHead].length - 1] == EOF_BYTE)
 532:	e0 91 8e 01 	lds	r30, 0x018E	; 0x80018e <RxHead>
 536:	f0 e0       	ldi	r31, 0x00	; 0
 538:	ee 0f       	add	r30, r30
 53a:	ff 1f       	adc	r31, r31
 53c:	ee 0f       	add	r30, r30
 53e:	ff 1f       	adc	r31, r31
 540:	ee 0f       	add	r30, r30
 542:	ff 1f       	adc	r31, r31
 544:	e1 55       	subi	r30, 0x51	; 81
 546:	fe 4f       	sbci	r31, 0xFE	; 254
 548:	e1 81       	ldd	r30, Z+1	; 0x01
 54a:	f0 e0       	ldi	r31, 0x00	; 0
 54c:	e2 51       	subi	r30, 0x12	; 18
 54e:	fe 4f       	sbci	r31, 0xFE	; 254
 550:	80 81       	ld	r24, Z
 552:	8f 3e       	cpi	r24, 0xEF	; 239
 554:	09 f0       	breq	.+2      	; 0x558 <_Z17MasterCom_Receivev+0x10e>
 556:	55 c0       	rjmp	.+170    	; 0x602 <_Z17MasterCom_Receivev+0x1b8>
		{
			RX_CommandQueue[RxHead].command = (CMD)RX_Buffer[CMD_BYTE_IDX];
 558:	e0 91 8e 01 	lds	r30, 0x018E	; 0x80018e <RxHead>
 55c:	f0 e0       	ldi	r31, 0x00	; 0
 55e:	80 91 f1 01 	lds	r24, 0x01F1	; 0x8001f1 <RX_Buffer+0x2>
 562:	ee 0f       	add	r30, r30
 564:	ff 1f       	adc	r31, r31
 566:	ee 0f       	add	r30, r30
 568:	ff 1f       	adc	r31, r31
 56a:	ee 0f       	add	r30, r30
 56c:	ff 1f       	adc	r31, r31
 56e:	e1 55       	subi	r30, 0x51	; 81
 570:	fe 4f       	sbci	r31, 0xFE	; 254
 572:	80 83       	st	Z, r24
			
			for (uint8_t i = 0; i < (RX_CommandQueue[RxHead].length - 4); i++)
 574:	e0 91 8e 01 	lds	r30, 0x018E	; 0x80018e <RxHead>
 578:	f0 e0       	ldi	r31, 0x00	; 0
 57a:	ee 0f       	add	r30, r30
 57c:	ff 1f       	adc	r31, r31
 57e:	ee 0f       	add	r30, r30
 580:	ff 1f       	adc	r31, r31
 582:	ee 0f       	add	r30, r30
 584:	ff 1f       	adc	r31, r31
 586:	e1 55       	subi	r30, 0x51	; 81
 588:	fe 4f       	sbci	r31, 0xFE	; 254
 58a:	81 81       	ldd	r24, Z+1	; 0x01
 58c:	90 e0       	ldi	r25, 0x00	; 0
 58e:	04 97       	sbiw	r24, 0x04	; 4
 590:	18 16       	cp	r1, r24
 592:	19 06       	cpc	r1, r25
 594:	5c f5       	brge	.+86     	; 0x5ec <_Z17MasterCom_Receivev+0x1a2>
 596:	20 e0       	ldi	r18, 0x00	; 0
 598:	30 e0       	ldi	r19, 0x00	; 0
 59a:	40 e0       	ldi	r20, 0x00	; 0
			{
				RX_CommandQueue[RxHead].data[i] = RX_Buffer[DATA_BYTE_IDX + i];
 59c:	80 91 8e 01 	lds	r24, 0x018E	; 0x80018e <RxHead>
 5a0:	e8 2f       	mov	r30, r24
 5a2:	f0 e0       	ldi	r31, 0x00	; 0
 5a4:	d9 01       	movw	r26, r18
 5a6:	ae 50       	subi	r26, 0x0E	; 14
 5a8:	be 4f       	sbci	r27, 0xFE	; 254
 5aa:	8c 91       	ld	r24, X
 5ac:	ee 0f       	add	r30, r30
 5ae:	ff 1f       	adc	r31, r31
 5b0:	ee 0f       	add	r30, r30
 5b2:	ff 1f       	adc	r31, r31
 5b4:	ee 0f       	add	r30, r30
 5b6:	ff 1f       	adc	r31, r31
 5b8:	e1 55       	subi	r30, 0x51	; 81
 5ba:	fe 4f       	sbci	r31, 0xFE	; 254
 5bc:	e2 0f       	add	r30, r18
 5be:	f3 1f       	adc	r31, r19
 5c0:	82 83       	std	Z+2, r24	; 0x02
		/* If full frame received */
		if (RX_Buffer[RX_CommandQueue[RxHead].length - 1] == EOF_BYTE)
		{
			RX_CommandQueue[RxHead].command = (CMD)RX_Buffer[CMD_BYTE_IDX];
			
			for (uint8_t i = 0; i < (RX_CommandQueue[RxHead].length - 4); i++)
 5c2:	4f 5f       	subi	r20, 0xFF	; 255
 5c4:	24 2f       	mov	r18, r20
 5c6:	30 e0       	ldi	r19, 0x00	; 0
 5c8:	a0 91 8e 01 	lds	r26, 0x018E	; 0x80018e <RxHead>
 5cc:	b0 e0       	ldi	r27, 0x00	; 0
 5ce:	aa 0f       	add	r26, r26
 5d0:	bb 1f       	adc	r27, r27
 5d2:	aa 0f       	add	r26, r26
 5d4:	bb 1f       	adc	r27, r27
 5d6:	aa 0f       	add	r26, r26
 5d8:	bb 1f       	adc	r27, r27
 5da:	a1 55       	subi	r26, 0x51	; 81
 5dc:	be 4f       	sbci	r27, 0xFE	; 254
 5de:	11 96       	adiw	r26, 0x01	; 1
 5e0:	8c 91       	ld	r24, X
 5e2:	90 e0       	ldi	r25, 0x00	; 0
 5e4:	04 97       	sbiw	r24, 0x04	; 4
 5e6:	28 17       	cp	r18, r24
 5e8:	39 07       	cpc	r19, r25
 5ea:	c4 f2       	brlt	.-80     	; 0x59c <_Z17MasterCom_Receivev+0x152>
			{
				RX_CommandQueue[RxHead].data[i] = RX_Buffer[DATA_BYTE_IDX + i];
			}
			
			/* calculate new RX head index */
			uint8_t tmpHead = (RxHead + 1) & RX_QUEUE_MASK;
 5ec:	80 91 8e 01 	lds	r24, 0x018E	; 0x80018e <RxHead>
 5f0:	8f 5f       	subi	r24, 0xFF	; 255
 5f2:	87 70       	andi	r24, 0x07	; 7
				
			if ( tmpHead == RxTail )
 5f4:	90 91 8d 01 	lds	r25, 0x018D	; 0x80018d <RxTail>
 5f8:	89 17       	cp	r24, r25
 5fa:	49 f0       	breq	.+18     	; 0x60e <_Z17MasterCom_Receivev+0x1c4>
				/* error: RX command queue overflow */
			}
			else
			{
				/* store new index */
				RxHead = tmpHead;
 5fc:	80 93 8e 01 	sts	0x018E, r24	; 0x80018e <RxHead>
 600:	06 c0       	rjmp	.+12     	; 0x60e <_Z17MasterCom_Receivev+0x1c4>
			}
		}
		else
		{
			/* Prepare Transmit NACK */
			UART_QueueChar(NACK_BYTE);
 602:	8a e2       	ldi	r24, 0x2A	; 42
 604:	0e 94 aa 06 	call	0xd54	; 0xd54 <_Z14UART_QueueCharh>
			MasterCom_DelayTXOvfCnt = 1;	// Start/reset Delay TX timer
 608:	81 e0       	ldi	r24, 0x01	; 1
 60a:	80 93 0c 02 	sts	0x020C, r24	; 0x80020c <MasterCom_DelayTXOvfCnt>
		}
			
		RX_ByteCnt = 0;
 60e:	10 92 89 01 	sts	0x0189, r1	; 0x800189 <_ZZ17MasterCom_ReceivevE10RX_ByteCnt>
	}	
}
 612:	df 91       	pop	r29
 614:	cf 91       	pop	r28
 616:	08 95       	ret

00000618 <_Z24MasterCom_HandleReceivedv>:


void MasterCom_HandleReceived()
{
	unsigned char response;
	response = System_HandleMasterCommand(RX_CommandQueue[RxTail].command, RX_CommandQueue[RxTail].length - 4, (uint8_t *)RX_CommandQueue[RxTail].data);
 618:	40 91 8d 01 	lds	r20, 0x018D	; 0x80018d <RxTail>
 61c:	e0 91 8d 01 	lds	r30, 0x018D	; 0x80018d <RxTail>
 620:	f0 e0       	ldi	r31, 0x00	; 0
 622:	ee 0f       	add	r30, r30
 624:	ff 1f       	adc	r31, r31
 626:	ee 0f       	add	r30, r30
 628:	ff 1f       	adc	r31, r31
 62a:	ee 0f       	add	r30, r30
 62c:	ff 1f       	adc	r31, r31
 62e:	e1 55       	subi	r30, 0x51	; 81
 630:	fe 4f       	sbci	r31, 0xFE	; 254
 632:	61 81       	ldd	r22, Z+1	; 0x01
 634:	e0 91 8d 01 	lds	r30, 0x018D	; 0x80018d <RxTail>
 638:	f0 e0       	ldi	r31, 0x00	; 0
 63a:	ee 0f       	add	r30, r30
 63c:	ff 1f       	adc	r31, r31
 63e:	ee 0f       	add	r30, r30
 640:	ff 1f       	adc	r31, r31
 642:	ee 0f       	add	r30, r30
 644:	ff 1f       	adc	r31, r31
 646:	e1 55       	subi	r30, 0x51	; 81
 648:	fe 4f       	sbci	r31, 0xFE	; 254
 64a:	80 81       	ld	r24, Z
 64c:	50 e0       	ldi	r21, 0x00	; 0
 64e:	44 0f       	add	r20, r20
 650:	55 1f       	adc	r21, r21
 652:	44 0f       	add	r20, r20
 654:	55 1f       	adc	r21, r21
 656:	44 0f       	add	r20, r20
 658:	55 1f       	adc	r21, r21
 65a:	4f 54       	subi	r20, 0x4F	; 79
 65c:	5e 4f       	sbci	r21, 0xFE	; 254
 65e:	64 50       	subi	r22, 0x04	; 4
 660:	0e 94 2b 05 	call	0xa56	; 0xa56 <_Z26System_HandleMasterCommand3CMDhPh>
	
	/* Calculate and store new queue index */
	RxTail = (RxTail + 1) & RX_QUEUE_MASK;
 664:	90 91 8d 01 	lds	r25, 0x018D	; 0x80018d <RxTail>
 668:	9f 5f       	subi	r25, 0xFF	; 255
 66a:	97 70       	andi	r25, 0x07	; 7
 66c:	90 93 8d 01 	sts	0x018D, r25	; 0x80018d <RxTail>

	/* Prepare Transmit response */
	UART_QueueChar(response);
 670:	0e 94 aa 06 	call	0xd54	; 0xd54 <_Z14UART_QueueCharh>
	
	/* Start/reset Delay TX timer */
	MasterCom_DelayTXOvfCnt = 1;
 674:	81 e0       	ldi	r24, 0x01	; 1
 676:	80 93 0c 02 	sts	0x020C, r24	; 0x80020c <MasterCom_DelayTXOvfCnt>
 67a:	08 95       	ret

0000067c <_Z22MasterCom_QueueCommand3CMDhPh>:


bool MasterCom_QueueCommand(CMD cmd, uint8_t datLen, uint8_t *dat)
{
	/* Calculate new queue head index */
	uint8_t tmpHead = (TxHead + 1) & TX_QUEUE_MASK;
 67c:	20 91 8c 01 	lds	r18, 0x018C	; 0x80018c <TxHead>
 680:	2f 5f       	subi	r18, 0xFF	; 255
 682:	23 70       	andi	r18, 0x03	; 3
	
	/* Check for free space in queue */
	if ( tmpHead == TxTail )
 684:	90 91 8b 01 	lds	r25, 0x018B	; 0x80018b <TxTail>
 688:	29 17       	cp	r18, r25
 68a:	09 f4       	brne	.+2      	; 0x68e <_Z22MasterCom_QueueCommand3CMDhPh+0x12>
 68c:	4e c0       	rjmp	.+156    	; 0x72a <_Z22MasterCom_QueueCommand3CMDhPh+0xae>
		return false;
	
	/* Copy command to queue */
	TX_CommandQueue[TxHead].command = cmd;
 68e:	e0 91 8c 01 	lds	r30, 0x018C	; 0x80018c <TxHead>
 692:	f0 e0       	ldi	r31, 0x00	; 0
 694:	ee 0f       	add	r30, r30
 696:	ff 1f       	adc	r31, r31
 698:	ee 0f       	add	r30, r30
 69a:	ff 1f       	adc	r31, r31
 69c:	ee 0f       	add	r30, r30
 69e:	ff 1f       	adc	r31, r31
 6a0:	e1 57       	subi	r30, 0x71	; 113
 6a2:	fe 4f       	sbci	r31, 0xFE	; 254
 6a4:	80 83       	st	Z, r24
	TX_CommandQueue[TxHead].length = datLen + 4;
 6a6:	e0 91 8c 01 	lds	r30, 0x018C	; 0x80018c <TxHead>
 6aa:	f0 e0       	ldi	r31, 0x00	; 0
 6ac:	ee 0f       	add	r30, r30
 6ae:	ff 1f       	adc	r31, r31
 6b0:	ee 0f       	add	r30, r30
 6b2:	ff 1f       	adc	r31, r31
 6b4:	ee 0f       	add	r30, r30
 6b6:	ff 1f       	adc	r31, r31
 6b8:	e1 57       	subi	r30, 0x71	; 113
 6ba:	fe 4f       	sbci	r31, 0xFE	; 254
 6bc:	84 e0       	ldi	r24, 0x04	; 4
 6be:	86 0f       	add	r24, r22
 6c0:	81 83       	std	Z+1, r24	; 0x01
	TX_CommandQueue[TxHead].sent = false;
 6c2:	e0 91 8c 01 	lds	r30, 0x018C	; 0x80018c <TxHead>
 6c6:	f0 e0       	ldi	r31, 0x00	; 0
 6c8:	ee 0f       	add	r30, r30
 6ca:	ff 1f       	adc	r31, r31
 6cc:	ee 0f       	add	r30, r30
 6ce:	ff 1f       	adc	r31, r31
 6d0:	ee 0f       	add	r30, r30
 6d2:	ff 1f       	adc	r31, r31
 6d4:	e1 57       	subi	r30, 0x71	; 113
 6d6:	fe 4f       	sbci	r31, 0xFE	; 254
 6d8:	16 82       	std	Z+6, r1	; 0x06
	TX_CommandQueue[TxHead].acked = false;
 6da:	e0 91 8c 01 	lds	r30, 0x018C	; 0x80018c <TxHead>
 6de:	f0 e0       	ldi	r31, 0x00	; 0
 6e0:	ee 0f       	add	r30, r30
 6e2:	ff 1f       	adc	r31, r31
 6e4:	ee 0f       	add	r30, r30
 6e6:	ff 1f       	adc	r31, r31
 6e8:	ee 0f       	add	r30, r30
 6ea:	ff 1f       	adc	r31, r31
 6ec:	e1 57       	subi	r30, 0x71	; 113
 6ee:	fe 4f       	sbci	r31, 0xFE	; 254
 6f0:	17 82       	std	Z+7, r1	; 0x07
	
	for (uint8_t i = 0; i < datLen; i++)
 6f2:	66 23       	and	r22, r22
 6f4:	b1 f0       	breq	.+44     	; 0x722 <_Z22MasterCom_QueueCommand3CMDhPh+0xa6>
 6f6:	a4 2f       	mov	r26, r20
 6f8:	b5 2f       	mov	r27, r21
 6fa:	80 e0       	ldi	r24, 0x00	; 0
 6fc:	90 e0       	ldi	r25, 0x00	; 0
	{
		TX_CommandQueue[TxHead].data[i] = dat[i];
 6fe:	e0 91 8c 01 	lds	r30, 0x018C	; 0x80018c <TxHead>
 702:	f0 e0       	ldi	r31, 0x00	; 0
 704:	3d 91       	ld	r19, X+
 706:	ee 0f       	add	r30, r30
 708:	ff 1f       	adc	r31, r31
 70a:	ee 0f       	add	r30, r30
 70c:	ff 1f       	adc	r31, r31
 70e:	ee 0f       	add	r30, r30
 710:	ff 1f       	adc	r31, r31
 712:	e1 57       	subi	r30, 0x71	; 113
 714:	fe 4f       	sbci	r31, 0xFE	; 254
 716:	e8 0f       	add	r30, r24
 718:	f9 1f       	adc	r31, r25
 71a:	32 83       	std	Z+2, r19	; 0x02
 71c:	01 96       	adiw	r24, 0x01	; 1
	TX_CommandQueue[TxHead].command = cmd;
	TX_CommandQueue[TxHead].length = datLen + 4;
	TX_CommandQueue[TxHead].sent = false;
	TX_CommandQueue[TxHead].acked = false;
	
	for (uint8_t i = 0; i < datLen; i++)
 71e:	86 17       	cp	r24, r22
 720:	70 f3       	brcs	.-36     	; 0x6fe <_Z22MasterCom_QueueCommand3CMDhPh+0x82>
	{
		TX_CommandQueue[TxHead].data[i] = dat[i];
	}
	
	/* Update queue head */
	TxHead = tmpHead;
 722:	20 93 8c 01 	sts	0x018C, r18	; 0x80018c <TxHead>
	
	return true;
 726:	81 e0       	ldi	r24, 0x01	; 1
 728:	08 95       	ret
	/* Calculate new queue head index */
	uint8_t tmpHead = (TxHead + 1) & TX_QUEUE_MASK;
	
	/* Check for free space in queue */
	if ( tmpHead == TxTail )
		return false;
 72a:	80 e0       	ldi	r24, 0x00	; 0
	
	/* Update queue head */
	TxHead = tmpHead;
	
	return true;
}
 72c:	08 95       	ret

0000072e <_Z20MasterCom_PutCommandv>:

void MasterCom_PutCommand()
{
 72e:	cf 93       	push	r28
	/* Only transmit new command if previous one got an ACK */
	if (TX_CommandQueue[TxTail].acked)
 730:	e0 91 8b 01 	lds	r30, 0x018B	; 0x80018b <TxTail>
 734:	f0 e0       	ldi	r31, 0x00	; 0
 736:	ee 0f       	add	r30, r30
 738:	ff 1f       	adc	r31, r31
 73a:	ee 0f       	add	r30, r30
 73c:	ff 1f       	adc	r31, r31
 73e:	ee 0f       	add	r30, r30
 740:	ff 1f       	adc	r31, r31
 742:	e1 57       	subi	r30, 0x71	; 113
 744:	fe 4f       	sbci	r31, 0xFE	; 254
 746:	87 81       	ldd	r24, Z+7	; 0x07
 748:	88 23       	and	r24, r24
 74a:	39 f0       	breq	.+14     	; 0x75a <_Z20MasterCom_PutCommandv+0x2c>
	{
		/* Calculate and store new queue tail index */
		TxTail = (TxTail + 1) & TX_QUEUE_MASK;
 74c:	80 91 8b 01 	lds	r24, 0x018B	; 0x80018b <TxTail>
 750:	8f 5f       	subi	r24, 0xFF	; 255
 752:	83 70       	andi	r24, 0x03	; 3
 754:	80 93 8b 01 	sts	0x018B, r24	; 0x80018b <TxTail>
 758:	84 c0       	rjmp	.+264    	; 0x862 <_Z20MasterCom_PutCommandv+0x134>
	}
	else if (!(TX_CommandQueue[TxTail].sent))
 75a:	e0 91 8b 01 	lds	r30, 0x018B	; 0x80018b <TxTail>
 75e:	f0 e0       	ldi	r31, 0x00	; 0
 760:	ee 0f       	add	r30, r30
 762:	ff 1f       	adc	r31, r31
 764:	ee 0f       	add	r30, r30
 766:	ff 1f       	adc	r31, r31
 768:	ee 0f       	add	r30, r30
 76a:	ff 1f       	adc	r31, r31
 76c:	e1 57       	subi	r30, 0x71	; 113
 76e:	fe 4f       	sbci	r31, 0xFE	; 254
 770:	86 81       	ldd	r24, Z+6	; 0x06
 772:	81 11       	cpse	r24, r1
 774:	76 c0       	rjmp	.+236    	; 0x862 <_Z20MasterCom_PutCommandv+0x134>
	{
		/* Send command frame to UART TX buffer */
		UART_QueueChar(SOF_BYTE);
 776:	8f e5       	ldi	r24, 0x5F	; 95
 778:	0e 94 aa 06 	call	0xd54	; 0xd54 <_Z14UART_QueueCharh>
		UART_QueueChar((unsigned char)TX_CommandQueue[TxTail].length);
 77c:	e0 91 8b 01 	lds	r30, 0x018B	; 0x80018b <TxTail>
 780:	f0 e0       	ldi	r31, 0x00	; 0
 782:	ee 0f       	add	r30, r30
 784:	ff 1f       	adc	r31, r31
 786:	ee 0f       	add	r30, r30
 788:	ff 1f       	adc	r31, r31
 78a:	ee 0f       	add	r30, r30
 78c:	ff 1f       	adc	r31, r31
 78e:	e1 57       	subi	r30, 0x71	; 113
 790:	fe 4f       	sbci	r31, 0xFE	; 254
 792:	81 81       	ldd	r24, Z+1	; 0x01
 794:	0e 94 aa 06 	call	0xd54	; 0xd54 <_Z14UART_QueueCharh>
		UART_QueueChar((unsigned char)TX_CommandQueue[TxTail].command);
 798:	e0 91 8b 01 	lds	r30, 0x018B	; 0x80018b <TxTail>
 79c:	f0 e0       	ldi	r31, 0x00	; 0
 79e:	ee 0f       	add	r30, r30
 7a0:	ff 1f       	adc	r31, r31
 7a2:	ee 0f       	add	r30, r30
 7a4:	ff 1f       	adc	r31, r31
 7a6:	ee 0f       	add	r30, r30
 7a8:	ff 1f       	adc	r31, r31
 7aa:	e1 57       	subi	r30, 0x71	; 113
 7ac:	fe 4f       	sbci	r31, 0xFE	; 254
 7ae:	80 81       	ld	r24, Z
 7b0:	0e 94 aa 06 	call	0xd54	; 0xd54 <_Z14UART_QueueCharh>
		
		for (uint8_t i = 0; i < (TX_CommandQueue[TxTail].length - 4); i++)
 7b4:	e0 91 8b 01 	lds	r30, 0x018B	; 0x80018b <TxTail>
 7b8:	f0 e0       	ldi	r31, 0x00	; 0
 7ba:	ee 0f       	add	r30, r30
 7bc:	ff 1f       	adc	r31, r31
 7be:	ee 0f       	add	r30, r30
 7c0:	ff 1f       	adc	r31, r31
 7c2:	ee 0f       	add	r30, r30
 7c4:	ff 1f       	adc	r31, r31
 7c6:	e1 57       	subi	r30, 0x71	; 113
 7c8:	fe 4f       	sbci	r31, 0xFE	; 254
 7ca:	81 81       	ldd	r24, Z+1	; 0x01
 7cc:	90 e0       	ldi	r25, 0x00	; 0
 7ce:	04 97       	sbiw	r24, 0x04	; 4
 7d0:	18 16       	cp	r1, r24
 7d2:	19 06       	cpc	r1, r25
 7d4:	4c f5       	brge	.+82     	; 0x828 <_Z20MasterCom_PutCommandv+0xfa>
 7d6:	20 e0       	ldi	r18, 0x00	; 0
 7d8:	30 e0       	ldi	r19, 0x00	; 0
 7da:	c0 e0       	ldi	r28, 0x00	; 0
		{
			UART_QueueChar((unsigned char)TX_CommandQueue[TxTail].data[i]);
 7dc:	80 91 8b 01 	lds	r24, 0x018B	; 0x80018b <TxTail>
 7e0:	e8 2f       	mov	r30, r24
 7e2:	f0 e0       	ldi	r31, 0x00	; 0
 7e4:	ee 0f       	add	r30, r30
 7e6:	ff 1f       	adc	r31, r31
 7e8:	ee 0f       	add	r30, r30
 7ea:	ff 1f       	adc	r31, r31
 7ec:	ee 0f       	add	r30, r30
 7ee:	ff 1f       	adc	r31, r31
 7f0:	e1 57       	subi	r30, 0x71	; 113
 7f2:	fe 4f       	sbci	r31, 0xFE	; 254
 7f4:	e2 0f       	add	r30, r18
 7f6:	f3 1f       	adc	r31, r19
 7f8:	82 81       	ldd	r24, Z+2	; 0x02
 7fa:	0e 94 aa 06 	call	0xd54	; 0xd54 <_Z14UART_QueueCharh>
		/* Send command frame to UART TX buffer */
		UART_QueueChar(SOF_BYTE);
		UART_QueueChar((unsigned char)TX_CommandQueue[TxTail].length);
		UART_QueueChar((unsigned char)TX_CommandQueue[TxTail].command);
		
		for (uint8_t i = 0; i < (TX_CommandQueue[TxTail].length - 4); i++)
 7fe:	cf 5f       	subi	r28, 0xFF	; 255
 800:	2c 2f       	mov	r18, r28
 802:	30 e0       	ldi	r19, 0x00	; 0
 804:	a0 91 8b 01 	lds	r26, 0x018B	; 0x80018b <TxTail>
 808:	b0 e0       	ldi	r27, 0x00	; 0
 80a:	aa 0f       	add	r26, r26
 80c:	bb 1f       	adc	r27, r27
 80e:	aa 0f       	add	r26, r26
 810:	bb 1f       	adc	r27, r27
 812:	aa 0f       	add	r26, r26
 814:	bb 1f       	adc	r27, r27
 816:	a1 57       	subi	r26, 0x71	; 113
 818:	be 4f       	sbci	r27, 0xFE	; 254
 81a:	11 96       	adiw	r26, 0x01	; 1
 81c:	8c 91       	ld	r24, X
 81e:	90 e0       	ldi	r25, 0x00	; 0
 820:	04 97       	sbiw	r24, 0x04	; 4
 822:	28 17       	cp	r18, r24
 824:	39 07       	cpc	r19, r25
 826:	d4 f2       	brlt	.-76     	; 0x7dc <_Z20MasterCom_PutCommandv+0xae>
		{
			UART_QueueChar((unsigned char)TX_CommandQueue[TxTail].data[i]);
		}
		
		UART_QueueChar(EOF_BYTE);
 828:	8f ee       	ldi	r24, 0xEF	; 239
 82a:	0e 94 aa 06 	call	0xd54	; 0xd54 <_Z14UART_QueueCharh>
		
		/* If no data is waiting to be transmitted */
		if (MasterCom_DelayTXOvfCnt == 0)
 82e:	80 91 0c 02 	lds	r24, 0x020C	; 0x80020c <MasterCom_DelayTXOvfCnt>
 832:	81 11       	cpse	r24, r1
 834:	03 c0       	rjmp	.+6      	; 0x83c <_Z20MasterCom_PutCommandv+0x10e>
		{
			/* Signal that data is waiting to be transmitted without delay */
			MasterCom_DelayTxFlag = true;
 836:	81 e0       	ldi	r24, 0x01	; 1
 838:	80 93 0d 02 	sts	0x020D, r24	; 0x80020d <MasterCom_DelayTxFlag>
		}
		
		TX_CommandQueue[TxTail].sent = true;
 83c:	e0 91 8b 01 	lds	r30, 0x018B	; 0x80018b <TxTail>
 840:	f0 e0       	ldi	r31, 0x00	; 0
 842:	ee 0f       	add	r30, r30
 844:	ff 1f       	adc	r31, r31
 846:	ee 0f       	add	r30, r30
 848:	ff 1f       	adc	r31, r31
 84a:	ee 0f       	add	r30, r30
 84c:	ff 1f       	adc	r31, r31
 84e:	e1 57       	subi	r30, 0x71	; 113
 850:	fe 4f       	sbci	r31, 0xFE	; 254
 852:	81 e0       	ldi	r24, 0x01	; 1
 854:	86 83       	std	Z+6, r24	; 0x06
		
		/* Start response timeout timer */
		MasterCom_ResponseTimeoutOvfCnt = 1;
 856:	81 e0       	ldi	r24, 0x01	; 1
 858:	90 e0       	ldi	r25, 0x00	; 0
 85a:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <MasterCom_ResponseTimeoutOvfCnt+0x1>
 85e:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <MasterCom_ResponseTimeoutOvfCnt>
	}
}
 862:	cf 91       	pop	r28
 864:	08 95       	ret

00000866 <_Z12Select_RX_TXh>:
}


void Select_RX_TX(uint8_t dir)
{
	if (dir == DIR_TRANSMIT)
 866:	81 11       	cpse	r24, r1
 868:	03 c0       	rjmp	.+6      	; 0x870 <_Z12Select_RX_TXh+0xa>
	{
		SELECT_RX_TX_PORT &= ~(SELECT_RX_MASK);
 86a:	5e 98       	cbi	0x0b, 6	; 11
		SELECT_RX_TX_PORT |= SELECT_TX_MASK;
 86c:	5d 9a       	sbi	0x0b, 5	; 11
 86e:	08 95       	ret
	}
	else
	{
		SELECT_RX_TX_PORT |= SELECT_RX_MASK;
 870:	5e 9a       	sbi	0x0b, 6	; 11
		SELECT_RX_TX_PORT &= ~(SELECT_TX_MASK);
 872:	5d 98       	cbi	0x0b, 5	; 11
 874:	08 95       	ret

00000876 <_Z14MasterCom_Initv>:

/* Function implementations */
void MasterCom_Init()
{
	/* Set RX/TX Select GPIOs to output */
	SELECT_RX_TX_DDR |= (SELECT_RX_MASK | SELECT_TX_MASK);
 876:	8a b1       	in	r24, 0x0a	; 10
 878:	80 66       	ori	r24, 0x60	; 96
 87a:	8a b9       	out	0x0a, r24	; 10
	
	/* Activate receive */
	Select_RX_TX(DIR_RECEIVE);
 87c:	81 e0       	ldi	r24, 0x01	; 1
 87e:	0e 94 33 04 	call	0x866	; 0x866 <_Z12Select_RX_TXh>
	
	/* Enable TX Complete Interrupt */
	UCSR0B |= (1 << TXCIE0);
 882:	e1 ec       	ldi	r30, 0xC1	; 193
 884:	f0 e0       	ldi	r31, 0x00	; 0
 886:	80 81       	ld	r24, Z
 888:	80 64       	ori	r24, 0x40	; 64
 88a:	80 83       	st	Z, r24
 88c:	08 95       	ret

0000088e <_Z18MasterCom_Transmitv>:


void MasterCom_Transmit()
{
	/* Activate Transmit */
	Select_RX_TX(DIR_TRANSMIT);
 88e:	80 e0       	ldi	r24, 0x00	; 0
 890:	0e 94 33 04 	call	0x866	; 0x866 <_Z12Select_RX_TXh>
	
	/* Start transmit */
	UART_PutQueue();
 894:	0e 94 bf 06 	call	0xd7e	; 0xd7e <_Z13UART_PutQueuev>
 898:	08 95       	ret

0000089a <__vector_20>:
}


/* TX Complete Interrupt ISR */
ISR(USART_TX_vect)
{
 89a:	1f 92       	push	r1
 89c:	0f 92       	push	r0
 89e:	0f b6       	in	r0, 0x3f	; 63
 8a0:	0f 92       	push	r0
 8a2:	11 24       	eor	r1, r1
 8a4:	2f 93       	push	r18
 8a6:	3f 93       	push	r19
 8a8:	4f 93       	push	r20
 8aa:	5f 93       	push	r21
 8ac:	6f 93       	push	r22
 8ae:	7f 93       	push	r23
 8b0:	8f 93       	push	r24
 8b2:	9f 93       	push	r25
 8b4:	af 93       	push	r26
 8b6:	bf 93       	push	r27
 8b8:	ef 93       	push	r30
 8ba:	ff 93       	push	r31
	/* Deactivate Transmit */
	Select_RX_TX(DIR_RECEIVE);
 8bc:	81 e0       	ldi	r24, 0x01	; 1
 8be:	0e 94 33 04 	call	0x866	; 0x866 <_Z12Select_RX_TXh>
 8c2:	ff 91       	pop	r31
 8c4:	ef 91       	pop	r30
 8c6:	bf 91       	pop	r27
 8c8:	af 91       	pop	r26
 8ca:	9f 91       	pop	r25
 8cc:	8f 91       	pop	r24
 8ce:	7f 91       	pop	r23
 8d0:	6f 91       	pop	r22
 8d2:	5f 91       	pop	r21
 8d4:	4f 91       	pop	r20
 8d6:	3f 91       	pop	r19
 8d8:	2f 91       	pop	r18
 8da:	0f 90       	pop	r0
 8dc:	0f be       	out	0x3f, r0	; 63
 8de:	0f 90       	pop	r0
 8e0:	1f 90       	pop	r1
 8e2:	18 95       	reti

000008e4 <_Z17MCP23017_WriteReghhh>:
volatile uint8_t MCP_Output::AutoToggle_Flag = 0;
volatile uint8_t MCP_Output::AutoToggle_PortA = 0;
volatile uint8_t MCP_Output::AutoToggle_PortB = 0;

void MCP23017_WriteReg(unsigned char chip_addr, unsigned char reg, unsigned char val)
{
 8e4:	cf 93       	push	r28
 8e6:	df 93       	push	r29
 8e8:	d6 2f       	mov	r29, r22
 8ea:	c4 2f       	mov	r28, r20
	unsigned char start_byte = (((START_BYTE_MASK | chip_addr) << 1) + I2C_WRITE);
	
	i2c_start(start_byte);		// Set device address and write mode
 8ec:	80 62       	ori	r24, 0x20	; 32
 8ee:	88 0f       	add	r24, r24
 8f0:	0e 94 37 01 	call	0x26e	; 0x26e <_Z9i2c_starth>
	i2c_write(reg);             // Set MCP23017 memory pointer
 8f4:	8d 2f       	mov	r24, r29
 8f6:	0e 94 67 01 	call	0x2ce	; 0x2ce <_Z9i2c_writeh>
	i2c_write(val);             // Write value to register
 8fa:	8c 2f       	mov	r24, r28
 8fc:	0e 94 67 01 	call	0x2ce	; 0x2ce <_Z9i2c_writeh>
	i2c_stop();                 // Set stop condition = release bus
 900:	0e 94 5e 01 	call	0x2bc	; 0x2bc <_Z8i2c_stopv>
}
 904:	df 91       	pop	r29
 906:	cf 91       	pop	r28
 908:	08 95       	ret

0000090a <_Z16MCP23017_ReadReghh>:

unsigned char MCP23017_ReadReg(unsigned char chip_addr, unsigned char reg)
{
 90a:	cf 93       	push	r28
 90c:	df 93       	push	r29
 90e:	d6 2f       	mov	r29, r22
	unsigned char start_byte = (((START_BYTE_MASK | chip_addr) << 1) + I2C_WRITE);
 910:	80 62       	ori	r24, 0x20	; 32
 912:	c8 2f       	mov	r28, r24
 914:	cc 0f       	add	r28, r28

	i2c_start(start_byte);		// Set device address and write mode
 916:	8c 2f       	mov	r24, r28
 918:	0e 94 37 01 	call	0x26e	; 0x26e <_Z9i2c_starth>
	i2c_write(reg);             // Set MCP23017 memory pointer
 91c:	8d 2f       	mov	r24, r29
 91e:	0e 94 67 01 	call	0x2ce	; 0x2ce <_Z9i2c_writeh>
	i2c_stop();                 // Set stop condition = release bus
 922:	0e 94 5e 01 	call	0x2bc	; 0x2bc <_Z8i2c_stopv>

	start_byte |= I2C_READ;

	i2c_start(start_byte);		// Set device address and write mode
 926:	8c 2f       	mov	r24, r28
 928:	81 60       	ori	r24, 0x01	; 1
 92a:	0e 94 37 01 	call	0x26e	; 0x26e <_Z9i2c_starth>
	return i2c_readNak();       // Read byte and send stop condition
 92e:	0e 94 79 01 	call	0x2f2	; 0x2f2 <_Z11i2c_readNakv>
}
 932:	df 91       	pop	r29
 934:	cf 91       	pop	r28
 936:	08 95       	ret

00000938 <_Z20Segment7_WriteSinglehch>:
};


void Segment7_WriteSingle(uint8_t dig, char chr, uint8_t dot)
{
	unsigned char tmp = Segment7_DigitTable[(uint8_t)chr];
 938:	e6 2f       	mov	r30, r22
 93a:	f0 e0       	ldi	r31, 0x00	; 0
 93c:	ee 5f       	subi	r30, 0xFE	; 254
 93e:	fe 4f       	sbci	r31, 0xFE	; 254
 940:	90 81       	ld	r25, Z
	
	if (dot)
 942:	41 11       	cpse	r20, r1
	{
		tmp |= (1 << 7);
 944:	90 68       	ori	r25, 0x80	; 128
	}
	
	if (dig == 0)
 946:	81 11       	cpse	r24, r1
 948:	06 c0       	rjmp	.+12     	; 0x956 <_Z20Segment7_WriteSinglehch+0x1e>
	{
		MCP23017_WriteReg(MCP23017_ADDR_7SEG_DIGIT_0_1, OLATB, tmp);
 94a:	49 2f       	mov	r20, r25
 94c:	65 e1       	ldi	r22, 0x15	; 21
 94e:	81 e0       	ldi	r24, 0x01	; 1
 950:	0e 94 72 04 	call	0x8e4	; 0x8e4 <_Z17MCP23017_WriteReghhh>
 954:	08 95       	ret
	}
	else if (dig == 1)
 956:	81 30       	cpi	r24, 0x01	; 1
 958:	29 f4       	brne	.+10     	; 0x964 <_Z20Segment7_WriteSinglehch+0x2c>
	{
		MCP23017_WriteReg(MCP23017_ADDR_7SEG_DIGIT_0_1, OLATA, tmp);
 95a:	49 2f       	mov	r20, r25
 95c:	64 e1       	ldi	r22, 0x14	; 20
 95e:	0e 94 72 04 	call	0x8e4	; 0x8e4 <_Z17MCP23017_WriteReghhh>
 962:	08 95       	ret
	}
	else if (dig == 2)
 964:	82 30       	cpi	r24, 0x02	; 2
 966:	29 f4       	brne	.+10     	; 0x972 <_Z20Segment7_WriteSinglehch+0x3a>
	{
		MCP23017_WriteReg(MCP23017_ADDR_7SEG_DIGIT_2_3, OLATB, tmp);
 968:	49 2f       	mov	r20, r25
 96a:	65 e1       	ldi	r22, 0x15	; 21
 96c:	0e 94 72 04 	call	0x8e4	; 0x8e4 <_Z17MCP23017_WriteReghhh>
 970:	08 95       	ret
	}
	else if (dig == 3)
 972:	83 30       	cpi	r24, 0x03	; 3
 974:	29 f4       	brne	.+10     	; 0x980 <_Z20Segment7_WriteSinglehch+0x48>
	{
		MCP23017_WriteReg(MCP23017_ADDR_7SEG_DIGIT_2_3, OLATA, tmp);
 976:	49 2f       	mov	r20, r25
 978:	64 e1       	ldi	r22, 0x14	; 20
 97a:	82 e0       	ldi	r24, 0x02	; 2
 97c:	0e 94 72 04 	call	0x8e4	; 0x8e4 <_Z17MCP23017_WriteReghhh>
 980:	08 95       	ret

00000982 <_Z17Segment7_WriteAllcccchhhh>:
	}
}

void Segment7_WriteAll(char c3, char c2, char c1, char c0, uint8_t dot3, uint8_t dot2, uint8_t dot1, uint8_t dot0)
{
 982:	af 92       	push	r10
 984:	cf 92       	push	r12
 986:	ef 92       	push	r14
 988:	0f 93       	push	r16
 98a:	1f 93       	push	r17
 98c:	cf 93       	push	r28
 98e:	df 93       	push	r29
 990:	c8 2f       	mov	r28, r24
 992:	d6 2f       	mov	r29, r22
 994:	14 2f       	mov	r17, r20
 996:	4a 2d       	mov	r20, r10
	Segment7_WriteSingle(0, c0, dot0);
 998:	62 2f       	mov	r22, r18
 99a:	80 e0       	ldi	r24, 0x00	; 0
 99c:	0e 94 9c 04 	call	0x938	; 0x938 <_Z20Segment7_WriteSinglehch>
	Segment7_WriteSingle(1, c1, dot1);
 9a0:	4c 2d       	mov	r20, r12
 9a2:	61 2f       	mov	r22, r17
 9a4:	81 e0       	ldi	r24, 0x01	; 1
 9a6:	0e 94 9c 04 	call	0x938	; 0x938 <_Z20Segment7_WriteSinglehch>
	Segment7_WriteSingle(2, c2, dot2);
 9aa:	4e 2d       	mov	r20, r14
 9ac:	6d 2f       	mov	r22, r29
 9ae:	82 e0       	ldi	r24, 0x02	; 2
 9b0:	0e 94 9c 04 	call	0x938	; 0x938 <_Z20Segment7_WriteSinglehch>
	Segment7_WriteSingle(3, c3, dot3);
 9b4:	40 2f       	mov	r20, r16
 9b6:	6c 2f       	mov	r22, r28
 9b8:	83 e0       	ldi	r24, 0x03	; 3
 9ba:	0e 94 9c 04 	call	0x938	; 0x938 <_Z20Segment7_WriteSinglehch>
}
 9be:	df 91       	pop	r29
 9c0:	cf 91       	pop	r28
 9c2:	1f 91       	pop	r17
 9c4:	0f 91       	pop	r16
 9c6:	ef 90       	pop	r14
 9c8:	cf 90       	pop	r12
 9ca:	af 90       	pop	r10
 9cc:	08 95       	ret

000009ce <_Z28System_HandleFootswitchInput16Footswitch_Stateh>:
#include "MCP23017.h"

volatile System_State SystemState = EDITING;

void System_HandleFootswitchInput(Footswitch_State state, uint8_t sw)
{
 9ce:	af 92       	push	r10
 9d0:	cf 92       	push	r12
 9d2:	ef 92       	push	r14
 9d4:	0f 93       	push	r16
 9d6:	cf 93       	push	r28
 9d8:	df 93       	push	r29
 9da:	1f 92       	push	r1
 9dc:	cd b7       	in	r28, 0x3d	; 61
 9de:	de b7       	in	r29, 0x3e	; 62
 9e0:	69 83       	std	Y+1, r22	; 0x01
	if (state == SHORT_PRESS)
 9e2:	83 30       	cpi	r24, 0x03	; 3
 9e4:	41 f4       	brne	.+16     	; 0x9f6 <_Z28System_HandleFootswitchInput16Footswitch_Stateh+0x28>
	{
		MasterCom_QueueCommand(FootswitchShortPress, 1, (uint8_t *)&sw);
 9e6:	ae 01       	movw	r20, r28
 9e8:	4f 5f       	subi	r20, 0xFF	; 255
 9ea:	5f 4f       	sbci	r21, 0xFF	; 255
 9ec:	61 e0       	ldi	r22, 0x01	; 1
 9ee:	81 eb       	ldi	r24, 0xB1	; 177
 9f0:	0e 94 3e 03 	call	0x67c	; 0x67c <_Z22MasterCom_QueueCommand3CMDhPh>
 9f4:	28 c0       	rjmp	.+80     	; 0xa46 <_Z28System_HandleFootswitchInput16Footswitch_Stateh+0x78>
	}
	else if (state == LONG_PRESS)
 9f6:	86 30       	cpi	r24, 0x06	; 6
 9f8:	41 f4       	brne	.+16     	; 0xa0a <_Z28System_HandleFootswitchInput16Footswitch_Stateh+0x3c>
	{
		MasterCom_QueueCommand(FootswitchLongPress, 1, (uint8_t *)&sw);
 9fa:	ae 01       	movw	r20, r28
 9fc:	4f 5f       	subi	r20, 0xFF	; 255
 9fe:	5f 4f       	sbci	r21, 0xFF	; 255
 a00:	61 e0       	ldi	r22, 0x01	; 1
 a02:	82 eb       	ldi	r24, 0xB2	; 178
 a04:	0e 94 3e 03 	call	0x67c	; 0x67c <_Z22MasterCom_QueueCommand3CMDhPh>
 a08:	1e c0       	rjmp	.+60     	; 0xa46 <_Z28System_HandleFootswitchInput16Footswitch_Stateh+0x78>
	}
	else if (state == LONG_LONG_PRESS)
 a0a:	87 30       	cpi	r24, 0x07	; 7
 a0c:	e1 f4       	brne	.+56     	; 0xa46 <_Z28System_HandleFootswitchInput16Footswitch_Stateh+0x78>
	{
		MasterCom_QueueCommand(FootswitchLongLongPress, 1, (uint8_t *)&sw);
 a0e:	ae 01       	movw	r20, r28
 a10:	4f 5f       	subi	r20, 0xFF	; 255
 a12:	5f 4f       	sbci	r21, 0xFF	; 255
 a14:	61 e0       	ldi	r22, 0x01	; 1
 a16:	84 eb       	ldi	r24, 0xB4	; 180
 a18:	0e 94 3e 03 	call	0x67c	; 0x67c <_Z22MasterCom_QueueCommand3CMDhPh>
		
		/* Only write Tuner in 7-segment display if Not in tuner mode AND if not Loop Ctrl bottom row footswitch was pressed */
		if ((SystemState != TUNER) && !(SystemState == RUN_LOOP_CTRL && (sw & 0x0F)))
 a1c:	80 91 0e 02 	lds	r24, 0x020E	; 0x80020e <SystemState>
 a20:	83 30       	cpi	r24, 0x03	; 3
 a22:	89 f0       	breq	.+34     	; 0xa46 <_Z28System_HandleFootswitchInput16Footswitch_Stateh+0x78>
 a24:	80 91 0e 02 	lds	r24, 0x020E	; 0x80020e <SystemState>
 a28:	82 30       	cpi	r24, 0x02	; 2
 a2a:	19 f4       	brne	.+6      	; 0xa32 <_Z28System_HandleFootswitchInput16Footswitch_Stateh+0x64>
 a2c:	89 81       	ldd	r24, Y+1	; 0x01
 a2e:	8f 70       	andi	r24, 0x0F	; 15
 a30:	51 f4       	brne	.+20     	; 0xa46 <_Z28System_HandleFootswitchInput16Footswitch_Stateh+0x78>
		{
			Segment7_WriteAll('T', 'u', 'n', 'r', 0, 0, 0, 0);
 a32:	a1 2c       	mov	r10, r1
 a34:	c1 2c       	mov	r12, r1
 a36:	e1 2c       	mov	r14, r1
 a38:	00 e0       	ldi	r16, 0x00	; 0
 a3a:	22 e7       	ldi	r18, 0x72	; 114
 a3c:	4e e6       	ldi	r20, 0x6E	; 110
 a3e:	65 e7       	ldi	r22, 0x75	; 117
 a40:	84 e5       	ldi	r24, 0x54	; 84
 a42:	0e 94 c1 04 	call	0x982	; 0x982 <_Z17Segment7_WriteAllcccchhhh>
		}
	}
}
 a46:	0f 90       	pop	r0
 a48:	df 91       	pop	r29
 a4a:	cf 91       	pop	r28
 a4c:	0f 91       	pop	r16
 a4e:	ef 90       	pop	r14
 a50:	cf 90       	pop	r12
 a52:	af 90       	pop	r10
 a54:	08 95       	ret

00000a56 <_Z26System_HandleMasterCommand3CMDhPh>:

unsigned char System_HandleMasterCommand(CMD cmd, uint8_t length, uint8_t *dat)
{
 a56:	af 92       	push	r10
 a58:	cf 92       	push	r12
 a5a:	ef 92       	push	r14
 a5c:	0f 93       	push	r16
 a5e:	cf 93       	push	r28
 a60:	df 93       	push	r29
	unsigned char response = ACK_BYTE;
	
	if (cmd == UpdateSystemState && length == 1)
 a62:	85 3d       	cpi	r24, 0xD5	; 213
 a64:	f1 f4       	brne	.+60     	; 0xaa2 <_Z26System_HandleMasterCommand3CMDhPh+0x4c>
 a66:	61 30       	cpi	r22, 0x01	; 1
 a68:	09 f0       	breq	.+2      	; 0xa6c <_Z26System_HandleMasterCommand3CMDhPh+0x16>
 a6a:	49 c0       	rjmp	.+146    	; 0xafe <_Z26System_HandleMasterCommand3CMDhPh+0xa8>
	{
		if (dat[0] == 4)
 a6c:	fa 01       	movw	r30, r20
 a6e:	80 81       	ld	r24, Z
 a70:	84 30       	cpi	r24, 0x04	; 4
 a72:	29 f4       	brne	.+10     	; 0xa7e <_Z26System_HandleMasterCommand3CMDhPh+0x28>
		{
			SystemState = RUN_PRESET_CTRL;
 a74:	81 e0       	ldi	r24, 0x01	; 1
 a76:	80 93 0e 02 	sts	0x020E, r24	; 0x80020e <SystemState>
	}
}

unsigned char System_HandleMasterCommand(CMD cmd, uint8_t length, uint8_t *dat)
{
	unsigned char response = ACK_BYTE;
 a7a:	8c ea       	ldi	r24, 0xAC	; 172
 a7c:	49 c0       	rjmp	.+146    	; 0xb10 <_Z26System_HandleMasterCommand3CMDhPh+0xba>
	{
		if (dat[0] == 4)
		{
			SystemState = RUN_PRESET_CTRL;
		}
		else if (dat[0] == 6)
 a7e:	86 30       	cpi	r24, 0x06	; 6
 a80:	29 f4       	brne	.+10     	; 0xa8c <_Z26System_HandleMasterCommand3CMDhPh+0x36>
		{
			SystemState = RUN_LOOP_CTRL;
 a82:	82 e0       	ldi	r24, 0x02	; 2
 a84:	80 93 0e 02 	sts	0x020E, r24	; 0x80020e <SystemState>
	}
}

unsigned char System_HandleMasterCommand(CMD cmd, uint8_t length, uint8_t *dat)
{
	unsigned char response = ACK_BYTE;
 a88:	8c ea       	ldi	r24, 0xAC	; 172
 a8a:	42 c0       	rjmp	.+132    	; 0xb10 <_Z26System_HandleMasterCommand3CMDhPh+0xba>
		}
		else if (dat[0] == 6)
		{
			SystemState = RUN_LOOP_CTRL;
		}
		else if (dat[0] == 8)
 a8c:	88 30       	cpi	r24, 0x08	; 8
 a8e:	29 f4       	brne	.+10     	; 0xa9a <_Z26System_HandleMasterCommand3CMDhPh+0x44>
		{
			SystemState = TUNER;
 a90:	83 e0       	ldi	r24, 0x03	; 3
 a92:	80 93 0e 02 	sts	0x020E, r24	; 0x80020e <SystemState>
	}
}

unsigned char System_HandleMasterCommand(CMD cmd, uint8_t length, uint8_t *dat)
{
	unsigned char response = ACK_BYTE;
 a96:	8c ea       	ldi	r24, 0xAC	; 172
 a98:	3b c0       	rjmp	.+118    	; 0xb10 <_Z26System_HandleMasterCommand3CMDhPh+0xba>
		{
			SystemState = TUNER;
		}
		else
		{
			SystemState = EDITING;
 a9a:	10 92 0e 02 	sts	0x020E, r1	; 0x80020e <SystemState>
	}
}

unsigned char System_HandleMasterCommand(CMD cmd, uint8_t length, uint8_t *dat)
{
	unsigned char response = ACK_BYTE;
 a9e:	8c ea       	ldi	r24, 0xAC	; 172
 aa0:	37 c0       	rjmp	.+110    	; 0xb10 <_Z26System_HandleMasterCommand3CMDhPh+0xba>
 aa2:	ea 01       	movw	r28, r20
		else
		{
			SystemState = EDITING;
		}
	}
	else if (cmd == Update7segments && length == 4)
 aa4:	87 3d       	cpi	r24, 0xD7	; 215
 aa6:	71 f4       	brne	.+28     	; 0xac4 <_Z26System_HandleMasterCommand3CMDhPh+0x6e>
 aa8:	64 30       	cpi	r22, 0x04	; 4
 aaa:	59 f5       	brne	.+86     	; 0xb02 <_Z26System_HandleMasterCommand3CMDhPh+0xac>
	{
		Segment7_WriteAll((char)dat[0], (char)dat[1], (char)dat[2], (char)dat[3], 0, 0, 0, 0);
 aac:	a1 2c       	mov	r10, r1
 aae:	c1 2c       	mov	r12, r1
 ab0:	e1 2c       	mov	r14, r1
 ab2:	00 e0       	ldi	r16, 0x00	; 0
 ab4:	2b 81       	ldd	r18, Y+3	; 0x03
 ab6:	4a 81       	ldd	r20, Y+2	; 0x02
 ab8:	69 81       	ldd	r22, Y+1	; 0x01
 aba:	88 81       	ld	r24, Y
 abc:	0e 94 c1 04 	call	0x982	; 0x982 <_Z17Segment7_WriteAllcccchhhh>
	}
}

unsigned char System_HandleMasterCommand(CMD cmd, uint8_t length, uint8_t *dat)
{
	unsigned char response = ACK_BYTE;
 ac0:	8c ea       	ldi	r24, 0xAC	; 172
			SystemState = EDITING;
		}
	}
	else if (cmd == Update7segments && length == 4)
	{
		Segment7_WriteAll((char)dat[0], (char)dat[1], (char)dat[2], (char)dat[3], 0, 0, 0, 0);
 ac2:	26 c0       	rjmp	.+76     	; 0xb10 <_Z26System_HandleMasterCommand3CMDhPh+0xba>
	}
	else if (cmd == UpdatePresetLoopLEDs && length == 1)
 ac4:	80 3d       	cpi	r24, 0xD0	; 208
 ac6:	49 f4       	brne	.+18     	; 0xada <_Z26System_HandleMasterCommand3CMDhPh+0x84>
 ac8:	61 30       	cpi	r22, 0x01	; 1
 aca:	e9 f4       	brne	.+58     	; 0xb06 <_Z26System_HandleMasterCommand3CMDhPh+0xb0>
	{
		MCP23017_WriteReg(MCP23017_ADDR_SWITCH_INDICATOR, OLATA, dat[0]);
 acc:	48 81       	ld	r20, Y
 ace:	64 e1       	ldi	r22, 0x14	; 20
 ad0:	80 e0       	ldi	r24, 0x00	; 0
 ad2:	0e 94 72 04 	call	0x8e4	; 0x8e4 <_Z17MCP23017_WriteReghhh>
	}
}

unsigned char System_HandleMasterCommand(CMD cmd, uint8_t length, uint8_t *dat)
{
	unsigned char response = ACK_BYTE;
 ad6:	8c ea       	ldi	r24, 0xAC	; 172
	{
		Segment7_WriteAll((char)dat[0], (char)dat[1], (char)dat[2], (char)dat[3], 0, 0, 0, 0);
	}
	else if (cmd == UpdatePresetLoopLEDs && length == 1)
	{
		MCP23017_WriteReg(MCP23017_ADDR_SWITCH_INDICATOR, OLATA, dat[0]);
 ad8:	1b c0       	rjmp	.+54     	; 0xb10 <_Z26System_HandleMasterCommand3CMDhPh+0xba>
	}
	else if (cmd == UpdateTunerLEDs && length == 2)
 ada:	83 3d       	cpi	r24, 0xD3	; 211
 adc:	b1 f4       	brne	.+44     	; 0xb0a <_Z26System_HandleMasterCommand3CMDhPh+0xb4>
 ade:	62 30       	cpi	r22, 0x02	; 2
 ae0:	b1 f4       	brne	.+44     	; 0xb0e <_Z26System_HandleMasterCommand3CMDhPh+0xb8>
	{
		MCP23017_WriteReg(MCP23017_ADDR_TUNER_DISPLAY, OLATA, dat[0]);
 ae2:	48 81       	ld	r20, Y
 ae4:	64 e1       	ldi	r22, 0x14	; 20
 ae6:	84 e0       	ldi	r24, 0x04	; 4
 ae8:	0e 94 72 04 	call	0x8e4	; 0x8e4 <_Z17MCP23017_WriteReghhh>
				
		if (dat[1])
 aec:	89 81       	ldd	r24, Y+1	; 0x01
 aee:	88 23       	and	r24, r24
 af0:	19 f0       	breq	.+6      	; 0xaf8 <_Z26System_HandleMasterCommand3CMDhPh+0xa2>
		{
			TUNER_GREEN_LED_PORT |= TUNER_GREEN_LED_MASK;
 af2:	28 9a       	sbi	0x05, 0	; 5
	}
}

unsigned char System_HandleMasterCommand(CMD cmd, uint8_t length, uint8_t *dat)
{
	unsigned char response = ACK_BYTE;
 af4:	8c ea       	ldi	r24, 0xAC	; 172
 af6:	0c c0       	rjmp	.+24     	; 0xb10 <_Z26System_HandleMasterCommand3CMDhPh+0xba>
		{
			TUNER_GREEN_LED_PORT |= TUNER_GREEN_LED_MASK;
		}
		else
		{
			TUNER_GREEN_LED_PORT &= ~TUNER_GREEN_LED_MASK;
 af8:	28 98       	cbi	0x05, 0	; 5
	}
}

unsigned char System_HandleMasterCommand(CMD cmd, uint8_t length, uint8_t *dat)
{
	unsigned char response = ACK_BYTE;
 afa:	8c ea       	ldi	r24, 0xAC	; 172
 afc:	09 c0       	rjmp	.+18     	; 0xb10 <_Z26System_HandleMasterCommand3CMDhPh+0xba>
			TUNER_GREEN_LED_PORT &= ~TUNER_GREEN_LED_MASK;
		}
	}
	else
	{
		response = NACK_BYTE;
 afe:	8a e2       	ldi	r24, 0x2A	; 42
 b00:	07 c0       	rjmp	.+14     	; 0xb10 <_Z26System_HandleMasterCommand3CMDhPh+0xba>
 b02:	8a e2       	ldi	r24, 0x2A	; 42
 b04:	05 c0       	rjmp	.+10     	; 0xb10 <_Z26System_HandleMasterCommand3CMDhPh+0xba>
 b06:	8a e2       	ldi	r24, 0x2A	; 42
 b08:	03 c0       	rjmp	.+6      	; 0xb10 <_Z26System_HandleMasterCommand3CMDhPh+0xba>
 b0a:	8a e2       	ldi	r24, 0x2A	; 42
 b0c:	01 c0       	rjmp	.+2      	; 0xb10 <_Z26System_HandleMasterCommand3CMDhPh+0xba>
 b0e:	8a e2       	ldi	r24, 0x2A	; 42
	}
	
	return response;
}
 b10:	df 91       	pop	r29
 b12:	cf 91       	pop	r28
 b14:	0f 91       	pop	r16
 b16:	ef 90       	pop	r14
 b18:	cf 90       	pop	r12
 b1a:	af 90       	pop	r10
 b1c:	08 95       	ret

00000b1e <_Z11Timer0_Initv>:

uint32_t Timer0_ms2cnt(uint32_t ms)
{
	ms *= 1000;
	return (uint32_t)(ms / TIMER0_PERIOD_US);
}
 b1e:	84 b5       	in	r24, 0x24	; 36
 b20:	82 60       	ori	r24, 0x02	; 2
 b22:	84 bd       	out	0x24, r24	; 36
 b24:	16 bc       	out	0x26, r1	; 38
 b26:	8c e7       	ldi	r24, 0x7C	; 124
 b28:	87 bd       	out	0x27, r24	; 39
 b2a:	ee e6       	ldi	r30, 0x6E	; 110
 b2c:	f0 e0       	ldi	r31, 0x00	; 0
 b2e:	80 81       	ld	r24, Z
 b30:	82 60       	ori	r24, 0x02	; 2
 b32:	80 83       	st	Z, r24
 b34:	85 b5       	in	r24, 0x25	; 37
 b36:	84 60       	ori	r24, 0x04	; 4
 b38:	85 bd       	out	0x25, r24	; 37
 b3a:	08 95       	ret

00000b3c <__vector_14>:

/* Timer0 Compare A Match Interrupt Service Routine */
ISR(TIMER0_COMPA_vect)
{
 b3c:	1f 92       	push	r1
 b3e:	0f 92       	push	r0
 b40:	0f b6       	in	r0, 0x3f	; 63
 b42:	0f 92       	push	r0
 b44:	11 24       	eor	r1, r1
 b46:	2f 93       	push	r18
 b48:	8f 93       	push	r24
 b4a:	9f 93       	push	r25
	/* Overflow counter for delaying transmit to Master */
	if (MasterCom_DelayTXOvfCnt)
 b4c:	80 91 0c 02 	lds	r24, 0x020C	; 0x80020c <MasterCom_DelayTXOvfCnt>
 b50:	88 23       	and	r24, r24
 b52:	61 f0       	breq	.+24     	; 0xb6c <__vector_14+0x30>
	{
		if (++MasterCom_DelayTXOvfCnt > MASTERCOM_DELAY_TX_TIMEOUT)
 b54:	80 91 0c 02 	lds	r24, 0x020C	; 0x80020c <MasterCom_DelayTXOvfCnt>
 b58:	8f 5f       	subi	r24, 0xFF	; 255
 b5a:	80 93 0c 02 	sts	0x020C, r24	; 0x80020c <MasterCom_DelayTXOvfCnt>
 b5e:	84 30       	cpi	r24, 0x04	; 4
 b60:	28 f0       	brcs	.+10     	; 0xb6c <__vector_14+0x30>
		{
			MasterCom_DelayTXOvfCnt = 0;	// Stop overflow counter
 b62:	10 92 0c 02 	sts	0x020C, r1	; 0x80020c <MasterCom_DelayTXOvfCnt>
			MasterCom_DelayTxFlag = true;
 b66:	81 e0       	ldi	r24, 0x01	; 1
 b68:	80 93 0d 02 	sts	0x020D, r24	; 0x80020d <MasterCom_DelayTxFlag>
		}
	}

	/* Overflow counter for Master response timeout and heartbeat */
	if (++MasterCom_ResponseTimeoutOvfCnt > MASTERCOM_RESPONSE_TIMEOUT)
 b6c:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <MasterCom_ResponseTimeoutOvfCnt>
 b70:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <MasterCom_ResponseTimeoutOvfCnt+0x1>
 b74:	01 96       	adiw	r24, 0x01	; 1
 b76:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <MasterCom_ResponseTimeoutOvfCnt+0x1>
 b7a:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <MasterCom_ResponseTimeoutOvfCnt>
 b7e:	89 3e       	cpi	r24, 0xE9	; 233
 b80:	93 40       	sbci	r25, 0x03	; 3
 b82:	40 f0       	brcs	.+16     	; 0xb94 <__vector_14+0x58>
	{
		MasterCom_ResponseTimeoutOvfCnt = 1;	// Reset overflow counter
 b84:	81 e0       	ldi	r24, 0x01	; 1
 b86:	90 e0       	ldi	r25, 0x00	; 0
 b88:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <MasterCom_ResponseTimeoutOvfCnt+0x1>
 b8c:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <MasterCom_ResponseTimeoutOvfCnt>
		MasterCom_ResponseTimeoutFlag = true;
 b90:	80 93 0b 02 	sts	0x020B, r24	; 0x80020b <MasterCom_ResponseTimeoutFlag>
	}
	
	/* Overflow counter for handling Footswitch press timing */
	if (Footswitch_TimerOvfCnt)
 b94:	80 91 83 01 	lds	r24, 0x0183	; 0x800183 <Footswitch_TimerOvfCnt>
 b98:	90 91 84 01 	lds	r25, 0x0184	; 0x800184 <Footswitch_TimerOvfCnt+0x1>
 b9c:	89 2b       	or	r24, r25
 b9e:	09 f4       	brne	.+2      	; 0xba2 <__vector_14+0x66>
 ba0:	43 c0       	rjmp	.+134    	; 0xc28 <__vector_14+0xec>
	{
		Footswitch_TimerOvfCnt++;
 ba2:	80 91 83 01 	lds	r24, 0x0183	; 0x800183 <Footswitch_TimerOvfCnt>
 ba6:	90 91 84 01 	lds	r25, 0x0184	; 0x800184 <Footswitch_TimerOvfCnt+0x1>
 baa:	01 96       	adiw	r24, 0x01	; 1
 bac:	90 93 84 01 	sts	0x0184, r25	; 0x800184 <Footswitch_TimerOvfCnt+0x1>
 bb0:	80 93 83 01 	sts	0x0183, r24	; 0x800183 <Footswitch_TimerOvfCnt>
			
		if (Footswitch_TimerOvfCnt > FOOTSWITCH_LONG_LONG_PRESS_TIMEOUT && Footswitch_PressState == PRESSED)
 bb4:	80 91 83 01 	lds	r24, 0x0183	; 0x800183 <Footswitch_TimerOvfCnt>
 bb8:	90 91 84 01 	lds	r25, 0x0184	; 0x800184 <Footswitch_TimerOvfCnt+0x1>
 bbc:	81 3b       	cpi	r24, 0xB1	; 177
 bbe:	94 40       	sbci	r25, 0x04	; 4
 bc0:	b0 f0       	brcs	.+44     	; 0xbee <__vector_14+0xb2>
 bc2:	80 91 88 01 	lds	r24, 0x0188	; 0x800188 <Footswitch_PressState>
 bc6:	84 30       	cpi	r24, 0x04	; 4
 bc8:	91 f4       	brne	.+36     	; 0xbee <__vector_14+0xb2>
 bca:	0a c0       	rjmp	.+20     	; 0xbe0 <__vector_14+0xa4>
		{
			Footswitch_TimerFlag = true;
			Footswitch_PressState = STILL_PRESSED;
		}
		else if (Footswitch_TimerOvfCnt > FOOTSWITCH_LONG_PRESS_TIMEOUT  && Footswitch_PressState == WAITING)
 bcc:	80 91 88 01 	lds	r24, 0x0188	; 0x800188 <Footswitch_PressState>
 bd0:	82 30       	cpi	r24, 0x02	; 2
 bd2:	e1 f4       	brne	.+56     	; 0xc0c <__vector_14+0xd0>
 bd4:	14 c0       	rjmp	.+40     	; 0xbfe <__vector_14+0xc2>
		{
			Footswitch_PressState = PRESSED;
			Footswitch_TimerFlag = true;
		}
		else if (Footswitch_TimerOvfCnt > FOOTSWITCH_SHORT_PRESS_TIMEOUT && Footswitch_PressState == PRESS_SENSED)
 bd6:	80 91 88 01 	lds	r24, 0x0188	; 0x800188 <Footswitch_PressState>
 bda:	81 30       	cpi	r24, 0x01	; 1
 bdc:	29 f5       	brne	.+74     	; 0xc28 <__vector_14+0xec>
 bde:	1e c0       	rjmp	.+60     	; 0xc1c <__vector_14+0xe0>
	{
		Footswitch_TimerOvfCnt++;
			
		if (Footswitch_TimerOvfCnt > FOOTSWITCH_LONG_LONG_PRESS_TIMEOUT && Footswitch_PressState == PRESSED)
		{
			Footswitch_TimerFlag = true;
 be0:	81 e0       	ldi	r24, 0x01	; 1
 be2:	80 93 82 01 	sts	0x0182, r24	; 0x800182 <__data_end>
			Footswitch_PressState = STILL_PRESSED;
 be6:	85 e0       	ldi	r24, 0x05	; 5
 be8:	80 93 88 01 	sts	0x0188, r24	; 0x800188 <Footswitch_PressState>
 bec:	1d c0       	rjmp	.+58     	; 0xc28 <__vector_14+0xec>
		}
		else if (Footswitch_TimerOvfCnt > FOOTSWITCH_LONG_PRESS_TIMEOUT  && Footswitch_PressState == WAITING)
 bee:	80 91 83 01 	lds	r24, 0x0183	; 0x800183 <Footswitch_TimerOvfCnt>
 bf2:	90 91 84 01 	lds	r25, 0x0184	; 0x800184 <Footswitch_TimerOvfCnt+0x1>
 bf6:	89 35       	cpi	r24, 0x59	; 89
 bf8:	92 40       	sbci	r25, 0x02	; 2
 bfa:	40 f7       	brcc	.-48     	; 0xbcc <__vector_14+0x90>
 bfc:	07 c0       	rjmp	.+14     	; 0xc0c <__vector_14+0xd0>
		{
			Footswitch_PressState = PRESSED;
 bfe:	84 e0       	ldi	r24, 0x04	; 4
 c00:	80 93 88 01 	sts	0x0188, r24	; 0x800188 <Footswitch_PressState>
			Footswitch_TimerFlag = true;
 c04:	81 e0       	ldi	r24, 0x01	; 1
 c06:	80 93 82 01 	sts	0x0182, r24	; 0x800182 <__data_end>
 c0a:	0e c0       	rjmp	.+28     	; 0xc28 <__vector_14+0xec>
		}
		else if (Footswitch_TimerOvfCnt > FOOTSWITCH_SHORT_PRESS_TIMEOUT && Footswitch_PressState == PRESS_SENSED)
 c0c:	80 91 83 01 	lds	r24, 0x0183	; 0x800183 <Footswitch_TimerOvfCnt>
 c10:	90 91 84 01 	lds	r25, 0x0184	; 0x800184 <Footswitch_TimerOvfCnt+0x1>
 c14:	8d 38       	cpi	r24, 0x8D	; 141
 c16:	91 05       	cpc	r25, r1
 c18:	f0 f6       	brcc	.-68     	; 0xbd6 <__vector_14+0x9a>
 c1a:	06 c0       	rjmp	.+12     	; 0xc28 <__vector_14+0xec>
		{
			Footswitch_PressState = WAITING;
 c1c:	82 e0       	ldi	r24, 0x02	; 2
 c1e:	80 93 88 01 	sts	0x0188, r24	; 0x800188 <Footswitch_PressState>
			Footswitch_TimerFlag = true;
 c22:	81 e0       	ldi	r24, 0x01	; 1
 c24:	80 93 82 01 	sts	0x0182, r24	; 0x800182 <__data_end>
		}
	}
 c28:	9f 91       	pop	r25
 c2a:	8f 91       	pop	r24
 c2c:	2f 91       	pop	r18
 c2e:	0f 90       	pop	r0
 c30:	0f be       	out	0x3f, r0	; 63
 c32:	0f 90       	pop	r0
 c34:	1f 90       	pop	r1
 c36:	18 95       	reti

00000c38 <_Z9UART_Initjhh>:
	
	for (i = 0; i < length; i++)
	{
		UART_QueueChar(array[i]);
	}
}
 c38:	cf 93       	push	r28
 c3a:	df 93       	push	r29
 c3c:	d6 2f       	mov	r29, r22
 c3e:	c4 2f       	mov	r28, r20
 c40:	51 9a       	sbi	0x0a, 1	; 10
 c42:	59 9a       	sbi	0x0b, 1	; 11
 c44:	10 92 13 02 	sts	0x0213, r1	; 0x800213 <_ZL11UART_TxHead>
 c48:	10 92 12 02 	sts	0x0212, r1	; 0x800212 <_ZL11UART_TxTail>
 c4c:	10 92 11 02 	sts	0x0211, r1	; 0x800211 <_ZL11UART_RxHead>
 c50:	10 92 10 02 	sts	0x0210, r1	; 0x800210 <_ZL11UART_RxTail>
 c54:	a0 e0       	ldi	r26, 0x00	; 0
 c56:	b0 e0       	ldi	r27, 0x00	; 0
 c58:	88 0f       	add	r24, r24
 c5a:	99 1f       	adc	r25, r25
 c5c:	aa 1f       	adc	r26, r26
 c5e:	bb 1f       	adc	r27, r27
 c60:	88 0f       	add	r24, r24
 c62:	99 1f       	adc	r25, r25
 c64:	aa 1f       	adc	r26, r26
 c66:	bb 1f       	adc	r27, r27
 c68:	9c 01       	movw	r18, r24
 c6a:	ad 01       	movw	r20, r26
 c6c:	22 0f       	add	r18, r18
 c6e:	33 1f       	adc	r19, r19
 c70:	44 1f       	adc	r20, r20
 c72:	55 1f       	adc	r21, r21
 c74:	22 0f       	add	r18, r18
 c76:	33 1f       	adc	r19, r19
 c78:	44 1f       	adc	r20, r20
 c7a:	55 1f       	adc	r21, r21
 c7c:	60 e0       	ldi	r22, 0x00	; 0
 c7e:	74 e2       	ldi	r23, 0x24	; 36
 c80:	84 ef       	ldi	r24, 0xF4	; 244
 c82:	90 e0       	ldi	r25, 0x00	; 0
 c84:	0e 94 2e 07 	call	0xe5c	; 0xe5c <__udivmodsi4>
 c88:	21 50       	subi	r18, 0x01	; 1
 c8a:	31 09       	sbc	r19, r1
 c8c:	30 93 c5 00 	sts	0x00C5, r19	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
 c90:	20 93 c4 00 	sts	0x00C4, r18	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
 c94:	e2 ec       	ldi	r30, 0xC2	; 194
 c96:	f0 e0       	ldi	r31, 0x00	; 0
 c98:	80 81       	ld	r24, Z
 c9a:	8f 73       	andi	r24, 0x3F	; 63
 c9c:	80 83       	st	Z, r24
 c9e:	d2 30       	cpi	r29, 0x02	; 2
 ca0:	21 f4       	brne	.+8      	; 0xcaa <_Z9UART_Initjhh+0x72>
 ca2:	80 81       	ld	r24, Z
 ca4:	88 60       	ori	r24, 0x08	; 8
 ca6:	80 83       	st	Z, r24
 ca8:	05 c0       	rjmp	.+10     	; 0xcb4 <_Z9UART_Initjhh+0x7c>
 caa:	e2 ec       	ldi	r30, 0xC2	; 194
 cac:	f0 e0       	ldi	r31, 0x00	; 0
 cae:	80 81       	ld	r24, Z
 cb0:	87 7f       	andi	r24, 0xF7	; 247
 cb2:	80 83       	st	Z, r24
 cb4:	c2 30       	cpi	r28, 0x02	; 2
 cb6:	49 f4       	brne	.+18     	; 0xcca <_Z9UART_Initjhh+0x92>
 cb8:	e2 ec       	ldi	r30, 0xC2	; 194
 cba:	f0 e0       	ldi	r31, 0x00	; 0
 cbc:	80 81       	ld	r24, Z
 cbe:	8f 7e       	andi	r24, 0xEF	; 239
 cc0:	80 83       	st	Z, r24
 cc2:	80 81       	ld	r24, Z
 cc4:	80 62       	ori	r24, 0x20	; 32
 cc6:	80 83       	st	Z, r24
 cc8:	0d c0       	rjmp	.+26     	; 0xce4 <_Z9UART_Initjhh+0xac>
 cca:	c3 30       	cpi	r28, 0x03	; 3
 ccc:	31 f4       	brne	.+12     	; 0xcda <_Z9UART_Initjhh+0xa2>
 cce:	e2 ec       	ldi	r30, 0xC2	; 194
 cd0:	f0 e0       	ldi	r31, 0x00	; 0
 cd2:	80 81       	ld	r24, Z
 cd4:	80 63       	ori	r24, 0x30	; 48
 cd6:	80 83       	st	Z, r24
 cd8:	05 c0       	rjmp	.+10     	; 0xce4 <_Z9UART_Initjhh+0xac>
 cda:	e2 ec       	ldi	r30, 0xC2	; 194
 cdc:	f0 e0       	ldi	r31, 0x00	; 0
 cde:	80 81       	ld	r24, Z
 ce0:	8f 7c       	andi	r24, 0xCF	; 207
 ce2:	80 83       	st	Z, r24
 ce4:	e2 ec       	ldi	r30, 0xC2	; 194
 ce6:	f0 e0       	ldi	r31, 0x00	; 0
 ce8:	80 81       	ld	r24, Z
 cea:	86 60       	ori	r24, 0x06	; 6
 cec:	80 83       	st	Z, r24
 cee:	e1 ec       	ldi	r30, 0xC1	; 193
 cf0:	f0 e0       	ldi	r31, 0x00	; 0
 cf2:	80 81       	ld	r24, Z
 cf4:	80 6a       	ori	r24, 0xA0	; 160
 cf6:	80 83       	st	Z, r24
 cf8:	80 81       	ld	r24, Z
 cfa:	88 61       	ori	r24, 0x18	; 24
 cfc:	80 83       	st	Z, r24
 cfe:	df 91       	pop	r29
 d00:	cf 91       	pop	r28
 d02:	08 95       	ret

00000d04 <_Z12UART_GetCharv>:
 d04:	90 91 11 02 	lds	r25, 0x0211	; 0x800211 <_ZL11UART_RxHead>
 d08:	80 91 10 02 	lds	r24, 0x0210	; 0x800210 <_ZL11UART_RxTail>
 d0c:	98 17       	cp	r25, r24
 d0e:	91 f0       	breq	.+36     	; 0xd34 <_Z12UART_GetCharv+0x30>
 d10:	e0 91 10 02 	lds	r30, 0x0210	; 0x800210 <_ZL11UART_RxTail>
 d14:	ef 5f       	subi	r30, 0xFF	; 255
 d16:	ef 71       	andi	r30, 0x1F	; 31
 d18:	e0 93 10 02 	sts	0x0210, r30	; 0x800210 <_ZL11UART_RxTail>
 d1c:	f0 e0       	ldi	r31, 0x00	; 0
 d1e:	ec 5e       	subi	r30, 0xEC	; 236
 d20:	fd 4f       	sbci	r31, 0xFD	; 253
 d22:	20 81       	ld	r18, Z
 d24:	80 91 0f 02 	lds	r24, 0x020F	; 0x80020f <_ZL16UART_LastRxError>
 d28:	90 e0       	ldi	r25, 0x00	; 0
 d2a:	98 2f       	mov	r25, r24
 d2c:	88 27       	eor	r24, r24
 d2e:	82 0f       	add	r24, r18
 d30:	91 1d       	adc	r25, r1
 d32:	08 95       	ret
 d34:	80 e0       	ldi	r24, 0x00	; 0
 d36:	91 e0       	ldi	r25, 0x01	; 1
 d38:	08 95       	ret

00000d3a <_Z14UART_Availablev>:
 d3a:	80 91 11 02 	lds	r24, 0x0211	; 0x800211 <_ZL11UART_RxHead>
 d3e:	20 91 10 02 	lds	r18, 0x0210	; 0x800210 <_ZL11UART_RxTail>
 d42:	90 e0       	ldi	r25, 0x00	; 0
 d44:	4f 96       	adiw	r24, 0x1f	; 31
 d46:	82 1b       	sub	r24, r18
 d48:	91 09       	sbc	r25, r1
 d4a:	6f e1       	ldi	r22, 0x1F	; 31
 d4c:	70 e0       	ldi	r23, 0x00	; 0
 d4e:	0e 94 1a 07 	call	0xe34	; 0xe34 <__divmodhi4>
 d52:	08 95       	ret

00000d54 <_Z14UART_QueueCharh>:
 d54:	90 91 13 02 	lds	r25, 0x0213	; 0x800213 <_ZL11UART_TxHead>
 d58:	9f 5f       	subi	r25, 0xFF	; 255
 d5a:	9f 71       	andi	r25, 0x1F	; 31
 d5c:	20 91 12 02 	lds	r18, 0x0212	; 0x800212 <_ZL11UART_TxTail>
 d60:	92 17       	cp	r25, r18
 d62:	51 f0       	breq	.+20     	; 0xd78 <_Z14UART_QueueCharh+0x24>
 d64:	e9 2f       	mov	r30, r25
 d66:	f0 e0       	ldi	r31, 0x00	; 0
 d68:	ec 5c       	subi	r30, 0xCC	; 204
 d6a:	fd 4f       	sbci	r31, 0xFD	; 253
 d6c:	80 83       	st	Z, r24
 d6e:	90 93 13 02 	sts	0x0213, r25	; 0x800213 <_ZL11UART_TxHead>
 d72:	81 e0       	ldi	r24, 0x01	; 1
 d74:	90 e0       	ldi	r25, 0x00	; 0
 d76:	08 95       	ret
 d78:	80 e0       	ldi	r24, 0x00	; 0
 d7a:	90 e0       	ldi	r25, 0x00	; 0
 d7c:	08 95       	ret

00000d7e <_Z13UART_PutQueuev>:


void UART_PutQueue(void)
{
	/* enable UDRE interrupt */
	UCSR0B |= (1 << UDRIE0);
 d7e:	e1 ec       	ldi	r30, 0xC1	; 193
 d80:	f0 e0       	ldi	r31, 0x00	; 0
 d82:	80 81       	ld	r24, Z
 d84:	80 62       	ori	r24, 0x20	; 32
 d86:	80 83       	st	Z, r24
 d88:	08 95       	ret

00000d8a <__vector_18>:
/*************************************************************************
Function: UART0 Receive Complete interrupt
Purpose:  called when the UART has received a character
**************************************************************************/
ISR(USART_RX_vect)
{
 d8a:	1f 92       	push	r1
 d8c:	0f 92       	push	r0
 d8e:	0f b6       	in	r0, 0x3f	; 63
 d90:	0f 92       	push	r0
 d92:	11 24       	eor	r1, r1
 d94:	2f 93       	push	r18
 d96:	8f 93       	push	r24
 d98:	9f 93       	push	r25
 d9a:	ef 93       	push	r30
 d9c:	ff 93       	push	r31
	unsigned char usr;
	unsigned char lastRxError;
    
    
	/* read UART status register and UART data register */
	usr  = UCSR0A;
 d9e:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
	data = UDR0;
 da2:	20 91 c6 00 	lds	r18, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
    
	/* */
	lastRxError = (usr & (FE0 | DOR0));
 da6:	87 70       	andi	r24, 0x07	; 7
    
	/* calculate buffer index */
	tmphead = ( UART_RxHead + 1) & UART_RX_BUFFER_MASK;
 da8:	e0 91 11 02 	lds	r30, 0x0211	; 0x800211 <_ZL11UART_RxHead>
 dac:	ef 5f       	subi	r30, 0xFF	; 255
 dae:	ef 71       	andi	r30, 0x1F	; 31
    
	if ( tmphead == UART_RxTail )
 db0:	90 91 10 02 	lds	r25, 0x0210	; 0x800210 <_ZL11UART_RxTail>
 db4:	e9 17       	cp	r30, r25
 db6:	39 f0       	breq	.+14     	; 0xdc6 <__vector_18+0x3c>
		lastRxError = UART_BUFFER_OVERFLOW >> 8;
	}
	else
	{
		/* store new index */
		UART_RxHead = tmphead;
 db8:	e0 93 11 02 	sts	0x0211, r30	; 0x800211 <_ZL11UART_RxHead>
		/* store received data in buffer */
		UART_RxBuf[tmphead] = data;
 dbc:	f0 e0       	ldi	r31, 0x00	; 0
 dbe:	ec 5e       	subi	r30, 0xEC	; 236
 dc0:	fd 4f       	sbci	r31, 0xFD	; 253
 dc2:	20 83       	st	Z, r18
 dc4:	01 c0       	rjmp	.+2      	; 0xdc8 <__vector_18+0x3e>
	tmphead = ( UART_RxHead + 1) & UART_RX_BUFFER_MASK;
    
	if ( tmphead == UART_RxTail )
	{
		/* error: receive buffer overflow */
		lastRxError = UART_BUFFER_OVERFLOW >> 8;
 dc6:	82 e0       	ldi	r24, 0x02	; 2
		UART_RxHead = tmphead;
		/* store received data in buffer */
		UART_RxBuf[tmphead] = data;
	}

	UART_LastRxError = lastRxError;
 dc8:	80 93 0f 02 	sts	0x020F, r24	; 0x80020f <_ZL16UART_LastRxError>
}
 dcc:	ff 91       	pop	r31
 dce:	ef 91       	pop	r30
 dd0:	9f 91       	pop	r25
 dd2:	8f 91       	pop	r24
 dd4:	2f 91       	pop	r18
 dd6:	0f 90       	pop	r0
 dd8:	0f be       	out	0x3f, r0	; 63
 dda:	0f 90       	pop	r0
 ddc:	1f 90       	pop	r1
 dde:	18 95       	reti

00000de0 <__vector_19>:
/*************************************************************************
Function: UART Data Register Empty interrupt
Purpose:  called when the UART is ready to transmit the next byte
**************************************************************************/
ISR(USART_UDRE_vect)
{
 de0:	1f 92       	push	r1
 de2:	0f 92       	push	r0
 de4:	0f b6       	in	r0, 0x3f	; 63
 de6:	0f 92       	push	r0
 de8:	11 24       	eor	r1, r1
 dea:	8f 93       	push	r24
 dec:	9f 93       	push	r25
 dee:	ef 93       	push	r30
 df0:	ff 93       	push	r31
	unsigned char tmptail;
    
	if ( UART_TxHead != UART_TxTail)
 df2:	90 91 13 02 	lds	r25, 0x0213	; 0x800213 <_ZL11UART_TxHead>
 df6:	80 91 12 02 	lds	r24, 0x0212	; 0x800212 <_ZL11UART_TxTail>
 dfa:	98 17       	cp	r25, r24
 dfc:	69 f0       	breq	.+26     	; 0xe18 <__vector_19+0x38>
	{
		/* calculate and store new buffer index */
		tmptail = (UART_TxTail + 1) & UART_TX_BUFFER_MASK;
 dfe:	e0 91 12 02 	lds	r30, 0x0212	; 0x800212 <_ZL11UART_TxTail>
 e02:	ef 5f       	subi	r30, 0xFF	; 255
 e04:	ef 71       	andi	r30, 0x1F	; 31
		UART_TxTail = tmptail;
 e06:	e0 93 12 02 	sts	0x0212, r30	; 0x800212 <_ZL11UART_TxTail>

		/* get one byte from buffer and write it to UART */
		UDR0 = UART_TxBuf[tmptail];  /* start transmission */
 e0a:	f0 e0       	ldi	r31, 0x00	; 0
 e0c:	ec 5c       	subi	r30, 0xCC	; 204
 e0e:	fd 4f       	sbci	r31, 0xFD	; 253
 e10:	80 81       	ld	r24, Z
 e12:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
 e16:	05 c0       	rjmp	.+10     	; 0xe22 <__vector_19+0x42>
	}
	else
	{
		/* tx buffer empty, disable UDRE interrupt */
		UCSR0B &= ~(1 << UDRIE0);
 e18:	e1 ec       	ldi	r30, 0xC1	; 193
 e1a:	f0 e0       	ldi	r31, 0x00	; 0
 e1c:	80 81       	ld	r24, Z
 e1e:	8f 7d       	andi	r24, 0xDF	; 223
 e20:	80 83       	st	Z, r24
	}
}
 e22:	ff 91       	pop	r31
 e24:	ef 91       	pop	r30
 e26:	9f 91       	pop	r25
 e28:	8f 91       	pop	r24
 e2a:	0f 90       	pop	r0
 e2c:	0f be       	out	0x3f, r0	; 63
 e2e:	0f 90       	pop	r0
 e30:	1f 90       	pop	r1
 e32:	18 95       	reti

00000e34 <__divmodhi4>:
 e34:	97 fb       	bst	r25, 7
 e36:	07 2e       	mov	r0, r23
 e38:	16 f4       	brtc	.+4      	; 0xe3e <__divmodhi4+0xa>
 e3a:	00 94       	com	r0
 e3c:	07 d0       	rcall	.+14     	; 0xe4c <__divmodhi4_neg1>
 e3e:	77 fd       	sbrc	r23, 7
 e40:	09 d0       	rcall	.+18     	; 0xe54 <__divmodhi4_neg2>
 e42:	0e 94 50 07 	call	0xea0	; 0xea0 <__udivmodhi4>
 e46:	07 fc       	sbrc	r0, 7
 e48:	05 d0       	rcall	.+10     	; 0xe54 <__divmodhi4_neg2>
 e4a:	3e f4       	brtc	.+14     	; 0xe5a <__divmodhi4_exit>

00000e4c <__divmodhi4_neg1>:
 e4c:	90 95       	com	r25
 e4e:	81 95       	neg	r24
 e50:	9f 4f       	sbci	r25, 0xFF	; 255
 e52:	08 95       	ret

00000e54 <__divmodhi4_neg2>:
 e54:	70 95       	com	r23
 e56:	61 95       	neg	r22
 e58:	7f 4f       	sbci	r23, 0xFF	; 255

00000e5a <__divmodhi4_exit>:
 e5a:	08 95       	ret

00000e5c <__udivmodsi4>:
 e5c:	a1 e2       	ldi	r26, 0x21	; 33
 e5e:	1a 2e       	mov	r1, r26
 e60:	aa 1b       	sub	r26, r26
 e62:	bb 1b       	sub	r27, r27
 e64:	fd 01       	movw	r30, r26
 e66:	0d c0       	rjmp	.+26     	; 0xe82 <__udivmodsi4_ep>

00000e68 <__udivmodsi4_loop>:
 e68:	aa 1f       	adc	r26, r26
 e6a:	bb 1f       	adc	r27, r27
 e6c:	ee 1f       	adc	r30, r30
 e6e:	ff 1f       	adc	r31, r31
 e70:	a2 17       	cp	r26, r18
 e72:	b3 07       	cpc	r27, r19
 e74:	e4 07       	cpc	r30, r20
 e76:	f5 07       	cpc	r31, r21
 e78:	20 f0       	brcs	.+8      	; 0xe82 <__udivmodsi4_ep>
 e7a:	a2 1b       	sub	r26, r18
 e7c:	b3 0b       	sbc	r27, r19
 e7e:	e4 0b       	sbc	r30, r20
 e80:	f5 0b       	sbc	r31, r21

00000e82 <__udivmodsi4_ep>:
 e82:	66 1f       	adc	r22, r22
 e84:	77 1f       	adc	r23, r23
 e86:	88 1f       	adc	r24, r24
 e88:	99 1f       	adc	r25, r25
 e8a:	1a 94       	dec	r1
 e8c:	69 f7       	brne	.-38     	; 0xe68 <__udivmodsi4_loop>
 e8e:	60 95       	com	r22
 e90:	70 95       	com	r23
 e92:	80 95       	com	r24
 e94:	90 95       	com	r25
 e96:	9b 01       	movw	r18, r22
 e98:	ac 01       	movw	r20, r24
 e9a:	bd 01       	movw	r22, r26
 e9c:	cf 01       	movw	r24, r30
 e9e:	08 95       	ret

00000ea0 <__udivmodhi4>:
 ea0:	aa 1b       	sub	r26, r26
 ea2:	bb 1b       	sub	r27, r27
 ea4:	51 e1       	ldi	r21, 0x11	; 17
 ea6:	07 c0       	rjmp	.+14     	; 0xeb6 <__udivmodhi4_ep>

00000ea8 <__udivmodhi4_loop>:
 ea8:	aa 1f       	adc	r26, r26
 eaa:	bb 1f       	adc	r27, r27
 eac:	a6 17       	cp	r26, r22
 eae:	b7 07       	cpc	r27, r23
 eb0:	10 f0       	brcs	.+4      	; 0xeb6 <__udivmodhi4_ep>
 eb2:	a6 1b       	sub	r26, r22
 eb4:	b7 0b       	sbc	r27, r23

00000eb6 <__udivmodhi4_ep>:
 eb6:	88 1f       	adc	r24, r24
 eb8:	99 1f       	adc	r25, r25
 eba:	5a 95       	dec	r21
 ebc:	a9 f7       	brne	.-22     	; 0xea8 <__udivmodhi4_loop>
 ebe:	80 95       	com	r24
 ec0:	90 95       	com	r25
 ec2:	bc 01       	movw	r22, r24
 ec4:	cd 01       	movw	r24, r26
 ec6:	08 95       	ret

00000ec8 <_exit>:
 ec8:	f8 94       	cli

00000eca <__stop_program>:
 eca:	ff cf       	rjmp	.-2      	; 0xeca <__stop_program>
