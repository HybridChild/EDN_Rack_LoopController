   1               		.file	"main.cpp"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__tmp_reg__ = 0
   6               	__zero_reg__ = 1
   7               		.text
   8               	.Ltext0:
   9               		.cfi_sections	.debug_frame
  10               		.section	.text.startup,"ax",@progbits
  11               	.global	main
  13               	main:
  14               	.LFB2:
  15               		.file 1 "main.cpp"
   1:main.cpp      **** /*
   2:main.cpp      ****  * Cpp_Test.cpp
   3:main.cpp      ****  *
   4:main.cpp      ****  * Created: 19-01-2020 17:20:54
   5:main.cpp      ****  * Author : Esben
   6:main.cpp      ****  */ 
   7:main.cpp      **** 
   8:main.cpp      **** #define F_CPU 20000000UL
   9:main.cpp      **** 
  10:main.cpp      **** /* Includes */
  11:main.cpp      **** #include <avr/io.h>
  12:main.cpp      **** #include <avr/interrupt.h>
  13:main.cpp      **** #include <stdint-gcc.h>
  14:main.cpp      **** #include "Timer.h"
  15:main.cpp      **** #include "i2cmaster.h"
  16:main.cpp      **** #include "UART.h"
  17:main.cpp      **** #include "InputCapture.h"
  18:main.cpp      **** #include "RotaryEncoder.h"
  19:main.cpp      **** #include "SP10281_3x7segment.h"
  20:main.cpp      **** #include "MCP23017.h"
  21:main.cpp      **** #include "UI.h"
  22:main.cpp      **** #include "PedalCom.h"
  23:main.cpp      **** #include "MIDI.h"
  24:main.cpp      **** #include "Tuner.h"
  25:main.cpp      **** #include "System.h"
  26:main.cpp      **** 
  27:main.cpp      **** /* Main application */
  28:main.cpp      **** int main(void)
  29:main.cpp      **** {
  16               		.loc 1 29 1 view -0
  17               		.cfi_startproc
  18               	/* prologue: function */
  19               	/* frame size = 0 */
  20               	/* stack size = 0 */
  21               	.L__stack_usage = 0
  30:main.cpp      **** 	/* Initialization */
  31:main.cpp      **** 	Timer0_Init();
  22               		.loc 1 31 2 view .LVU1
  23               		.loc 1 31 13 is_stmt 0 view .LVU2
  24 0000 0E94 0000 		call _Z11Timer0_Initv
  25               	.LVL0:
  32:main.cpp      **** 	i2c_init();
  26               		.loc 1 32 2 is_stmt 1 view .LVU3
  27               		.loc 1 32 10 is_stmt 0 view .LVU4
  28 0004 0E94 0000 		call _Z8i2c_initv
  29               	.LVL1:
  33:main.cpp      **** 	UART0_Init(PEDAL_UART_BAUDRATE, UART_2_STOP_BITS, UART_NO_PARITY);
  30               		.loc 1 33 2 is_stmt 1 view .LVU5
  31               		.loc 1 33 12 is_stmt 0 view .LVU6
  32 0008 40E0      		ldi r20,0
  33 000a 62E0      		ldi r22,lo8(2)
  34 000c 80E0      		ldi r24,0
  35 000e 9BE4      		ldi r25,lo8(75)
  36 0010 0E94 0000 		call _Z10UART0_Initjhh
  37               	.LVL2:
  34:main.cpp      **** 	UART1_Init(MIDI_UART_BAUDRATE, UART_1_STOP_BIT, UART_NO_PARITY);
  38               		.loc 1 34 2 is_stmt 1 view .LVU7
  39               		.loc 1 34 12 is_stmt 0 view .LVU8
  40 0014 40E0      		ldi r20,0
  41 0016 61E0      		ldi r22,lo8(1)
  42 0018 82E1      		ldi r24,lo8(18)
  43 001a 9AE7      		ldi r25,lo8(122)
  44 001c 0E94 0000 		call _Z10UART1_Initjhh
  45               	.LVL3:
  35:main.cpp      **** 	PedalCom_Init();
  46               		.loc 1 35 2 is_stmt 1 view .LVU9
  47               		.loc 1 35 15 is_stmt 0 view .LVU10
  48 0020 0E94 0000 		call _Z13PedalCom_Initv
  49               	.LVL4:
  36:main.cpp      **** 	InputCapture_Init();
  50               		.loc 1 36 2 is_stmt 1 view .LVU11
  51               		.loc 1 36 19 is_stmt 0 view .LVU12
  52 0024 0E94 0000 		call _Z17InputCapture_Initv
  53               	.LVL5:
  37:main.cpp      **** 	
  38:main.cpp      **** 	Tuner_Init();
  54               		.loc 1 38 2 is_stmt 1 view .LVU13
  55               		.loc 1 38 12 is_stmt 0 view .LVU14
  56 0028 0E94 0000 		call _Z10Tuner_Initv
  57               	.LVL6:
  39:main.cpp      **** 	Tuner_Disable();
  58               		.loc 1 39 2 is_stmt 1 view .LVU15
  59               		.loc 1 39 15 is_stmt 0 view .LVU16
  60 002c 0E94 0000 		call _Z13Tuner_Disablev
  61               	.LVL7:
  40:main.cpp      **** 	RotaryEncoder_Init();
  62               		.loc 1 40 2 is_stmt 1 view .LVU17
  63               		.loc 1 40 20 is_stmt 0 view .LVU18
  64 0030 0E94 0000 		call _Z18RotaryEncoder_Initv
  65               	.LVL8:
  41:main.cpp      **** 	SP10281_Init();
  66               		.loc 1 41 2 is_stmt 1 view .LVU19
  67               		.loc 1 41 14 is_stmt 0 view .LVU20
  68 0034 0E94 0000 		call _Z12SP10281_Initv
  69               	.LVL9:
  42:main.cpp      **** 	UI_Init();
  70               		.loc 1 42 2 is_stmt 1 view .LVU21
  71               		.loc 1 42 9 is_stmt 0 view .LVU22
  72 0038 0E94 0000 		call _Z7UI_Initv
  73               	.LVL10:
  43:main.cpp      **** 	
  44:main.cpp      **** 	/* Global Enable Interrupt */
  45:main.cpp      **** 	sei();
  74               		.loc 1 45 2 is_stmt 1 view .LVU23
  75               	/* #APP */
  76               	 ;  45 "main.cpp" 1
  77 003c 7894      		sei
  78               	 ;  0 "" 2
  46:main.cpp      **** 	
  47:main.cpp      **** 	/* Main loop */
  48:main.cpp      ****     while (1) 
  49:main.cpp      ****     {
  50:main.cpp      **** 		/* Handle incoming MIDI */
  51:main.cpp      **** 		if (UART1_RxAvailable())
  52:main.cpp      **** 		{
  53:main.cpp      **** 			MIDI_ReceiveIncoming();
  54:main.cpp      **** 		}
  55:main.cpp      **** 		
  56:main.cpp      **** 		/* Handle received MIDI program change */
  57:main.cpp      **** 		if (MIDI_ProgramChangeFlag)
  58:main.cpp      **** 		{
  59:main.cpp      **** 			MIDI_ProgramChangeFlag = false;
  60:main.cpp      **** 			System_HandleMIDIProgramChange();
  61:main.cpp      **** 		}
  62:main.cpp      **** 		
  63:main.cpp      **** 		/* Handle incoming data from Pedal */
  64:main.cpp      **** 		while (UART0_RxAvailable())
  65:main.cpp      **** 		{
  66:main.cpp      **** 			PedalCom_Receive();
  67:main.cpp      **** 		}
  68:main.cpp      **** 		
  69:main.cpp      **** 		/* Handle command received from Pedal. (Only once per program loop) */
  70:main.cpp      **** 		if (PedalCom_RxAvailable())
  71:main.cpp      **** 		{
  72:main.cpp      **** 			PedalCom_HandleReceived();
  73:main.cpp      **** 		}
  74:main.cpp      **** 		
  75:main.cpp      **** 		/* Handle TX Command queue */
  76:main.cpp      **** 		if (PedalCom_TxAvailable())
  77:main.cpp      **** 		{
  78:main.cpp      **** 			PedalCom_PutCommand();
  79:main.cpp      **** 		}
  80:main.cpp      **** 		
  81:main.cpp      **** 		/* Transmit data to Pedal */
  82:main.cpp      **** 		if (PedalCom_DelayTxFlag)
  83:main.cpp      **** 		{
  84:main.cpp      **** 			PedalCom_DelayTxFlag = false;
  85:main.cpp      **** 			
  86:main.cpp      **** 			if (UART0_TxAvailable())
  87:main.cpp      **** 			{
  88:main.cpp      **** 				PedalCom_Transmit();
  89:main.cpp      **** 			}
  90:main.cpp      **** 		}
  91:main.cpp      **** 		
  92:main.cpp      **** 		/* Retransmit command if no response was received */
  93:main.cpp      **** 		if (PedalCom_ResponseTimeoutFlag)
  94:main.cpp      **** 		{
  95:main.cpp      **** 			PedalCom_ResponseTimeoutFlag = false;
  96:main.cpp      **** 			PedalCom_PrepareRetransmit();
  97:main.cpp      **** 		}
  98:main.cpp      **** 		
  99:main.cpp      **** 		/* Send NACK if full command frame was not received before timeout */
 100:main.cpp      **** 		if (PedalCom_FullFrameTimeoutFlag)
 101:main.cpp      **** 		{
 102:main.cpp      **** 			PedalCom_FullFrameTimeoutFlag = false;
 103:main.cpp      **** 			UART0_QueueChar(NACK_BYTE);
 104:main.cpp      **** 			PedalCom_DelayTxFlag = true;
  79               		.loc 1 104 25 is_stmt 0 view .LVU24
  80               	/* #NOAPP */
  81 003e C1E0      		ldi r28,lo8(1)
  82               	.L20:
  48:main.cpp      ****     {
  83               		.loc 1 48 5 is_stmt 1 view .LVU25
  51:main.cpp      **** 		{
  84               		.loc 1 51 3 view .LVU26
  51:main.cpp      **** 		{
  85               		.loc 1 51 24 is_stmt 0 view .LVU27
  86 0040 0E94 0000 		call _Z17UART1_RxAvailablev
  87               	.LVL11:
  51:main.cpp      **** 		{
  88               		.loc 1 51 3 view .LVU28
  89 0044 8111      		cpse r24,__zero_reg__
  53:main.cpp      **** 		}
  90               		.loc 1 53 4 is_stmt 1 view .LVU29
  53:main.cpp      **** 		}
  91               		.loc 1 53 24 is_stmt 0 view .LVU30
  92 0046 0E94 0000 		call _Z20MIDI_ReceiveIncomingv
  93               	.LVL12:
  94               	.L2:
  57:main.cpp      **** 		{
  95               		.loc 1 57 3 is_stmt 1 view .LVU31
  57:main.cpp      **** 		{
  96               		.loc 1 57 7 is_stmt 0 view .LVU32
  97 004a 8091 0000 		lds r24,MIDI_ProgramChangeFlag
  57:main.cpp      **** 		{
  98               		.loc 1 57 3 view .LVU33
  99 004e 8823      		tst r24
 100 0050 01F0      		breq .L5
  59:main.cpp      **** 			System_HandleMIDIProgramChange();
 101               		.loc 1 59 4 is_stmt 1 view .LVU34
  59:main.cpp      **** 			System_HandleMIDIProgramChange();
 102               		.loc 1 59 27 is_stmt 0 view .LVU35
 103 0052 1092 0000 		sts MIDI_ProgramChangeFlag,__zero_reg__
  60:main.cpp      **** 		}
 104               		.loc 1 60 4 is_stmt 1 view .LVU36
  60:main.cpp      **** 		}
 105               		.loc 1 60 34 is_stmt 0 view .LVU37
 106 0056 0E94 0000 		call _Z30System_HandleMIDIProgramChangev
 107               	.LVL13:
 108               	.L5:
  64:main.cpp      **** 		{
 109               		.loc 1 64 3 is_stmt 1 view .LVU38
  64:main.cpp      **** 		{
 110               		.loc 1 64 27 view .LVU39
 111 005a 0E94 0000 		call _Z17UART0_RxAvailablev
 112               	.LVL14:
 113 005e 8823      		tst r24
 114 0060 01F0      		breq .L4
  66:main.cpp      **** 		}
 115               		.loc 1 66 4 view .LVU40
  66:main.cpp      **** 		}
 116               		.loc 1 66 20 is_stmt 0 view .LVU41
 117 0062 0E94 0000 		call _Z16PedalCom_Receivev
 118               	.LVL15:
  64:main.cpp      **** 		{
 119               		.loc 1 64 3 view .LVU42
 120 0066 00C0      		rjmp .L5
 121               	.L4:
  70:main.cpp      **** 		{
 122               		.loc 1 70 3 is_stmt 1 view .LVU43
  70:main.cpp      **** 		{
 123               		.loc 1 70 27 is_stmt 0 view .LVU44
 124 0068 0E94 0000 		call _Z20PedalCom_RxAvailablev
 125               	.LVL16:
  70:main.cpp      **** 		{
 126               		.loc 1 70 3 view .LVU45
 127 006c 8111      		cpse r24,__zero_reg__
  72:main.cpp      **** 		}
 128               		.loc 1 72 4 is_stmt 1 view .LVU46
  72:main.cpp      **** 		}
 129               		.loc 1 72 27 is_stmt 0 view .LVU47
 130 006e 0E94 0000 		call _Z23PedalCom_HandleReceivedv
 131               	.LVL17:
 132               	.L6:
  76:main.cpp      **** 		{
 133               		.loc 1 76 3 is_stmt 1 view .LVU48
  76:main.cpp      **** 		{
 134               		.loc 1 76 27 is_stmt 0 view .LVU49
 135 0072 0E94 0000 		call _Z20PedalCom_TxAvailablev
 136               	.LVL18:
  76:main.cpp      **** 		{
 137               		.loc 1 76 3 view .LVU50
 138 0076 8111      		cpse r24,__zero_reg__
  78:main.cpp      **** 		}
 139               		.loc 1 78 4 is_stmt 1 view .LVU51
  78:main.cpp      **** 		}
 140               		.loc 1 78 23 is_stmt 0 view .LVU52
 141 0078 0E94 0000 		call _Z19PedalCom_PutCommandv
 142               	.LVL19:
 143               	.L7:
  82:main.cpp      **** 		{
 144               		.loc 1 82 3 is_stmt 1 view .LVU53
  82:main.cpp      **** 		{
 145               		.loc 1 82 7 is_stmt 0 view .LVU54
 146 007c 8091 0000 		lds r24,PedalCom_DelayTxFlag
  82:main.cpp      **** 		{
 147               		.loc 1 82 3 view .LVU55
 148 0080 8823      		tst r24
 149 0082 01F0      		breq .L9
  84:main.cpp      **** 			
 150               		.loc 1 84 4 is_stmt 1 view .LVU56
  84:main.cpp      **** 			
 151               		.loc 1 84 25 is_stmt 0 view .LVU57
 152 0084 1092 0000 		sts PedalCom_DelayTxFlag,__zero_reg__
  86:main.cpp      **** 			{
 153               		.loc 1 86 4 is_stmt 1 view .LVU58
  86:main.cpp      **** 			{
 154               		.loc 1 86 25 is_stmt 0 view .LVU59
 155 0088 0E94 0000 		call _Z17UART0_TxAvailablev
 156               	.LVL20:
  86:main.cpp      **** 			{
 157               		.loc 1 86 4 view .LVU60
 158 008c 8111      		cpse r24,__zero_reg__
  88:main.cpp      **** 			}
 159               		.loc 1 88 5 is_stmt 1 view .LVU61
  88:main.cpp      **** 			}
 160               		.loc 1 88 22 is_stmt 0 view .LVU62
 161 008e 0E94 0000 		call _Z17PedalCom_Transmitv
 162               	.LVL21:
 163               	.L9:
  93:main.cpp      **** 		{
 164               		.loc 1 93 3 is_stmt 1 view .LVU63
  93:main.cpp      **** 		{
 165               		.loc 1 93 7 is_stmt 0 view .LVU64
 166 0092 8091 0000 		lds r24,PedalCom_ResponseTimeoutFlag
  93:main.cpp      **** 		{
 167               		.loc 1 93 3 view .LVU65
 168 0096 8823      		tst r24
 169 0098 01F0      		breq .L11
  95:main.cpp      **** 			PedalCom_PrepareRetransmit();
 170               		.loc 1 95 4 is_stmt 1 view .LVU66
  95:main.cpp      **** 			PedalCom_PrepareRetransmit();
 171               		.loc 1 95 33 is_stmt 0 view .LVU67
 172 009a 1092 0000 		sts PedalCom_ResponseTimeoutFlag,__zero_reg__
  96:main.cpp      **** 		}
 173               		.loc 1 96 4 is_stmt 1 view .LVU68
  96:main.cpp      **** 		}
 174               		.loc 1 96 30 is_stmt 0 view .LVU69
 175 009e 0E94 0000 		call _Z26PedalCom_PrepareRetransmitv
 176               	.LVL22:
 177               	.L11:
 100:main.cpp      **** 		{
 178               		.loc 1 100 3 is_stmt 1 view .LVU70
 100:main.cpp      **** 		{
 179               		.loc 1 100 7 is_stmt 0 view .LVU71
 180 00a2 8091 0000 		lds r24,PedalCom_FullFrameTimeoutFlag
 100:main.cpp      **** 		{
 181               		.loc 1 100 3 view .LVU72
 182 00a6 8823      		tst r24
 183 00a8 01F0      		breq .L12
 102:main.cpp      **** 			UART0_QueueChar(NACK_BYTE);
 184               		.loc 1 102 4 is_stmt 1 view .LVU73
 102:main.cpp      **** 			UART0_QueueChar(NACK_BYTE);
 185               		.loc 1 102 34 is_stmt 0 view .LVU74
 186 00aa 1092 0000 		sts PedalCom_FullFrameTimeoutFlag,__zero_reg__
 103:main.cpp      **** 			PedalCom_DelayTxFlag = true;
 187               		.loc 1 103 4 is_stmt 1 view .LVU75
 103:main.cpp      **** 			PedalCom_DelayTxFlag = true;
 188               		.loc 1 103 19 is_stmt 0 view .LVU76
 189 00ae 8AE2      		ldi r24,lo8(42)
 190 00b0 0E94 0000 		call _Z15UART0_QueueCharh
 191               	.LVL23:
 192               		.loc 1 104 4 is_stmt 1 view .LVU77
 193               		.loc 1 104 25 is_stmt 0 view .LVU78
 194 00b4 C093 0000 		sts PedalCom_DelayTxFlag,r28
 195               	.L12:
 105:main.cpp      **** 		}
 106:main.cpp      **** 		
 107:main.cpp      **** 		/* Send current System State to Pedal (Heartbeat) */
 108:main.cpp      **** 		if (PedalCom_HeartbeatFlag)
 196               		.loc 1 108 3 is_stmt 1 view .LVU79
 197               		.loc 1 108 7 is_stmt 0 view .LVU80
 198 00b8 8091 0000 		lds r24,PedalCom_HeartbeatFlag
 199               		.loc 1 108 3 view .LVU81
 200 00bc 8823      		tst r24
 201 00be 01F0      		breq .L13
 109:main.cpp      **** 		{
 110:main.cpp      **** 			PedalCom_HeartbeatFlag = false;
 202               		.loc 1 110 4 is_stmt 1 view .LVU82
 203               		.loc 1 110 27 is_stmt 0 view .LVU83
 204 00c0 1092 0000 		sts PedalCom_HeartbeatFlag,__zero_reg__
 111:main.cpp      **** 			
 112:main.cpp      **** 			/* If last command did not get an ACK */
 113:main.cpp      **** 			if (PedalCom_TxAvailable())
 205               		.loc 1 113 4 is_stmt 1 view .LVU84
 206               		.loc 1 113 28 is_stmt 0 view .LVU85
 207 00c4 0E94 0000 		call _Z20PedalCom_TxAvailablev
 208               	.LVL24:
 209               		.loc 1 113 4 view .LVU86
 210 00c8 8823      		tst r24
 211 00ca 01F0      		breq .L14
 114:main.cpp      **** 			{
 115:main.cpp      **** 				PedalCom_ConnectionOpen = false;
 212               		.loc 1 115 5 is_stmt 1 view .LVU87
 213               		.loc 1 115 29 is_stmt 0 view .LVU88
 214 00cc 1092 0000 		sts PedalCom_ConnectionOpen,__zero_reg__
 116:main.cpp      **** 				PedalCom_FlushTxQueue();
 215               		.loc 1 116 5 is_stmt 1 view .LVU89
 216               		.loc 1 116 26 is_stmt 0 view .LVU90
 217 00d0 0E94 0000 		call _Z21PedalCom_FlushTxQueuev
 218               	.LVL25:
 219               	.L13:
 117:main.cpp      **** 			}
 118:main.cpp      **** 			else
 119:main.cpp      **** 			{
 120:main.cpp      **** 				PedalCom_QueueCommand(UpdateSystemState, 1, (uint8_t *)&SystemState);
 121:main.cpp      **** 			}
 122:main.cpp      **** 		}
 123:main.cpp      **** 		
 124:main.cpp      **** 		/* Service 7-segment display */
 125:main.cpp      **** 		if (SP10281_OvfFlag)
 220               		.loc 1 125 3 is_stmt 1 view .LVU91
 221               		.loc 1 125 7 is_stmt 0 view .LVU92
 222 00d4 8091 0000 		lds r24,SP10281_OvfFlag
 223               		.loc 1 125 3 view .LVU93
 224 00d8 8823      		tst r24
 225 00da 01F0      		breq .L15
 126:main.cpp      **** 		{
 127:main.cpp      **** 			SP10281_OvfFlag = false;
 226               		.loc 1 127 4 is_stmt 1 view .LVU94
 227               		.loc 1 127 20 is_stmt 0 view .LVU95
 228 00dc 1092 0000 		sts SP10281_OvfFlag,__zero_reg__
 128:main.cpp      **** 			SP10281_Update();
 229               		.loc 1 128 4 is_stmt 1 view .LVU96
 230               		.loc 1 128 18 is_stmt 0 view .LVU97
 231 00e0 0E94 0000 		call _Z14SP10281_Updatev
 232               	.LVL26:
 233               	.L15:
 129:main.cpp      **** 		}
 130:main.cpp      **** 		
 131:main.cpp      **** 		/* Blink UI LEDs */
 132:main.cpp      **** 		if (MCP_Output::AutoToggle_Flag)
 234               		.loc 1 132 3 is_stmt 1 view .LVU98
 235               		.loc 1 132 19 is_stmt 0 view .LVU99
 236 00e4 8091 0000 		lds r24,_ZN10MCP_Output15AutoToggle_FlagE
 237               		.loc 1 132 3 view .LVU100
 238 00e8 8823      		tst r24
 239 00ea 01F0      		breq .L16
 133:main.cpp      **** 		{
 134:main.cpp      **** 			MCP_Output::AutoToggle_Flag = 0;
 240               		.loc 1 134 4 is_stmt 1 view .LVU101
 241               		.loc 1 134 32 is_stmt 0 view .LVU102
 242 00ec 1092 0000 		sts _ZN10MCP_Output15AutoToggle_FlagE,__zero_reg__
 135:main.cpp      **** 			MCP_Output::PerformAutoToggle(MCP23017_UI_LEDS_ADDR);
 243               		.loc 1 135 4 is_stmt 1 view .LVU103
 244               		.loc 1 135 33 is_stmt 0 view .LVU104
 245 00f0 80E0      		ldi r24,0
 246 00f2 0E94 0000 		call _ZN10MCP_Output17PerformAutoToggleEh
 247               	.LVL27:
 248               	.L16:
 136:main.cpp      **** 		}
 137:main.cpp      **** 		
 138:main.cpp      **** 		/* Handle input from rotary encoder */
 139:main.cpp      **** 		if (RotEnc_State != IDLE && RotEnc_State != PRESSED)
 249               		.loc 1 139 3 is_stmt 1 view .LVU105
 250               		.loc 1 139 20 is_stmt 0 view .LVU106
 251 00f6 8091 0000 		lds r24,RotEnc_State
 252               		.loc 1 139 28 view .LVU107
 253 00fa 8823      		tst r24
 254 00fc 01F0      		breq .L17
 255               		.loc 1 139 44 discriminator 1 view .LVU108
 256 00fe 8091 0000 		lds r24,RotEnc_State
 257               		.loc 1 139 28 discriminator 1 view .LVU109
 258 0102 8430      		cpi r24,lo8(4)
 259 0104 01F0      		breq .L17
 140:main.cpp      **** 		{
 141:main.cpp      **** 			System_HandleRotaryEncoderInput();
 260               		.loc 1 141 4 is_stmt 1 view .LVU110
 261               		.loc 1 141 35 is_stmt 0 view .LVU111
 262 0106 0E94 0000 		call _Z31System_HandleRotaryEncoderInputv
 263               	.LVL28:
 142:main.cpp      **** 			
 143:main.cpp      **** 			RotEnc_State = IDLE;
 264               		.loc 1 143 4 is_stmt 1 view .LVU112
 265               		.loc 1 143 17 is_stmt 0 view .LVU113
 266 010a 1092 0000 		sts RotEnc_State,__zero_reg__
 144:main.cpp      **** 			RotaryEncoder_EnableInterrupt();
 267               		.loc 1 144 4 is_stmt 1 view .LVU114
 268               		.loc 1 144 33 is_stmt 0 view .LVU115
 269 010e 0E94 0000 		call _Z29RotaryEncoder_EnableInterruptv
 270               	.LVL29:
 271               	.L17:
 145:main.cpp      **** 		}
 146:main.cpp      **** 		
 147:main.cpp      **** 		/* Handle temp select timeout condition */
 148:main.cpp      **** 		if (System_TempSelectFlag)
 272               		.loc 1 148 3 is_stmt 1 view .LVU116
 273               		.loc 1 148 7 is_stmt 0 view .LVU117
 274 0112 8091 0000 		lds r24,System_TempSelectFlag
 275               		.loc 1 148 3 view .LVU118
 276 0116 8823      		tst r24
 277 0118 01F0      		breq .L18
 149:main.cpp      **** 		{
 150:main.cpp      **** 			System_TempSelectFlag = false;
 278               		.loc 1 150 4 is_stmt 1 view .LVU119
 279               		.loc 1 150 26 is_stmt 0 view .LVU120
 280 011a 1092 0000 		sts System_TempSelectFlag,__zero_reg__
 151:main.cpp      **** 			System_HandleTempSelectTimeout();
 281               		.loc 1 151 4 is_stmt 1 view .LVU121
 282               		.loc 1 151 34 is_stmt 0 view .LVU122
 283 011e 0E94 0000 		call _Z30System_HandleTempSelectTimeoutv
 284               	.LVL30:
 285               	.L18:
 152:main.cpp      **** 		}
 153:main.cpp      **** 		
 154:main.cpp      **** 		/* Reset UI LEDs after selection mark */
 155:main.cpp      **** 		if (System_MarkSelectionFlag)
 286               		.loc 1 155 3 is_stmt 1 view .LVU123
 287               		.loc 1 155 7 is_stmt 0 view .LVU124
 288 0122 8091 0000 		lds r24,System_MarkSelectionFlag
 289               		.loc 1 155 3 view .LVU125
 290 0126 8823      		tst r24
 291 0128 01F0      		breq .L19
 156:main.cpp      **** 		{
 157:main.cpp      **** 			System_MarkSelectionFlag = false;
 292               		.loc 1 157 4 is_stmt 1 view .LVU126
 293               		.loc 1 157 29 is_stmt 0 view .LVU127
 294 012a 1092 0000 		sts System_MarkSelectionFlag,__zero_reg__
 158:main.cpp      **** 			System_HandleMarkSelection();
 295               		.loc 1 158 4 is_stmt 1 view .LVU128
 296               		.loc 1 158 30 is_stmt 0 view .LVU129
 297 012e 0E94 0000 		call _Z26System_HandleMarkSelectionv
 298               	.LVL31:
 299               	.L19:
 159:main.cpp      **** 		}
 160:main.cpp      **** 		
 161:main.cpp      **** 		/* The grand state machine */
 162:main.cpp      **** 		System_Run();
 300               		.loc 1 162 3 is_stmt 1 view .LVU130
 301               		.loc 1 162 13 is_stmt 0 view .LVU131
 302 0132 0E94 0000 		call _Z10System_Runv
 303               	.LVL32:
  48:main.cpp      ****     {
 304               		.loc 1 48 5 is_stmt 1 view .LVU132
  51:main.cpp      **** 		{
 305               		.loc 1 51 3 is_stmt 0 view .LVU133
 306 0136 00C0      		rjmp .L20
 307               	.L14:
 120:main.cpp      **** 			}
 308               		.loc 1 120 5 is_stmt 1 view .LVU134
 120:main.cpp      **** 			}
 309               		.loc 1 120 26 is_stmt 0 view .LVU135
 310 0138 40E0      		ldi r20,lo8(SystemState)
 311 013a 50E0      		ldi r21,hi8(SystemState)
 312 013c 61E0      		ldi r22,lo8(1)
 313 013e 85ED      		ldi r24,lo8(-43)
 314 0140 0E94 0000 		call _Z21PedalCom_QueueCommand3CMDhPh
 315               	.LVL33:
 316 0144 00C0      		rjmp .L13
 317               		.cfi_endproc
 318               	.LFE2:
 320               		.text
 321               	.Letext0:
 322               		.file 2 "/usr/avr/include/stdint.h"
 323               		.file 3 "RotaryEncoder.h"
 324               		.file 4 "SP10281_3x7segment.h"
 325               		.file 5 "MCP23017.h"
 326               		.file 6 "PedalCom.h"
 327               		.file 7 "MIDI.h"
 328               		.file 8 "System.h"
 329               		.file 9 "Timer.h"
 330               		.file 10 "i2cmaster.h"
 331               		.file 11 "UART.h"
 332               		.file 12 "InputCapture.h"
 333               		.file 13 "Tuner.h"
 334               		.file 14 "UI.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 main.cpp
     /tmp/ccacIM2S.s:2      *ABS*:000000000000003e __SP_H__
     /tmp/ccacIM2S.s:3      *ABS*:000000000000003d __SP_L__
     /tmp/ccacIM2S.s:4      *ABS*:000000000000003f __SREG__
     /tmp/ccacIM2S.s:5      *ABS*:0000000000000000 __tmp_reg__
     /tmp/ccacIM2S.s:6      *ABS*:0000000000000001 __zero_reg__
     /tmp/ccacIM2S.s:13     .text.startup:0000000000000000 main

UNDEFINED SYMBOLS
_Z11Timer0_Initv
_Z8i2c_initv
_Z10UART0_Initjhh
_Z10UART1_Initjhh
_Z13PedalCom_Initv
_Z17InputCapture_Initv
_Z10Tuner_Initv
_Z13Tuner_Disablev
_Z18RotaryEncoder_Initv
_Z12SP10281_Initv
_Z7UI_Initv
_Z17UART1_RxAvailablev
_Z20MIDI_ReceiveIncomingv
MIDI_ProgramChangeFlag
_Z30System_HandleMIDIProgramChangev
_Z17UART0_RxAvailablev
_Z16PedalCom_Receivev
_Z20PedalCom_RxAvailablev
_Z23PedalCom_HandleReceivedv
_Z20PedalCom_TxAvailablev
_Z19PedalCom_PutCommandv
PedalCom_DelayTxFlag
_Z17UART0_TxAvailablev
_Z17PedalCom_Transmitv
PedalCom_ResponseTimeoutFlag
_Z26PedalCom_PrepareRetransmitv
PedalCom_FullFrameTimeoutFlag
_Z15UART0_QueueCharh
PedalCom_HeartbeatFlag
PedalCom_ConnectionOpen
_Z21PedalCom_FlushTxQueuev
SP10281_OvfFlag
_Z14SP10281_Updatev
_ZN10MCP_Output15AutoToggle_FlagE
_ZN10MCP_Output17PerformAutoToggleEh
RotEnc_State
_Z31System_HandleRotaryEncoderInputv
_Z29RotaryEncoder_EnableInterruptv
System_TempSelectFlag
_Z30System_HandleTempSelectTimeoutv
System_MarkSelectionFlag
_Z26System_HandleMarkSelectionv
_Z10System_Runv
SystemState
_Z21PedalCom_QueueCommand3CMDhPh
